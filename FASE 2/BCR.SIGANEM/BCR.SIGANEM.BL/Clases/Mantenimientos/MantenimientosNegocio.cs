using System;
using System.Text;
using System.Data;
using System.Transactions;
using System.Data.SqlClient;
using System.Collections.Generic;

using BCR.SIGANEM.DA;
using BCR.SIGANEM.EN;
using BCR.SIGANEM.UT;


namespace BCR.SIGANEM.BL
{
    public class MantenimientosNegocio : ImantenimientoNegocio
    {

        #region PROPIEDADES

        #region INSTANCIA

        /// <summary>
        /// Instancia: Creacion de instancia de la interfaz
        /// </summary>
        private ImantenimientoNegocio _instancia;
        public ImantenimientoNegocio Instancia
        {
            get
            {
                if (_instancia == null)
                {
                    return new MantenimientosNegocio();
                }
                return _instancia;
            }
            set
            {
                if (_instancia == null)
                {
                    _instancia = value;
                }
            }
        }

        #endregion

        #region VARIABLES

        private HelperClass helper = new HelperClass();
        private TransaccionAcceso transaccionDA = new TransaccionAcceso();

        #endregion
        
        #endregion

        #region CONSTRUCTOR Y FINALIZADOR

        public MantenimientosNegocio()
        {

        }

        #endregion
        
        #region METODOS PUBLICOS

            #region ACTIVOS
        
                public RespuestaEntidad ActivosInsertar(String conexion, String conexionBitacora, ActivosEntidad activo, BitacorasEntidad _bitacora)
                {

                    RespuestaEntidad elemento = null;
                    DataSet rowsAffected;

                    #region PARAMETROS

                    SqlParameter[] paramTransaccion = new SqlParameter[]
                    {
                        new SqlParameter("@piCod_Activo", activo.CodActivo),
                        new SqlParameter("@psDes_Activo", activo.DesActivo),
                        new SqlParameter("@psInd_Metodo_Insercion", activo.IndMetodoInsercion),
                        new SqlParameter("@psCod_Usuario", activo.CodUsuarioIngreso)
                    };

                    #endregion

                    try
                    {

                        #region INSERTAR


                        rowsAffected = transaccionDA.TransaccionInsertar(conexion, conexionBitacora, "Activos_Inserta", paramTransaccion, EnumTipoBitacora.INSERTAR, _bitacora);
                        if (!rowsAffected.Equals(null))
                        {
                            elemento = new RespuestaEntidad();
                            elemento.ValorEstado = int.Parse(rowsAffected.Tables[0].Rows[0][0].ToString());
                            elemento.ValorError = int.Parse(rowsAffected.Tables[0].Rows[0][1].ToString());
                        }

                        return elemento;

                        #endregion

                    }
                    catch (Exception)
                    {
                        throw;
                    }
                }
        
                public RespuestaEntidad ActivosModificar(String conexion, String conexionBitacora, ActivosEntidad activo, BitacorasEntidad _bitacora)
                {

                    RespuestaEntidad elemento = null;
                    DataSet rowsAffected;

                    #region PARAMETROS

                    SqlParameter[] paramTransaccion = new SqlParameter[]
                    {
                        new SqlParameter("@piId_Activo", activo.IdActivo),
                        new SqlParameter("@piCod_Activo", activo.CodActivo),
                        new SqlParameter("@psDes_Activo", activo.DesActivo),
                        new SqlParameter("@psInd_Metodo_Insercion", activo.IndMetodoInsercion),
                        new SqlParameter("@psCod_Usuario", activo.CodUsuarioIngreso)
                    };

                    #endregion

                    #region KeyValuePair LIST

                    List<KeyValuePair<string, string>> itemConsulta = new List<KeyValuePair<string, string>>();
                    itemConsulta.Add(helper.CrearKeyValuePairItem("@piId_Activo", activo.IdActivo.ToString()));

                    #endregion

                    try
                    {

                        #region MODIFICAR

                        rowsAffected = transaccionDA.TransaccionModificar(conexion, conexionBitacora, "Activos_Actualiza", paramTransaccion, EnumTipoBitacora.ACTUALIZAR, itemConsulta, "Activos_Consulta_Detalle", _bitacora);
                        if (!rowsAffected.Equals(null))
                        {
                            elemento = new RespuestaEntidad();
                            elemento.ValorEstado = int.Parse(rowsAffected.Tables[0].Rows[0][0].ToString());
                            elemento.ValorError = int.Parse(rowsAffected.Tables[0].Rows[0][1].ToString());
                        }
                        
                        return elemento;

                        #endregion

                    }
                    catch (Exception)
                    {
                        throw;
                    }
                }
        
                public RespuestaEntidad ActivosEliminar(String conexion, String conexionBitacora, ActivosEntidad activo, BitacorasEntidad _bitacora)
                {
                    RespuestaEntidad elemento = null;
                    DataSet rowsAffected;

                    #region PARAMETROS

                    SqlParameter[] paramTransaccion = new SqlParameter[]
                    {
                        new SqlParameter("@piId_Activo", activo.IdActivo)
                    };

                    #endregion

                    #region KeyValuePair LIST

                    List<KeyValuePair<string, string>> itemConsulta = new List<KeyValuePair<string, string>>();
                    itemConsulta.Add(helper.CrearKeyValuePairItem("@piId_Activo", activo.IdActivo.ToString()));

                    #endregion

                    try
                    {

                        #region ELIMINAR

                        rowsAffected = transaccionDA.TransaccionEliminar(conexion, conexionBitacora, "Activos_Elimina", paramTransaccion, EnumTipoBitacora.ELIMINAR, itemConsulta, "Activos_Consulta_Detalle", _bitacora);
                        if (!rowsAffected.Equals(null))
                        {
                            elemento = new RespuestaEntidad();
                            elemento.ValorEstado = int.Parse(rowsAffected.Tables[0].Rows[0][0].ToString());
                            elemento.ValorError = int.Parse(rowsAffected.Tables[0].Rows[0][1].ToString());
                        }

                        return elemento;

                        #endregion

                    }
                    catch (Exception)
                    {
                        throw;
                    }
                }

                public List<ActivosEntidad> ActivosConsultar(String conexion, ParametrosConsultaEntidad entidad)
                {
                    List<ActivosEntidad> retorno = new List<ActivosEntidad>();
                    ActivosEntidad elemento;
                    DataSet rowsAffected;

                    #region PARAMETROS

                    SqlParameter[] paramTransaccion = new SqlParameter[]
                    {
                       new SqlParameter("@piIndice_Inicio_Fila", entidad.IndiceInicioFila),
                       new SqlParameter("@piMaximo_Filas", entidad.MaximoFilas),
                       new SqlParameter("@psValores_Filtro", entidad.ValorFiltro),
                       new SqlParameter("@psColumnas_Filtros", entidad.ColumnaFiltro),
                       new SqlParameter("@psColumna_Ordenar", entidad.ColumnaOrdenar)
                    };

                    #endregion

                    try
                    {

                        #region CONSULTAR

                        rowsAffected = transaccionDA.TransaccionConsulta(conexion, "Activos_Consulta", paramTransaccion);
                        if (!rowsAffected.Equals(null))
                        {
                            foreach (DataRow dr in rowsAffected.Tables[0].Rows)
                            {
                                elemento = new ActivosEntidad();
                                elemento.IdActivo = int.Parse(dr[0].ToString());
                                elemento.CodActivo = int.Parse(dr[1].ToString());
                                elemento.DesActivo = dr[2].ToString();

                                retorno.Add(elemento);
                            }
                        }

                        return retorno;

                        #endregion

                    }
                    catch (Exception)
                    {
                        throw;
                    }
                }
        
                public ActivosEntidad ActivosConsultarDetalle(String conexion, String conexionBitacora, ActivosEntidad activo, BitacorasEntidad _bitacora)
                {
                    ActivosEntidad retorno = new ActivosEntidad();
                    DataSet rowsAffected;

                    #region PARAMETROS

                    SqlParameter[] paramTransaccion = new SqlParameter[]
                        {
                            new SqlParameter("@piId_Activo", activo.IdActivo)
                        };

                    #endregion

                    #region KeyValuePair LIST

                    List<KeyValuePair<string, string>> itemConsulta = new List<KeyValuePair<string, string>>();
                    itemConsulta.Add(helper.CrearKeyValuePairItem("@piId_Activo", activo.IdActivo.ToString()));

                    #endregion

                    try
                    {

                        #region CONSULTAR DETALLE

                        rowsAffected = transaccionDA.TransaccionConsultaDetalle(conexion, conexionBitacora, "Activos_Consulta_Detalle", paramTransaccion, EnumTipoBitacora.CONSULTAR, itemConsulta, "Activos_Consulta_Detalle", _bitacora);
                        if (!rowsAffected.Equals(null))
                        {
                            retorno.IdActivo = int.Parse(rowsAffected.Tables[0].Rows[0][0].ToString());
                            retorno.CodActivo = int.Parse(rowsAffected.Tables[0].Rows[0][1].ToString());
                            retorno.DesActivo = rowsAffected.Tables[0].Rows[0][2].ToString();
                            retorno.IndMetodoInsercion = rowsAffected.Tables[0].Rows[0][3].ToString();
                            if (rowsAffected.Tables[0].Rows[0][4].ToString().Length > 0)
                                retorno.FechaIngreso = DateTime.Parse(rowsAffected.Tables[0].Rows[0][4].ToString());
                            else
                                retorno.FechaIngreso = null;
                            retorno.CodUsuarioIngreso = rowsAffected.Tables[0].Rows[0][5].ToString();
                            if (rowsAffected.Tables[0].Rows[0][6].ToString().Length > 0)
                                retorno.FechaUltimaModificacion = DateTime.Parse(rowsAffected.Tables[0].Rows[0][6].ToString());
                            else
                                retorno.FechaUltimaModificacion = null;
                            retorno.CodUsuarioUltimaModificacion = rowsAffected.Tables[0].Rows[0][7].ToString();
                            retorno.DesUsuarioIngreso = rowsAffected.Tables[0].Rows[0][8].ToString();
                            retorno.DesUsuarioUltimaModificacion = rowsAffected.Tables[0].Rows[0][9].ToString();
                        }
                        return retorno;

                        #endregion

                    }
                    catch (Exception)
                    {
                        throw;
                    }
                }
        
                public int ActivosTotalFilas(String conexion, ParametrosTotalFilasEntidad entidad)
                {
                    int value;

                    #region PARAMETROS

                    SqlParameter[] paramTransaccion = new SqlParameter[]
                    {
                        new SqlParameter("@psValor_Filtro", entidad.ValorFiltro),
                        new SqlParameter("@psColumna_Filtro", entidad.ColumnaFiltro)
                    };

                    #endregion

                    try
                    {

                        #region TOTAL FILAS

                            value = transaccionDA.TransaccionRows(conexion, "Activos_Total_Filas", paramTransaccion);

                            return value;

                        #endregion

                    }
                    catch (Exception)
                    {
                        throw;
                    }
                }
        
                public List<ListaEntidad> ActivosLista(String conexion, String filtro)
                {
                    List<ListaEntidad> retorno = new List<ListaEntidad>();
                    ListaEntidad elemento;
                    DataSet rowsAffected;

                    #region PARAMETROS

                    SqlParameter[] paramTransaccion = new SqlParameter[]
                    {
                        new SqlParameter("@psFiltro", filtro)
                    };

                    #endregion

                    try
                    {

                        #region LISTA

                        rowsAffected = transaccionDA.TransaccionConsulta(conexion, "Activos_Lista", paramTransaccion);
                        if (!rowsAffected.Equals(null))
                        {
                            foreach (DataRow dr in rowsAffected.Tables[0].Rows)
                            {
                                elemento = new ListaEntidad();
                                elemento.Valor = dr[0].ToString();
                                elemento.Texto = dr[1].ToString();

                                retorno.Add(elemento);
                            }
                        }
                        return retorno;

                        #endregion


                    }
                    catch (Exception)
                    {
                        throw;
                    }
                }
        
            #endregion 

            #region ADMINISTRACIONES CONTENIDOS

                public PantallasEntidad AdministracionesContenidosConsultaPantallas(String conexion, PantallasEntidad entidad)
                {
                    PantallasEntidad retorno = new PantallasEntidad();
                    DataSet rowsAffected=null;

                    #region PARAMETROS

                    SqlParameter[] paramTransaccion = new SqlParameter[]
                    {
                       new SqlParameter("@psRuta_Pantalla", entidad.RutaPantalla)
                    };

                    #endregion

                    try
                    {

                        #region CONSULTAR

                        rowsAffected = transaccionDA.TransaccionConsulta(conexion, "Administraciones_Contenidos_Consulta_Pantalla", paramTransaccion);
                        if (!rowsAffected.Equals(null))
                        {
                            foreach (DataRow dr in rowsAffected.Tables[0].Rows)
                            {
                                retorno.TituloPantalla = dr[1].ToString();
                                retorno.Modulo = dr[0].ToString();
                            }
                        }
                        return retorno;

                        #endregion

                    }
                    catch (Exception)
                    {
                        throw;
                    }
                }

                public DataSet AdministracionesContenidosConsultaPantalla(String conexion, PantallasEntidad entidad)
                {

                    DataSet rowsAffected;

                    #region PARAMETROS

                    SqlParameter[] paramTransaccion = new SqlParameter[]
                    {
                       new SqlParameter("@psRuta_Pantalla", entidad.RutaPantalla)
                    };

                    #endregion

                    try
                    {

                        #region CONSULTAR

                            rowsAffected = transaccionDA.TransaccionConsulta(conexion, "Administraciones_Contenidos_Consulta_Pantalla", paramTransaccion);

                            return rowsAffected;

                        #endregion

                    }
                    catch (Exception)
                    {
                        throw;
                    }
                }

                public List<NodoMenuEntidad> AdministracionesContenidosConsultaPestanas(String conexion, PantallasEntidad entidad)
                {
                    List<NodoMenuEntidad> retorno = new List<NodoMenuEntidad>();
                    NodoMenuEntidad elemento;
                    DataSet rowsAffected;

                    #region PARAMETROS

                    SqlParameter[] paramTransaccion = new SqlParameter[]
                    {
                       new SqlParameter("@piCod_Pantalla", entidad.CodPantalla)
                    };

                    #endregion

                    try
                    {

                        #region CONSULTAR

                        rowsAffected = transaccionDA.TransaccionConsulta(conexion, "Administraciones_Contenidos_Consulta_Pestana", paramTransaccion);
                        if (!rowsAffected.Equals(null))
                        {
                            foreach (DataRow dr in rowsAffected.Tables[0].Rows)
                            {
                                elemento = new NodoMenuEntidad();
                                elemento.Url = dr[0].ToString();
                                elemento.Nombre = dr[1].ToString();

                                retorno.Add(elemento);
                            }
                        }
                        return retorno;

                        #endregion

                    }
                    catch (Exception)
                    {
                        throw;
                    }
                }

                public DataSet AdministracionesContenidosConsultaPestana(String conexion, PantallasEntidad entidad)
                {

                    DataSet rowsAffected;

                    #region PARAMETROS

                    SqlParameter[] paramTransaccion = new SqlParameter[]
                    {
                       new SqlParameter("@piCod_Pantalla", entidad.CodPantalla)
                    };

                    #endregion

                    try
                    {

                        #region CONSULTAR

                            rowsAffected = transaccionDA.TransaccionConsulta(conexion, "Administraciones_Contenidos_Consulta_Pestana", paramTransaccion);

                            return rowsAffected;

                        #endregion

                    }
                    catch (Exception)
                    {
                        throw;
                    }
                }

                public List<ControlEntidad> AdministracionesContenidosConsultaControl(String conexion, PantallasEntidad entidad)
                {
                    List<ControlEntidad> retorno = new List<ControlEntidad>();
                    ControlEntidad elemento;
                    DataSet rowsAffected;

                    #region PARAMETROS

                    SqlParameter[] paramTransaccion = new SqlParameter[]
                    {
                       new SqlParameter("@piCod_Pantalla", entidad.CodPantalla),
                       new SqlParameter("@psPestana", entidad.Pestana )
                    };

                    #endregion

                    try
                    {

                        #region CONSULTAR

                        rowsAffected = transaccionDA.TransaccionConsulta(conexion, "Administraciones_Contenidos_Consulta_Controles", paramTransaccion);
                        if (!rowsAffected.Equals(null))
                        {
                            foreach (DataRow dr in rowsAffected.Tables[0].Rows)
                            {
                                elemento = new ControlEntidad();
                                elemento.CodPantalla = int.Parse(dr[0].ToString());
                                elemento.NombrePropiedad = dr[1].ToString();
                                elemento.NombreColumna = dr[2].ToString();
                                elemento.DesColumna = dr[3].ToString();
                                elemento.Tab = dr[4].ToString();
                                elemento.NombreTab = dr[5].ToString();
                                elemento.IndRequerido = dr[6].ToString();
                                elemento.IndModificar = dr[7].ToString();
                                elemento.IndVisible = dr[8].ToString();
                                elemento.IndValorDefecto = dr[9].ToString();
                                elemento.ValorDefecto = dr[10].ToString();
                                elemento.LongitudMaxima = dr[11].ToString();
                                elemento.Mascara = dr[12].ToString();
                                elemento.ValorMascara = dr[13].ToString();
                                elemento.TipoContenido = dr[14].ToString();
                                elemento.ValorMinimo = dr[15].ToString();
                                elemento.ValorMaximo = dr[16].ToString();
                                elemento.NombreServicioWeb = dr[17].ToString();
                                elemento.ValorServicioWeb = dr[18].ToString();
                                elemento.TextoServicioWeb = dr[19].ToString();
                                elemento.TipoObjeto = dr[20].ToString();
                                elemento.CssTipo = dr[21].ToString();
                                elemento.MetodoServicioWeb = dr[22].ToString();
                                elemento.GrupoValidacion = dr[23].ToString();
                                elemento.NombrePropiedadAsociada = dr[24].ToString();
                                retorno.Add(elemento);
                            }
                        }
                        return retorno;

                        #endregion

                    }
                    catch (Exception)
                    {
                        throw;
                    }
                }

                public DataSet AdministracionesContenidosConsultaControles(String conexion, PantallasEntidad entidad)
                {

                    DataSet rowsAffected;

                    #region PARAMETROS

                    SqlParameter[] paramTransaccion = new SqlParameter[]
                    {
                       new SqlParameter("@piCod_Pantalla", entidad.CodPantalla),
                       new SqlParameter("@psPestana", entidad.Pestana )
                    };

                    #endregion

                    try
                    {

                        #region CONSULTAR

                            rowsAffected = transaccionDA.TransaccionConsulta(conexion, "Administraciones_Contenidos_Consulta_Controles", paramTransaccion);

                            return rowsAffected;

                        #endregion

                    }
                    catch (Exception)
                    {
                        throw;
                    }
                }

            #endregion 

            #region APLICABLES
        
                public RespuestaEntidad AplicablesInsertar(String conexion, String conexionBitacora, AplicablesEntidad aplicable, BitacorasEntidad _bitacora)
                {
                    RespuestaEntidad elemento = null;
                    DataSet rowsAffected;

                    #region PARAMETROS

                    SqlParameter[] paramTransaccion = new SqlParameter[]
                    {
                        new SqlParameter("@piCod_Aplicable", aplicable.CodAplicable),
                        new SqlParameter("@psDes_Aplicable", aplicable.DesAplicable),
                        new SqlParameter("@psInd_Metodo_Insercion", aplicable.IndMetodoInsercion),
                        new SqlParameter("@psCod_Usuario", aplicable.CodUsuarioIngreso)

                    };

                    #endregion

                    try
                    {

                        #region INSERTAR

                        rowsAffected = transaccionDA.TransaccionInsertar(conexion, conexionBitacora, "Aplicables_Inserta", paramTransaccion, EnumTipoBitacora.INSERTAR, _bitacora);
                        if (!rowsAffected.Equals(null))
                        {
                            elemento = new RespuestaEntidad();
                            elemento.ValorEstado = int.Parse(rowsAffected.Tables[0].Rows[0][0].ToString());
                            elemento.ValorError = int.Parse(rowsAffected.Tables[0].Rows[0][1].ToString());
                        }

                        return elemento;

                        #endregion

                    }
                    catch (Exception)
                    {
                        throw;
                    }
                }
        
                public RespuestaEntidad AplicablesModificar(String conexion, String conexionBitacora, AplicablesEntidad aplicable, BitacorasEntidad _bitacora)
                {
                    RespuestaEntidad elemento = null;
                    DataSet rowsAffected;

                    #region PARAMETROS

                    SqlParameter[] paramTransaccion = new SqlParameter[]
                    {
                        new SqlParameter("@piId_Aplicable", aplicable.IdAplicable),
                        new SqlParameter("@piCod_Aplicable", aplicable.CodAplicable),
                        new SqlParameter("@psDes_Aplicable", aplicable.DesAplicable),
                        new SqlParameter("@psInd_Metodo_Insercion", aplicable.IndMetodoInsercion),
                        new SqlParameter("@psCod_Usuario", aplicable.CodUsuarioIngreso)
                    };

                    #endregion

                    #region KeyValuePair LIST

                    List<KeyValuePair<string, string>> itemConsulta = new List<KeyValuePair<string, string>>();
                    itemConsulta.Add(helper.CrearKeyValuePairItem("@piId_Aplicable", aplicable.IdAplicable.ToString()));

                    #endregion

                    try
                    {

                        #region MODIFICAR

                        rowsAffected = transaccionDA.TransaccionModificar(conexion, conexionBitacora, "Aplicables_Actualiza", paramTransaccion, EnumTipoBitacora.ACTUALIZAR, itemConsulta, "Aplicables_Consulta_Detalle", _bitacora);
                        if (!rowsAffected.Equals(null))
                        {
                            elemento = new RespuestaEntidad();
                            elemento.ValorEstado = int.Parse(rowsAffected.Tables[0].Rows[0][0].ToString());
                            elemento.ValorError = int.Parse(rowsAffected.Tables[0].Rows[0][1].ToString());
                        }

                        return elemento;

                        #endregion

                    }
                    catch (Exception)
                    {
                        throw;
                    }
                }
        
                public RespuestaEntidad AplicablesEliminar(String conexion, String conexionBitacora, AplicablesEntidad aplicable, BitacorasEntidad _bitacora)
                {
                    RespuestaEntidad elemento = null;
                    DataSet rowsAffected;

                    #region PARAMETROS

                    SqlParameter[] paramTransaccion = new SqlParameter[]
                    {
                        new SqlParameter("@piId_Aplicable", aplicable.IdAplicable)
                    };

                    #endregion

                    #region KeyValuePair LIST

                        List<KeyValuePair<string, string>> itemConsulta = new List<KeyValuePair<string, string>>();
                        itemConsulta.Add(helper.CrearKeyValuePairItem("@piId_Aplicable", aplicable.IdAplicable.ToString()));

                    #endregion

                    try
                    {

                        #region ELIMINAR

                        rowsAffected = transaccionDA.TransaccionEliminar(conexion, conexionBitacora, "Aplicables_Elimina", paramTransaccion, EnumTipoBitacora.ELIMINAR, itemConsulta, "Aplicables_Consulta_Detalle", _bitacora);
                        if (!rowsAffected.Equals(null))
                        {
                            elemento = new RespuestaEntidad();
                            elemento.ValorEstado = int.Parse(rowsAffected.Tables[0].Rows[0][0].ToString());
                            elemento.ValorError = int.Parse(rowsAffected.Tables[0].Rows[0][1].ToString());
                        }

                        return elemento;

                        #endregion

                    }
                    catch (Exception)
                    {
                        throw;
                    }
                }

                public List<AplicablesEntidad> AplicablesConsultar(String conexion, ParametrosConsultaEntidad entidad)
                {
                    List<AplicablesEntidad> retorno = new List<AplicablesEntidad>();
                    AplicablesEntidad elemento;
                    DataSet rowsAffected;

                    #region PARAMETROS

                    SqlParameter[] paramTransaccion = new SqlParameter[]
                    {
                       new SqlParameter("@piIndice_Inicio_Fila", entidad.IndiceInicioFila),
                       new SqlParameter("@piMaximo_Filas", entidad.MaximoFilas),
                       new SqlParameter("@psValores_Filtro", entidad.ValorFiltro),
                       new SqlParameter("@psColumnas_Filtros", entidad.ColumnaFiltro),
                       new SqlParameter("@psColumna_Ordenar", entidad.ColumnaOrdenar)
                    };

                    #endregion

                    try
                    {

                        #region CONSULTAR

                        rowsAffected = transaccionDA.TransaccionConsulta(conexion, "Aplicables_Consulta", paramTransaccion);
                        if (!rowsAffected.Equals(null))
                        {
                            foreach (DataRow dr in rowsAffected.Tables[0].Rows)
                            {
                                elemento = new AplicablesEntidad();
                                elemento.IdAplicable = int.Parse(dr[0].ToString());
                                elemento.CodAplicable = int.Parse(dr[1].ToString());
                                elemento.DesAplicable = dr[2].ToString();

                                retorno.Add(elemento);
                            }
                        }

                        return retorno;

                        #endregion

                    }
                    catch (Exception)
                    {
                        throw;
                    }
                }

                public AplicablesEntidad AplicablesConsultarDetalle(String conexion, String conexionBitacora, AplicablesEntidad aplicable, BitacorasEntidad _bitacora)
                {
                    AplicablesEntidad retorno = new AplicablesEntidad();
                    DataSet rowsAffected;

                    #region PARAMETROS

                    SqlParameter[] paramTransaccion = new SqlParameter[]
                    {
                        new SqlParameter("@piId_Aplicable", aplicable.IdAplicable)
                    };

                    #endregion

                    #region KeyValuePair LIST

                    List<KeyValuePair<string, string>> itemConsulta = new List<KeyValuePair<string, string>>();
                    itemConsulta.Add(helper.CrearKeyValuePairItem("@piId_Aplicable", aplicable.IdAplicable.ToString()));

                    #endregion

                    try
                    {

                        #region CONSULTAR DETALLE

                        rowsAffected = transaccionDA.TransaccionConsultaDetalle(conexion, conexionBitacora, "Aplicables_Consulta_Detalle", paramTransaccion, EnumTipoBitacora.CONSULTAR, itemConsulta, "Aplicables_Consulta_Detalle", _bitacora);
                        if (!rowsAffected.Equals(null))
                        {
                            retorno.IdAplicable = int.Parse(rowsAffected.Tables[0].Rows[0][0].ToString());
                            retorno.CodAplicable = int.Parse(rowsAffected.Tables[0].Rows[0][1].ToString());
                            retorno.DesAplicable = rowsAffected.Tables[0].Rows[0][2].ToString();
                            retorno.IndMetodoInsercion = rowsAffected.Tables[0].Rows[0][3].ToString();
                            if (rowsAffected.Tables[0].Rows[0][4].ToString().Length > 0)
                                retorno.FechaIngreso = DateTime.Parse(rowsAffected.Tables[0].Rows[0][4].ToString());
                            else
                                retorno.FechaIngreso = null;
                            retorno.CodUsuarioIngreso = rowsAffected.Tables[0].Rows[0][5].ToString();
                            if (rowsAffected.Tables[0].Rows[0][6].ToString().Length > 0)
                                retorno.FechaUltimaModificacion = DateTime.Parse(rowsAffected.Tables[0].Rows[0][6].ToString());
                            else
                                retorno.FechaUltimaModificacion = null;
                            retorno.CodUsuarioUltimaModificacion = rowsAffected.Tables[0].Rows[0][7].ToString();
                            retorno.DesUsuarioIngreso = rowsAffected.Tables[0].Rows[0][8].ToString();
                            retorno.DesUsuarioUltimaModificacion = rowsAffected.Tables[0].Rows[0][9].ToString();
                        }
                        return retorno;

                        #endregion

                    }
                    catch (Exception)
                    {
                        throw;
                    }
                }
        
                public int AplicablesTotalFilas(String conexion, ParametrosTotalFilasEntidad entidad)
                {

                    int retorno;

                    #region PARAMETROS

                    SqlParameter[] paramTransaccion = new SqlParameter[]
                    {
                        new SqlParameter("@psValor_Filtro", entidad.ValorFiltro),
                        new SqlParameter("@psColumna_Filtro", entidad.ColumnaFiltro)
                    };

                    #endregion

                    try
                    {

                        #region Total Filas

                            retorno = transaccionDA.TransaccionRows(conexion, "Aplicables_Total_Filas", paramTransaccion);

                            return retorno;

                        #endregion

                    }
                    catch (Exception)
                    {
                        throw;
                    }
                }

            #endregion 

            #region BIENES VALORAR
        
                public RespuestaEntidad BienesValorarInsertar(String conexion, String conexionBitacora, BienesValorarEntidad bienValorar, BitacorasEntidad _bitacora)
                {
                    RespuestaEntidad elemento = null;
                    DataSet rowsAffected;

                    #region PARAMETROS

                    SqlParameter[] paramTransaccion = new SqlParameter[]
                    {
                        new SqlParameter("@piCod_Bien_Valorar", bienValorar.CodBienValorar),
                        new SqlParameter("@psDes_Bien_Valorar", bienValorar.DesBienValorar),
                        new SqlParameter("@psInd_Metodo_Insercion", bienValorar.IndMetodoInsercion),
                        new SqlParameter("@psCod_Usuario", bienValorar.CodUsuarioIngreso)
                    };

                    #endregion

                    try
                    {

                        #region INSERTAR

                        rowsAffected = transaccionDA.TransaccionInsertar(conexion, conexionBitacora, "Bienes_Valorar_Inserta", paramTransaccion, EnumTipoBitacora.INSERTAR, _bitacora);
                        if (!rowsAffected.Equals(null))
                        {
                            elemento = new RespuestaEntidad();
                            elemento.ValorEstado = int.Parse(rowsAffected.Tables[0].Rows[0][0].ToString());
                            elemento.ValorError = int.Parse(rowsAffected.Tables[0].Rows[0][1].ToString());
                        }

                        return elemento;

                        #endregion

                    }
                    catch (Exception)
                    {
                        throw;
                    }
                }
        
                public RespuestaEntidad BienesValorarModificar(String conexion, String conexionBitacora, BienesValorarEntidad bienValorar, BitacorasEntidad _bitacora)
                {
                    RespuestaEntidad elemento = null;
                    DataSet rowsAffected;

                    #region PARAMETROS

                    SqlParameter[] paramTransaccion = new SqlParameter[]
                    {
                        new SqlParameter("@piId_Bien_Valorar", bienValorar.IdBienValorar),
                        new SqlParameter("@piCod_Bien_Valorar", bienValorar.CodBienValorar),
                        new SqlParameter("@psDes_Bien_Valorar", bienValorar.DesBienValorar),
                        new SqlParameter("@psInd_Metodo_Insercion", bienValorar.IndMetodoInsercion),
                        new SqlParameter("@psCod_Usuario", bienValorar.CodUsuarioIngreso)
                       
                    };

                    #endregion

                    #region KeyValuePair LIST

                    List<KeyValuePair<string, string>> itemConsulta = new List<KeyValuePair<string, string>>();
                    itemConsulta.Add(helper.CrearKeyValuePairItem("@piId_Bien_Valorar", bienValorar.IdBienValorar.ToString()));

                    #endregion

                    try
                    {

                        #region MODIFICAR

                        rowsAffected = transaccionDA.TransaccionModificar(conexion, conexionBitacora, "Bienes_Valorar_Actualiza", paramTransaccion, EnumTipoBitacora.ACTUALIZAR, itemConsulta, "Bienes_Valorar_Consulta_Detalle", _bitacora);
                        if (!rowsAffected.Equals(null))
                        {
                            elemento = new RespuestaEntidad();
                            elemento.ValorEstado = int.Parse(rowsAffected.Tables[0].Rows[0][0].ToString());
                            elemento.ValorError = int.Parse(rowsAffected.Tables[0].Rows[0][1].ToString());
                        }

                        return elemento;

                        #endregion

                    }
                    catch (Exception)
                    {
                        throw;
                    }
                }
        
                public RespuestaEntidad BienesValorarEliminar(String conexion, String conexionBitacora, BienesValorarEntidad bienValorar, BitacorasEntidad _bitacora)
                {
                    RespuestaEntidad elemento = null;
                    DataSet rowsAffected;

                    #region PARAMETROS

                    SqlParameter[] paramTransaccion = new SqlParameter[]
                    {
                        new SqlParameter("@piId_Bien_Valorar", bienValorar.IdBienValorar)
                    };

                    #endregion

                    #region KeyValuePair LIST

                    List<KeyValuePair<string, string>> itemConsulta = new List<KeyValuePair<string, string>>();
                    itemConsulta.Add(helper.CrearKeyValuePairItem("@piId_Bien_Valorar", bienValorar.IdBienValorar.ToString()));

                    #endregion

                    try
                    {

                        #region ELIMINAR

                        rowsAffected = transaccionDA.TransaccionEliminar(conexion, conexionBitacora, "Bienes_Valorar_Elimina", paramTransaccion, EnumTipoBitacora.ELIMINAR, itemConsulta, "Bienes_Valorar_Consulta_Detalle", _bitacora);
                        if (!rowsAffected.Equals(null))
                        {
                            elemento = new RespuestaEntidad();
                            elemento.ValorEstado = int.Parse(rowsAffected.Tables[0].Rows[0][0].ToString());
                            elemento.ValorError = int.Parse(rowsAffected.Tables[0].Rows[0][1].ToString());
                        }

                        return elemento;

                        #endregion

                    }
                    catch (Exception)
                    {
                        throw;
                    }
                }

                public List<BienesValorarEntidad> BienesValorarConsultar(String conexion, ParametrosConsultaEntidad entidad)
                {
                    List<BienesValorarEntidad> retorno = new List<BienesValorarEntidad>();
                    BienesValorarEntidad elemento;
                    DataSet rowsAffected;

                    #region PARAMETROS

                    SqlParameter[] paramTransaccion = new SqlParameter[]
                    {
                       new SqlParameter("@piIndice_Inicio_Fila", entidad.IndiceInicioFila),
                       new SqlParameter("@piMaximo_Filas", entidad.MaximoFilas),
                       new SqlParameter("@psValores_Filtro", entidad.ValorFiltro),
                       new SqlParameter("@psColumnas_Filtros", entidad.ColumnaFiltro),
                       new SqlParameter("@psColumna_Ordenar", entidad.ColumnaOrdenar)
                    };

                    #endregion

                    try
                    {

                        #region CONSULTAR

                        rowsAffected = transaccionDA.TransaccionConsulta(conexion, "Bienes_Valorar_Consulta", paramTransaccion);
                        if (!rowsAffected.Equals(null))
                        {
                            foreach (DataRow dr in rowsAffected.Tables[0].Rows)
                            {
                                elemento = new BienesValorarEntidad();
                                elemento.IdBienValorar = int.Parse(dr[0].ToString());
                                elemento.CodBienValorar = int.Parse(dr[1].ToString());
                                elemento.DesBienValorar = dr[2].ToString();

                                retorno.Add(elemento);
                            }
                        }

                        return retorno;

                        #endregion

                    }
                    catch (Exception)
                    {
                        throw;
                    }
                }
        
                public BienesValorarEntidad BienesValorarConsultarDetalle(String conexion, String conexionBitacora, BienesValorarEntidad bienValorar, BitacorasEntidad _bitacora)
                {
                    BienesValorarEntidad retorno = new BienesValorarEntidad();
                    DataSet rowsAffected;

                    #region PARAMETROS

                    SqlParameter[] paramTransaccion = new SqlParameter[]
                    {
                        new SqlParameter("@piId_Bien_Valorar", bienValorar.IdBienValorar)
                    };

                    #endregion

                    #region KeyValuePair LIST

                    List<KeyValuePair<string, string>> itemConsulta = new List<KeyValuePair<string, string>>();
                    itemConsulta.Add(helper.CrearKeyValuePairItem("@piId_Bien_Valorar", bienValorar.IdBienValorar.ToString()));

                    #endregion

                    try
                    {

                        #region CONSULTAR DETALLE

                        rowsAffected = transaccionDA.TransaccionConsultaDetalle(conexion, conexionBitacora, "Bienes_Valorar_Consulta_Detalle", paramTransaccion, EnumTipoBitacora.CONSULTAR, itemConsulta, "Bienes_Valorar_Consulta_Detalle", _bitacora);
                        if (!rowsAffected.Equals(null))
                        {
                            retorno.IdBienValorar = int.Parse(rowsAffected.Tables[0].Rows[0][0].ToString());
                            retorno.CodBienValorar = int.Parse(rowsAffected.Tables[0].Rows[0][1].ToString());
                            retorno.DesBienValorar = rowsAffected.Tables[0].Rows[0][2].ToString();
                            retorno.IndMetodoInsercion = rowsAffected.Tables[0].Rows[0][3].ToString();
                            if (rowsAffected.Tables[0].Rows[0][4].ToString().Length > 0)
                                retorno.FechaIngreso = DateTime.Parse(rowsAffected.Tables[0].Rows[0][4].ToString());
                            else
                                retorno.FechaIngreso = null;
                            retorno.CodUsuarioIngreso = rowsAffected.Tables[0].Rows[0][5].ToString();
                            if (rowsAffected.Tables[0].Rows[0][6].ToString().Length > 0)
                                retorno.FechaUltimaModificacion = DateTime.Parse(rowsAffected.Tables[0].Rows[0][6].ToString());
                            else
                                retorno.FechaUltimaModificacion = null;
                            retorno.CodUsuarioUltimaModificacion = rowsAffected.Tables[0].Rows[0][7].ToString();
                            retorno.DesUsuarioIngreso = rowsAffected.Tables[0].Rows[0][8].ToString();
                            retorno.DesUsuarioUltimaModificacion = rowsAffected.Tables[0].Rows[0][9].ToString();
                        }
                        return retorno;

                        #endregion

                    }
                    catch (Exception)
                    {
                        throw;
                    }
                }
        
                public int BienesValorarTotalFilas(String conexion, ParametrosTotalFilasEntidad entidad)
                {

                    int retorno;

                    #region PARAMETROS

                    SqlParameter[] paramTransaccion = new SqlParameter[]
                    {
                        new SqlParameter("@psValor_Filtro", entidad.ValorFiltro),
                        new SqlParameter("@psColumna_Filtro", entidad.ColumnaFiltro)
                    };

                    #endregion

                    try
                    {

                        #region TOTAL FILAS

                            retorno = transaccionDA.TransaccionRows(conexion, "Bienes_Valorar_Total_Filas", paramTransaccion);

                            return retorno;

                        #endregion

                    }
                    catch (Exception)
                    {
                        throw;
                    }
                }

            #endregion 

            #region CAJAS BREAKERS
        
                public RespuestaEntidad CajasBreakersInsertar(String conexion, String conexionBitacora, CajasBreakersEntidad cajaBreaker, BitacorasEntidad _bitacora)
                {
                    RespuestaEntidad elemento = null;
                    DataSet rowsAffected;

                    #region PARAMETROS

                    SqlParameter[] paramTransaccion = new SqlParameter[]
                    {
                        new SqlParameter("@piCod_Caja_Breaker", cajaBreaker.CodCajaBreaker),
                        new SqlParameter("@psDes_Caja_Breaker", cajaBreaker.DesCajaBreaker),
                        new SqlParameter("@psInd_Metodo_Insercion", cajaBreaker.IndMetodoInsercion),
                        new SqlParameter("@psCod_Usuario", cajaBreaker.CodUsuarioIngreso)
                    };

                    #endregion

                    try
                    {

                        #region INSERTAR

                        rowsAffected = transaccionDA.TransaccionInsertar(conexion, conexionBitacora, "Cajas_Breakers_Inserta", paramTransaccion, EnumTipoBitacora.INSERTAR, _bitacora);
                        if (!rowsAffected.Equals(null))
                        {
                            elemento = new RespuestaEntidad();
                            elemento.ValorEstado = int.Parse(rowsAffected.Tables[0].Rows[0][0].ToString());
                            elemento.ValorError = int.Parse(rowsAffected.Tables[0].Rows[0][1].ToString());
                        }

                        return elemento;

                        #endregion

                    }
                    catch (Exception)
                    {
                        throw;
                    }
                }
        
                public RespuestaEntidad CajasBreakersModificar(String conexion, String conexionBitacora, CajasBreakersEntidad cajaBreaker, BitacorasEntidad _bitacora)
                {
                    RespuestaEntidad elemento = null;
                    DataSet rowsAffected;

                    #region PARAMETROS

                    SqlParameter[] paramTransaccion = new SqlParameter[]
                    {
                        new SqlParameter("@piId_Caja_Breaker", cajaBreaker.IdCajaBreaker),
                        new SqlParameter("@piCod_Caja_Breaker", cajaBreaker.CodCajaBreaker),
                        new SqlParameter("@psDes_Caja_Breaker", cajaBreaker.DesCajaBreaker),
                        new SqlParameter("@psInd_Metodo_Insercion", cajaBreaker.IndMetodoInsercion),
                        new SqlParameter("@psCod_Usuario", cajaBreaker.CodUsuarioIngreso)
                    };

                    #endregion

                    #region KeyValuePair LIST

                    List<KeyValuePair<string, string>> itemConsulta = new List<KeyValuePair<string, string>>();
                    itemConsulta.Add(helper.CrearKeyValuePairItem("@piId_Caja_Breaker", cajaBreaker.IdCajaBreaker.ToString()));

                    #endregion

                    try
                    {

                        #region MODIFICAR

                        rowsAffected = transaccionDA.TransaccionModificar(conexion, conexionBitacora, "Cajas_Breakers_Actualiza", paramTransaccion, EnumTipoBitacora.ACTUALIZAR, itemConsulta, "Cajas_Breakers_Consulta_Detalle", _bitacora);
                        if (!rowsAffected.Equals(null))
                        {
                            elemento = new RespuestaEntidad();
                            elemento.ValorEstado = int.Parse(rowsAffected.Tables[0].Rows[0][0].ToString());
                            elemento.ValorError = int.Parse(rowsAffected.Tables[0].Rows[0][1].ToString());
                        }

                        return elemento;

                        #endregion

                    }
                    catch (Exception)
                    {
                        throw;
                    }
                }
        
                public RespuestaEntidad CajasBreakersEliminar(String conexion, String conexionBitacora, CajasBreakersEntidad cajaBreaker, BitacorasEntidad _bitacora)
                {
                    RespuestaEntidad elemento = null;
                    DataSet rowsAffected;

                    #region PARAMETROS

                    SqlParameter[] paramTransaccion = new SqlParameter[]
                    {
                        new SqlParameter("@piId_Caja_Breaker", cajaBreaker.IdCajaBreaker)
                    };

                    #endregion

                    #region KeyValuePair LIST

                    List<KeyValuePair<string, string>> itemConsulta = new List<KeyValuePair<string, string>>();
                    itemConsulta.Add(helper.CrearKeyValuePairItem("@piId_Caja_Breaker", cajaBreaker.IdCajaBreaker.ToString()));

                    #endregion

                    try
                    {

                        #region ELIMINAR

                        rowsAffected = transaccionDA.TransaccionEliminar(conexion, conexionBitacora, "Cajas_Breakers_Elimina", paramTransaccion, EnumTipoBitacora.ELIMINAR, itemConsulta, "Cajas_Breakers_Consulta_Detalle", _bitacora);
                        if (!rowsAffected.Equals(null))
                        {
                            elemento = new RespuestaEntidad();
                            elemento.ValorEstado = int.Parse(rowsAffected.Tables[0].Rows[0][0].ToString());
                            elemento.ValorError = int.Parse(rowsAffected.Tables[0].Rows[0][1].ToString());
                        }

                        return elemento;

                        #endregion

                    }
                    catch (Exception)
                    {
                        throw;
                    }
                }

                public List<CajasBreakersEntidad> CajasBreakersConsultar(String conexion, ParametrosConsultaEntidad entidad)
                {
                    List<CajasBreakersEntidad> retorno = new List<CajasBreakersEntidad>();
                    CajasBreakersEntidad elemento;
                    DataSet rowsAffected;

                    #region PARAMETROS

                    SqlParameter[] paramTransaccion = new SqlParameter[]
                    {
                        new SqlParameter("@piIndice_Inicio_Fila", entidad.IndiceInicioFila),
                        new SqlParameter("@piMaximo_Filas", entidad.MaximoFilas),
                        new SqlParameter("@psValores_Filtro", entidad.ValorFiltro),
                        new SqlParameter("@psColumnas_Filtros", entidad.ColumnaFiltro),
                        new SqlParameter("@psColumna_Ordenar", entidad.ColumnaOrdenar)
                    };

                    #endregion

                    try
                    {

                        #region CONSULTAR

                        rowsAffected = transaccionDA.TransaccionConsulta(conexion, "Cajas_Breakers_Consulta", paramTransaccion);
                        if (!rowsAffected.Equals(null))
                        {
                            foreach (DataRow dr in rowsAffected.Tables[0].Rows)
                            {
                                elemento = new CajasBreakersEntidad();
                                elemento.IdCajaBreaker = int.Parse(dr[0].ToString());
                                elemento.CodCajaBreaker = int.Parse(dr[1].ToString());
                                elemento.DesCajaBreaker = dr[2].ToString();

                                retorno.Add(elemento);
                            }
                        }

                            return retorno;

                        #endregion

                    }
                    catch (Exception)
                    {
                        throw;
                    }
                }
        
                public CajasBreakersEntidad CajasBreakersConsultarDetalle(String conexion, String conexionBitacora, CajasBreakersEntidad cajaBreaker, BitacorasEntidad _bitacora)
                {
                    CajasBreakersEntidad retorno = new CajasBreakersEntidad();
                    DataSet rowsAffected;

                    #region PARAMETROS

                    SqlParameter[] paramTransaccion = new SqlParameter[]
                    {
                        new SqlParameter("@piId_Caja_Breaker", cajaBreaker.IdCajaBreaker)
                    };

                    #endregion

                    #region KeyValuePair LIST

                    List<KeyValuePair<string, string>> itemConsulta = new List<KeyValuePair<string, string>>();
                    itemConsulta.Add(helper.CrearKeyValuePairItem("@piId_Caja_Breaker", cajaBreaker.IdCajaBreaker.ToString()));

                    #endregion

                    try
                    {

                        #region CONSULTAR DETALLE

                        rowsAffected = transaccionDA.TransaccionConsultaDetalle(conexion, conexionBitacora, "Cajas_Breakers_Consulta_Detalle", paramTransaccion, EnumTipoBitacora.CONSULTAR, itemConsulta, "Cajas_Breakers_Consulta_Detalle", _bitacora);
                        if (!rowsAffected.Equals(null))
                        {
                            retorno.IdCajaBreaker = int.Parse(rowsAffected.Tables[0].Rows[0][0].ToString());
                            retorno.CodCajaBreaker = int.Parse(rowsAffected.Tables[0].Rows[0][1].ToString());
                            retorno.DesCajaBreaker = rowsAffected.Tables[0].Rows[0][2].ToString();
                            retorno.IndMetodoInsercion = rowsAffected.Tables[0].Rows[0][3].ToString();
                            if (rowsAffected.Tables[0].Rows[0][4].ToString().Length > 0)
                                retorno.FechaIngreso = DateTime.Parse(rowsAffected.Tables[0].Rows[0][4].ToString());
                            else
                                retorno.FechaIngreso = null;
                            retorno.CodUsuarioIngreso = rowsAffected.Tables[0].Rows[0][5].ToString();
                            if (rowsAffected.Tables[0].Rows[0][6].ToString().Length > 0)
                                retorno.FechaUltimaModificacion = DateTime.Parse(rowsAffected.Tables[0].Rows[0][6].ToString());
                            else
                                retorno.FechaUltimaModificacion = null;
                            retorno.CodUsuarioUltimaModificacion = rowsAffected.Tables[0].Rows[0][7].ToString();
                            retorno.DesUsuarioIngreso = rowsAffected.Tables[0].Rows[0][8].ToString();
                            retorno.DesUsuarioUltimaModificacion = rowsAffected.Tables[0].Rows[0][9].ToString();
                        }
                        return retorno;

                        #endregion

                    }
                    catch (Exception)
                    {
                        throw;
                    }
                }
        
                public int CajasBreakersTotalFilas(String conexion, ParametrosTotalFilasEntidad entidad)
                {

                    int value;

                    #region PARAMETROS

                    SqlParameter[] paramTransaccion = new SqlParameter[]
                    {
                        new SqlParameter("@psValor_Filtro", entidad.ValorFiltro),
                        new SqlParameter("@psColumna_Filtro", entidad.ColumnaFiltro)
                    };

                    #endregion

                    try
                    {

                        #region TOTAL FILAS

                            value = transaccionDA.TransaccionRows(conexion, "Cajas_Breakers_Total_Filas", paramTransaccion);

                            return value;

                        #endregion

                    }
                    catch (Exception)
                    {
                        throw;
                    }
                }

            #endregion 

            //REQUERIMIENTO: 1-24105296
            #region CALIFICACIONES EMPRESAS CALIFICADORAS
        
                public RespuestaEntidad CalificacionesEmpresasCalificadorasInsertar(String conexion, String conexionBitacora, CalificacionesEmpresasCalificadorasEntidad entidad, BitacorasEntidad _bitacora)
                {
                    RespuestaEntidad elemento = null;
                    DataSet rowsAffected;

                    #region PARAMETROS

                    SqlParameter[] paramTransaccion = new SqlParameter[]
                    {
                        new SqlParameter("@piId_Empresa_Calificadora", entidad.IdEmpresaCalificadora),
                        new SqlParameter("@piId_Categoria_Riesgo_Empresa_Calificadora", entidad.idCategoriaRiesgoEmpresaCalificadora),
                        new SqlParameter("@psCalificacion", entidad.Calificacion) ,
                        new SqlParameter("@psInd_Metodo_Insercion", entidad.IndMetodoInsercion),
                        new SqlParameter("@psCod_Usuario", entidad.CodUsuarioIngreso)
                    };

                    #endregion

                    try
                    {

                        #region INSERTAR
                        
                        rowsAffected = transaccionDA.TransaccionInsertar(conexion, conexionBitacora, "Calificaciones_Empresas_Calificadoras_Inserta", paramTransaccion, EnumTipoBitacora.INSERTAR, _bitacora);
                        if (!rowsAffected.Equals(null))
                        {
                            elemento = new RespuestaEntidad();
                            elemento.ValorEstado = int.Parse(rowsAffected.Tables[0].Rows[0][0].ToString());
                            elemento.ValorError = int.Parse(rowsAffected.Tables[0].Rows[0][1].ToString());
                        }

                        return elemento;

                        #endregion

                    }
                    catch (Exception)
                    {
                        throw;
                    }
                }
        
                public RespuestaEntidad CalificacionesEmpresasCalificadorasModificar(String conexion, String conexionBitacora, CalificacionesEmpresasCalificadorasEntidad entidad, BitacorasEntidad _bitacora)
                {
                    RespuestaEntidad elemento = null;
                    DataSet rowsAffected;

                    #region PARAMETROS

                    SqlParameter[] paramTransaccion = new SqlParameter[]
                    {
                        new SqlParameter("@piId_Calificacion_Empresa_Calificadora", entidad.IdCalificacionEmpresaCalificadora),
                        new SqlParameter("@piId_Empresa_Calificadora", entidad.IdEmpresaCalificadora),
                        new SqlParameter("@piId_Categoria_Riesgo_Empresa", entidad.idCategoriaRiesgoEmpresaCalificadora),
                        new SqlParameter("@psCalificacion", entidad.Calificacion),
                        new SqlParameter("@psInd_Metodo_Insercion", entidad.IndMetodoInsercion),
                        new SqlParameter("@psCod_Usuario", entidad.CodUsuarioIngreso)
                    };

                    #endregion

                    #region KeyValuePair LIST

                    List<KeyValuePair<string, string>> itemConsulta = new List<KeyValuePair<string, string>>();
                    itemConsulta.Add(helper.CrearKeyValuePairItem("@piId_Calificacion_Empresa_Calificadora", entidad.IdCalificacionEmpresaCalificadora.ToString()));

                    #endregion

                    try
                    {

                        #region MODIFICAR

                        rowsAffected = transaccionDA.TransaccionModificar(conexion, conexionBitacora, "Calificaciones_Empresas_Calificadoras_Actualiza", paramTransaccion, EnumTipoBitacora.ACTUALIZAR, itemConsulta, "Calificaciones_Empresas_Calificadoras_Consulta_Detalle", _bitacora);
                        if (!rowsAffected.Equals(null))
                        {
                            elemento = new RespuestaEntidad();
                            elemento.ValorEstado = int.Parse(rowsAffected.Tables[0].Rows[0][0].ToString());
                            elemento.ValorError = int.Parse(rowsAffected.Tables[0].Rows[0][1].ToString());
                        }

                        return elemento;

                        #endregion

                    }
                    catch (Exception)
                    {
                        throw;
                    }
                }
        
                public RespuestaEntidad CalificacionesEmpresasCalificadorasEliminar(String conexion, String conexionBitacora, CalificacionesEmpresasCalificadorasEntidad entidad, BitacorasEntidad _bitacora)
                {
                    RespuestaEntidad elemento = null;
                    DataSet rowsAffected;

                    #region PARAMETROS

                    SqlParameter[] paramTransaccion = new SqlParameter[]
                    {
                        new SqlParameter("@piId_Calificacion_Empresa_Calificadora", entidad.IdCalificacionEmpresaCalificadora)
                    };

                    #endregion

                    #region KeyValuePair LIST

                    List<KeyValuePair<string, string>> itemConsulta = new List<KeyValuePair<string, string>>();
                    itemConsulta.Add(helper.CrearKeyValuePairItem("@piId_Calificacion_Empresa_Calificadora", entidad.IdCalificacionEmpresaCalificadora.ToString()));

                    #endregion

                    try
                    {

                        #region ELIMINAR

                        rowsAffected = transaccionDA.TransaccionEliminar(conexion, conexionBitacora, "Calificaciones_Empresas_Calificadoras_Elimina", paramTransaccion, EnumTipoBitacora.ELIMINAR, itemConsulta, "Calificaciones_Empresas_Calificadoras_Consulta_Detalle", _bitacora);
                        if (!rowsAffected.Equals(null))
                        {
                            elemento = new RespuestaEntidad();
                            elemento.ValorEstado = int.Parse(rowsAffected.Tables[0].Rows[0][0].ToString());
                            elemento.ValorError = int.Parse(rowsAffected.Tables[0].Rows[0][1].ToString());
                        }

                        return elemento;

                        #endregion

                    }
                    catch (Exception)
                    {
                        throw;
                    }
                }
        
                public List<CalificacionesEmpresasCalificadorasEntidad> CalificacionesEmpresasCalificadorasConsultar(String conexion, ParametrosConsultaEntidad entidad)
                {
                    List<CalificacionesEmpresasCalificadorasEntidad> retorno = new List<CalificacionesEmpresasCalificadorasEntidad>();
                    CalificacionesEmpresasCalificadorasEntidad elemento;
                    DataSet rowsAffected;

                    #region PARAMETROS

                    SqlParameter[] paramTransaccion = new SqlParameter[]
                    {
                       new SqlParameter("@piIndice_Inicio_Fila", entidad.IndiceInicioFila),
                       new SqlParameter("@piMaximo_Filas", entidad.MaximoFilas),
                       new SqlParameter("@psValores_Filtro", entidad.ValorFiltro),
                       new SqlParameter("@psColumnas_Filtros", entidad.ColumnaFiltro),
                       new SqlParameter("@psColumna_Ordenar", entidad.ColumnaOrdenar)
                    };

                    #endregion

                    try
                    {

                        #region CONSULTAR

                        rowsAffected = transaccionDA.TransaccionConsulta(conexion, "Calificaciones_Empresas_Calificadoras_Consulta", paramTransaccion);
                        if (!rowsAffected.Equals(null))
                        {
                            foreach (DataRow dr in rowsAffected.Tables[0].Rows)
                            {
                                elemento = new CalificacionesEmpresasCalificadorasEntidad();
                                elemento.IdCalificacionEmpresaCalificadora = int.Parse(dr[0].ToString());
                                elemento.IdEmpresaCalificadora = int.Parse(dr[1].ToString());
                                elemento.CodEmpresaCalificadora = dr[2].ToString();
                                elemento.DesEmpresaCalificadora = dr[3].ToString();
                                elemento.IdPlazoCalificacion = int.Parse(dr[4].ToString());
                                elemento.CodPlazoCalificacion = dr[5].ToString();
                                elemento.DesPlazoCalificacion = dr[6].ToString();
                                elemento.idCategoriaRiesgoEmpresaCalificadora = int.Parse(dr[7].ToString());
                                elemento.CodCategoriaRiesgoEmpresaCalificadora = dr[8].ToString();
                                elemento.Calificacion = dr[9].ToString();

                                retorno.Add(elemento);
                            }
                        }

                        return retorno;

                        #endregion

                    }
                    catch (Exception)
                    {
                        throw;
                    }
                }
        
                public CalificacionesEmpresasCalificadorasEntidad CalificacionesEmpresasCalificadorasConsultarDetalle(String conexion, String conexionBitacora, CalificacionesEmpresasCalificadorasEntidad entidad, BitacorasEntidad _bitacora)
                {
                    CalificacionesEmpresasCalificadorasEntidad retorno = new CalificacionesEmpresasCalificadorasEntidad();
                    DataSet rowsAffected;

                    #region PARAMETROS

                    SqlParameter[] paramTransaccion = new SqlParameter[]
                        {
                            new SqlParameter("@piId_Calificacion_Empresa_Calificadora", entidad.IdCalificacionEmpresaCalificadora)
                        };

                    #endregion

                    #region KeyValuePair LIST

                    List<KeyValuePair<string, string>> itemConsulta = new List<KeyValuePair<string, string>>();
                    itemConsulta.Add(helper.CrearKeyValuePairItem("@piId_Calificacion_Empresa_Calificadora", entidad.IdCalificacionEmpresaCalificadora.ToString()));

                    #endregion

                    try
                    {

                        #region CONSULTAR DETALLE

                        rowsAffected = transaccionDA.TransaccionConsultaDetalle(conexion, conexionBitacora, "Calificaciones_Empresas_Calificadoras_Consulta_Detalle", paramTransaccion, EnumTipoBitacora.CONSULTAR, itemConsulta, "Calificaciones_Empresas_Calificadoras_Consulta_Detalle", _bitacora);
                        if (!rowsAffected.Equals(null))
                        {
                            retorno.IdCalificacionEmpresaCalificadora = int.Parse(rowsAffected.Tables[0].Rows[0][0].ToString());
                            retorno.IdEmpresaCalificadora = int.Parse(rowsAffected.Tables[0].Rows[0][1].ToString());
                            retorno.CodEmpresaCalificadora = rowsAffected.Tables[0].Rows[0][2].ToString();
                            retorno.DesEmpresaCalificadora = rowsAffected.Tables[0].Rows[0][3].ToString();
                            retorno.IdPlazoCalificacion = int.Parse(rowsAffected.Tables[0].Rows[0][4].ToString());
                            retorno.CodPlazoCalificacion = rowsAffected.Tables[0].Rows[0][5].ToString();
                            retorno.DesPlazoCalificacion = rowsAffected.Tables[0].Rows[0][6].ToString();
                            retorno.idCategoriaRiesgoEmpresaCalificadora = int.Parse(rowsAffected.Tables[0].Rows[0][7].ToString());
                            retorno.CodCategoriaRiesgoEmpresaCalificadora = rowsAffected.Tables[0].Rows[0][8].ToString();
                            retorno.Calificacion = rowsAffected.Tables[0].Rows[0][9].ToString();
                            retorno.IndMetodoInsercion = rowsAffected.Tables[0].Rows[0][10].ToString();
                            if (rowsAffected.Tables[0].Rows[0][11].ToString().Length > 0)
                                retorno.FechaIngreso = DateTime.Parse(rowsAffected.Tables[0].Rows[0][11].ToString());
                            else
                                retorno.FechaIngreso = null;
                            retorno.CodUsuarioIngreso = rowsAffected.Tables[0].Rows[0][12].ToString();
                            if (rowsAffected.Tables[0].Rows[0][13].ToString().Length > 0)
                                retorno.FechaUltimaModificacion = DateTime.Parse(rowsAffected.Tables[0].Rows[0][13].ToString());
                            else
                                retorno.FechaUltimaModificacion = null;
                            retorno.CodUsuarioUltimaModificacion = rowsAffected.Tables[0].Rows[0][14].ToString();
                            retorno.DesUsuarioIngreso = rowsAffected.Tables[0].Rows[0][15].ToString();
                            retorno.DesUsuarioUltimaModificacion = rowsAffected.Tables[0].Rows[0][16].ToString();
                        }
                        return retorno;
 
                        #endregion

                    }
                    catch (Exception)
                    {
                        throw;
                    }
                }
        
                public int CalificacionesEmpresasCalificadorasTotalFilas(String conexion, ParametrosTotalFilasEntidad entidad)
                {
                    int value;

                    #region PARAMETROS

                    SqlParameter[] paramTransaccion = new SqlParameter[]
                    {
                        new SqlParameter("@psValor_Filtro", entidad.ValorFiltro),
                        new SqlParameter("@psColumna_Filtro", entidad.ColumnaFiltro)
                    };

                    #endregion

                    try
                    {

                        #region TOTAL FILAS

                        value = transaccionDA.TransaccionRows(conexion, "Calificaciones_Empresas_Calificadoras_Total_Filas", paramTransaccion);

                        return value;

                        #endregion

                    }
                    catch (Exception)
                    {
                        throw;
                    }
                }
        
                public List<CalificacionesEmpresasCalificadorasEntidad> CalificacionesEmpresasCalificadorasConsultarGrid(String conexion, String parametro)
                {
                    List<CalificacionesEmpresasCalificadorasEntidad> retorno = new List<CalificacionesEmpresasCalificadorasEntidad>();
                    CalificacionesEmpresasCalificadorasEntidad elemento;
                    DataSet rowsAffected;

                    #region PARAMETROS

                    SqlParameter[] paramTransaccion = new SqlParameter[]
                    {
                       new SqlParameter("@psValores_Filtro", parametro)
                    };

                    #endregion

                    try
                    {

                        #region CONSULTAR

                        rowsAffected = transaccionDA.TransaccionConsulta(conexion, "Calificaciones_Empresas_Calificadoras_Consulta_Grid", paramTransaccion);
                        if (!rowsAffected.Equals(null))
                        {
                            foreach (DataRow dr in rowsAffected.Tables[0].Rows)
                            {
                                elemento = new CalificacionesEmpresasCalificadorasEntidad();
                                elemento.IdCalificacionEmpresaCalificadora = int.Parse(dr[0].ToString());
                                elemento.idCategoriaRiesgoEmpresaCalificadora = int.Parse(dr[1].ToString());
                                elemento.CodCategoriaRiesgoEmpresaCalificadora = dr[2].ToString();
                                elemento.Calificacion = dr[3].ToString();
                                elemento.Id_Visible = int.Parse(dr[4].ToString());

                                retorno.Add(elemento);
                            }
                        }
                        return retorno;

                        #endregion
                    }
                    catch (Exception)
                    {
                        throw;
                    }
                }
        
                public List<ListaEntidad> CalificacionesEmpresasCalificadorasCategoriaRiesgoLista(String conexion, String filtro)
                {
                    List<ListaEntidad> retorno = new List<ListaEntidad>();
                    ListaEntidad elemento;
                    DataSet rowsAffected;

                    #region PARAMETROS

                    SqlParameter[] paramTransaccion = new SqlParameter[]
                    {
                        new SqlParameter("@psFiltro", filtro)
                    };

                    #endregion

                    try
                    {

                        #region LISTA

                        rowsAffected = transaccionDA.TransaccionConsulta(conexion, "Calificaciones_Empresas_Calificadoras_Categoria_Riesgo_Lista", paramTransaccion);
                        if (!rowsAffected.Equals(null))
                        {
                            foreach (DataRow dr in rowsAffected.Tables[0].Rows)
                            {
                                elemento = new ListaEntidad();
                                elemento.Valor = dr[0].ToString();
                                elemento.Texto = dr[1].ToString();

                                retorno.Add(elemento);
                            }
                        }
                        return retorno;

                        #endregion

                    }
                    catch (Exception)
                    {
                        throw;
                    }
                }

                public List<ListaEntidad> CalificacionesEmpresasCalificadorasCalificacionLista(String conexion, String filtro, String filtro2)
                {
                    List<ListaEntidad> retorno = new List<ListaEntidad>();
                    ListaEntidad elemento;
                    DataSet rowsAffected;

                    #region PARAMETROS

                    SqlParameter[] paramTransaccion = new SqlParameter[]
                    {
                        new SqlParameter("@psId_Empresa_Calificadora", filtro),
                        new SqlParameter("@psId_Categoria_Riesgo_Empresa_Calificadora", filtro2)
                    };

                    #endregion

                    try
                    {

                        #region LISTA

                        rowsAffected = transaccionDA.TransaccionConsulta(conexion, "Calificaciones_Empresas_Calificadoras_Calificacion_Lista", paramTransaccion);
                        if (!rowsAffected.Equals(null))
                        {
                            foreach (DataRow dr in rowsAffected.Tables[0].Rows)
                            {
                                elemento = new ListaEntidad();
                                elemento.Valor = dr[0].ToString();
                                elemento.Texto = dr[1].ToString();

                                retorno.Add(elemento);
                            }
                        }
                        return retorno;

                        #endregion

                    }
                    catch (Exception)
                    {
                        throw;
                    }
                }

            #endregion 

            #region CANALIZACIONES ELECTRICAS
        
                public RespuestaEntidad CanalizacionesElectricasInsertar(String conexion, String conexionBitacora, CanalizacionesElectricasEntidad canalizacionElectrica, BitacorasEntidad _bitacora)
                {
                    RespuestaEntidad elemento = null;
                    DataSet rowsAffected;

                    #region PARAMETROS

                    SqlParameter[] paramTransaccion = new SqlParameter[]
                    {
                        new SqlParameter("@piCod_Canalizacion_Electrica", canalizacionElectrica.CodCanalizacionElectrica),
                        new SqlParameter("@psDes_Canalizacion_Electrica", canalizacionElectrica.DesCanalizacionElectrica),
                        new SqlParameter("@psInd_Metodo_Insercion", canalizacionElectrica.IndMetodoInsercion),
                        new SqlParameter("@psCod_Usuario", canalizacionElectrica.CodUsuarioIngreso)
                    };

                    #endregion

                    try
                    {

                        #region INSERTAR

                        rowsAffected = transaccionDA.TransaccionInsertar(conexion, conexionBitacora, "Canalizaciones_Electricas_Inserta", paramTransaccion, EnumTipoBitacora.INSERTAR, _bitacora);
                        if (!rowsAffected.Equals(null))
                        {
                            elemento = new RespuestaEntidad();
                            elemento.ValorEstado = int.Parse(rowsAffected.Tables[0].Rows[0][0].ToString());
                            elemento.ValorError = int.Parse(rowsAffected.Tables[0].Rows[0][1].ToString());
                        }

                        return elemento;

                        #endregion

                    }
                    catch (Exception)
                    {
                        throw;
                    }
                }
        
                public RespuestaEntidad CanalizacionesElectricasModificar(String conexion, String conexionBitacora, CanalizacionesElectricasEntidad canalizacionElectrica, BitacorasEntidad _bitacora)
                {
                    RespuestaEntidad elemento = null;
                    DataSet rowsAffected;

                    #region PARAMETROS

                    SqlParameter[] paramTransaccion = new SqlParameter[]
                    {
                        new SqlParameter("@piId_Canalizacion_Electrica", canalizacionElectrica.IdCanalizacionElectrica),
                        new SqlParameter("@piCod_Canalizacion_Electrica", canalizacionElectrica.CodCanalizacionElectrica),
                        new SqlParameter("@psDes_Canalizacion_Electrica", canalizacionElectrica.DesCanalizacionElectrica),
                        new SqlParameter("@psInd_Metodo_Insercion", canalizacionElectrica.IndMetodoInsercion),
                        new SqlParameter("@psCod_Usuario", canalizacionElectrica.CodUsuarioIngreso)
                    };

                    #endregion

                    #region KeyValuePair LIST

                    List<KeyValuePair<string, string>> itemConsulta = new List<KeyValuePair<string, string>>();
                    itemConsulta.Add(helper.CrearKeyValuePairItem("@piId_Canalizacion_Electrica", canalizacionElectrica.IdCanalizacionElectrica.ToString()));

                    #endregion

                    try
                    {

                        #region MODIFICAR

                        rowsAffected = transaccionDA.TransaccionModificar(conexion, conexionBitacora, "Canalizaciones_Electricas_Actualiza", paramTransaccion, EnumTipoBitacora.ACTUALIZAR, itemConsulta, "Canalizaciones_Electricas_Consulta_Detalle", _bitacora);
                        if (!rowsAffected.Equals(null))
                        {
                            elemento = new RespuestaEntidad();
                            elemento.ValorEstado = int.Parse(rowsAffected.Tables[0].Rows[0][0].ToString());
                            elemento.ValorError = int.Parse(rowsAffected.Tables[0].Rows[0][1].ToString());
                        }

                        return elemento;

                        #endregion

                    }
                    catch (Exception)
                    {
                        throw;
                    }
                }
        
                public RespuestaEntidad CanalizacionesElectricasEliminar(String conexion, String conexionBitacora, CanalizacionesElectricasEntidad canalizacionElectrica, BitacorasEntidad _bitacora)
                {
                    RespuestaEntidad elemento = null;
                    DataSet rowsAffected;

                    #region PARAMETROS

                    SqlParameter[] paramTransaccion = new SqlParameter[]
                    {
                        new SqlParameter("@piId_Canalizacion_Electrica", canalizacionElectrica.IdCanalizacionElectrica)
                    };

                    #endregion

                    #region KeyValuePair LIST

                    List<KeyValuePair<string, string>> itemConsulta = new List<KeyValuePair<string, string>>();
                    itemConsulta.Add(helper.CrearKeyValuePairItem("@piId_Canalizacion_Electrica", canalizacionElectrica.IdCanalizacionElectrica.ToString()));

                    #endregion

                    try
                    {

                        #region ELIMINAR

                        rowsAffected = transaccionDA.TransaccionEliminar(conexion, conexionBitacora, "Canalizaciones_Electricas_Elimina", paramTransaccion, EnumTipoBitacora.ELIMINAR, itemConsulta, "Canalizaciones_Electricas_Consulta_Detalle", _bitacora);
                        if (!rowsAffected.Equals(null))
                        {
                            elemento = new RespuestaEntidad();
                            elemento.ValorEstado = int.Parse(rowsAffected.Tables[0].Rows[0][0].ToString());
                            elemento.ValorError = int.Parse(rowsAffected.Tables[0].Rows[0][1].ToString());
                        }

                            return elemento;

                        #endregion

                    }
                    catch (Exception)
                    {
                        throw;
                    }
                }

                public List<CanalizacionesElectricasEntidad> CanalizacionesElectricasConsultar(String conexion, ParametrosConsultaEntidad entidad)
                {
                    List<CanalizacionesElectricasEntidad> retorno = new List<CanalizacionesElectricasEntidad>();
                    CanalizacionesElectricasEntidad elemento;
                    DataSet rowsAffected;

                    #region PARAMETROS

                    SqlParameter[] paramTransaccion = new SqlParameter[]
                    {
                        new SqlParameter("@piIndice_Inicio_Fila", entidad.IndiceInicioFila),
                        new SqlParameter("@piMaximo_Filas", entidad.MaximoFilas),
                        new SqlParameter("@psValores_Filtro", entidad.ValorFiltro),
                        new SqlParameter("@psColumnas_Filtros", entidad.ColumnaFiltro),
                        new SqlParameter("@psColumna_Ordenar", entidad.ColumnaOrdenar)
                    };

                    #endregion

                    try
                    {

                        #region CONSULTAR

                        rowsAffected = transaccionDA.TransaccionConsulta(conexion, "Canalizaciones_Electricas_Consulta", paramTransaccion);
                        if (!rowsAffected.Equals(null))
                        {
                            foreach (DataRow dr in rowsAffected.Tables[0].Rows)
                            {
                                elemento = new CanalizacionesElectricasEntidad();
                                elemento.IdCanalizacionElectrica = int.Parse(dr[0].ToString());
                                elemento.CodCanalizacionElectrica = int.Parse(dr[1].ToString());
                                elemento.DesCanalizacionElectrica = dr[2].ToString();

                                retorno.Add(elemento);
                            }
                        }

                        return retorno;

                        #endregion

                    }
                    catch (Exception)
                    {
                        throw;
                    }
                }
        
                public CanalizacionesElectricasEntidad CanalizacionesElectricasConsultarDetalle(String conexion, String conexionBitacora, CanalizacionesElectricasEntidad canalizacionElectrica, BitacorasEntidad _bitacora)
                {
                    CanalizacionesElectricasEntidad retorno = new CanalizacionesElectricasEntidad();
                    DataSet rowsAffected;

                    #region PARAMETROS

                    SqlParameter[] paramTransaccion = new SqlParameter[]
                    {
                        new SqlParameter("@piId_Canalizacion_Electrica", canalizacionElectrica.IdCanalizacionElectrica)
                    };

                    #endregion

                    #region KeyValuePair LIST

                    List<KeyValuePair<string, string>> itemConsulta = new List<KeyValuePair<string, string>>();
                    itemConsulta.Add(helper.CrearKeyValuePairItem("@piId_Canalizacion_Electrica", canalizacionElectrica.IdCanalizacionElectrica.ToString()));

                    #endregion

                    try
                    {

                        #region CONSULTAR DETALLE

                        rowsAffected = transaccionDA.TransaccionConsultaDetalle(conexion, conexionBitacora, "Canalizaciones_Electricas_Consulta_Detalle", paramTransaccion, EnumTipoBitacora.CONSULTAR, itemConsulta, "Canalizaciones_Electricas_Consulta_Detalle", _bitacora);
                        if (!rowsAffected.Equals(null))
                        {
                            retorno.IdCanalizacionElectrica = int.Parse(rowsAffected.Tables[0].Rows[0][0].ToString());
                            retorno.CodCanalizacionElectrica = int.Parse(rowsAffected.Tables[0].Rows[0][1].ToString());
                            retorno.DesCanalizacionElectrica = rowsAffected.Tables[0].Rows[0][2].ToString();
                            retorno.IndMetodoInsercion = rowsAffected.Tables[0].Rows[0][3].ToString();
                            if (rowsAffected.Tables[0].Rows[0][4].ToString().Length > 0)
                                retorno.FechaIngreso = DateTime.Parse(rowsAffected.Tables[0].Rows[0][4].ToString());
                            else
                                retorno.FechaIngreso = null;
                            retorno.CodUsuarioIngreso = rowsAffected.Tables[0].Rows[0][5].ToString();
                            if (rowsAffected.Tables[0].Rows[0][6].ToString().Length > 0)
                                retorno.FechaUltimaModificacion = DateTime.Parse(rowsAffected.Tables[0].Rows[0][6].ToString());
                            else
                                retorno.FechaUltimaModificacion = null;
                            retorno.CodUsuarioUltimaModificacion = rowsAffected.Tables[0].Rows[0][7].ToString();
                            retorno.DesUsuarioIngreso = rowsAffected.Tables[0].Rows[0][8].ToString();
                            retorno.DesUsuarioUltimaModificacion = rowsAffected.Tables[0].Rows[0][9].ToString();
                        }
                        return retorno;

                        #endregion

                    }
                    catch (Exception)
                    {
                        throw;
                    }
                }
        
                public int CanalizacionesElectricasTotalFilas(String conexion, ParametrosTotalFilasEntidad entidad)
                {

                    int value;

                    #region PARAMETROS

                    SqlParameter[] paramTransaccion = new SqlParameter[]
                    {
                        new SqlParameter("@psValor_Filtro", entidad.ValorFiltro),
                        new SqlParameter("@psColumna_Filtro", entidad.ColumnaFiltro)
                    };

                    #endregion

                    try
                    {

                        #region TOTAL FILAS

                            value = transaccionDA.TransaccionRows(conexion, "Canalizaciones_Electricas_Total_Filas", paramTransaccion);

                            return value;

                        #endregion

                    }
                    catch (Exception)
                    {
                        throw;
                    }
                }

            #endregion 

            #region CANOAS BAJANTES
        
                public RespuestaEntidad CanoasBajantesInsertar(String conexion, String conexionBitacora, CanoasBajantesEntidad canoaBajante, BitacorasEntidad _bitacora)
                {
                    RespuestaEntidad elemento = null;
                    DataSet rowsAffected;

                    #region PARAMETROS

                    SqlParameter[] paramTransaccion = new SqlParameter[]
                    {
                        new SqlParameter("@piCod_Canoa_Bajante", canoaBajante.CodCanoaBajante),
                        new SqlParameter("@psDes_Canoa_Bajante", canoaBajante.DesCanoaBajante),
                        new SqlParameter("@psInd_Metodo_Insercion", canoaBajante.IndMetodoInsercion),
                        new SqlParameter("@psCod_Usuario", canoaBajante.CodUsuarioIngreso)
                    };

                    #endregion

                    try
                    {

                        #region INSERTAR

                        rowsAffected = transaccionDA.TransaccionInsertar(conexion, conexionBitacora, "Canoas_Bajantes_Inserta", paramTransaccion, EnumTipoBitacora.INSERTAR, _bitacora);
                        if (!rowsAffected.Equals(null))
                        {
                            elemento = new RespuestaEntidad();
                            elemento.ValorEstado = int.Parse(rowsAffected.Tables[0].Rows[0][0].ToString());
                            elemento.ValorError = int.Parse(rowsAffected.Tables[0].Rows[0][1].ToString());
                        }

                        return elemento;

                        #endregion

                    }
                    catch (Exception)
                    {
                        throw;
                    }
                }
        
                public RespuestaEntidad CanoasBajantesModificar(String conexion, String conexionBitacora, CanoasBajantesEntidad canoaBajante, BitacorasEntidad _bitacora)
                {
                    RespuestaEntidad elemento = null;
                    DataSet rowsAffected;

                    #region PARAMETROS

                    SqlParameter[] paramTransaccion = new SqlParameter[]
                    {
                        new SqlParameter("@piId_Canoa_Bajante", canoaBajante.IdCanoaBajante),
                        new SqlParameter("@piCod_Canoa_Bajante", canoaBajante.CodCanoaBajante),
                        new SqlParameter("@psDes_Canoa_Bajante", canoaBajante.DesCanoaBajante),
                        new SqlParameter("@psInd_Metodo_Insercion", canoaBajante.IndMetodoInsercion),
                        new SqlParameter("@psCod_Usuario", canoaBajante.CodUsuarioIngreso)
                    };

                    #endregion

                    #region KeyValuePair LIST

                    List<KeyValuePair<string, string>> itemConsulta = new List<KeyValuePair<string, string>>();
                    itemConsulta.Add(helper.CrearKeyValuePairItem("@piId_Canoa_Bajante", canoaBajante.IdCanoaBajante.ToString()));

                    #endregion

                    try
                    {

                        #region MODIFICAR

                        rowsAffected = transaccionDA.TransaccionModificar(conexion, conexionBitacora, "Canoas_Bajantes_Actualiza", paramTransaccion, EnumTipoBitacora.ACTUALIZAR, itemConsulta, "Canoas_Bajantes_Consulta_Detalle", _bitacora);
                        if (!rowsAffected.Equals(null))
                        {
                            elemento = new RespuestaEntidad();
                            elemento.ValorEstado = int.Parse(rowsAffected.Tables[0].Rows[0][0].ToString());
                            elemento.ValorError = int.Parse(rowsAffected.Tables[0].Rows[0][1].ToString());
                        }
                        return elemento;

                        #endregion

                    }
                    catch (Exception)
                    {
                        throw;
                    }
                }
        
                public RespuestaEntidad CanoasBajantesEliminar(String conexion, String conexionBitacora, CanoasBajantesEntidad canoaBajante, BitacorasEntidad _bitacora)
                {
                    RespuestaEntidad elemento = null;
                    DataSet rowsAffected;

                    #region PARAMETROS

                    SqlParameter[] paramTransaccion = new SqlParameter[]
                    {
                        new SqlParameter("@piId_Canoa_Bajante", canoaBajante.IdCanoaBajante)
                    };

                    #endregion

                    #region KeyValuePair LIST

                    List<KeyValuePair<string, string>> itemConsulta = new List<KeyValuePair<string, string>>();
                    itemConsulta.Add(helper.CrearKeyValuePairItem("@piId_Canoa_Bajante", canoaBajante.IdCanoaBajante.ToString()));

                    #endregion

                    try
                    {

                        #region ELIMINAR

                        rowsAffected = transaccionDA.TransaccionEliminar(conexion, conexionBitacora, "Canoas_Bajantes_Elimina", paramTransaccion, EnumTipoBitacora.ELIMINAR, itemConsulta, "Canoas_Bajantes_Consulta_Detalle", _bitacora);
                        if (!rowsAffected.Equals(null))
                        {
                            elemento = new RespuestaEntidad();
                            elemento.ValorEstado = int.Parse(rowsAffected.Tables[0].Rows[0][0].ToString());
                            elemento.ValorError = int.Parse(rowsAffected.Tables[0].Rows[0][1].ToString());
                        }

                        return elemento;

                        #endregion

                    }
                    catch (Exception)
                    {
                        throw;
                    }
                }

                public List<CanoasBajantesEntidad> CanoasBajantesConsultar(String conexion, ParametrosConsultaEntidad entidad)
                {
                    List<CanoasBajantesEntidad> retorno = new List<CanoasBajantesEntidad>();
                    CanoasBajantesEntidad elemento;
                    DataSet rowsAffected;

                    #region PARAMETROS

                    SqlParameter[] paramTransaccion = new SqlParameter[]
                    {
                        new SqlParameter("@piIndice_Inicio_Fila", entidad.IndiceInicioFila),
                        new SqlParameter("@piMaximo_Filas", entidad.MaximoFilas),
                        new SqlParameter("@psValores_Filtro", entidad.ValorFiltro),
                        new SqlParameter("@psColumnas_Filtros", entidad.ColumnaFiltro),
                        new SqlParameter("@psColumna_Ordenar", entidad.ColumnaOrdenar)
                    };

                    #endregion

                    try
                    {

                        #region CONSULTAR

                            rowsAffected = transaccionDA.TransaccionConsulta(conexion, "Canoas_Bajantes_Consulta", paramTransaccion);
                            if (!rowsAffected.Equals(null))
                            {
                                foreach (DataRow dr in rowsAffected.Tables[0].Rows)
                                {
                                    elemento = new CanoasBajantesEntidad();
                                    elemento.IdCanoaBajante = int.Parse(dr[0].ToString());
                                    elemento.CodCanoaBajante = int.Parse(dr[1].ToString());
                                    elemento.DesCanoaBajante = dr[2].ToString();

                                    retorno.Add(elemento);
                                }
                            }

                            return retorno;

                        #endregion

                    }
                    catch (Exception)
                    {
                        throw;
                    }
                }
        
                public CanoasBajantesEntidad CanoasBajantesConsultarDetalle(String conexion, String conexionBitacora, CanoasBajantesEntidad canoaBajante, BitacorasEntidad _bitacora)
                {
                    CanoasBajantesEntidad retorno = new CanoasBajantesEntidad();
                    DataSet rowsAffected;

                    #region PARAMETROS

                    SqlParameter[] paramTransaccion = new SqlParameter[]
                    {
                        new SqlParameter("@piId_Canoa_Bajante", canoaBajante.IdCanoaBajante)
                    };

                    #endregion

                    #region KeyValuePair LIST

                    List<KeyValuePair<string, string>> itemConsulta = new List<KeyValuePair<string, string>>();
                    itemConsulta.Add(helper.CrearKeyValuePairItem("@piId_Canoa_Bajante", canoaBajante.IdCanoaBajante.ToString()));

                    #endregion

                    try
                    {

                        #region CONSULTAR DETALLE

                        rowsAffected = transaccionDA.TransaccionConsultaDetalle(conexion, conexionBitacora, "Canoas_Bajantes_Consulta_Detalle", paramTransaccion, EnumTipoBitacora.CONSULTAR, itemConsulta, "Canoas_Bajantes_Consulta_Detalle", _bitacora);
                        if (!rowsAffected.Equals(null))
                        {
                            retorno.IdCanoaBajante = int.Parse(rowsAffected.Tables[0].Rows[0][0].ToString());
                            retorno.CodCanoaBajante = int.Parse(rowsAffected.Tables[0].Rows[0][1].ToString());
                            retorno.DesCanoaBajante = rowsAffected.Tables[0].Rows[0][2].ToString();
                            retorno.IndMetodoInsercion = rowsAffected.Tables[0].Rows[0][3].ToString();
                            if (rowsAffected.Tables[0].Rows[0][4].ToString().Length > 0)
                                retorno.FechaIngreso = DateTime.Parse(rowsAffected.Tables[0].Rows[0][4].ToString());
                            else
                                retorno.FechaIngreso = null;
                            retorno.CodUsuarioIngreso = rowsAffected.Tables[0].Rows[0][5].ToString();
                            if (rowsAffected.Tables[0].Rows[0][6].ToString().Length > 0)
                                retorno.FechaUltimaModificacion = DateTime.Parse(rowsAffected.Tables[0].Rows[0][6].ToString());
                            else
                                retorno.FechaUltimaModificacion = null;
                            retorno.CodUsuarioUltimaModificacion = rowsAffected.Tables[0].Rows[0][7].ToString();
                            retorno.DesUsuarioIngreso = rowsAffected.Tables[0].Rows[0][8].ToString();
                            retorno.DesUsuarioUltimaModificacion = rowsAffected.Tables[0].Rows[0][9].ToString();
                        }
                        return retorno;

                        #endregion

                    }
                    catch (Exception)
                    {
                        throw;
                    }
                }
        
                public int CanoasBajantesTotalFilas(String conexion, ParametrosTotalFilasEntidad entidad)
                {

                    int value;

                    #region PARAMETROS

                    SqlParameter[] paramTransaccion = new SqlParameter[]
                    {
                        new SqlParameter("@psValor_Filtro", entidad.ValorFiltro),
                        new SqlParameter("@psColumna_Filtro", entidad.ColumnaFiltro)
                    };

                    #endregion

                    try
                    {

                        #region CONSULTAR Total Filas

                            value = transaccionDA.TransaccionRows(conexion, "Canoas_Bajantes_Total_Filas", paramTransaccion);

                            return value;

                        #endregion

                    }
                    catch (Exception)
                    {
                        throw;
                    }
                }

            #endregion 

            #region CANTIDADES FINCAS
        
                public RespuestaEntidad CantidadesFincasInsertar(String conexion, String conexionBitacora, CantidadesFincasEntidad cantidadFinca, BitacorasEntidad _bitacora)
                {
                    RespuestaEntidad elemento = null;
                    DataSet rowsAffected;

                    #region PARAMETROS

                    SqlParameter[] paramTransaccion = new SqlParameter[]
                    {
                        new SqlParameter("@piCantidad_Finca", cantidadFinca.CantidadFinca),
                        new SqlParameter("@psInd_Metodo_Insercion", cantidadFinca.IndMetodoInsercion),
                        new SqlParameter("@psCod_Usuario", cantidadFinca.CodUsuarioIngreso)
                    };

                    #endregion

                    try
                    {

                        #region INSERTAR

                        rowsAffected = transaccionDA.TransaccionInsertar(conexion, conexionBitacora, "Cantidades_Fincas_Inserta", paramTransaccion, EnumTipoBitacora.INSERTAR, _bitacora);
                        if (!rowsAffected.Equals(null))
                        {
                            elemento = new RespuestaEntidad();
                            elemento.ValorEstado = int.Parse(rowsAffected.Tables[0].Rows[0][0].ToString());
                            elemento.ValorError = int.Parse(rowsAffected.Tables[0].Rows[0][1].ToString());
                        }

                        return elemento;

                        #endregion

                    }
                    catch (Exception)
                    {
                        throw;
                    }
                }
        
                public RespuestaEntidad CantidadesFincasModificar(String conexion, String conexionBitacora, CantidadesFincasEntidad cantidadFinca, BitacorasEntidad _bitacora)
                {
                    RespuestaEntidad elemento = null;
                    DataSet rowsAffected;

                    #region PARAMETROS

                    SqlParameter[] paramTransaccion = new SqlParameter[]
                    {
                        new SqlParameter("@piId_Cantidad_Finca", cantidadFinca.IdCantidadFinca),
                        new SqlParameter("@piCantidad_Finca", cantidadFinca.CantidadFinca),
                        new SqlParameter("@psInd_Metodo_Insercion", cantidadFinca.IndMetodoInsercion),
                        new SqlParameter("@psCod_Usuario", cantidadFinca.CodUsuarioIngreso)
                    };

                    #endregion

                    #region KeyValuePair LIST

                    List<KeyValuePair<string, string>> itemConsulta = new List<KeyValuePair<string, string>>();
                    itemConsulta.Add(helper.CrearKeyValuePairItem("@piId_Cantidad_Finca", cantidadFinca.IdCantidadFinca.ToString()));

                    #endregion

                    try
                    {

                        #region MODIFICAR

                        rowsAffected = transaccionDA.TransaccionModificar(conexion, conexionBitacora, "Cantidades_Fincas_Actualiza", paramTransaccion, EnumTipoBitacora.ACTUALIZAR, itemConsulta, "Cantidades_Fincas_Consulta_Detalle", _bitacora);
                        if (!rowsAffected.Equals(null))
                        {
                            elemento = new RespuestaEntidad();
                            elemento.ValorEstado = int.Parse(rowsAffected.Tables[0].Rows[0][0].ToString());
                            elemento.ValorError = int.Parse(rowsAffected.Tables[0].Rows[0][1].ToString());
                        }
                        return elemento;

                        #endregion

                    }
                    catch (Exception)
                    {
                        throw;
                    }
                }
        
                public RespuestaEntidad CantidadesFincasEliminar(String conexion, String conexionBitacora, CantidadesFincasEntidad cantidadFinca, BitacorasEntidad _bitacora)
                {
                    RespuestaEntidad elemento = null;
                    DataSet rowsAffected;

                    #region PARAMETROS

                    SqlParameter[] paramTransaccion = new SqlParameter[]
                    {
                        new SqlParameter("@piId_Cantidad_Finca", cantidadFinca.IdCantidadFinca)
                    };

                    #endregion

                    #region KeyValuePair LIST

                    List<KeyValuePair<string, string>> itemConsulta = new List<KeyValuePair<string, string>>();
                    itemConsulta.Add(helper.CrearKeyValuePairItem("@piId_Cantidad_Finca", cantidadFinca.IdCantidadFinca.ToString()));

                    #endregion

                    try
                    {

                        #region ELIMINAR

                        rowsAffected = transaccionDA.TransaccionEliminar(conexion, conexionBitacora, "Cantidades_Fincas_Elimina", paramTransaccion, EnumTipoBitacora.ELIMINAR, itemConsulta, "Cantidades_Fincas_Consulta_Detalle", _bitacora);
                        if (!rowsAffected.Equals(null))
                        {
                            elemento = new RespuestaEntidad();
                            elemento.ValorEstado = int.Parse(rowsAffected.Tables[0].Rows[0][0].ToString());
                            elemento.ValorError = int.Parse(rowsAffected.Tables[0].Rows[0][1].ToString());
                        }

                        return elemento;

                        #endregion

                    }
                    catch (Exception)
                    {
                        throw;
                    }
                }

                public List<CantidadesFincasEntidad> CantidadesFincasConsultar(String conexion, ParametrosConsultaEntidad entidad)
                {
                    List<CantidadesFincasEntidad> retorno = new List<CantidadesFincasEntidad>();
                    CantidadesFincasEntidad elemento;
                    DataSet rowsAffected;

                    #region PARAMETROS

                    SqlParameter[] paramTransaccion = new SqlParameter[]
                    {
                        new SqlParameter("@piIndice_Inicio_Fila", entidad.IndiceInicioFila),
                        new SqlParameter("@piMaximo_Filas", entidad.MaximoFilas),
                        new SqlParameter("@psValores_Filtro", entidad.ValorFiltro),
                        new SqlParameter("@psColumnas_Filtros", entidad.ColumnaFiltro),
                        new SqlParameter("@psColumna_Ordenar", entidad.ColumnaOrdenar)
                    };

                    #endregion

                    try
                    {

                        #region CONSULTAR

                            rowsAffected = transaccionDA.TransaccionConsulta(conexion, "Cantidades_Fincas_Consulta", paramTransaccion);
                            if (!rowsAffected.Equals(null))
                            {
                                foreach (DataRow dr in rowsAffected.Tables[0].Rows)
                                {
                                    elemento = new CantidadesFincasEntidad();
                                    elemento.IdCantidadFinca = int.Parse(dr[0].ToString());
                                    elemento.CantidadFinca = int.Parse(dr[1].ToString());

                                    retorno.Add(elemento);
                                }
                            }

                            return retorno;

                        #endregion

                    }
                    catch (Exception)
                    {
                        throw;
                    }
                }
        
                public CantidadesFincasEntidad CantidadesFincasConsultarDetalle(String conexion, String conexionBitacora, CantidadesFincasEntidad cantidadFinca, BitacorasEntidad _bitacora)
                {
                    CantidadesFincasEntidad retorno = new CantidadesFincasEntidad();
                    DataSet rowsAffected;

                    #region PARAMETROS

                    SqlParameter[] paramTransaccion = new SqlParameter[]
                    {
                        new SqlParameter("@piId_Cantidad_Finca", cantidadFinca.IdCantidadFinca)
                    };

                    #endregion

                    #region KeyValuePair LIST

                    List<KeyValuePair<string, string>> itemConsulta = new List<KeyValuePair<string, string>>();
                    itemConsulta.Add(helper.CrearKeyValuePairItem("@piId_Cantidad_Finca", cantidadFinca.IdCantidadFinca.ToString()));

                    #endregion

                    try
                    {

                        #region CONSULTAR DETALLE

                        rowsAffected = transaccionDA.TransaccionConsultaDetalle(conexion, conexionBitacora, "Cantidades_Fincas_Consulta_Detalle", paramTransaccion, EnumTipoBitacora.CONSULTAR, itemConsulta, "Cantidades_Fincas_Consulta_Detalle", _bitacora);
                        if (!rowsAffected.Equals(null))
                        {
                            retorno.IdCantidadFinca = int.Parse(rowsAffected.Tables[0].Rows[0][0].ToString());
                            retorno.CantidadFinca = int.Parse(rowsAffected.Tables[0].Rows[0][1].ToString());
                            retorno.IndMetodoInsercion = rowsAffected.Tables[0].Rows[0][2].ToString();
                            if (rowsAffected.Tables[0].Rows[0][3].ToString().Length > 0)
                                retorno.FechaIngreso = DateTime.Parse(rowsAffected.Tables[0].Rows[0][3].ToString());
                            else
                                retorno.FechaIngreso = null;
                            retorno.CodUsuarioIngreso = rowsAffected.Tables[0].Rows[0][4].ToString();
                            if (rowsAffected.Tables[0].Rows[0][5].ToString().Length > 0)
                                retorno.FechaUltimaModificacion = DateTime.Parse(rowsAffected.Tables[0].Rows[0][5].ToString());
                            else
                                retorno.FechaUltimaModificacion = null;
                            retorno.CodUsuarioUltimaModificacion = rowsAffected.Tables[0].Rows[0][6].ToString();
                            retorno.DesUsuarioIngreso = rowsAffected.Tables[0].Rows[0][7].ToString();
                            retorno.DesUsuarioUltimaModificacion = rowsAffected.Tables[0].Rows[0][8].ToString();
                        }
                        return retorno;

                        #endregion

                    }
                    catch (Exception)
                    {
                        throw;
                    }
                }
        
                public int CantidadesFincasTotalFilas(String conexion, ParametrosTotalFilasEntidad entidad)
                {

                    int value;


                    #region PARAMETROS

                    SqlParameter[] paramTransaccion = new SqlParameter[]
                    {
                        new SqlParameter("@psValor_Filtro", entidad.ValorFiltro),
                        new SqlParameter("@psColumna_Filtro", entidad.ColumnaFiltro)
                    };

                    #endregion

                    try
                    {

                        #region TOTAL FILAS

                            value = transaccionDA.TransaccionRows(conexion, "Cantidades_Fincas_Total_Filas", paramTransaccion);

                            return value;

                        #endregion

                    }
                    catch (Exception)
                    {
                        throw;
                    }
                }

            #endregion 

            #region CANTONES
        
                public RespuestaEntidad CantonesInsertar(String conexion, String conexionBitacora, CantonesEntidad canton, BitacorasEntidad _bitacora)
                {
                    RespuestaEntidad elemento = null;
                    DataSet rowsAffected;

                    #region PARAMETROS

                    SqlParameter[] paramTransaccion = new SqlParameter[]
                    {
                        new SqlParameter("@piId_Provincia", canton.IdProvincia),
                        new SqlParameter("@piCod_Canton", canton.CodCanton),
                        new SqlParameter("@psDes_Canton", canton.DesCanton),
                        new SqlParameter("@psInd_Metodo_Insercion", canton.IndMetodoInsercion),
                        new SqlParameter("@psCod_Usuario", canton.CodUsuarioIngreso)
                    };

                    #endregion

                    try
                    {

                        #region INSERTAR

                        rowsAffected = transaccionDA.TransaccionInsertar(conexion, conexionBitacora, "Cantones_Inserta", paramTransaccion, EnumTipoBitacora.INSERTAR, _bitacora);
                        if (!rowsAffected.Equals(null))
                        {
                            elemento = new RespuestaEntidad();
                            elemento.ValorEstado = int.Parse(rowsAffected.Tables[0].Rows[0][0].ToString());
                            elemento.ValorError = int.Parse(rowsAffected.Tables[0].Rows[0][1].ToString());
                        }
                        return elemento;

                        #endregion

                    }
                    catch (Exception)
                    {
                        throw;
                    }
                }
        
                public RespuestaEntidad CantonesModificar(String conexion, String conexionBitacora, CantonesEntidad canton, BitacorasEntidad _bitacora)
                {
                    RespuestaEntidad elemento = null;
                    DataSet rowsAffected;

                    #region PARAMETROS

                    SqlParameter[] paramTransaccion = new SqlParameter[]
                    {
                        new SqlParameter("@piId_Canton", canton.IdCanton),
                        new SqlParameter("@piId_Provincia", canton.IdProvincia),
                        new SqlParameter("@piCod_Canton", canton.CodCanton),
                        new SqlParameter("@psDes_Canton", canton.DesCanton),
                        new SqlParameter("@psInd_Metodo_Insercion", canton.IndMetodoInsercion),
                        new SqlParameter("@psCod_Usuario", canton.CodUsuarioIngreso)
                        
                    };

                    #endregion

                    #region KeyValuePair LIST

                    List<KeyValuePair<string, string>> itemConsulta = new List<KeyValuePair<string, string>>();
                    itemConsulta.Add(helper.CrearKeyValuePairItem("@piId_Canton", canton.IdCanton.ToString()));

                    #endregion

                    try
                    {

                        #region MODIFICAR

                        rowsAffected = transaccionDA.TransaccionModificar(conexion, conexionBitacora, "Cantones_Actualiza", paramTransaccion, EnumTipoBitacora.ACTUALIZAR, itemConsulta, "Cantones_Consulta_Detalle", _bitacora);
                        if (!rowsAffected.Equals(null))
                        {
                            elemento = new RespuestaEntidad();
                            elemento.ValorEstado = int.Parse(rowsAffected.Tables[0].Rows[0][0].ToString());
                            elemento.ValorError = int.Parse(rowsAffected.Tables[0].Rows[0][1].ToString());
                        }

                        return elemento;

                        #endregion

                    }
                    catch (Exception)
                    {
                        throw;
                    }
                }
        
                public RespuestaEntidad CantonesEliminar(String conexion, String conexionBitacora, CantonesEntidad canton, BitacorasEntidad _bitacora)
                {
                    RespuestaEntidad elemento = null;
                    DataSet rowsAffected;

                    #region PARAMETROS

                    SqlParameter[] paramTransaccion = new SqlParameter[]
                    {
                        new SqlParameter("@piId_Canton", canton.IdCanton)
                    };

                    #endregion

                    #region KeyValuePair LIST

                    List<KeyValuePair<string, string>> itemConsulta = new List<KeyValuePair<string, string>>();
                    itemConsulta.Add(helper.CrearKeyValuePairItem("@piId_Canton", canton.IdCanton.ToString()));

                    #endregion

                    try
                    {

                        #region ELIMINAR

                        rowsAffected = transaccionDA.TransaccionEliminar(conexion, conexionBitacora, "Cantones_Elimina", paramTransaccion, EnumTipoBitacora.ELIMINAR, itemConsulta, "Cantones_Consulta_Detalle", _bitacora);
                        if (!rowsAffected.Equals(null))
                        {
                            elemento = new RespuestaEntidad();
                            elemento.ValorEstado = int.Parse(rowsAffected.Tables[0].Rows[0][0].ToString());
                            elemento.ValorError = int.Parse(rowsAffected.Tables[0].Rows[0][1].ToString());
                        }

                        return elemento;

                        #endregion

                    }
                    catch (Exception)
                    {
                        throw;
                    }
                }

                public List<CantonesEntidad> CantonesConsultar(String conexion, ParametrosConsultaEntidad entidad)
                {
                    List<CantonesEntidad> retorno = new List<CantonesEntidad>();
                    CantonesEntidad elemento;
                    DataSet rowsAffected;

                    #region PARAMETROS

                    SqlParameter[] paramTransaccion = new SqlParameter[]
                    {
                        new SqlParameter("@piIndice_Inicio_Fila", entidad.IndiceInicioFila),
                        new SqlParameter("@piMaximo_Filas", entidad.MaximoFilas),
                        new SqlParameter("@psValores_Filtro", entidad.ValorFiltro),
                        new SqlParameter("@psColumnas_Filtros", entidad.ColumnaFiltro),
                        new SqlParameter("@psColumna_Ordenar", entidad.ColumnaOrdenar)
                    };

                    #endregion

                    try
                    {

                        #region CONSULTAR

                            rowsAffected = transaccionDA.TransaccionConsulta(conexion, "Cantones_Consulta", paramTransaccion);
                            if (!rowsAffected.Equals(null))
                            {
                                foreach (DataRow dr in rowsAffected.Tables[0].Rows)
                                {
                                    elemento = new CantonesEntidad();
                                    elemento.IdCanton = int.Parse(dr[0].ToString());
                                    elemento.IdProvincia = int.Parse(dr[1].ToString());
                                    elemento.CodCanton = int.Parse(dr[2].ToString());
                                    elemento.CodProvincia = int.Parse(dr[3].ToString());
                                    elemento.DesCanton = dr[4].ToString();
                                    elemento.DesProvincia = dr[5].ToString();

                                    retorno.Add(elemento);
                                }
                            }

                            return retorno;

                        #endregion

                    }
                    catch (Exception)
                    {
                        throw;
                    }
                }
        
                public CantonesEntidad CantonesConsultarDetalle(String conexion, String conexionBitacora, CantonesEntidad canton, BitacorasEntidad _bitacora)
                {
                    CantonesEntidad retorno = new CantonesEntidad();
                    DataSet rowsAffected;

                    #region PARAMETROS

                    SqlParameter[] paramTransaccion = new SqlParameter[]
                    {
                        new SqlParameter("@piId_Canton", canton.IdCanton)
                    };

                    #endregion

                    #region KeyValuePair LIST

                    List<KeyValuePair<string, string>> itemConsulta = new List<KeyValuePair<string, string>>();
                    itemConsulta.Add(helper.CrearKeyValuePairItem("@piId_Canton", canton.IdCanton.ToString()));

                    #endregion

                    try
                    {

                        #region CONSULTAR DETALLE

                        rowsAffected = transaccionDA.TransaccionConsultaDetalle(conexion, conexionBitacora, "Cantones_Consulta_Detalle", paramTransaccion, EnumTipoBitacora.CONSULTAR, itemConsulta, "Cantones_Consulta_Detalle", _bitacora);
                        if (!rowsAffected.Equals(null))
                        {
                            retorno.IdCanton = int.Parse(rowsAffected.Tables[0].Rows[0][0].ToString());
                            retorno.IdProvincia = int.Parse(rowsAffected.Tables[0].Rows[0][1].ToString());
                            retorno.CodCanton = int.Parse(rowsAffected.Tables[0].Rows[0][2].ToString());
                            retorno.CodProvincia = int.Parse(rowsAffected.Tables[0].Rows[0][3].ToString());
                            retorno.DesCanton = rowsAffected.Tables[0].Rows[0][4].ToString();
                            retorno.DesProvincia = rowsAffected.Tables[0].Rows[0][5].ToString();
                            retorno.IndMetodoInsercion = rowsAffected.Tables[0].Rows[0][6].ToString();
                            if (rowsAffected.Tables[0].Rows[0][7].ToString().Length > 0)
                                retorno.FechaIngreso = DateTime.Parse(rowsAffected.Tables[0].Rows[0][7].ToString());
                            else
                                retorno.FechaIngreso = null;
                            retorno.CodUsuarioIngreso = rowsAffected.Tables[0].Rows[0][8].ToString();
                            if (rowsAffected.Tables[0].Rows[0][9].ToString().Length > 0)
                                retorno.FechaUltimaModificacion = DateTime.Parse(rowsAffected.Tables[0].Rows[0][9].ToString());
                            else
                                retorno.FechaUltimaModificacion = null;
                            retorno.CodUsuarioUltimaModificacion = rowsAffected.Tables[0].Rows[0][10].ToString();
                            retorno.DesUsuarioIngreso = rowsAffected.Tables[0].Rows[0][11].ToString();
                            retorno.DesUsuarioUltimaModificacion = rowsAffected.Tables[0].Rows[0][12].ToString();
                        }

                        return retorno;

                        #endregion

                    }
                    catch (Exception)
                    {
                        throw;
                    }
                }
        
                public int CantonesTotalFilas(String conexion, ParametrosTotalFilasEntidad entidad)
                {

                    int value;

                    #region PARAMETROS

                    SqlParameter[] paramTransaccion = new SqlParameter[]
                    {
                        new SqlParameter("@psValor_Filtro", entidad.ValorFiltro),
                        new SqlParameter("@psColumna_Filtro", entidad.ColumnaFiltro)
                    };

                    #endregion

                    try
                    {

                        #region Total Filas

                            value = transaccionDA.TransaccionRows(conexion, "Cantones_Total_Filas", paramTransaccion);

                            return value;

                        #endregion

                    }
                    catch (Exception)
                    {
                        throw;
                    }
                }
        
                public List<ListaEntidad> CantonesLista(String conexion, String filtro)
                {
                    List<ListaEntidad> retorno = new List<ListaEntidad>();
                    ListaEntidad elemento;
                    DataSet rowsAffected;

                    #region PARAMETROS

                    SqlParameter[] paramTransaccion = new SqlParameter[]
                    {
                        new SqlParameter("@psFiltro", filtro)
                    };

                    #endregion

                    #region KeyValuePair LIST

                    List<KeyValuePair<string, string>> itemConsulta = new List<KeyValuePair<string, string>>();
                    itemConsulta.Add(helper.CrearKeyValuePairItem("@psFiltro", filtro));

                    #endregion

                    try
                    {

                        #region CONSULTAR DETALLE

                        rowsAffected = transaccionDA.TransaccionConsulta(conexion, "Cantones_Lista", paramTransaccion);
                        if (!rowsAffected.Equals(null))
                        {
                            foreach (DataRow dr in rowsAffected.Tables[0].Rows)
                            {
                                elemento = new ListaEntidad();
                                elemento.Valor = dr[0].ToString();
                                elemento.Texto = dr[1].ToString();

                                retorno.Add(elemento);
                            }
                        }
                        return retorno;

                        #endregion

                    }
                    catch (Exception)
                    {
                        throw;
                    }
                }
        
            #endregion 
            
            //REQUERIMIENTO: 1-24105296
            #region CARACTERISTICAS TASADORES
        
                public RespuestaEntidad CaracteristicasTasadoresInsertar(String conexion, String conexionBitacora, CaracteristicasTasadoresEntidad entidad, BitacorasEntidad _bitacora)
                {
                    RespuestaEntidad elemento = null;
                    DataSet rowsAffected;

                    #region PARAMETROS

                    SqlParameter[] paramTransaccion = new SqlParameter[]
                    {
                        new SqlParameter("@psCod_Empresa_Tasadora", entidad.CodEmpresaTasadora),
                        new SqlParameter("@psDes_Empresa_Tasadora", entidad.DesEmpresaTasadora),
                        new SqlParameter("@piId_Tasador", entidad.IdTasador),
                        new SqlParameter("@piId_Tipo_Servicio", entidad.IdTipoServicio),
                        new SqlParameter("@piId_Tipo_Persona", entidad.IdTipoPersona),
                        new SqlParameter("@piId_Zona_Tasador", entidad.IdZonaTasador),
                        new SqlParameter("@psCod_Tipo_Caracteristica_Tasador", entidad.CodTipoCaracteristicaTasador),
                        new SqlParameter("@psInd_Metodo_Insercion", entidad.IndMetodoInsercion),
                        new SqlParameter("@psCod_Usuario", entidad.CodUsuarioIngreso)
                    };

                    #endregion

                    try
                    {

                        #region INSERTAR
                        
                        rowsAffected = transaccionDA.TransaccionInsertar(conexion, conexionBitacora, "Caracteristicas_Tasadores_Inserta", paramTransaccion, EnumTipoBitacora.INSERTAR, _bitacora);
                        if (!rowsAffected.Equals(null))
                        {
                            elemento = new RespuestaEntidad();
                            elemento.ValorEstado = int.Parse(rowsAffected.Tables[0].Rows[0][0].ToString());
                            elemento.ValorError = int.Parse(rowsAffected.Tables[0].Rows[0][1].ToString());
                        }

                        return elemento;

                        #endregion

                    }
                    catch (Exception)
                    {
                        throw;
                    }
                }
        
                public RespuestaEntidad CaracteristicasTasadoresModificar(String conexion, String conexionBitacora, CaracteristicasTasadoresEntidad entidad, BitacorasEntidad _bitacora)
                {
                    RespuestaEntidad elemento = null;
                    DataSet rowsAffected;

                    #region PARAMETROS

                    SqlParameter[] paramTransaccion = new SqlParameter[]
                    {
                        new SqlParameter("@piId_Caracteristica_Tasador", entidad.IdCaracteristicaTasador),
                        new SqlParameter("@psCod_Empresa_Tasadora", entidad.CodEmpresaTasadora),
                        new SqlParameter("@psDes_Empresa_Tasadora", entidad.DesEmpresaTasadora),
                        new SqlParameter("@piId_Tasador", entidad.IdTasador),
                        new SqlParameter("@piId_Tipo_Servicio", entidad.IdTipoServicio),
                        new SqlParameter("@piId_Zona_Tasador", entidad.IdZonaTasador),
                        new SqlParameter("@psCod_Tipo_Caracteristica_Tasador", entidad.CodTipoCaracteristicaTasador),
                        new SqlParameter("@psInd_Metodo_Insercion", entidad.IndMetodoInsercion),
                        new SqlParameter("@psCod_Usuario", entidad.CodUsuarioIngreso)
                    };

                    #endregion

                    #region KeyValuePair LIST

                    List<KeyValuePair<string, string>> itemConsulta = new List<KeyValuePair<string, string>>();
                    itemConsulta.Add(helper.CrearKeyValuePairItem("@piId_Caracteristica_Tasador", entidad.IdCaracteristicaTasador.ToString()));

                    #endregion

                    try
                    {

                        #region MODIFICAR

                        rowsAffected = transaccionDA.TransaccionModificar(conexion, conexionBitacora, "Caracteristicas_Tasadores_Actualiza", paramTransaccion, EnumTipoBitacora.ACTUALIZAR, itemConsulta, "Caracteristicas_Tasadores_Detalle", _bitacora);
                        if (!rowsAffected.Equals(null))
                        {
                            elemento = new RespuestaEntidad();
                            elemento.ValorEstado = int.Parse(rowsAffected.Tables[0].Rows[0][0].ToString());
                            elemento.ValorError = int.Parse(rowsAffected.Tables[0].Rows[0][1].ToString());
                        }

                        return elemento;

                        #endregion

                    }
                    catch (Exception)
                    {
                        throw;
                    }
                }
        
                public RespuestaEntidad CaracteristicasTasadoresEliminar(String conexion, String conexionBitacora, CaracteristicasTasadoresEntidad entidad, BitacorasEntidad _bitacora)
                {
                    RespuestaEntidad elemento = null;
                    DataSet rowsAffected;

                    #region PARAMETROS

                    SqlParameter[] paramTransaccion = new SqlParameter[]
                    {
                        new SqlParameter("@piId_Caracteristica_Tasador", entidad.IdCaracteristicaTasador)
                    };

                    #endregion

                    #region KeyValuePair LIST

                    List<KeyValuePair<string, string>> itemConsulta = new List<KeyValuePair<string, string>>();
                    itemConsulta.Add(helper.CrearKeyValuePairItem("@piId_Caracteristica_Tasador", entidad.IdCaracteristicaTasador.ToString()));

                    #endregion

                    try
                    {

                        #region ELIMINAR

                        rowsAffected = transaccionDA.TransaccionEliminar(conexion, conexionBitacora, "Caracteristicas_Tasadores_Elimina", paramTransaccion, EnumTipoBitacora.ELIMINAR, itemConsulta, "Caracteristicas_Tasadores_Consulta_Detalle", _bitacora);
                        if (!rowsAffected.Equals(null))
                        {
                            elemento = new RespuestaEntidad();
                            elemento.ValorEstado = int.Parse(rowsAffected.Tables[0].Rows[0][0].ToString());
                            elemento.ValorError = int.Parse(rowsAffected.Tables[0].Rows[0][1].ToString());
                        }

                        return elemento;

                        #endregion

                    }
                    catch (Exception)
                    {
                        throw;
                    }
                }
        
                public List<CaracteristicasTasadoresEntidad> CaracteristicasTasadoresConsultar(String conexion, ParametrosConsultaEntidad entidad)
                {
                    List<CaracteristicasTasadoresEntidad> retorno = new List<CaracteristicasTasadoresEntidad>();
                    CaracteristicasTasadoresEntidad elemento;
                    DataSet rowsAffected;

                    #region PARAMETROS

                    SqlParameter[] paramTransaccion = new SqlParameter[]
                    {
                       new SqlParameter("@piIndice_Inicio_Fila", entidad.IndiceInicioFila),
                       new SqlParameter("@piMaximo_Filas", entidad.MaximoFilas),
                       new SqlParameter("@psValores_Filtro", entidad.ValorFiltro),
                       new SqlParameter("@psColumnas_Filtros", entidad.ColumnaFiltro),
                       new SqlParameter("@psColumna_Ordenar", entidad.ColumnaOrdenar)
                    };

                    #endregion

                    try
                    {

                        #region CONSULTAR

                        rowsAffected = transaccionDA.TransaccionConsulta(conexion, "Caracteristicas_Tasadores_Consulta", paramTransaccion);
                        if (!rowsAffected.Equals(null))
                        {
                            foreach (DataRow dr in rowsAffected.Tables[0].Rows)
                            {
                                elemento = new CaracteristicasTasadoresEntidad();
                                elemento.IdCaracteristicaTasador = int.Parse(dr[0].ToString());
                                elemento.CodEmpresaTasadora = dr[1].ToString();
                                elemento.DesEmpresaTasadora = dr[2].ToString();
                                elemento.IdTipoPersona = int.Parse(dr[3].ToString());
                                elemento.DesTipoPersona = dr[4].ToString();
                                elemento.IdTasador = int.Parse(dr[5].ToString());
                                elemento.CodTasador = dr[6].ToString();
                                elemento.DesNombreTasador = dr[7].ToString();
                                elemento.IdTipoPersonaTasador = int.Parse(dr[8].ToString());
                                elemento.DesTipoPersonaTasador = dr[9].ToString();
                                elemento.IdTipoServicio = int.Parse(dr[10].ToString());
                                elemento.DesTipoServicio = dr[11].ToString();
                                elemento.IdZonaTasador = int.Parse(dr[12].ToString());
                                elemento.DesZonaTasador = dr[13].ToString();
                                elemento.CodTipoCaracteristicaTasador = dr[14].ToString();

                                retorno.Add(elemento);
                            }

                        }
                        return retorno;

                        #endregion

                    }
                    catch (Exception)
                    {
                        throw;
                    }
                }
        
                public CaracteristicasTasadoresEntidad CaracteristicasTasadoresConsultarDetalle(String conexion, String conexionBitacora, CaracteristicasTasadoresEntidad entidad, BitacorasEntidad _bitacora)
                {
                    CaracteristicasTasadoresEntidad retorno = new CaracteristicasTasadoresEntidad();
                    DataSet rowsAffected;

                    #region PARAMETROS

                    SqlParameter[] paramTransaccion = new SqlParameter[]
                        {
                            new SqlParameter("@piId_Caracteristica_Tasador", entidad.IdCaracteristicaTasador)
                        };

                    #endregion

                    #region KeyValuePair LIST

                    List<KeyValuePair<string, string>> itemConsulta = new List<KeyValuePair<string, string>>();
                    itemConsulta.Add(helper.CrearKeyValuePairItem("@piId_Caracteristica_Tasador", entidad.IdCaracteristicaTasador.ToString()));

                    #endregion

                    try
                    {

                        #region CONSULTAR DETALLE

                        rowsAffected = transaccionDA.TransaccionConsultaDetalle(conexion, conexionBitacora, "Caracteristicas_Tasadores_Consulta_Detalle", paramTransaccion, EnumTipoBitacora.CONSULTAR, itemConsulta, "Caracteristicas_Tasadores_Consulta_Detalle", _bitacora);
                        if (!rowsAffected.Equals(null))
                        {
                            retorno.IdCaracteristicaTasador = int.Parse(rowsAffected.Tables[0].Rows[0][0].ToString());
                            retorno.CodEmpresaTasadora = rowsAffected.Tables[0].Rows[0][1].ToString();
                            retorno.CodTasador = rowsAffected.Tables[0].Rows[0][2].ToString();
                            retorno.DesNombreTasador = rowsAffected.Tables[0].Rows[0][3].ToString();
                            retorno.IdTipoPersona = int.Parse(rowsAffected.Tables[0].Rows[0][4].ToString());
                            retorno.DesTipoPersona = rowsAffected.Tables[0].Rows[0][5].ToString();
                            retorno.IdTasador = int.Parse(rowsAffected.Tables[0].Rows[0][6].ToString());
                            retorno.CodTasador = rowsAffected.Tables[0].Rows[0][7].ToString();
                            retorno.DesNombreTasador = rowsAffected.Tables[0].Rows[0][8].ToString();
                            retorno.IdTipoPersonaTasador = int.Parse(rowsAffected.Tables[0].Rows[0][9].ToString());
                            retorno.DesTipoPersonaTasador = rowsAffected.Tables[0].Rows[0][10].ToString();
                            retorno.IdTipoServicio = int.Parse(rowsAffected.Tables[0].Rows[0][11].ToString());
                            retorno.DesTipoServicio = rowsAffected.Tables[0].Rows[0][12].ToString();
                            retorno.IdZonaTasador = int.Parse(rowsAffected.Tables[0].Rows[0][13].ToString());
                            retorno.DesZonaTasador = rowsAffected.Tables[0].Rows[0][14].ToString();
                            retorno.CodTipoCaracteristicaTasador = rowsAffected.Tables[0].Rows[0][15].ToString();
                            retorno.IndMetodoInsercion = rowsAffected.Tables[0].Rows[0][16].ToString();
                            if (rowsAffected.Tables[0].Rows[0][17].ToString().Length > 0)
                                retorno.FechaIngreso = DateTime.Parse(rowsAffected.Tables[0].Rows[0][17].ToString());
                            else
                                retorno.FechaIngreso = null;
                            retorno.CodUsuarioIngreso = rowsAffected.Tables[0].Rows[0][18].ToString();
                            if (rowsAffected.Tables[0].Rows[0][19].ToString().Length > 0)
                                retorno.FechaUltimaModificacion = DateTime.Parse(rowsAffected.Tables[0].Rows[0][19].ToString());
                            else
                                retorno.FechaUltimaModificacion = null;
                            retorno.CodUsuarioUltimaModificacion = rowsAffected.Tables[0].Rows[0][20].ToString();
                            retorno.DesUsuarioIngreso = rowsAffected.Tables[0].Rows[0][21].ToString();
                            retorno.DesUsuarioUltimaModificacion = rowsAffected.Tables[0].Rows[0][22].ToString();
                        }
                        return retorno;                        
                        #endregion

                    }
                    catch (Exception)
                    {
                        throw;
                    }
                }
        
                public int CaracteristicasTasadoresTotalFilas(String conexion, ParametrosTotalFilasEntidad entidad)
                {
                    int value;

                    #region PARAMETROS

                    SqlParameter[] paramTransaccion = new SqlParameter[]
                    {
                        new SqlParameter("@psValor_Filtro", entidad.ValorFiltro),
                        new SqlParameter("@psColumna_Filtro", entidad.ColumnaFiltro)
                    };

                    #endregion

                    try
                    {

                        #region TOTAL FILAS

                        value = transaccionDA.TransaccionRows(conexion, "Caracteristicas_Tasadores_Total_Filas", paramTransaccion);

                        return value;

                        #endregion

                    }
                    catch (Exception)
                    {
                        throw;
                    }
                }
        
                public List<CaracteristicasTasadoresEntidad> CaracteristicasTasadoresConsultarGrid(String conexion, String parametro)
                {
                    List<CaracteristicasTasadoresEntidad> retorno = new List<CaracteristicasTasadoresEntidad>();
                    CaracteristicasTasadoresEntidad elemento;
                    DataSet rowsAffected;

                    #region PARAMETROS

                    SqlParameter[] paramTransaccion = new SqlParameter[]
                    {
                       new SqlParameter("@psValores_Filtro", parametro)
                    };

                    #endregion

                    try
                    {

                        #region CONSULTAR

                        rowsAffected = transaccionDA.TransaccionConsulta(conexion, "Caracteristicas_Tasadores_Consulta_Grid", paramTransaccion);
                        if (!rowsAffected.Equals(null))
                        {
                            foreach (DataRow dr in rowsAffected.Tables[0].Rows)
                            {
                                elemento = new CaracteristicasTasadoresEntidad();
                                elemento.IdCaracteristicaTasador = int.Parse(dr[0].ToString());
                                elemento.CodEmpresaTasadora = dr[1].ToString();
                                elemento.DesEmpresaTasadora = dr[2].ToString();
                                elemento.IdTipoServicio = int.Parse(dr[3].ToString());
                                elemento.DesTipoServicio = dr[4].ToString();
                                elemento.IdTipoPersona = int.Parse(dr[5].ToString());
                                elemento.IdZonaTasador = int.Parse(dr[6].ToString());
                                elemento.DesZonaTasador = dr[7].ToString();
                                elemento.Id_Visible = int.Parse(dr[8].ToString());

                                retorno.Add(elemento);
                            }
                        }
                        return retorno;

                        #endregion

                    }
                    catch (Exception)
                    {
                        throw;
                    }
                }
        
                public List<CaracteristicasTasadoresEntidad> CaracteristicasTasadoresConsultarGridInterno(String conexion, String parametro)
                {
                    List<CaracteristicasTasadoresEntidad> retorno = new List<CaracteristicasTasadoresEntidad>();
                    CaracteristicasTasadoresEntidad elemento;
                    DataSet rowsAffected;

                    #region PARAMETROS

                    SqlParameter[] paramTransaccion = new SqlParameter[]
                    {
                       new SqlParameter("@psValores_Filtro", parametro)
                    };

                    #endregion

                    try
                    {

                        #region CONSULTAR

                        rowsAffected = transaccionDA.TransaccionConsulta(conexion, "Caracteristicas_Tasadores_Consulta_Grid_Interno", paramTransaccion);
                        if (!rowsAffected.Equals(null))
                        {
                            foreach (DataRow dr in rowsAffected.Tables[0].Rows)
                            {
                                elemento = new CaracteristicasTasadoresEntidad();
                                elemento.IdCaracteristicaTasador = int.Parse(dr[0].ToString());
                                elemento.IdTipoServicio = int.Parse(dr[1].ToString());
                                elemento.DesTipoServicio = dr[2].ToString();
                                elemento.IdTipoPersona = int.Parse(dr[3].ToString());
                                elemento.IdZonaTasador = int.Parse(dr[4].ToString());
                                elemento.DesZonaTasador = dr[5].ToString();
                                elemento.Id_Visible = int.Parse(dr[6].ToString());

                                retorno.Add(elemento);
                            }
                        }

                        return retorno;

                        #endregion

                    }
                    catch (Exception)
                    {
                        throw;
                    }
                }
        
            #endregion 
        
            #region CATEGORIAS CALIFICACIONES
        
                public RespuestaEntidad CategoriasCalificacionesInsertar(String conexion, String conexionBitacora, CategoriasCalificacionesEntidad categoriaCalificacion, BitacorasEntidad _bitacora)
                {
                    RespuestaEntidad elemento = null;
                    DataSet rowsAffected;

                    #region PARAMETROS

                    SqlParameter[] paramTransaccion = new SqlParameter[]
                    {
                        new SqlParameter("@piCod_Categoria_Calificacion", categoriaCalificacion.CodCategoriaCalificacion),
                        new SqlParameter("@psDes_Categoria_Calificacion", categoriaCalificacion.DesCategoriaCalificacion),
                        new SqlParameter("@psInd_Metodo_Insercion", categoriaCalificacion.IndMetodoInsercion),
                        new SqlParameter("@psCod_Usuario", categoriaCalificacion.CodUsuarioIngreso)
                    };

                    #endregion

                    try
                    {

                        #region INSERTAR

                        rowsAffected = transaccionDA.TransaccionInsertar(conexion, conexionBitacora, "Categorias_Calificaciones_Inserta", paramTransaccion, EnumTipoBitacora.INSERTAR, _bitacora);
                        if (!rowsAffected.Equals(null))
                        {
                            elemento = new RespuestaEntidad();
                            elemento.ValorEstado = int.Parse(rowsAffected.Tables[0].Rows[0][0].ToString());
                            elemento.ValorError = int.Parse(rowsAffected.Tables[0].Rows[0][1].ToString());
                        }

                        return elemento;

                        #endregion

                    }
                    catch (Exception)
                    {
                        throw;
                    }
                }
        
                public RespuestaEntidad CategoriasCalificacionesModificar(String conexion, String conexionBitacora, CategoriasCalificacionesEntidad categoriaCalificacion, BitacorasEntidad _bitacora)
                {
                    RespuestaEntidad elemento = null;
                    DataSet rowsAffected;

                    #region PARAMETROS

                    SqlParameter[] paramTransaccion = new SqlParameter[]
                    {
                        new SqlParameter("@piId_Categoria_Calificacion", categoriaCalificacion.IdCategoriaCalificacion),
                        new SqlParameter("@piCod_Categoria_Calificacion", categoriaCalificacion.CodCategoriaCalificacion),
                        new SqlParameter("@psDes_Categoria_Calificacion", categoriaCalificacion.DesCategoriaCalificacion) ,
                        new SqlParameter("@psInd_Metodo_Insercion", categoriaCalificacion.IndMetodoInsercion),
                        new SqlParameter("@psCod_Usuario", categoriaCalificacion.CodUsuarioIngreso)                       
                    };

                    #endregion

                    #region KeyValuePair LIST

                    List<KeyValuePair<string, string>> itemConsulta = new List<KeyValuePair<string, string>>();
                    itemConsulta.Add(helper.CrearKeyValuePairItem("@piId_Categoria_Calificacion", categoriaCalificacion.IdCategoriaCalificacion.ToString()));

                    #endregion

                    try
                    {

                        #region MODIFICAR

                        rowsAffected = transaccionDA.TransaccionModificar(conexion, conexionBitacora, "Categorias_Calificaciones_Actualiza", paramTransaccion, EnumTipoBitacora.ACTUALIZAR, itemConsulta, "Categorias_Calificaciones_Consulta_Detalle", _bitacora);
                        if (!rowsAffected.Equals(null))
                        {
                            elemento = new RespuestaEntidad();
                            elemento.ValorEstado = int.Parse(rowsAffected.Tables[0].Rows[0][0].ToString());
                            elemento.ValorError = int.Parse(rowsAffected.Tables[0].Rows[0][1].ToString());
                        }

                        return elemento;

                        #endregion

                    }
                    catch (Exception)
                    {
                        throw;
                    }
                }
        
                public RespuestaEntidad CategoriasCalificacionesEliminar(String conexion, String conexionBitacora, CategoriasCalificacionesEntidad categoriaCalificacion, BitacorasEntidad _bitacora)
                {
                    RespuestaEntidad elemento = null;
                    DataSet rowsAffected;

                    #region PARAMETROS

                    SqlParameter[] paramTransaccion = new SqlParameter[]
                    {
                        new SqlParameter("@piId_Categoria_Calificacion", categoriaCalificacion.IdCategoriaCalificacion)                         
                    };

                    #endregion

                    #region KeyValuePair LIST

                    List<KeyValuePair<string, string>> itemConsulta = new List<KeyValuePair<string, string>>();
                    itemConsulta.Add(helper.CrearKeyValuePairItem("@piId_Categoria_Calificacion", categoriaCalificacion.IdCategoriaCalificacion.ToString()));

                    #endregion

                    try
                    {

                        #region ELIMINAR

                        rowsAffected = transaccionDA.TransaccionEliminar(conexion, conexionBitacora, "Categorias_Calificaciones_Elimina", paramTransaccion, EnumTipoBitacora.ELIMINAR, itemConsulta, "Categorias_Calificaciones_Consulta_Detalle", _bitacora);
                        if (!rowsAffected.Equals(null))
                        {
                            elemento = new RespuestaEntidad();
                            elemento.ValorEstado = int.Parse(rowsAffected.Tables[0].Rows[0][0].ToString());
                            elemento.ValorError = int.Parse(rowsAffected.Tables[0].Rows[0][1].ToString());
                        }

                        return elemento;

                        #endregion

                    }
                    catch (Exception)
                    {
                        throw;
                    }
                }

                public List<CategoriasCalificacionesEntidad> CategoriasCalificacionesConsultar(String conexion, ParametrosConsultaEntidad entidad)
                {
                    List<CategoriasCalificacionesEntidad> retorno = new List<CategoriasCalificacionesEntidad>();
                    CategoriasCalificacionesEntidad elemento;
                    DataSet rowsAffected;

                    #region PARAMETROS

                    SqlParameter[] paramTransaccion = new SqlParameter[]
                    {
                       new SqlParameter("@piIndice_Inicio_Fila", entidad.IndiceInicioFila),
                       new SqlParameter("@piMaximo_Filas", entidad.MaximoFilas),
                       new SqlParameter("@psValores_Filtro", entidad.ValorFiltro),
                       new SqlParameter("@psColumnas_Filtros", entidad.ColumnaFiltro),
                       new SqlParameter("@psColumna_Ordenar", entidad.ColumnaOrdenar)
                    };

                    #endregion

                    try
                    {

                        #region CONSULTAR

                            rowsAffected = transaccionDA.TransaccionConsulta(conexion, "Categorias_Calificaciones_Consulta", paramTransaccion);
                            if (!rowsAffected.Equals(null))
                            {
                                foreach (DataRow dr in rowsAffected.Tables[0].Rows)
                                {
                                    elemento = new CategoriasCalificacionesEntidad();
                                    elemento.IdCategoriaCalificacion = int.Parse(dr[0].ToString());
                                    elemento.CodCategoriaCalificacion = int.Parse(dr[1].ToString());
                                    elemento.DesCategoriaCalificacion = dr[2].ToString();

                                    retorno.Add(elemento);
                                }
                            }

                            return retorno;

                        #endregion

                    }
                    catch (Exception)
                    {
                        throw;
                    }
                }
       
                public CategoriasCalificacionesEntidad CategoriasCalificacionesConsultarDetalle(String conexion, String conexionBitacora, CategoriasCalificacionesEntidad categoriaCalificacion, BitacorasEntidad _bitacora)
                {
                    CategoriasCalificacionesEntidad retorno = new CategoriasCalificacionesEntidad();
                    DataSet rowsAffected;

                    #region PARAMETROS

                    SqlParameter[] paramTransaccion = new SqlParameter[]
                    {
                        new SqlParameter("@piId_Categoria_Calificacion", categoriaCalificacion.IdCategoriaCalificacion)
                    };

                    #endregion

                    #region KeyValuePair LIST

                    List<KeyValuePair<string, string>> itemConsulta = new List<KeyValuePair<string, string>>();
                    itemConsulta.Add(helper.CrearKeyValuePairItem("@piId_Categoria_Calificacion", categoriaCalificacion.IdCategoriaCalificacion.ToString()));

                    #endregion

                    try
                    {

                        #region CONSULTAR DETALLE

                            rowsAffected = transaccionDA.TransaccionConsultaDetalle(conexion, conexionBitacora, "Categorias_Calificaciones_Consulta_Detalle", paramTransaccion, EnumTipoBitacora.CONSULTAR, itemConsulta, "Categorias_Calificaciones_Consulta_Detalle", _bitacora);
                            if (!rowsAffected.Equals(null))
                            {
                                retorno.IdCategoriaCalificacion = int.Parse(rowsAffected.Tables[0].Rows[0][0].ToString());
                                retorno.CodCategoriaCalificacion = int.Parse(rowsAffected.Tables[0].Rows[0][1].ToString());
                                retorno.DesCategoriaCalificacion = rowsAffected.Tables[0].Rows[0][2].ToString();
                                retorno.IndMetodoInsercion = rowsAffected.Tables[0].Rows[0][3].ToString();
                                if (rowsAffected.Tables[0].Rows[0][4].ToString().Length > 0)
                                    retorno.FechaIngreso = DateTime.Parse(rowsAffected.Tables[0].Rows[0][4].ToString());
                                else
                                    retorno.FechaIngreso = null;
                                retorno.CodUsuarioIngreso = rowsAffected.Tables[0].Rows[0][5].ToString();
                                if (rowsAffected.Tables[0].Rows[0][6].ToString().Length > 0)
                                    retorno.FechaUltimaModificacion = DateTime.Parse(rowsAffected.Tables[0].Rows[0][6].ToString());
                                else
                                    retorno.FechaUltimaModificacion = null;
                                retorno.CodUsuarioUltimaModificacion = rowsAffected.Tables[0].Rows[0][7].ToString();
                                retorno.DesUsuarioIngreso = rowsAffected.Tables[0].Rows[0][8].ToString();
                                retorno.DesUsuarioUltimaModificacion = rowsAffected.Tables[0].Rows[0][9].ToString();
                            }

                            return retorno;

                        #endregion

                    }
                    catch (Exception)
                    {
                        throw;
                    }
                }
        
                public int CategoriasCalificacionesTotalFilas(String conexion, ParametrosTotalFilasEntidad entidad)
                {

                    int value;

                    #region PARAMETROS

                    SqlParameter[] paramTransaccion = new SqlParameter[]
                    {
                        new SqlParameter("@psValor_Filtro", entidad.ValorFiltro),
                        new SqlParameter("@psColumna_Filtro", entidad.ColumnaFiltro)
                    };

                    #endregion

                    try
                    {

                        #region TOTAL FILAS

                            value = transaccionDA.TransaccionRows(conexion, "Categorias_Calificaciones_Total_Filas", paramTransaccion);

                            return value;

                        #endregion

                    }
                    catch (Exception)
                    {
                        throw;
                    }
                }

                public List<ListaEntidad> CategoriasCalificacionesLista(String conexion, String filtro)
                {
                    List<ListaEntidad> retorno = new List<ListaEntidad>();
                    ListaEntidad elemento;
                    DataSet rowsAffected;

                    #region PARAMETROS

                    SqlParameter[] paramTransaccion = new SqlParameter[]
                    {
                        new SqlParameter("@psFiltro", filtro)
                    };

                    #endregion

                    #region KeyValuePair LIST

                    List<KeyValuePair<string, string>> itemConsulta = new List<KeyValuePair<string, string>>();
                    itemConsulta.Add(helper.CrearKeyValuePairItem("@psFiltro", filtro));

                    #endregion

                    try
                    {

                        #region LISTA

                        rowsAffected = transaccionDA.TransaccionConsulta(conexion, "Categorias_Calificaciones_Lista", paramTransaccion);
                        if (!rowsAffected.Equals(null))
                        {
                            foreach (DataRow dr in rowsAffected.Tables[0].Rows)
                            {
                                elemento = new ListaEntidad();
                                elemento.Valor = dr[0].ToString();
                                elemento.Texto = dr[1].ToString();

                                retorno.Add(elemento);
                            }
                        }
                        return retorno;

                        #endregion

                    }
                    catch (Exception)
                    {
                        throw;
                    }
                }
        
            #endregion 

            //REQUERIMIENTO 1-24653624
            #region CATEGORIAS CALIFICACIONES TIPOS MITIGADORES RIESGOS

                public RespuestaEntidad CategoriasCalificacionesTiposMitigadoresRiesgosInsertar(String conexion, String conexionBitacora, CategoriasCalificacionesTiposMitigadoresRiesgosEntidad entidad, BitacorasEntidad _bitacora)
                {
                    RespuestaEntidad elemento = null;
                    DataSet rowsAffected;

                    #region PARAMETROS

                    SqlParameter[] paramTransaccion = new SqlParameter[]
                    {
						new SqlParameter("@piId_Categoria_Calificacion", entidad.IdCategoriaCalificacion),
                        new SqlParameter("@piId_Tipo_Mitigador_Riesgo", entidad.IdTipoMitigadorRiesgo),
                        new SqlParameter("@piId_Tipo_Garantia", entidad.IdTipoGarantia),                        
						new SqlParameter("@pdPorc_Aceptacion_Calificacion_Riesgo", entidad.PorcentajeAceptacionCalificacionRiesgo),  
                        new SqlParameter("@psInd_Metodo_Insercion", entidad.IndMetodoInsercion),
                        new SqlParameter("@psCod_Usuario", entidad.CodUsuarioIngreso)
                    };

                    #endregion

                    try
                    {

                        #region INSERTAR

                        rowsAffected = transaccionDA.Instancia.TransaccionInsertar(conexion, conexionBitacora, "Categorias_Calificaciones_Tipos_Mitigadores_Riesgos_Inserta", paramTransaccion, EnumTipoBitacora.INSERTAR, _bitacora);
                        if (!rowsAffected.Equals(null))
                        {
                            elemento = new RespuestaEntidad();
                            elemento.ValorEstado = int.Parse(rowsAffected.Tables[0].Rows[0][0].ToString());
                            elemento.ValorError = int.Parse(rowsAffected.Tables[0].Rows[0][1].ToString());
                        }

                        return elemento;

                        #endregion

                    }
                    catch (Exception ex)
                    {
                        throw ex;
                    }
                }

                public RespuestaEntidad CategoriasCalificacionesTiposMitigadoresRiesgosEliminar(String conexion, String conexionBitacora, CategoriasCalificacionesTiposMitigadoresRiesgosEntidad entidad, BitacorasEntidad _bitacora)
                {
                    RespuestaEntidad elemento = null;
                    DataSet rowsAffected;

                    #region PARAMETROS

                    SqlParameter[] paramTransaccion = new SqlParameter[]
                    {
                        new SqlParameter("@piId_Categoria_Calificacion_Riesgo_Tipo_Mitigador", entidad.IdCategoriaCalificacionRiesgoTipoMitigador)
                    };

                    #endregion

                    #region KeyValuePair LIST

                    List<KeyValuePair<string, string>> itemConsulta = new List<KeyValuePair<string, string>>();
                    itemConsulta.Add(helper.CrearKeyValuePairItem("@piId_Categoria_Calificacion_Riesgo_Tipo_Mitigador", entidad.IdCategoriaCalificacionRiesgoTipoMitigador.ToString()));

                    #endregion

                    try
                    {

                        #region ELIMINAR

                        rowsAffected = transaccionDA.Instancia.TransaccionEliminar(conexion, conexionBitacora, "Categorias_Calificaciones_Tipos_Mitigadores_Riesgos_Elimina", paramTransaccion, EnumTipoBitacora.ELIMINAR, itemConsulta, "Categorias_Calificaciones_Tipos_Mitigadores_Riesgos_Consulta_Detalle", _bitacora);
                        if (!rowsAffected.Equals(null))
                        {
                            elemento = new RespuestaEntidad();
                            elemento.ValorEstado = int.Parse(rowsAffected.Tables[0].Rows[0][0].ToString());
                            elemento.ValorError = int.Parse(rowsAffected.Tables[0].Rows[0][1].ToString());
                        }

                        return elemento;

                        #endregion

                    }
                    catch (Exception ex)
                    {
                        throw ex;
                    }
                }

                public List<CategoriasCalificacionesTiposMitigadoresRiesgosEntidad> CategoriasCalificacionesTiposMitigadoresRiesgosConsultarGrid(String conexion, String filtro)
                {
                    List<CategoriasCalificacionesTiposMitigadoresRiesgosEntidad> retorno = new List<CategoriasCalificacionesTiposMitigadoresRiesgosEntidad>();
                    CategoriasCalificacionesTiposMitigadoresRiesgosEntidad elemento;
                    DataSet rowsAffected;

                    #region PARAMETROS

                    SqlParameter[] paramTransaccion = new SqlParameter[]
                    {
                       new SqlParameter("@psValores_Filtro", filtro)
                    };

                    #endregion

                    try
                    {

                        #region CONSULTAR

                        rowsAffected = transaccionDA.Instancia.TransaccionConsulta(conexion, "Categorias_Calificaciones_Tipos_Mitigadores_Riesgos_Consulta_Grid", paramTransaccion);
                        if (!rowsAffected.Equals(null))
                        {
                            foreach (DataRow dr in rowsAffected.Tables[0].Rows)
                            {
                                elemento = new CategoriasCalificacionesTiposMitigadoresRiesgosEntidad();
                                elemento.IdCategoriaCalificacionRiesgoTipoMitigador = int.Parse(dr[0].ToString());
                                elemento.DesTipoGarantia = dr[1].ToString();
                                elemento.DesCategoriaCalificacion = dr[2].ToString();
                                elemento.PorcentajeAceptacionCalificacionRiesgo = decimal.Parse(dr[3].ToString());
                                elemento.Id_Visible = int.Parse(dr[4].ToString());

                                retorno.Add(elemento);
                            }
                        }

                        return retorno;

                        #endregion

                    }
                    catch (Exception ex)
                    {
                        throw ex;
                    }
                }

                public CategoriasCalificacionesTiposMitigadoresRiesgosEntidad CategoriasCalificacionesTiposMitigadoresRiesgosConsultarDetalle(String conexion, String conexionBitacora, CategoriasCalificacionesTiposMitigadoresRiesgosEntidad entidad, BitacorasEntidad _bitacora)
                {
                    CategoriasCalificacionesTiposMitigadoresRiesgosEntidad retorno = new CategoriasCalificacionesTiposMitigadoresRiesgosEntidad();
                    DataSet rowsAffected;

                    #region PARAMETROS

                    SqlParameter[] paramTransaccion = new SqlParameter[]
                    {
                        new SqlParameter("@piId_Categoria_Calificacion_Riesgo_Tipo_Mitigador", entidad.IdCategoriaCalificacionRiesgoTipoMitigador)
                    };

                    #endregion

                    #region KeyValuePair LIST

                    List<KeyValuePair<string, string>> itemConsulta = new List<KeyValuePair<string, string>>();
                    itemConsulta.Add(helper.CrearKeyValuePairItem("@piId_Categoria_Calificacion_Riesgo_Tipo_Mitigador", entidad.IdCategoriaCalificacionRiesgoTipoMitigador.ToString()));

                    #endregion

                    try
                    {

                        #region CONSULTAR DETALLE

                        rowsAffected = transaccionDA.Instancia.TransaccionConsultaDetalle(conexion, conexionBitacora, "Categorias_Calificaciones_Tipos_Mitigadores_Riesgos_Consulta_Detalle", paramTransaccion, EnumTipoBitacora.CONSULTAR, itemConsulta, "Categorias_Calificaciones_Tipos_Mitigadores_Riesgos_Consulta_Detalle", _bitacora);
                        if (!rowsAffected.Equals(null))
                        {
                            retorno.IdCategoriaCalificacionRiesgoTipoMitigador = int.Parse(rowsAffected.Tables[0].Rows[0][0].ToString());
                            retorno.IdCategoriaCalificacion = int.Parse(rowsAffected.Tables[0].Rows[0][1].ToString());
                            retorno.IdTipoMitigadorRiesgo = int.Parse(rowsAffected.Tables[0].Rows[0][2].ToString());
                            retorno.IdTipoGarantia = int.Parse(rowsAffected.Tables[0].Rows[0][3].ToString());
                            retorno.PorcentajeAceptacionCalificacionRiesgo = int.Parse(rowsAffected.Tables[0].Rows[0][4].ToString());

                            retorno.IndMetodoInsercion = rowsAffected.Tables[0].Rows[0][5].ToString();
                            if (rowsAffected.Tables[0].Rows[0][6].ToString().Length > 0)
                                retorno.FechaIngreso = DateTime.Parse(rowsAffected.Tables[0].Rows[0][6].ToString());
                            else
                                retorno.FechaIngreso = null;
                            retorno.CodUsuarioIngreso = rowsAffected.Tables[0].Rows[0][7].ToString();
                            if (rowsAffected.Tables[0].Rows[0][8].ToString().Length > 0)
                                retorno.FechaUltimaModificacion = DateTime.Parse(rowsAffected.Tables[0].Rows[0][8].ToString());
                            else
                                retorno.FechaUltimaModificacion = null;
                            retorno.CodUsuarioUltimaModificacion = rowsAffected.Tables[0].Rows[0][9].ToString();
                            retorno.DesUsuarioIngreso = rowsAffected.Tables[0].Rows[0][10].ToString();
                            retorno.DesUsuarioUltimaModificacion = rowsAffected.Tables[0].Rows[0][11].ToString();
                        }

                        return retorno;

                        #endregion

                    }
                    catch (Exception ex)
                    {
                        throw ex;
                    }
                }

            #endregion

            #region CATEGORIAS RIESGOS DEUDORES
        
                public RespuestaEntidad CategoriasRiesgosDeudoresInsertar(String conexion, String conexionBitacora, CategoriasRiesgosDeudoresEntidad categoriaRiesgoDeudor, BitacorasEntidad _bitacora)
                {
                    RespuestaEntidad elemento = null;
                    DataSet rowsAffected;

                    #region PARAMETROS

                    SqlParameter[] paramTransaccion = new SqlParameter[]
                    {
                        new SqlParameter("@psCod_Categoria_Riesgo_Deudor", categoriaRiesgoDeudor.CodCategoriaRiesgoDeudor),
                        new SqlParameter("@psDes_Categoria_Riesgo_Deudor", categoriaRiesgoDeudor.DesCategoriaRiesgoDeudor),
                        new SqlParameter("@psInd_Metodo_Insercion", categoriaRiesgoDeudor.IndMetodoInsercion),
                        new SqlParameter("@psCod_Usuario", categoriaRiesgoDeudor.CodUsuarioIngreso)                     
                    };

                    #endregion

                    try
                    {

                        #region INSERTAR

                        rowsAffected = transaccionDA.TransaccionInsertar(conexion, conexionBitacora, "Categorias_Riesgo_Deudores_Inserta", paramTransaccion, EnumTipoBitacora.INSERTAR, _bitacora);
                        if (!rowsAffected.Equals(null))
                        {
                            elemento = new RespuestaEntidad();
                            elemento.ValorEstado = int.Parse(rowsAffected.Tables[0].Rows[0][0].ToString());
                            elemento.ValorError = int.Parse(rowsAffected.Tables[0].Rows[0][1].ToString());
                        }

                        return elemento;

                        #endregion

                    }
                    catch (Exception)
                    {
                        throw;
                    }
                }
        
                public RespuestaEntidad CategoriasRiesgosDeudoresModificar(String conexion, String conexionBitacora, CategoriasRiesgosDeudoresEntidad categoriaRiesgoDeudor, BitacorasEntidad _bitacora)
                {
                    RespuestaEntidad elemento = null;
                    DataSet rowsAffected;

                    #region PARAMETROS

                    SqlParameter[] paramTransaccion = new SqlParameter[]
                    {
                        new SqlParameter("@piId_Categoria_Riesgo_Deudor", categoriaRiesgoDeudor.IdCategoriaRiesgoDeudor),
                        new SqlParameter("@psCod_Categoria_Riesgo_Deudor", categoriaRiesgoDeudor.CodCategoriaRiesgoDeudor),
                        new SqlParameter("@psDes_Categoria_Riesgo_Deudor", categoriaRiesgoDeudor.DesCategoriaRiesgoDeudor),
                        new SqlParameter("@psInd_Metodo_Insercion", categoriaRiesgoDeudor.IndMetodoInsercion),
                        new SqlParameter("@psCod_Usuario", categoriaRiesgoDeudor.CodUsuarioIngreso)
                    };

                    #endregion

                    #region KeyValuePair LIST

                    List<KeyValuePair<string, string>> itemConsulta = new List<KeyValuePair<string, string>>();
                    itemConsulta.Add(helper.CrearKeyValuePairItem("@piId_Categoria_Riesgo_Deudor", categoriaRiesgoDeudor.IdCategoriaRiesgoDeudor.ToString()));

                    #endregion

                    try
                    {

                        #region CONSULTAR Modificar

                        rowsAffected = transaccionDA.TransaccionModificar(conexion, conexionBitacora, "Categorias_Riesgo_Deudores_Actualiza", paramTransaccion, EnumTipoBitacora.ACTUALIZAR, itemConsulta, "Categorias_Riesgo_Deudores_Consulta_Detalle", _bitacora);
                        if (!rowsAffected.Equals(null))
                        {
                            elemento = new RespuestaEntidad();
                            elemento.ValorEstado = int.Parse(rowsAffected.Tables[0].Rows[0][0].ToString());
                            elemento.ValorError = int.Parse(rowsAffected.Tables[0].Rows[0][1].ToString());
                        }

                        return elemento;

                        #endregion

                    }
                    catch (Exception)
                    {
                        throw;
                    }
                }
        
                public RespuestaEntidad CategoriasRiesgosDeudoresEliminar(String conexion, String conexionBitacora, CategoriasRiesgosDeudoresEntidad categoriaRiesgoDeudor, BitacorasEntidad _bitacora)
                {
                    RespuestaEntidad elemento = null;
                    DataSet rowsAffected;

                    #region PARAMETROS

                    SqlParameter[] paramTransaccion = new SqlParameter[]
                    {
                        new SqlParameter("@piId_Categoria_Riesgo_Deudor", categoriaRiesgoDeudor.IdCategoriaRiesgoDeudor)
                    };

                    #endregion

                    #region KeyValuePair LIST

                        List<KeyValuePair<string, string>> itemConsulta = new List<KeyValuePair<string, string>>();
                        itemConsulta.Add(helper.CrearKeyValuePairItem("@piId_Categoria_Riesgo_Deudor", categoriaRiesgoDeudor.IdCategoriaRiesgoDeudor.ToString()));

                    #endregion

                    try
                    {

                        #region ELIMINAR

                        rowsAffected = transaccionDA.TransaccionEliminar(conexion, conexionBitacora, "Categorias_Riesgo_Deudores_Elimina", paramTransaccion, EnumTipoBitacora.ELIMINAR, itemConsulta, "Categorias_Riesgo_Deudores_Consulta_Detalle", _bitacora);
                        if (!rowsAffected.Equals(null))
                        {
                            elemento = new RespuestaEntidad();
                            elemento.ValorEstado = int.Parse(rowsAffected.Tables[0].Rows[0][0].ToString());
                            elemento.ValorError = int.Parse(rowsAffected.Tables[0].Rows[0][1].ToString());
                        }

                        return elemento;

                        #endregion

                    }
                    catch (Exception)
                    {
                        throw;
                    }
                }

                public List<CategoriasRiesgosDeudoresEntidad> CategoriasRiesgosDeudoresConsultar(String conexion, ParametrosConsultaEntidad entidad)
                {
                    List<CategoriasRiesgosDeudoresEntidad> retorno = new List<CategoriasRiesgosDeudoresEntidad>();
                    CategoriasRiesgosDeudoresEntidad elemento;
                    DataSet rowsAffected;

                    #region PARAMETROS

                    SqlParameter[] paramTransaccion = new SqlParameter[]
                    {
                        new SqlParameter("@piIndice_Inicio_Fila", entidad.IndiceInicioFila),
                        new SqlParameter("@piMaximo_Filas", entidad.MaximoFilas),
                        new SqlParameter("@psValores_Filtro", entidad.ValorFiltro),
                        new SqlParameter("@psColumnas_Filtros", entidad.ColumnaFiltro),
                        new SqlParameter("@psColumna_Ordenar", entidad.ColumnaOrdenar)
                    };

                    #endregion

                    try
                    {

                        #region CONSULTAR

                            rowsAffected = transaccionDA.TransaccionConsulta(conexion, "Categorias_Riesgo_Deudores_Consulta", paramTransaccion);
                            if (!rowsAffected.Equals(null))
                            {
                                foreach (DataRow dr in rowsAffected.Tables[0].Rows)
                                {
                                    elemento = new CategoriasRiesgosDeudoresEntidad();
                                    elemento.IdCategoriaRiesgoDeudor = int.Parse(dr[0].ToString());
                                    elemento.CodCategoriaRiesgoDeudor = dr[1].ToString();
                                    elemento.DesCategoriaRiesgoDeudor = dr[2].ToString();

                                    retorno.Add(elemento);
                                }
                            }

                            return retorno;

                        #endregion

                    }
                    catch (Exception)
                    {
                        throw;
                    }
                }
        
                public CategoriasRiesgosDeudoresEntidad CategoriasRiesgosDeudoresConsultarDetalle(String conexion, String conexionBitacora, CategoriasRiesgosDeudoresEntidad categoriaRiesgoDeudor, BitacorasEntidad _bitacora)
                {
                    CategoriasRiesgosDeudoresEntidad retorno = new CategoriasRiesgosDeudoresEntidad();
                    DataSet rowsAffected;

                    #region PARAMETROS

                    SqlParameter[] paramTransaccion = new SqlParameter[]
                    {
                        new SqlParameter("@piId_Categoria_Riesgo_Deudor", categoriaRiesgoDeudor.IdCategoriaRiesgoDeudor)
                    };

                    #endregion

                    #region KeyValuePair LIST

                    List<KeyValuePair<string, string>> itemConsulta = new List<KeyValuePair<string, string>>();
                    itemConsulta.Add(helper.CrearKeyValuePairItem("@piId_Categoria_Riesgo_Deudor", categoriaRiesgoDeudor.IdCategoriaRiesgoDeudor.ToString()));

                    #endregion

                    try
                    {

                        #region CONSULTAR DETALLE

                        rowsAffected = transaccionDA.TransaccionConsultaDetalle(conexion, conexionBitacora, "Categorias_Riesgo_Deudores_Consulta_Detalle", paramTransaccion, EnumTipoBitacora.CONSULTAR, itemConsulta, "Categorias_Riesgo_Deudores_Consulta_Detalle", _bitacora);
                        if (!rowsAffected.Equals(null))
                        {
                            retorno.IdCategoriaRiesgoDeudor = int.Parse(rowsAffected.Tables[0].Rows[0][0].ToString());
                            retorno.CodCategoriaRiesgoDeudor = rowsAffected.Tables[0].Rows[0][1].ToString();
                            retorno.DesCategoriaRiesgoDeudor = rowsAffected.Tables[0].Rows[0][2].ToString();
                            retorno.IndMetodoInsercion = rowsAffected.Tables[0].Rows[0][3].ToString();
                            if (rowsAffected.Tables[0].Rows[0][4].ToString().Length > 0)
                                retorno.FechaIngreso = DateTime.Parse(rowsAffected.Tables[0].Rows[0][4].ToString());
                            else
                                retorno.FechaIngreso = null;
                            retorno.CodUsuarioIngreso = rowsAffected.Tables[0].Rows[0][5].ToString();
                            if (rowsAffected.Tables[0].Rows[0][6].ToString().Length > 0)
                                retorno.FechaUltimaModificacion = DateTime.Parse(rowsAffected.Tables[0].Rows[0][6].ToString());
                            else
                                retorno.FechaUltimaModificacion = null;
                            retorno.CodUsuarioUltimaModificacion = rowsAffected.Tables[0].Rows[0][7].ToString();
                            retorno.DesUsuarioIngreso = rowsAffected.Tables[0].Rows[0][8].ToString();
                            retorno.DesUsuarioUltimaModificacion = rowsAffected.Tables[0].Rows[0][9].ToString();
                        }
                        return retorno;

                        #endregion

                    }
                    catch (Exception)
                    {
                        throw;
                    }
                }
        
                public int CategoriasRiesgosDeudoresTotalFilas(String conexion, ParametrosTotalFilasEntidad entidad)
                {

                    int value;

                    #region PARAMETROS

                    SqlParameter[] paramTransaccion = new SqlParameter[]
                    {
                        new SqlParameter("@psValor_Filtro", entidad.ValorFiltro),
                        new SqlParameter("@psColumna_Filtro", entidad.ColumnaFiltro)
                    };

                    #endregion

                    try
                    {

                        #region TOTAL FILAS

                            value = transaccionDA.TransaccionRows(conexion, "Categorias_Riesgo_Deudores_Total_Filas", paramTransaccion);

                            return value;

                        #endregion

                    }
                    catch (Exception)
                    {
                        throw;
                    }
                }

            #endregion 

            //REQUERIMIENTO: 1-24105296
            #region CATEGORIAS RIESGOS EMPRESAS CALIFICADORAS
        
                public RespuestaEntidad CategoriasRiesgosEmpresasCalificadorasInsertar(String conexion, String conexionBitacora, CategoriasRiesgosEmpresasCalificadorasEntidad categoriaRiesgoEmpresaCalificadora, BitacorasEntidad _bitacora)
                {
                    RespuestaEntidad elemento = null;
                    DataSet rowsAffected;

                    #region PARAMETROS

                    SqlParameter[] paramTransaccion = new SqlParameter[]
                    {
                        new SqlParameter("@psCod_Categoria_Riesgo_Empresa_Calificadora", categoriaRiesgoEmpresaCalificadora.CodCategoriaRiesgoEmpresaCalificadora),
                        new SqlParameter("@psInd_Metodo_Insercion", categoriaRiesgoEmpresaCalificadora.IndMetodoInsercion),
                        new SqlParameter("@psCod_Usuario", categoriaRiesgoEmpresaCalificadora.CodUsuarioIngreso)
                    };

                    #endregion

                    try
                    {

                        #region INSERTAR

                        rowsAffected = transaccionDA.TransaccionInsertar(conexion, conexionBitacora, "Categorias_Riesgos_Empresas_Calificadoras_Inserta", paramTransaccion, EnumTipoBitacora.INSERTAR, _bitacora);
                        if (!rowsAffected.Equals(null))
                        {
                            elemento = new RespuestaEntidad();
                            elemento.ValorEstado = int.Parse(rowsAffected.Tables[0].Rows[0][0].ToString());
                            elemento.ValorError = int.Parse(rowsAffected.Tables[0].Rows[0][1].ToString());
                        }

                        return elemento;

                        #endregion

                    }
                    catch (Exception)
                    {
                        throw;
                    }
                }
        
                public RespuestaEntidad CategoriasRiesgosEmpresasCalificadorasModificar(String conexion, String conexionBitacora, CategoriasRiesgosEmpresasCalificadorasEntidad categoriaRiesgoEmpresaCalificadora, BitacorasEntidad _bitacora)
                {
                    RespuestaEntidad elemento = null;
                    DataSet rowsAffected;

                    #region PARAMETROS

                    SqlParameter[] paramTransaccion = new SqlParameter[]
                    {
                        new SqlParameter("@piId_Categoria_Riesgo_Empresa_Calificadora", categoriaRiesgoEmpresaCalificadora.IdCategoriaRiesgoEmpresaCalificadora),
                        new SqlParameter("@psCod_Categoria_Riesgo_Empresa_Calificadora", categoriaRiesgoEmpresaCalificadora.CodCategoriaRiesgoEmpresaCalificadora),
                        new SqlParameter("@psInd_Metodo_Insercion", categoriaRiesgoEmpresaCalificadora.IndMetodoInsercion),
                        new SqlParameter("@psCod_Usuario", categoriaRiesgoEmpresaCalificadora.CodUsuarioIngreso)
                    };

                    #endregion

                    #region KeyValuePair LIST

                    List<KeyValuePair<string, string>> itemConsulta = new List<KeyValuePair<string, string>>();
                    itemConsulta.Add(helper.CrearKeyValuePairItem("@piId_Categoria_Riesgo_Empresa_Calificadora", categoriaRiesgoEmpresaCalificadora.IdCategoriaRiesgoEmpresaCalificadora.ToString()));

                    #endregion

                    try
                    {

                        #region CONSULTAR Modificar

                        rowsAffected = transaccionDA.TransaccionModificar(conexion, conexionBitacora, "Categorias_Riesgos_Empresas_Calificadoras_Actualiza", paramTransaccion, EnumTipoBitacora.ACTUALIZAR, itemConsulta, "Categorias_Riesgos_Empresas_Calificadoras_Consulta_Detalle", _bitacora);
                        if (!rowsAffected.Equals(null))
                        {
                            elemento = new RespuestaEntidad();
                            elemento.ValorEstado = int.Parse(rowsAffected.Tables[0].Rows[0][0].ToString());
                            elemento.ValorError = int.Parse(rowsAffected.Tables[0].Rows[0][1].ToString());
                        }

                        return elemento;

                        #endregion

                    }
                    catch (Exception)
                    {
                        throw;
                    }
                }
        
                public RespuestaEntidad CategoriasRiesgosEmpresasCalificadorasEliminar(String conexion, String conexionBitacora, CategoriasRiesgosEmpresasCalificadorasEntidad categoriaRiesgoEmpresaCalificadora, BitacorasEntidad _bitacora)
                {
                    RespuestaEntidad elemento = null;
                    DataSet rowsAffected;

                    #region PARAMETROS

                    SqlParameter[] paramTransaccion = new SqlParameter[]
                    {
                        new SqlParameter("@piId_Categoria_Riesgo_Empresa_Calificadora", categoriaRiesgoEmpresaCalificadora.IdCategoriaRiesgoEmpresaCalificadora)
                    };

                    #endregion

                    #region KeyValuePair LIST

                    List<KeyValuePair<string, string>> itemConsulta = new List<KeyValuePair<string, string>>();
                    itemConsulta.Add(helper.CrearKeyValuePairItem("@piId_Categoria_Riesgo_Empresa_Calificadora", categoriaRiesgoEmpresaCalificadora.IdCategoriaRiesgoEmpresaCalificadora.ToString()));

                    #endregion

                    try
                    {

                        #region ELIMINAR

                        rowsAffected = transaccionDA.TransaccionEliminar(conexion, conexionBitacora, "Categorias_Riesgos_Empresas_Calificadoras_Elimina", paramTransaccion, EnumTipoBitacora.ELIMINAR, itemConsulta, "Categorias_Riesgos_Empresas_Calificadoras_Consulta_Detalle", _bitacora);
                        if (!rowsAffected.Equals(null))
                        {
                            elemento = new RespuestaEntidad();
                            elemento.ValorEstado = int.Parse(rowsAffected.Tables[0].Rows[0][0].ToString());
                            elemento.ValorError = int.Parse(rowsAffected.Tables[0].Rows[0][1].ToString());
                        }

                        return elemento;

                        #endregion

                    }
                    catch (Exception)
                    {
                        throw;
                    }
                }

                public List<CategoriasRiesgosEmpresasCalificadorasEntidad> CategoriasRiesgosEmpresasCalificadorasConsultar(String conexion, ParametrosConsultaEntidad entidad)
                {
                    List<CategoriasRiesgosEmpresasCalificadorasEntidad> retorno = new List<CategoriasRiesgosEmpresasCalificadorasEntidad>();
                    CategoriasRiesgosEmpresasCalificadorasEntidad elemento;
                    DataSet rowsAffected;

                    #region PARAMETROS

                    SqlParameter[] paramTransaccion = new SqlParameter[]
                    {
                       new SqlParameter("@piIndice_Inicio_Fila", entidad.IndiceInicioFila),
                       new SqlParameter("@piMaximo_Filas", entidad.MaximoFilas),
                       new SqlParameter("@psValores_Filtro", entidad.ValorFiltro),
                       new SqlParameter("@psColumnas_Filtros", entidad.ColumnaFiltro),
                       new SqlParameter("@psColumna_Ordenar", entidad.ColumnaOrdenar)
                    };

                    #endregion

                    try
                    {

                        #region CONSULTAR

                        rowsAffected = transaccionDA.TransaccionConsulta(conexion, "Categorias_Riesgos_Empresas_Calificadoras_Consulta", paramTransaccion);
                        if (!rowsAffected.Equals(null))
                        {
                            foreach (DataRow dr in rowsAffected.Tables[0].Rows)
                            {
                                elemento = new CategoriasRiesgosEmpresasCalificadorasEntidad();
                                elemento.IdCategoriaRiesgoEmpresaCalificadora = int.Parse(dr[0].ToString());
                                elemento.CodCategoriaRiesgoEmpresaCalificadora = dr[1].ToString();

                                retorno.Add(elemento);
                            }
                        }

                        return retorno;

                        #endregion

                    }
                    catch (Exception)
                    {
                        throw;
                    }
                }
        
                public CategoriasRiesgosEmpresasCalificadorasEntidad CategoriasRiesgosEmpresasCalificadorasConsultarDetalle(String conexion, String conexionBitacora, CategoriasRiesgosEmpresasCalificadorasEntidad categoriaRiesgoEmpresaCalificadora, BitacorasEntidad _bitacora)
                {
                    CategoriasRiesgosEmpresasCalificadorasEntidad retorno = new CategoriasRiesgosEmpresasCalificadorasEntidad();
                    DataSet rowsAffected;

                    #region PARAMETROS

                    SqlParameter[] paramTransaccion = new SqlParameter[]
                    {
                        new SqlParameter("@piId_Categoria_Riesgo_Empresa_Calificadora", categoriaRiesgoEmpresaCalificadora.IdCategoriaRiesgoEmpresaCalificadora)
                    };

                    #endregion

                    #region KeyValuePair LIST

                    List<KeyValuePair<string, string>> itemConsulta = new List<KeyValuePair<string, string>>();
                    itemConsulta.Add(helper.CrearKeyValuePairItem("@piId_Categoria_Riesgo_Empresa_Calificadora", categoriaRiesgoEmpresaCalificadora.IdCategoriaRiesgoEmpresaCalificadora.ToString()));

                    #endregion

                    try
                    {

                        #region CONSULTAR DETALLE

                        rowsAffected = transaccionDA.TransaccionConsultaDetalle(conexion, conexionBitacora, "Categorias_Riesgos_Empresas_Calificadoras_Consulta_Detalle", paramTransaccion, EnumTipoBitacora.CONSULTAR, itemConsulta, "Categorias_Riesgos_Empresas_Calificadoras_Consulta_Detalle", _bitacora);
                        if (!rowsAffected.Equals(null))
                        {
                            retorno.IdCategoriaRiesgoEmpresaCalificadora = int.Parse(rowsAffected.Tables[0].Rows[0][0].ToString());
                            retorno.CodCategoriaRiesgoEmpresaCalificadora = rowsAffected.Tables[0].Rows[0][1].ToString();
                            retorno.IndMetodoInsercion = rowsAffected.Tables[0].Rows[0][2].ToString();
                            if (rowsAffected.Tables[0].Rows[0][3].ToString().Length > 0)
                                retorno.FechaIngreso = DateTime.Parse(rowsAffected.Tables[0].Rows[0][3].ToString());
                            else
                                retorno.FechaIngreso = null;
                            retorno.CodUsuarioIngreso = rowsAffected.Tables[0].Rows[0][4].ToString();
                            if (rowsAffected.Tables[0].Rows[0][5].ToString().Length > 0)
                                retorno.FechaUltimaModificacion = DateTime.Parse(rowsAffected.Tables[0].Rows[0][5].ToString());
                            else
                                retorno.FechaUltimaModificacion = null;
                            retorno.CodUsuarioUltimaModificacion = rowsAffected.Tables[0].Rows[0][6].ToString();
                            retorno.DesUsuarioIngreso = rowsAffected.Tables[0].Rows[0][7].ToString();
                            retorno.DesUsuarioUltimaModificacion = rowsAffected.Tables[0].Rows[0][8].ToString();
                        }

                        return retorno;

                        #endregion

                    }
                    catch (Exception)
                    {
                        throw;
                    }
                }
        
                public int CategoriasRiesgosEmpresasCalificadorasTotalFilas(String conexion, ParametrosTotalFilasEntidad entidad)
                {

                    int value;

                    #region PARAMETROS

                    SqlParameter[] paramTransaccion = new SqlParameter[]
                    {
                        new SqlParameter("@psValor_Filtro", entidad.ValorFiltro),
                        new SqlParameter("@psColumna_Filtro", entidad.ColumnaFiltro)
                    };

                    #endregion

                    try
                    {

                        #region TOTAL FILAS

                        value = transaccionDA.TransaccionRows(conexion, "Categorias_Riesgos_Empresas_Calificadoras_Total_Filas", paramTransaccion);

                        return value;

                        #endregion

                    }
                    catch (Exception)
                    {
                        throw;
                    }
                }
        
                public List<ListaEntidad> CategoriasRiesgosEmpresasCalificadorasLista(String conexion, String filtro)
                {
                    List<ListaEntidad> retorno = new List<ListaEntidad>();
                    ListaEntidad elemento;
                    DataSet rowsAffected;

                    #region PARAMETROS

                    SqlParameter[] paramTransaccion = new SqlParameter[]
                    {
                        new SqlParameter("@psFiltro", filtro)
                    };

                    #endregion

                    try
                    {

                        #region LISTA

                        rowsAffected = transaccionDA.TransaccionConsulta(conexion, "Categorias_Riesgos_Empresas_Calificadoras_Lista", paramTransaccion);
                        if (!rowsAffected.Equals(null))
                        {
                            foreach (DataRow dr in rowsAffected.Tables[0].Rows)
                            {
                                elemento = new ListaEntidad();
                                elemento.Valor = dr[0].ToString();
                                elemento.Texto = dr[1].ToString();

                                retorno.Add(elemento);
                            }
                        }
                        return retorno;

                        #endregion


                    }
                    catch (Exception)
                    {
                        throw;
                    }
                }
        
            #endregion 

            #region CERRAJERIAS PIEZAS SANITARIAS
        
                public RespuestaEntidad CerrajeriasPiezasSanitariasInsertar(String conexion, String conexionBitacora, CerrajeriasPiezasSanitariasEntidad cerrajeriaPiezaSanitaria, BitacorasEntidad _bitacora)
                {
                    RespuestaEntidad elemento = null;
                    DataSet rowsAffected;

                    #region PARAMETROS

                    SqlParameter[] paramTransaccion = new SqlParameter[]
                    {
                        new SqlParameter("@piCod_Cerrajeria_Pieza_Sanitaria", cerrajeriaPiezaSanitaria.CodCerrajeriaPiezaSanitaria),
                        new SqlParameter("@psDes_Cerrajeria_Pieza_Sanitaria", cerrajeriaPiezaSanitaria.DesCerrajeriaPiezaSanitaria),
                        new SqlParameter("@psInd_Metodo_Insercion", cerrajeriaPiezaSanitaria.IndMetodoInsercion),
                        new SqlParameter("@psCod_Usuario", cerrajeriaPiezaSanitaria.CodUsuarioIngreso)                       
                    };

                    #endregion

                    try
                    {

                        #region INSERTAR

                        rowsAffected = transaccionDA.TransaccionInsertar(conexion, conexionBitacora, "Cerrajerias_Piezas_Sanitarias_Inserta", paramTransaccion, EnumTipoBitacora.INSERTAR, _bitacora);
                        if (!rowsAffected.Equals(null))
                        {
                            elemento = new RespuestaEntidad();
                            elemento.ValorEstado = int.Parse(rowsAffected.Tables[0].Rows[0][0].ToString());
                            elemento.ValorError = int.Parse(rowsAffected.Tables[0].Rows[0][1].ToString());
                        }

                        return elemento;

                        #endregion

                    }
                    catch (Exception)
                    {
                        throw;
                    }
                }
        
                public RespuestaEntidad CerrajeriasPiezasSanitariasModificar(String conexion, String conexionBitacora, CerrajeriasPiezasSanitariasEntidad cerrajeriaPiezaSanitaria, BitacorasEntidad _bitacora)
                {
                    RespuestaEntidad elemento = null;
                    DataSet rowsAffected;

                    #region PARAMETROS

                    SqlParameter[] paramTransaccion = new SqlParameter[]
                    {
                        new SqlParameter("@piId_Cerrajeria_Pieza_Sanitaria", cerrajeriaPiezaSanitaria.IdCerrajeriaPiezaSanitaria),
                        new SqlParameter("@piCod_Cerrajeria_Pieza_Sanitaria", cerrajeriaPiezaSanitaria.CodCerrajeriaPiezaSanitaria),
                        new SqlParameter("@psDes_Cerrajeria_Pieza_Sanitaria", cerrajeriaPiezaSanitaria.DesCerrajeriaPiezaSanitaria),
                        new SqlParameter("@psInd_Metodo_Insercion", cerrajeriaPiezaSanitaria.IndMetodoInsercion),
                        new SqlParameter("@psCod_Usuario", cerrajeriaPiezaSanitaria.CodUsuarioIngreso)                 
                    };

                    #endregion

                    #region KeyValuePair LIST

                    List<KeyValuePair<string, string>> itemConsulta = new List<KeyValuePair<string, string>>();
                    itemConsulta.Add(helper.CrearKeyValuePairItem("@piId_Cerrajeria_Pieza_Sanitaria", cerrajeriaPiezaSanitaria.IdCerrajeriaPiezaSanitaria.ToString()));

                    #endregion

                    try
                    {

                        #region MODIFICAR

                        rowsAffected = transaccionDA.TransaccionModificar(conexion, conexionBitacora, "Cerrajerias_Piezas_Sanitarias_Actualiza", paramTransaccion, EnumTipoBitacora.ACTUALIZAR, itemConsulta, "Cerrajerias_Piezas_Sanitarias_Consulta_Detalle", _bitacora);
                        if (!rowsAffected.Equals(null))
                        {
                            elemento = new RespuestaEntidad();
                            elemento.ValorEstado = int.Parse(rowsAffected.Tables[0].Rows[0][0].ToString());
                            elemento.ValorError = int.Parse(rowsAffected.Tables[0].Rows[0][1].ToString());
                        }

                        return elemento;

                        #endregion

                    }
                    catch (Exception)
                    {
                        throw;
                    }
                }
        
                public RespuestaEntidad CerrajeriasPiezasSanitariasEliminar(String conexion, String conexionBitacora, CerrajeriasPiezasSanitariasEntidad cerrajeriaPiezaSanitaria, BitacorasEntidad _bitacora)
                {
                    RespuestaEntidad elemento = null;
                    DataSet rowsAffected;

                    #region PARAMETROS

                    SqlParameter[] paramTransaccion = new SqlParameter[]
                    {
                        new SqlParameter("@piId_Cerrajeria_Pieza_Sanitaria", cerrajeriaPiezaSanitaria.IdCerrajeriaPiezaSanitaria)
                    };

                    #endregion

                    #region KeyValuePair LIST

                    List<KeyValuePair<string, string>> itemConsulta = new List<KeyValuePair<string, string>>();
                    itemConsulta.Add(helper.CrearKeyValuePairItem("@piId_Cerrajeria_Pieza_Sanitaria", cerrajeriaPiezaSanitaria.IdCerrajeriaPiezaSanitaria.ToString()));

                    #endregion

                    try
                    {

                        #region ELIMINAR

                        rowsAffected = transaccionDA.TransaccionEliminar(conexion, conexionBitacora, "Cerrajerias_Piezas_Sanitarias_Elimina", paramTransaccion, EnumTipoBitacora.ELIMINAR, itemConsulta, "Cerrajerias_Piezas_Sanitarias_Consulta_Detalle", _bitacora);
                        if (!rowsAffected.Equals(null))
                        {
                            elemento = new RespuestaEntidad();
                            elemento.ValorEstado = int.Parse(rowsAffected.Tables[0].Rows[0][0].ToString());
                            elemento.ValorError = int.Parse(rowsAffected.Tables[0].Rows[0][1].ToString());
                        }

                        return elemento;

                        #endregion

                    }
                    catch (Exception)
                    {
                        throw;
                    }
                }

                public List<CerrajeriasPiezasSanitariasEntidad> CerrajeriasPiezasSanitariasConsultar(String conexion, ParametrosConsultaEntidad entidad)
                {
                    List<CerrajeriasPiezasSanitariasEntidad> retorno = new List<CerrajeriasPiezasSanitariasEntidad>();
                    CerrajeriasPiezasSanitariasEntidad elemento;
                    DataSet rowsAffected;

                    #region PARAMETROS

                    SqlParameter[] paramTransaccion = new SqlParameter[]
                    {
                       new SqlParameter("@piIndice_Inicio_Fila", entidad.IndiceInicioFila),
                       new SqlParameter("@piMaximo_Filas", entidad.MaximoFilas),
                       new SqlParameter("@psValores_Filtro", entidad.ValorFiltro),
                       new SqlParameter("@psColumnas_Filtros", entidad.ColumnaFiltro),
                       new SqlParameter("@psColumna_Ordenar", entidad.ColumnaOrdenar)
                    };

                    #endregion

                    try
                    {

                        #region CONSULTAR

                            rowsAffected = transaccionDA.TransaccionConsulta(conexion, "Cerrajerias_Piezas_Sanitarias_Consulta", paramTransaccion);
                            if (!rowsAffected.Equals(null))
                            {
                                foreach (DataRow dr in rowsAffected.Tables[0].Rows)
                                {
                                    elemento = new CerrajeriasPiezasSanitariasEntidad();
                                    elemento.IdCerrajeriaPiezaSanitaria = int.Parse(dr[0].ToString());
                                    elemento.CodCerrajeriaPiezaSanitaria = int.Parse(dr[1].ToString());
                                    elemento.DesCerrajeriaPiezaSanitaria = dr[2].ToString();

                                    retorno.Add(elemento);
                                }
                            }

                            return retorno;

                        #endregion

                    }
                    catch (Exception)
                    {
                        throw;
                    }
                }
        
                public CerrajeriasPiezasSanitariasEntidad CerrajeriasPiezasSanitariasConsultarDetalle(String conexion, String conexionBitacora, CerrajeriasPiezasSanitariasEntidad cerrajeriaPiezaSanitaria, BitacorasEntidad _bitacora)
                {
                    CerrajeriasPiezasSanitariasEntidad retorno = new CerrajeriasPiezasSanitariasEntidad();
                    DataSet rowsAffected;

                    #region PARAMETROS

                    SqlParameter[] paramTransaccion = new SqlParameter[]
                    {
                        new SqlParameter("@piId_Cerrajeria_Pieza_Sanitaria", cerrajeriaPiezaSanitaria.IdCerrajeriaPiezaSanitaria)
                    };

                    #endregion

                    #region KeyValuePair LIST

                    List<KeyValuePair<string, string>> itemConsulta = new List<KeyValuePair<string, string>>();
                    itemConsulta.Add(helper.CrearKeyValuePairItem("@piId_Cerrajeria_Pieza_Sanitaria", cerrajeriaPiezaSanitaria.IdCerrajeriaPiezaSanitaria.ToString()));

                    #endregion

                    try
                    {

                        #region CONSULTAR DETALLE

                        rowsAffected = transaccionDA.TransaccionConsultaDetalle(conexion, conexionBitacora, "Cerrajerias_Piezas_Sanitarias_Consulta_Detalle", paramTransaccion, EnumTipoBitacora.CONSULTAR, itemConsulta, "Cerrajerias_Piezas_Sanitarias_Consulta_Detalle", _bitacora);
                        if (!rowsAffected.Equals(null))
                        {
                            retorno.IdCerrajeriaPiezaSanitaria = int.Parse(rowsAffected.Tables[0].Rows[0][0].ToString());
                            retorno.CodCerrajeriaPiezaSanitaria = int.Parse(rowsAffected.Tables[0].Rows[0][1].ToString());
                            retorno.DesCerrajeriaPiezaSanitaria = rowsAffected.Tables[0].Rows[0][2].ToString();
                            retorno.IndMetodoInsercion = rowsAffected.Tables[0].Rows[0][3].ToString();
                            if (rowsAffected.Tables[0].Rows[0][4].ToString().Length > 0)
                                retorno.FechaIngreso = DateTime.Parse(rowsAffected.Tables[0].Rows[0][4].ToString());
                            else
                                retorno.FechaIngreso = null;
                            retorno.CodUsuarioIngreso = rowsAffected.Tables[0].Rows[0][5].ToString();
                            if (rowsAffected.Tables[0].Rows[0][6].ToString().Length > 0)
                                retorno.FechaUltimaModificacion = DateTime.Parse(rowsAffected.Tables[0].Rows[0][6].ToString());
                            else
                                retorno.FechaUltimaModificacion = null;
                            retorno.CodUsuarioUltimaModificacion = rowsAffected.Tables[0].Rows[0][7].ToString();
                            retorno.DesUsuarioIngreso = rowsAffected.Tables[0].Rows[0][8].ToString();
                            retorno.DesUsuarioUltimaModificacion = rowsAffected.Tables[0].Rows[0][9].ToString();
                        }

                        return retorno;

                        #endregion

                    }
                    catch (Exception)
                    {
                        throw;
                    }
                }
        
                public int CerrajeriasPiezasSanitariasTotalFilas(String conexion, ParametrosTotalFilasEntidad entidad)
                {

                    int value;

                    #region PARAMETROS

                    SqlParameter[] paramTransaccion = new SqlParameter[]
                    {
                        new SqlParameter("@psValor_Filtro", entidad.ValorFiltro),
                        new SqlParameter("@psColumna_Filtro", entidad.ColumnaFiltro)
                    };

                    #endregion

                    try
                    {

                        #region TOTAL FILAS

                            value = transaccionDA.TransaccionRows(conexion, "Cerrajerias_Piezas_Sanitarias_Total_Filas", paramTransaccion);

                            return value;

                        #endregion

                    }
                    catch (Exception)
                    {
                        throw;
                    }
                }

            #endregion 

            #region CIELOS RASOS
        
                public RespuestaEntidad CielosRasosInsertar(String conexion, String conexionBitacora, CielosRasosEntidad cieloRaso, BitacorasEntidad _bitacora)
                {
                    RespuestaEntidad elemento = null;
                    DataSet rowsAffected;

                    #region PARAMETROS

                    SqlParameter[] paramTransaccion = new SqlParameter[]
                    {
                        new SqlParameter("@piCod_Cielo_Raso", cieloRaso.CodCieloRaso),
                        new SqlParameter("@psDes_Cielo_Raso", cieloRaso.DesCieloRaso),
                        new SqlParameter("@psInd_Metodo_Insercion", cieloRaso.IndMetodoInsercion),
                        new SqlParameter("@psCod_Usuario", cieloRaso.CodUsuarioIngreso)
                        
                    };

                    #endregion

                    try
                    {

                        #region INSERTAR

                        rowsAffected = transaccionDA.TransaccionInsertar(conexion, conexionBitacora, "Cielos_Rasos_Inserta", paramTransaccion, EnumTipoBitacora.INSERTAR, _bitacora);
                        if (!rowsAffected.Equals(null))
                        {
                            elemento = new RespuestaEntidad();
                            elemento.ValorEstado = int.Parse(rowsAffected.Tables[0].Rows[0][0].ToString());
                            elemento.ValorError = int.Parse(rowsAffected.Tables[0].Rows[0][1].ToString());
                        }

                        return elemento;

                        #endregion

                    }
                    catch (Exception)
                    {
                        throw;
                    }
                }
        
                public RespuestaEntidad CielosRasosModificar(String conexion, String conexionBitacora, CielosRasosEntidad cieloRaso, BitacorasEntidad _bitacora)
                {
                    RespuestaEntidad elemento = null;
                    DataSet rowsAffected;

                    #region PARAMETROS

                    SqlParameter[] paramTransaccion = new SqlParameter[]
                    {
                        new SqlParameter("@piId_Cielo_Raso", cieloRaso.IdCieloRaso),
                        new SqlParameter("@piCod_Cielo_Raso", cieloRaso.CodCieloRaso),
                        new SqlParameter("@psDes_Cielo_Raso", cieloRaso.DesCieloRaso),
                        new SqlParameter("@psInd_Metodo_Insercion", cieloRaso.IndMetodoInsercion),
                        new SqlParameter("@psCod_Usuario", cieloRaso.CodUsuarioIngreso)
                    };

                    #endregion

                    #region KeyValuePair LIST

                    List<KeyValuePair<string, string>> itemConsulta = new List<KeyValuePair<string, string>>();
                    itemConsulta.Add(helper.CrearKeyValuePairItem("@piId_Cielo_Raso", cieloRaso.IdCieloRaso.ToString()));

                    #endregion

                    try
                    {

                        #region MODIFICAR

                        rowsAffected = transaccionDA.TransaccionModificar(conexion, conexionBitacora, "Cielos_Rasos_Actualiza", paramTransaccion, EnumTipoBitacora.ACTUALIZAR, itemConsulta, "Cielos_Rasos_Consulta_Detalle", _bitacora);
                        if (!rowsAffected.Equals(null))
                        {
                            elemento = new RespuestaEntidad();
                            elemento.ValorEstado = int.Parse(rowsAffected.Tables[0].Rows[0][0].ToString());
                            elemento.ValorError = int.Parse(rowsAffected.Tables[0].Rows[0][1].ToString());
                        }

                        return elemento;

                        #endregion

                    }
                    catch (Exception)
                    {
                        throw;
                    }
                }
        
                public RespuestaEntidad CielosRasosEliminar(String conexion, String conexionBitacora, CielosRasosEntidad cieloRaso, BitacorasEntidad _bitacora)
                {
                    RespuestaEntidad elemento = null;
                    DataSet rowsAffected;

                    #region PARAMETROS

                    SqlParameter[] paramTransaccion = new SqlParameter[]
                    {
                        new SqlParameter("@piId_Cielo_Raso", cieloRaso.IdCieloRaso)
                    };

                    #endregion

                    #region KeyValuePair LIST

                    List<KeyValuePair<string, string>> itemConsulta = new List<KeyValuePair<string, string>>();
                    itemConsulta.Add(helper.CrearKeyValuePairItem("@piId_Cielo_Raso", cieloRaso.IdCieloRaso.ToString()));

                    #endregion

                    try
                    {

                        #region ELIMINAR

                        rowsAffected = transaccionDA.TransaccionModificar(conexion, conexionBitacora, "Cielos_Rasos_Elimina", paramTransaccion, EnumTipoBitacora.ELIMINAR, itemConsulta, "Cielos_Rasos_Consulta_Detalle", _bitacora);
                        if (!rowsAffected.Equals(null))
                        {
                            elemento = new RespuestaEntidad();
                            elemento.ValorEstado = int.Parse(rowsAffected.Tables[0].Rows[0][0].ToString());
                            elemento.ValorError = int.Parse(rowsAffected.Tables[0].Rows[0][1].ToString());
                        }

                        return elemento;

                        #endregion

                    }
                    catch (Exception)
                    {
                        throw;
                    }
                }

                public List<CielosRasosEntidad> CielosRasosConsultar(String conexion, ParametrosConsultaEntidad entidad)
                {
                    List<CielosRasosEntidad> retorno = new List<CielosRasosEntidad>();
                    CielosRasosEntidad elemento;
                    DataSet rowsAffected;

                    #region PARAMETROS

                    SqlParameter[] paramTransaccion = new SqlParameter[]
                    {
                        new SqlParameter("@piIndice_Inicio_Fila", entidad.IndiceInicioFila),
                        new SqlParameter("@piMaximo_Filas", entidad.MaximoFilas),
                        new SqlParameter("@psValores_Filtro", entidad.ValorFiltro),
                        new SqlParameter("@psColumnas_Filtros", entidad.ColumnaFiltro),
                        new SqlParameter("@psColumna_Ordenar", entidad.ColumnaOrdenar)
                    };

                    #endregion

                    try
                    {

                        #region CONSULTAR

                            rowsAffected = transaccionDA.TransaccionConsulta(conexion, "Cielos_Rasos_Consulta", paramTransaccion);
                            if (!rowsAffected.Equals(null))
                            {
                                foreach (DataRow dr in rowsAffected.Tables[0].Rows)
                                {
                                    elemento = new CielosRasosEntidad();
                                    elemento.IdCieloRaso = int.Parse(dr[0].ToString());
                                    elemento.CodCieloRaso = int.Parse(dr[1].ToString());
                                    elemento.DesCieloRaso = dr[2].ToString();

                                    retorno.Add(elemento);
                                }
                            }

                            return retorno;

                        #endregion

                    }
                    catch (Exception)
                    {
                        throw;
                    }
                }
        
                public CielosRasosEntidad CielosRasosConsultarDetalle(String conexion, String conexionBitacora, CielosRasosEntidad cieloRaso, BitacorasEntidad _bitacora)
                {
                    CielosRasosEntidad retorno = new CielosRasosEntidad();
                    DataSet rowsAffected;

                    #region PARAMETROS

                    SqlParameter[] paramTransaccion = new SqlParameter[]
                    {
                        new SqlParameter("@piId_Cielo_Raso", cieloRaso.IdCieloRaso)
                    };

                    #endregion

                    #region KeyValuePair LIST

                    List<KeyValuePair<string, string>> itemConsulta = new List<KeyValuePair<string, string>>();
                    itemConsulta.Add(helper.CrearKeyValuePairItem("@piId_Cielo_Raso", cieloRaso.IdCieloRaso.ToString()));

                    #endregion

                    try
                    {

                        #region CONSULTAR DETALLE

                        rowsAffected = transaccionDA.TransaccionConsultaDetalle(conexion, conexionBitacora, "Cielos_Rasos_Consulta_Detalle", paramTransaccion, EnumTipoBitacora.CONSULTAR, itemConsulta, "Cielos_Rasos_Consulta_Detalle", _bitacora);
                        if (!rowsAffected.Equals(null))
                        {
                            retorno.IdCieloRaso = int.Parse(rowsAffected.Tables[0].Rows[0][0].ToString());
                            retorno.CodCieloRaso = int.Parse(rowsAffected.Tables[0].Rows[0][1].ToString());
                            retorno.DesCieloRaso = rowsAffected.Tables[0].Rows[0][2].ToString();
                            retorno.IndMetodoInsercion = rowsAffected.Tables[0].Rows[0][3].ToString();
                            if (rowsAffected.Tables[0].Rows[0][4].ToString().Length > 0)
                                retorno.FechaIngreso = DateTime.Parse(rowsAffected.Tables[0].Rows[0][4].ToString());
                            else
                                retorno.FechaIngreso = null;
                            retorno.CodUsuarioIngreso = rowsAffected.Tables[0].Rows[0][5].ToString();
                            if (rowsAffected.Tables[0].Rows[0][6].ToString().Length > 0)
                                retorno.FechaUltimaModificacion = DateTime.Parse(rowsAffected.Tables[0].Rows[0][6].ToString());
                            else
                                retorno.FechaUltimaModificacion = null;
                            retorno.CodUsuarioUltimaModificacion = rowsAffected.Tables[0].Rows[0][7].ToString();
                            retorno.DesUsuarioIngreso = rowsAffected.Tables[0].Rows[0][8].ToString();
                            retorno.DesUsuarioUltimaModificacion = rowsAffected.Tables[0].Rows[0][9].ToString();
                        }

                        return retorno;

                        #endregion

                    }
                    catch (Exception)
                    {
                        throw;
                    }
                }
        
                public int CielosRasosTotalFilas(String conexion, ParametrosTotalFilasEntidad entidad)
                {

                    int value;

                    #region PARAMETROS

                    SqlParameter[] paramTransaccion = new SqlParameter[]
                    {
                        new SqlParameter("@psValor_Filtro", entidad.ValorFiltro),
                        new SqlParameter("@psColumna_Filtro", entidad.ColumnaFiltro)
                    };

                    #endregion

                    try
                    {

                        #region TOTAL FILAS

                            value = transaccionDA.TransaccionRows(conexion, "Cielos_Rasos_Total_Filas", paramTransaccion);

                            return value;

                        #endregion

                    }
                    catch (Exception)
                    {
                        throw;
                    }
                }

            #endregion 

            #region CLASES AERONAVES
        
                public RespuestaEntidad ClasesAeronavesInsertar(String conexion, String conexionBitacora, ClasesAeronavesEntidad claseAeronave, BitacorasEntidad _bitacora)
                {
                    RespuestaEntidad elemento = null;
                    DataSet rowsAffected;

                    #region PARAMETROS

                    SqlParameter[] paramTransaccion = new SqlParameter[]
                    {
                        new SqlParameter("@piCod_Clase_Aeronave", claseAeronave.CodClaseAeronave),
                        new SqlParameter("@psDes_Clase_Aeronave", claseAeronave.DesClaseAeronave),
                        new SqlParameter("@psInd_Metodo_Insercion", claseAeronave.IndMetodoInsercion),
                        new SqlParameter("@psCod_Usuario", claseAeronave.CodUsuarioIngreso)
                    };

                    #endregion

                    try
                    {

                        #region INSERTAR

                        rowsAffected = transaccionDA.TransaccionInsertar(conexion, conexionBitacora, "Clases_Aeronaves_Inserta", paramTransaccion, EnumTipoBitacora.INSERTAR, _bitacora);
                        if (!rowsAffected.Equals(null))
                        {
                            elemento = new RespuestaEntidad();
                            elemento.ValorEstado = int.Parse(rowsAffected.Tables[0].Rows[0][0].ToString());
                            elemento.ValorError = int.Parse(rowsAffected.Tables[0].Rows[0][1].ToString());
                        }

                        return elemento;

                        #endregion

                    }
                    catch (Exception)
                    {
                        throw;
                    }
                }
        
                public RespuestaEntidad ClasesAeronavesModificar(String conexion, String conexionBitacora, ClasesAeronavesEntidad claseAeronave, BitacorasEntidad _bitacora)
                {
                    RespuestaEntidad elemento = null;
                    DataSet rowsAffected;

                    #region PARAMETROS

                    SqlParameter[] paramTransaccion = new SqlParameter[]
                    {
                        new SqlParameter("@piId_Clase_Aeronave", claseAeronave.IdClaseAeronave),
                        new SqlParameter("@piCod_Clase_Aeronave", claseAeronave.CodClaseAeronave),
                        new SqlParameter("@psDes_Clase_Aeronave", claseAeronave.DesClaseAeronave),
                        new SqlParameter("@psInd_Metodo_Insercion", claseAeronave.IndMetodoInsercion),
                        new SqlParameter("@psCod_Usuario", claseAeronave.CodUsuarioIngreso)                        
                    };

                    #endregion

                    #region KeyValuePair LIST

                    List<KeyValuePair<string, string>> itemConsulta = new List<KeyValuePair<string, string>>();
                    itemConsulta.Add(helper.CrearKeyValuePairItem("@piId_Clase_Aeronave", claseAeronave.IdClaseAeronave.ToString()));

                    #endregion

                    try
                    {

                        #region MODIFICAR

                        rowsAffected = transaccionDA.TransaccionModificar(conexion, conexionBitacora, "Clases_Aeronaves_Actualiza", paramTransaccion, EnumTipoBitacora.ACTUALIZAR, itemConsulta, "Clases_Aeronaves_Consulta_Detalle", _bitacora);
                        if (!rowsAffected.Equals(null))
                        {
                            elemento = new RespuestaEntidad();
                            elemento.ValorEstado = int.Parse(rowsAffected.Tables[0].Rows[0][0].ToString());
                            elemento.ValorError = int.Parse(rowsAffected.Tables[0].Rows[0][1].ToString());
                        }

                        return elemento;

                        #endregion

                    }
                    catch (Exception)
                    {
                        throw;
                    }
                }
        
                public RespuestaEntidad ClasesAeronavesEliminar(String conexion, String conexionBitacora, ClasesAeronavesEntidad claseAeronave, BitacorasEntidad _bitacora)
                {
                    RespuestaEntidad elemento = null;
                    DataSet rowsAffected;

                    #region PARAMETROS

                    SqlParameter[] paramTransaccion = new SqlParameter[]
                    {
                        new SqlParameter("@piId_Clase_Aeronave", claseAeronave.IdClaseAeronave)
                    };

                    #endregion

                    #region KeyValuePair LIST

                    List<KeyValuePair<string, string>> itemConsulta = new List<KeyValuePair<string, string>>();
                    itemConsulta.Add(helper.CrearKeyValuePairItem("@piId_Clase_Aeronave", claseAeronave.IdClaseAeronave.ToString()));

                    #endregion

                    try
                    {

                        #region ELIMINAR

                        rowsAffected = transaccionDA.TransaccionEliminar(conexion, conexionBitacora, "Clases_Aeronaves_Elimina", paramTransaccion, EnumTipoBitacora.ELIMINAR, itemConsulta, "Clases_Aeronaves_Consulta_Detalle", _bitacora);
                        if (!rowsAffected.Equals(null))
                        {
                            elemento = new RespuestaEntidad();
                            elemento.ValorEstado = int.Parse(rowsAffected.Tables[0].Rows[0][0].ToString());
                            elemento.ValorError = int.Parse(rowsAffected.Tables[0].Rows[0][1].ToString());
                        }

                        return elemento;

                        #endregion

                    }
                    catch (Exception)
                    {
                        throw;
                    }
                }

                public List<ClasesAeronavesEntidad> ClasesAeronavesConsultar(String conexion, ParametrosConsultaEntidad entidad)
                {
                    List<ClasesAeronavesEntidad> retorno = new List<ClasesAeronavesEntidad>();
                    ClasesAeronavesEntidad elemento;
                    DataSet rowsAffected;

                    #region PARAMETROS

                    SqlParameter[] paramTransaccion = new SqlParameter[]
                    {
                        new SqlParameter("@piIndice_Inicio_Fila", entidad.IndiceInicioFila),
                        new SqlParameter("@piMaximo_Filas", entidad.MaximoFilas),
                        new SqlParameter("@psValores_Filtro", entidad.ValorFiltro),
                        new SqlParameter("@psColumnas_Filtros", entidad.ColumnaFiltro),
                        new SqlParameter("@psColumna_Ordenar", entidad.ColumnaOrdenar)
                    };

                    #endregion

                    try
                    {

                        #region CONSULTAR

                            rowsAffected = transaccionDA.TransaccionConsulta(conexion, "Clases_Aeronaves_Consulta", paramTransaccion);
                            if (!rowsAffected.Equals(null))
                            {
                                foreach (DataRow dr in rowsAffected.Tables[0].Rows)
                                {
                                    elemento = new ClasesAeronavesEntidad();
                                    elemento.IdClaseAeronave = int.Parse(dr[0].ToString());
                                    elemento.CodClaseAeronave = int.Parse(dr[1].ToString());
                                    elemento.DesClaseAeronave = dr[2].ToString();
                                    
                                    retorno.Add(elemento);
                                }
                            }

                            return retorno;
                        #endregion

                    }
                    catch (Exception)
                    {
                        throw;
                    }
                }
        
                public ClasesAeronavesEntidad ClasesAeronavesConsultarDetalle(String conexion, String conexionBitacora, ClasesAeronavesEntidad claseAeronave, BitacorasEntidad _bitacora)
                {
                    ClasesAeronavesEntidad retorno = new ClasesAeronavesEntidad();
                    DataSet rowsAffected;

                    #region PARAMETROS

                    SqlParameter[] paramTransaccion = new SqlParameter[]
                    {
                        new SqlParameter("@piId_Clase_Aeronave", claseAeronave.IdClaseAeronave)
                    };

                    #endregion

                    #region KeyValuePair LIST

                    List<KeyValuePair<string, string>> itemConsulta = new List<KeyValuePair<string, string>>();
                    itemConsulta.Add(helper.CrearKeyValuePairItem("@piId_Clase_Aeronave", claseAeronave.IdClaseAeronave.ToString()));

                    #endregion

                    try
                    {

                        #region CONSULTAR DETALLE

                        rowsAffected = transaccionDA.TransaccionConsultaDetalle(conexion, conexionBitacora, "Clases_Aeronaves_Consulta_Detalle", paramTransaccion, EnumTipoBitacora.CONSULTAR, itemConsulta, "Clases_Aeronaves_Consulta_Detalle", _bitacora);
                        if (!rowsAffected.Equals(null))
                        {
                            retorno.IdClaseAeronave = int.Parse(rowsAffected.Tables[0].Rows[0][0].ToString());
                            retorno.CodClaseAeronave = int.Parse(rowsAffected.Tables[0].Rows[0][1].ToString());
                            retorno.DesClaseAeronave = rowsAffected.Tables[0].Rows[0][2].ToString();
                            retorno.IndMetodoInsercion = rowsAffected.Tables[0].Rows[0][3].ToString();
                            if (rowsAffected.Tables[0].Rows[0][4].ToString().Length > 0)
                                retorno.FechaIngreso = DateTime.Parse(rowsAffected.Tables[0].Rows[0][4].ToString());
                            else
                                retorno.FechaIngreso = null;
                            retorno.CodUsuarioIngreso = rowsAffected.Tables[0].Rows[0][5].ToString();
                            if (rowsAffected.Tables[0].Rows[0][6].ToString().Length > 0)
                                retorno.FechaUltimaModificacion = DateTime.Parse(rowsAffected.Tables[0].Rows[0][6].ToString());
                            else
                                retorno.FechaUltimaModificacion = null;
                            retorno.CodUsuarioUltimaModificacion = rowsAffected.Tables[0].Rows[0][7].ToString();
                            retorno.DesUsuarioIngreso = rowsAffected.Tables[0].Rows[0][8].ToString();
                            retorno.DesUsuarioUltimaModificacion = rowsAffected.Tables[0].Rows[0][9].ToString();
                        }

                        return retorno;

                        #endregion

                    }
                    catch (Exception)
                    {
                        throw;
                    }
                }
        
                public int ClasesAeronavesTotalFilas(String conexion, ParametrosTotalFilasEntidad entidad)
                {

                    int value;

                    #region PARAMETROS

                    SqlParameter[] paramTransaccion = new SqlParameter[]
                    {
                        new SqlParameter("@psValor_Filtro", entidad.ValorFiltro),
                        new SqlParameter("@psColumna_Filtro", entidad.ColumnaFiltro)
                    };

                    #endregion

                    try
                    {

                        #region TOTAL FILAS

                            value = transaccionDA.TransaccionRows(conexion, "Clases_Aeronaves_Total_Filas", paramTransaccion);

                            return value;

                        #endregion

                    }
                    catch (Exception)
                    {
                        throw;
                    }
                }

                public List<ListaEntidad> ClasesAeronavesLista(String conexion, String filtro)
                {
                    List<ListaEntidad> retorno = new List<ListaEntidad>();
                    ListaEntidad elemento;
                    DataSet rowsAffected;

                    #region PARAMETROS

                    SqlParameter[] paramTransaccion = new SqlParameter[]
                    {
                        new SqlParameter("@psFiltro", filtro)
                    };

                    #endregion

                    try
                    {

                        #region LISTA

                        rowsAffected = transaccionDA.TransaccionConsulta(conexion, "Clases_Aeronaves_Lista", paramTransaccion);
                        if (!rowsAffected.Equals(null))
                        {
                            foreach (DataRow dr in rowsAffected.Tables[0].Rows)
                            {
                                elemento = new ListaEntidad();
                                elemento.Valor = dr[0].ToString();
                                elemento.Texto = dr[1].ToString();

                                retorno.Add(elemento);
                            }
                        }
                        return retorno;

                        #endregion

                    }
                    catch (Exception)
                    {
                        throw;
                    }
                }        
                
            #endregion 

            #region CLASES BUQUES
        
                public RespuestaEntidad ClasesBuquesInsertar(String conexion, String conexionBitacora, ClasesBuquesEntidad claseBuque, BitacorasEntidad _bitacora)
                {
                    RespuestaEntidad elemento = null;
                    DataSet rowsAffected;

                    #region PARAMETROS

                    SqlParameter[] paramTransaccion = new SqlParameter[]
                    {
                        new SqlParameter("@piCod_Clase_Buque", claseBuque.CodClaseBuque),
                        new SqlParameter("@psDes_Clase_Buque", claseBuque.DesClaseBuque),
                        new SqlParameter("@psInd_Metodo_Insercion", claseBuque.IndMetodoInsercion),
                        new SqlParameter("@psCod_Usuario", claseBuque.CodUsuarioIngreso)
                    };

                    #endregion

                    try
                    {

                        #region INSERTAR

                        rowsAffected = transaccionDA.TransaccionInsertar(conexion, conexionBitacora, "Clases_Buques_Inserta", paramTransaccion, EnumTipoBitacora.INSERTAR, _bitacora);
                        if (!rowsAffected.Equals(null))
                        {
                            elemento = new RespuestaEntidad();
                            elemento.ValorEstado = int.Parse(rowsAffected.Tables[0].Rows[0][0].ToString());
                            elemento.ValorError = int.Parse(rowsAffected.Tables[0].Rows[0][1].ToString());
                        }
                
                        return elemento;

                        #endregion

                    }
                    catch (Exception)
                    {
                        throw;
                    }
                }
        
                public RespuestaEntidad ClasesBuquesModificar(String conexion, String conexionBitacora, ClasesBuquesEntidad claseBuque, BitacorasEntidad _bitacora)
                {
                    RespuestaEntidad elemento = null;
                    DataSet rowsAffected;

                    #region PARAMETROS

                    SqlParameter[] paramTransaccion = new SqlParameter[]
                    {
                        new SqlParameter("@piId_Clase_Buque", claseBuque.IdClaseBuque),
                        new SqlParameter("@piCod_Clase_Buque", claseBuque.CodClaseBuque),
                        new SqlParameter("@psDes_Clase_Buque", claseBuque.DesClaseBuque),
                        new SqlParameter("@psInd_Metodo_Insercion", claseBuque.IndMetodoInsercion),
                        new SqlParameter("@psCod_Usuario", claseBuque.CodUsuarioIngreso)
                    };

                    #endregion

                    #region KeyValuePair LIST

                    List<KeyValuePair<string, string>> itemConsulta = new List<KeyValuePair<string, string>>();
                    itemConsulta.Add(helper.CrearKeyValuePairItem("@piId_Clase_Buque", claseBuque.IdClaseBuque.ToString()));

                    #endregion

                    try
                    {

                        #region MODIFICAR

                        rowsAffected = transaccionDA.TransaccionModificar(conexion, conexionBitacora, "Clases_Buques_Actualiza", paramTransaccion, EnumTipoBitacora.ACTUALIZAR, itemConsulta, "Clases_Buques_Consulta_Detalle", _bitacora);
                        if (!rowsAffected.Equals(null))
                        {
                            elemento = new RespuestaEntidad();
                            elemento.ValorEstado = int.Parse(rowsAffected.Tables[0].Rows[0][0].ToString());
                            elemento.ValorError = int.Parse(rowsAffected.Tables[0].Rows[0][1].ToString());
                        }

                        return elemento;

                        #endregion

                    }
                    catch (Exception)
                    {
                        throw;
                    }
                }
        
                public RespuestaEntidad ClasesBuquesEliminar(String conexion, String conexionBitacora, ClasesBuquesEntidad claseBuque, BitacorasEntidad _bitacora)
                {
                    RespuestaEntidad elemento = null;
                    DataSet rowsAffected;

                    #region PARAMETROS

                    SqlParameter[] paramTransaccion = new SqlParameter[]
                    {
                        new SqlParameter("@piId_Clase_Buque", claseBuque.IdClaseBuque)
                    };

                    #endregion

                    #region KeyValuePair LIST

                    List<KeyValuePair<string, string>> itemConsulta = new List<KeyValuePair<string, string>>();
                    itemConsulta.Add(helper.CrearKeyValuePairItem("@piId_Clase_Buque", claseBuque.IdClaseBuque.ToString()));

                    #endregion

                    try
                    {

                        #region ELIMINAR

                        rowsAffected = transaccionDA.TransaccionEliminar(conexion, conexionBitacora, "Clases_Buques_Elimina", paramTransaccion, EnumTipoBitacora.ELIMINAR, itemConsulta, "Clases_Buques_Consulta_Detalle", _bitacora);
                        if (!rowsAffected.Equals(null))
                        {
                            elemento = new RespuestaEntidad();
                            elemento.ValorEstado = int.Parse(rowsAffected.Tables[0].Rows[0][0].ToString());
                            elemento.ValorError = int.Parse(rowsAffected.Tables[0].Rows[0][1].ToString());
                        }

                        return elemento;

                        #endregion

                    }
                    catch (Exception)
                    {
                        throw;
                    }
                }

                public List<ClasesBuquesEntidad> ClasesBuquesConsultar(String conexion, ParametrosConsultaEntidad entidad)
                {
                    List<ClasesBuquesEntidad> retorno = new List<ClasesBuquesEntidad>();
                    ClasesBuquesEntidad elemento;
                    DataSet rowsAffected;

                    #region PARAMETROS

                    SqlParameter[] paramTransaccion = new SqlParameter[]
                    {
                       new SqlParameter("@piIndice_Inicio_Fila", entidad.IndiceInicioFila),
                       new SqlParameter("@piMaximo_Filas", entidad.MaximoFilas),
                       new SqlParameter("@psValores_Filtro", entidad.ValorFiltro),
                       new SqlParameter("@psColumnas_Filtros", entidad.ColumnaFiltro),
                       new SqlParameter("@psColumna_Ordenar", entidad.ColumnaOrdenar)
                    };

                    #endregion

                    try
                    {

                        #region CONSULTAR

                            rowsAffected = transaccionDA.TransaccionConsulta(conexion, "Clases_Buques_Consulta", paramTransaccion);
                            if (!rowsAffected.Equals(null))
                            {
                                foreach (DataRow dr in rowsAffected.Tables[0].Rows)
                                {
                                    elemento = new ClasesBuquesEntidad();
                                    elemento.IdClaseBuque = int.Parse(dr[0].ToString());
                                    elemento.CodClaseBuque = int.Parse(dr[1].ToString());
                                    elemento.DesClaseBuque = dr[2].ToString();

                                    retorno.Add(elemento);
                                }
                            }

                            return retorno;

                        #endregion

                    }
                    catch (Exception)
                    {
                        throw;
                    }
                }
        
                public ClasesBuquesEntidad ClasesBuquesConsultarDetalle(String conexion, String conexionBitacora, ClasesBuquesEntidad claseBuque, BitacorasEntidad _bitacora)
                {
                    ClasesBuquesEntidad retorno = new ClasesBuquesEntidad();
                    DataSet rowsAffected;

                    #region PARAMETROS

                    SqlParameter[] paramTransaccion = new SqlParameter[]
                    {
                        new SqlParameter("@piId_Clase_Buque", claseBuque.IdClaseBuque)
                    };

                    #endregion

                    #region KeyValuePair LIST

                    List<KeyValuePair<string, string>> itemConsulta = new List<KeyValuePair<string, string>>();
                    itemConsulta.Add(helper.CrearKeyValuePairItem("@piId_Clase_Buque", claseBuque.IdClaseBuque.ToString()));

                    #endregion

                    try
                    {

                        #region CONSULTAR DETALLE

                        rowsAffected = transaccionDA.TransaccionConsultaDetalle(conexion, conexionBitacora, "Clases_Buques_Consulta_Detalle", paramTransaccion, EnumTipoBitacora.CONSULTAR, itemConsulta, "Clases_Buques_Consulta_Detalle", _bitacora);
                        if (!rowsAffected.Equals(null))
                        {
                            retorno.IdClaseBuque = int.Parse(rowsAffected.Tables[0].Rows[0][0].ToString());
                            retorno.CodClaseBuque = int.Parse(rowsAffected.Tables[0].Rows[0][1].ToString());
                            retorno.DesClaseBuque = rowsAffected.Tables[0].Rows[0][2].ToString();
                            retorno.IndMetodoInsercion = rowsAffected.Tables[0].Rows[0][3].ToString();
                            if (rowsAffected.Tables[0].Rows[0][4].ToString().Length > 0)
                                retorno.FechaIngreso = DateTime.Parse(rowsAffected.Tables[0].Rows[0][4].ToString());
                            else
                                retorno.FechaIngreso = null;
                            retorno.CodUsuarioIngreso = rowsAffected.Tables[0].Rows[0][5].ToString();
                            if (rowsAffected.Tables[0].Rows[0][6].ToString().Length > 0)
                                retorno.FechaUltimaModificacion = DateTime.Parse(rowsAffected.Tables[0].Rows[0][6].ToString());
                            else
                                retorno.FechaUltimaModificacion = null;
                            retorno.CodUsuarioUltimaModificacion = rowsAffected.Tables[0].Rows[0][7].ToString();
                            retorno.DesUsuarioIngreso = rowsAffected.Tables[0].Rows[0][8].ToString();
                            retorno.DesUsuarioUltimaModificacion = rowsAffected.Tables[0].Rows[0][9].ToString();
                        }

                        return retorno;

                        #endregion

                    }
                    catch (Exception)
                    {
                        throw;
                    }
                }
        
                public int ClasesBuquesTotalFilas(String conexion, ParametrosTotalFilasEntidad entidad)
                {

                    int value;

                    #region PARAMETROS

                    SqlParameter[] paramTransaccion = new SqlParameter[]
                    {
                        new SqlParameter("@psValor_Filtro", entidad.ValorFiltro),
                        new SqlParameter("@psColumna_Filtro", entidad.ColumnaFiltro)
                    };

                    #endregion

                    try
                    {

                        #region TOTAL FILAS

                            value = transaccionDA.TransaccionRows(conexion, "Clases_Buques_Total_Filas", paramTransaccion);

                            return value;

                        #endregion

                    }
                    catch (Exception)
                    {
                        throw;
                    }
                }

                public List<ListaEntidad> ClasesBuquesLista(String conexion, String filtro)
                {
                    List<ListaEntidad> retorno = new List<ListaEntidad>();
                    ListaEntidad elemento;
                    DataSet rowsAffected;

                    #region PARAMETROS

                    SqlParameter[] paramTransaccion = new SqlParameter[]
                    {
                        new SqlParameter("@psFiltro", filtro)
                    };

                    #endregion

                    try
                    {

                        #region LISTA

                        rowsAffected = transaccionDA.TransaccionConsulta(conexion, "Clases_Buques_Lista", paramTransaccion);
                        if (!rowsAffected.Equals(null))
                        {
                            foreach (DataRow dr in rowsAffected.Tables[0].Rows)
                            {
                                elemento = new ListaEntidad();
                                elemento.Valor = dr[0].ToString();
                                elemento.Texto = dr[1].ToString();

                                retorno.Add(elemento);
                            }
                        }
                        return retorno;

                        #endregion

                    }
                    catch (Exception)
                    {
                        throw;
                    }
                }        

            #endregion 

            #region CLASES GARANTIAS PRT17
        
                public RespuestaEntidad ClasesGarantiasPrt17Insertar(String conexion, String conexionBitacora, ClasesGarantiasPrt17Entidad claseGarantiaPrt17, BitacorasEntidad _bitacora)
                {
                    RespuestaEntidad elemento = null;
                    DataSet rowsAffected;

                    #region PARAMETROS

                    SqlParameter[] paramTransaccion = new SqlParameter[]
                    {
                        new SqlParameter("@psCod_Clase_Garantia_Prt_17", claseGarantiaPrt17.CodClaseGarantiaPrt17),
                        new SqlParameter("@psDes_Clase_Garantia_Prt_17", claseGarantiaPrt17.DesClaseGarantiaPrt17),
                        new SqlParameter("@psInd_Metodo_Insercion", claseGarantiaPrt17.IndMetodoInsercion),
                        new SqlParameter("@psCod_Usuario", claseGarantiaPrt17.CodUsuarioIngreso)                    
                    };

                    #endregion

                    try
                    {

                        #region INSERTAR

                        rowsAffected = transaccionDA.TransaccionInsertar(conexion, conexionBitacora, "Clases_Garantias_Prt_17_Inserta", paramTransaccion, EnumTipoBitacora.INSERTAR, _bitacora);
                        if (!rowsAffected.Equals(null))
                        {
                            elemento = new RespuestaEntidad();
                            elemento.ValorEstado = int.Parse(rowsAffected.Tables[0].Rows[0][0].ToString());
                            elemento.ValorError = int.Parse(rowsAffected.Tables[0].Rows[0][1].ToString());
                        }

                        return elemento;

                        #endregion

                    }
                    catch (Exception)
                    {
                        throw;
                    }
                }
        
                public RespuestaEntidad ClasesGarantiasPrt17Modificar(String conexion, String conexionBitacora, ClasesGarantiasPrt17Entidad claseGarantiaPrt17, BitacorasEntidad _bitacora)
                {
                    RespuestaEntidad elemento = null;
                    DataSet rowsAffected;

                    #region PARAMETROS

                    SqlParameter[] paramTransaccion = new SqlParameter[]
                    {
                        new SqlParameter("@piId_Clase_Garantia_Prt_17", claseGarantiaPrt17.IdClaseGarantiaPrt17),
                        new SqlParameter("@psCod_Clase_Garantia_Prt_17", claseGarantiaPrt17.CodClaseGarantiaPrt17),
                        new SqlParameter("@psDes_Clase_Garantia_Prt_17", claseGarantiaPrt17.DesClaseGarantiaPrt17),
                        new SqlParameter("@psInd_Metodo_Insercion", claseGarantiaPrt17.IndMetodoInsercion),
                        new SqlParameter("@psCod_Usuario", claseGarantiaPrt17.CodUsuarioIngreso) 
                    };

                    #endregion

                    #region KeyValuePair LIST

                    List<KeyValuePair<string, string>> itemConsulta = new List<KeyValuePair<string, string>>();
                    itemConsulta.Add(helper.CrearKeyValuePairItem("@piId_Clase_Garantia_Prt_17", claseGarantiaPrt17.IdClaseGarantiaPrt17.ToString()));

                    #endregion

                    try
                    {

                        #region MODIFICAR

                        rowsAffected = transaccionDA.TransaccionModificar(conexion, conexionBitacora, "Clases_Garantias_Prt_17_Actualiza", paramTransaccion, EnumTipoBitacora.ACTUALIZAR, itemConsulta, "Clases_Garantias_Prt_17_Consulta_Detalle", _bitacora);
                        if (!rowsAffected.Equals(null))
                        {
                            elemento = new RespuestaEntidad();
                            elemento.ValorEstado = int.Parse(rowsAffected.Tables[0].Rows[0][0].ToString());
                            elemento.ValorError = int.Parse(rowsAffected.Tables[0].Rows[0][1].ToString());
                        }

                        return elemento;

                        #endregion

                    }
                    catch (Exception)
                    {
                        throw;
                    }
                }
        
                public RespuestaEntidad ClasesGarantiasPrt17Eliminar(String conexion, String conexionBitacora, ClasesGarantiasPrt17Entidad claseGarantiaPrt17, BitacorasEntidad _bitacora)
                {
                    RespuestaEntidad elemento = null;
                    DataSet rowsAffected;

                    #region PARAMETROS

                    SqlParameter[] paramTransaccion = new SqlParameter[]
                    {
                        new SqlParameter("@piId_Clase_Garantia_Prt_17", claseGarantiaPrt17.IdClaseGarantiaPrt17)
                    };

                    #endregion

                    #region KeyValuePair LIST

                    List<KeyValuePair<string, string>> itemConsulta = new List<KeyValuePair<string, string>>();
                    itemConsulta.Add(helper.CrearKeyValuePairItem("@piId_Clase_Garantia_Prt_17", claseGarantiaPrt17.IdClaseGarantiaPrt17.ToString()));

                    #endregion

                    try
                    {

                        #region ELIMINAR

                        rowsAffected = transaccionDA.TransaccionEliminar(conexion, conexionBitacora, "Clases_Garantias_Prt_17_Elimina", paramTransaccion, EnumTipoBitacora.ELIMINAR, itemConsulta, "Clases_Garantias_Prt_17_Consulta_Detalle", _bitacora);
                        if (!rowsAffected.Equals(null))
                        {
                            elemento = new RespuestaEntidad();
                            elemento.ValorEstado = int.Parse(rowsAffected.Tables[0].Rows[0][0].ToString());
                            elemento.ValorError = int.Parse(rowsAffected.Tables[0].Rows[0][1].ToString());
                        }

                        return elemento;

                        #endregion

                    }
                    catch (Exception)
                    {
                        throw;
                    }
                }

                public List<ClasesGarantiasPrt17Entidad> ClasesGarantiasPrt17Consultar(String conexion, ParametrosConsultaEntidad entidad)
                {
                    List<ClasesGarantiasPrt17Entidad> retorno = new List<ClasesGarantiasPrt17Entidad>();
                    ClasesGarantiasPrt17Entidad elemento;
                    DataSet rowsAffected;

                    #region PARAMETROS

                    SqlParameter[] paramTransaccion = new SqlParameter[]
                    {
                        new SqlParameter("@piIndice_Inicio_Fila", entidad.IndiceInicioFila),
                        new SqlParameter("@piMaximo_Filas", entidad.MaximoFilas),
                        new SqlParameter("@psValores_Filtro", entidad.ValorFiltro),
                        new SqlParameter("@psColumnas_Filtros", entidad.ColumnaFiltro),
                        new SqlParameter("@psColumna_Ordenar", entidad.ColumnaOrdenar)
                    };

                    #endregion

                    try
                    {

                        #region CONSULTAR

                        rowsAffected = transaccionDA.TransaccionConsulta(conexion, "Clases_Garantias_Prt_17_Consulta", paramTransaccion);
                        if (!rowsAffected.Equals(null))
                        {
                            foreach (DataRow dr in rowsAffected.Tables[0].Rows)
                            {
                                elemento = new ClasesGarantiasPrt17Entidad();
                                elemento.IdClaseGarantiaPrt17 = int.Parse(dr[0].ToString());
                                elemento.CodClaseGarantiaPrt17 = dr[1].ToString();
                                elemento.DesClaseGarantiaPrt17 = dr[2].ToString();

                                retorno.Add(elemento);
                            }
                        }

                        return retorno;

                        #endregion

                    }
                    catch (Exception)
                    {
                        throw;
                    }
                }
        
                public ClasesGarantiasPrt17Entidad ClasesGarantiasPrt17ConsultarDetalle(String conexion, String conexionBitacora, ClasesGarantiasPrt17Entidad claseGarantiaPrt17, BitacorasEntidad _bitacora)
                {
                    ClasesGarantiasPrt17Entidad retorno = new ClasesGarantiasPrt17Entidad();
                    DataSet rowsAffected;

                    #region PARAMETROS

                    SqlParameter[] paramTransaccion = new SqlParameter[]
                    {
                       new SqlParameter("@piId_Clase_Garantia_Prt_17", claseGarantiaPrt17.IdClaseGarantiaPrt17)
                    };

                    #endregion

                    #region KeyValuePair LIST

                    List<KeyValuePair<string, string>> itemConsulta = new List<KeyValuePair<string, string>>();
                    itemConsulta.Add(helper.CrearKeyValuePairItem("@piId_Clase_Garantia_Prt_17", claseGarantiaPrt17.IdClaseGarantiaPrt17.ToString()));

                    #endregion

                    try
                    {

                        #region CONSULTAR DETALLE

                        rowsAffected = transaccionDA.TransaccionConsultaDetalle(conexion, conexionBitacora, "Clases_Garantias_Prt_17_Consulta_Detalle", paramTransaccion, EnumTipoBitacora.CONSULTAR, itemConsulta, "Clases_Garantias_Prt_17_Consulta_Detalle", _bitacora);
                        if (!rowsAffected.Equals(null))
                        {
                            retorno.IdClaseGarantiaPrt17 = int.Parse(rowsAffected.Tables[0].Rows[0][0].ToString());
                            retorno.CodClaseGarantiaPrt17 = rowsAffected.Tables[0].Rows[0][1].ToString();
                            retorno.DesClaseGarantiaPrt17 = rowsAffected.Tables[0].Rows[0][2].ToString();
                            retorno.IndMetodoInsercion = rowsAffected.Tables[0].Rows[0][3].ToString();
                            if (rowsAffected.Tables[0].Rows[0][4].ToString().Length > 0)
                                retorno.FechaIngreso = DateTime.Parse(rowsAffected.Tables[0].Rows[0][4].ToString());
                            else
                                retorno.FechaIngreso = null;
                            retorno.CodUsuarioIngreso = rowsAffected.Tables[0].Rows[0][5].ToString();
                            if (rowsAffected.Tables[0].Rows[0][6].ToString().Length > 0)
                                retorno.FechaUltimaModificacion = DateTime.Parse(rowsAffected.Tables[0].Rows[0][6].ToString());
                            else
                                retorno.FechaUltimaModificacion = null;
                            retorno.CodUsuarioUltimaModificacion = rowsAffected.Tables[0].Rows[0][7].ToString();
                            retorno.DesUsuarioIngreso = rowsAffected.Tables[0].Rows[0][8].ToString();
                            retorno.DesUsuarioUltimaModificacion = rowsAffected.Tables[0].Rows[0][9].ToString();
                        }

                        return retorno;

                        #endregion

                    }
                    catch (Exception)
                    {
                        throw;
                    }
                }
        
                public int ClasesGarantiasPrt17TotalFilas(String conexion, ParametrosTotalFilasEntidad entidad)
                {

                    int value;

                    #region PARAMETROS

                    SqlParameter[] paramTransaccion = new SqlParameter[]
                    {
                        new SqlParameter("@psValor_Filtro", entidad.ValorFiltro),
                        new SqlParameter("@psColumna_Filtro", entidad.ColumnaFiltro)
                    };

                    #endregion

                    try
                    {

                        #region TOTAL FILAS

                            value = transaccionDA.TransaccionRows(conexion, "Clases_Garantias_Prt_17_Total_Filas", paramTransaccion);

                            return value;

                        #endregion

                    }
                    catch (Exception)
                    {
                        throw;
                    }
                }
                //REQUERIMIENTO: 1-24493227
                public List<ListaEntidad> ClasesGarantiasPRT17Lista(String conexion, String filtro)
                {
                    List<ListaEntidad> retorno = new List<ListaEntidad>();
                    ListaEntidad elemento;
                    DataSet rowsAffected;

                    #region PARAMETROS

                    SqlParameter[] paramTransaccion = new SqlParameter[]
                    {
                        new SqlParameter("@psFiltro", filtro)
                    };

                    #endregion

                    try
                    {

                        #region LISTA

                        rowsAffected = transaccionDA.TransaccionConsulta(conexion, "Clases_Garantias_Prt_17_Lista", paramTransaccion);
                        if (!rowsAffected.Equals(null))
                        {
                            foreach (DataRow dr in rowsAffected.Tables[0].Rows)
                            {
                                elemento = new ListaEntidad();
                                elemento.Valor = dr[0].ToString();
                                elemento.Texto = dr[1].ToString();

                                retorno.Add(elemento);
                            }
                        }
                        return retorno;

                        #endregion

                    }
                    catch (Exception)
                    {
                        throw;
                    }
                }        

            #endregion 

            #region CLASES TIPOS BIENES LISTA

                public List<ListaEntidad> ClasesTiposBienesLista(String conexion, String filtro)
                {
                    List<ListaEntidad> retorno = new List<ListaEntidad>();
                    ListaEntidad elemento;
                    DataSet rowsAffected;

                    #region PARAMETROS

                    SqlParameter[] paramTransaccion = new SqlParameter[]
                    {
                        new SqlParameter("@psFiltro", filtro)
                    };

                    #endregion

                    try
                    {

                        #region LISTA

                        rowsAffected = transaccionDA.TransaccionConsulta(conexion, "Clases_Tipos_Bienes_Lista", paramTransaccion);
                        if (!rowsAffected.Equals(null))
                        {
                            foreach (DataRow dr in rowsAffected.Tables[0].Rows)
                            {
                                elemento = new ListaEntidad();
                                elemento.Valor = dr[0].ToString();
                                elemento.Texto = dr[1].ToString();

                                retorno.Add(elemento);
                            }
                        }
                        return retorno;

                        #endregion

                    }
                    catch (Exception)
                    {
                        throw;
                    }
                }
                //REQUERIMIENTO: 1-24493227
                public List<ListaEntidad> ClasesTiposBienesClasesGarantiasPrt17Lista(String conexion, String idTipoBien, String codClaseTipoBien)
                {
                    List<ListaEntidad> retorno = new List<ListaEntidad>();
                    ListaEntidad elemento;
                    DataSet rowsAffected;

                    #region PARAMETROS

                    SqlParameter[] paramTransaccion = new SqlParameter[]
                    {
                        new SqlParameter("@psId_Tipo_Bien", idTipoBien),
                        new SqlParameter("@psCod_Clase_Tipo_Bien", codClaseTipoBien)
                    };

                    #endregion

                    try
                    {

                        #region LISTA

                        rowsAffected = transaccionDA.TransaccionConsulta(conexion, "Clases_Tipos_Bienes_Clases_Garantias_Prt_17_Lista", paramTransaccion);
                        if (!rowsAffected.Equals(null))
                        {
                            foreach (DataRow dr in rowsAffected.Tables[0].Rows)
                            {
                                elemento = new ListaEntidad();
                                elemento.Valor = dr[0].ToString();
                                elemento.Texto = dr[1].ToString();

                                retorno.Add(elemento);
                            }
                        }
                        return retorno;

                        #endregion

                    }
                    catch (Exception)
                    {
                        throw;
                    }
                }

            #endregion

            #region CLASES VEHICULOS
        
                public RespuestaEntidad ClasesVehiculosInsertar(String conexion, String conexionBitacora, ClasesVehiculosEntidad claseVehiculo, BitacorasEntidad _bitacora)
                {
                    RespuestaEntidad elemento = null;
                    DataSet rowsAffected;

                    #region PARAMETROS

                    SqlParameter[] paramTransaccion = new SqlParameter[]
                    {
                        new SqlParameter("@psCod_Clase_Vehiculo", claseVehiculo.CodClaseVehiculo ),
                        new SqlParameter("@psDes_Clase_Vehiculo", claseVehiculo.DesClaseVehiculo ),
                        new SqlParameter("@psInd_Metodo_Insercion", claseVehiculo.IndMetodoInsercion),
                        new SqlParameter("@psCod_Usuario", claseVehiculo.CodUsuarioIngreso)
                    };

                    #endregion

                    try
                    {

                        #region INSERTAR

                        rowsAffected = transaccionDA.TransaccionInsertar(conexion, conexionBitacora, "Clases_Vehiculos_Inserta", paramTransaccion, EnumTipoBitacora.INSERTAR, _bitacora);
                        if (!rowsAffected.Equals(null))
                        {
                            elemento = new RespuestaEntidad();
                            elemento.ValorEstado = int.Parse(rowsAffected.Tables[0].Rows[0][0].ToString());
                            elemento.ValorError = int.Parse(rowsAffected.Tables[0].Rows[0][1].ToString());
                        }

                        return elemento;

                        #endregion

                    }
                    catch (Exception)
                    {
                        throw;
                    }
                }
        
                public RespuestaEntidad ClasesVehiculosModificar(String conexion, String conexionBitacora, ClasesVehiculosEntidad claseVehiculo, BitacorasEntidad _bitacora)
                {
                    RespuestaEntidad elemento = null;
                    DataSet rowsAffected;

                    #region PARAMETROS

                    SqlParameter[] paramTransaccion = new SqlParameter[]
                    {
                        new SqlParameter("@piId_Clase_Vehiculo", claseVehiculo.IdClaseVehiculo ),
                        new SqlParameter("@psCod_Clase_Vehiculo", claseVehiculo.CodClaseVehiculo ),
                        new SqlParameter("@psDes_Clase_Vehiculo", claseVehiculo.DesClaseVehiculo),
                        new SqlParameter("@psInd_Metodo_Insercion", claseVehiculo.IndMetodoInsercion),
                        new SqlParameter("@psCod_Usuario", claseVehiculo.CodUsuarioIngreso)
                    };

                    #endregion

                    #region KeyValuePair LIST

                    List<KeyValuePair<string, string>> itemConsulta = new List<KeyValuePair<string, string>>();
                    itemConsulta.Add(helper.CrearKeyValuePairItem("@piId_Clase_Vehiculo", claseVehiculo.IdClaseVehiculo.ToString()));

                    #endregion

                    try
                    {

                        #region MODIFICAR

                        rowsAffected = transaccionDA.TransaccionModificar(conexion, conexionBitacora, "Clases_Vehiculos_Actualiza", paramTransaccion, EnumTipoBitacora.ACTUALIZAR, itemConsulta, "Clases_Vehiculos_Consulta_Detalle", _bitacora);
                        if (!rowsAffected.Equals(null))
                        {
                            elemento = new RespuestaEntidad();
                            elemento.ValorEstado = int.Parse(rowsAffected.Tables[0].Rows[0][0].ToString());
                            elemento.ValorError = int.Parse(rowsAffected.Tables[0].Rows[0][1].ToString());
                        }

                        return elemento;

                        #endregion

                    }
                    catch (Exception)
                    {
                        throw;
                    }
                }
        
                public RespuestaEntidad ClasesVehiculosEliminar(String conexion, String conexionBitacora, ClasesVehiculosEntidad claseVehiculo, BitacorasEntidad _bitacora)
                {
                    RespuestaEntidad elemento = null;
                    DataSet rowsAffected;

                    #region PARAMETROS

                    SqlParameter[] paramTransaccion = new SqlParameter[]
                    {
                        new SqlParameter("@piId_Clase_Vehiculo", claseVehiculo.IdClaseVehiculo)
                    };

                    #endregion

                    #region KeyValuePair LIST

                    List<KeyValuePair<string, string>> itemConsulta = new List<KeyValuePair<string, string>>();
                    itemConsulta.Add(helper.CrearKeyValuePairItem("@piId_Clase_Vehiculo", claseVehiculo.IdClaseVehiculo.ToString()));

                    #endregion

                    try
                    {

                        #region ELIMINAR

                        rowsAffected = transaccionDA.TransaccionEliminar(conexion, conexionBitacora, "Clases_Vehiculos_Elimina", paramTransaccion, EnumTipoBitacora.ELIMINAR, itemConsulta, "Clases_Vehiculos_Consulta_Detalle", _bitacora);
                        if (!rowsAffected.Equals(null))
                        {
                            elemento = new RespuestaEntidad();
                            elemento.ValorEstado = int.Parse(rowsAffected.Tables[0].Rows[0][0].ToString());
                            elemento.ValorError = int.Parse(rowsAffected.Tables[0].Rows[0][1].ToString());
                        }

                        return elemento;

                        #endregion

                    }
                    catch (Exception)
                    {
                        throw;
                    }
                }

                public List<ClasesVehiculosEntidad> ClasesVehiculosConsultar(String conexion, ParametrosConsultaEntidad entidad)
                {
                    List<ClasesVehiculosEntidad> retorno = new List<ClasesVehiculosEntidad>();
                    ClasesVehiculosEntidad elemento;
                    DataSet rowsAffected;
                    
                    #region PARAMETROS

                    SqlParameter[] paramTransaccion = new SqlParameter[]
                    {
                       new SqlParameter("@piIndice_Inicio_Fila", entidad.IndiceInicioFila),
                       new SqlParameter("@piMaximo_Filas", entidad.MaximoFilas),
                       new SqlParameter("@psValores_Filtro", entidad.ValorFiltro),
                       new SqlParameter("@psColumnas_Filtros", entidad.ColumnaFiltro),
                       new SqlParameter("@psColumna_Ordenar", entidad.ColumnaOrdenar)
                    };

                    #endregion

                    try
                    {

                        #region CONSULTAR

                            rowsAffected = transaccionDA.TransaccionConsulta(conexion, "Clases_Vehiculos_Consulta", paramTransaccion);
                            if (!rowsAffected.Equals(null))
                            {
                                foreach (DataRow dr in rowsAffected.Tables[0].Rows)
                                {
                                    elemento = new ClasesVehiculosEntidad();
                                    elemento.IdClaseVehiculo = int.Parse(dr[0].ToString());
                                    elemento.CodClaseVehiculo = dr[1].ToString();
                                    elemento.DesClaseVehiculo = dr[2].ToString();

                                    retorno.Add(elemento);
                                }
                            }

                            return retorno;

                        #endregion

                    }
                    catch (Exception)
                    {
                        throw;
                    }
                }
        
                public ClasesVehiculosEntidad ClasesVehiculosConsultarDetalle(String conexion, String conexionBitacora, ClasesVehiculosEntidad claseVehiculo, BitacorasEntidad _bitacora)
                {
                    ClasesVehiculosEntidad retorno = new ClasesVehiculosEntidad();
                    DataSet rowsAffected;

                    #region PARAMETROS

                    SqlParameter[] paramTransaccion = new SqlParameter[]
                    {
                        new SqlParameter("@piId_Clase_Vehiculo", claseVehiculo.IdClaseVehiculo)
                    };

                    #endregion

                    #region KeyValuePair LIST

                    List<KeyValuePair<string, string>> itemConsulta = new List<KeyValuePair<string, string>>();
                    itemConsulta.Add(helper.CrearKeyValuePairItem("@piId_Clase_Vehiculo", claseVehiculo.IdClaseVehiculo.ToString()));

                    #endregion

                    try
                    {

                        #region CONSULTAR DETALLE

                        rowsAffected = transaccionDA.TransaccionConsultaDetalle(conexion, conexionBitacora, "Clases_Vehiculos_Consulta_Detalle", paramTransaccion, EnumTipoBitacora.CONSULTAR, itemConsulta, "Clases_Vehiculos_Consulta_Detalle", _bitacora);
                        if (!rowsAffected.Equals(null))
                        {
                            retorno.IdClaseVehiculo = int.Parse(rowsAffected.Tables[0].Rows[0][0].ToString());
                            retorno.CodClaseVehiculo = rowsAffected.Tables[0].Rows[0][1].ToString();
                            retorno.DesClaseVehiculo = rowsAffected.Tables[0].Rows[0][2].ToString();
                            retorno.IndMetodoInsercion = rowsAffected.Tables[0].Rows[0][3].ToString();
                            if (rowsAffected.Tables[0].Rows[0][4].ToString().Length > 0)
                                retorno.FechaIngreso = DateTime.Parse(rowsAffected.Tables[0].Rows[0][4].ToString());
                            else
                                retorno.FechaIngreso = null;
                            retorno.CodUsuarioIngreso = rowsAffected.Tables[0].Rows[0][5].ToString();
                            if (rowsAffected.Tables[0].Rows[0][6].ToString().Length > 0)
                                retorno.FechaUltimaModificacion = DateTime.Parse(rowsAffected.Tables[0].Rows[0][6].ToString());
                            else
                                retorno.FechaUltimaModificacion = null;
                            retorno.CodUsuarioUltimaModificacion = rowsAffected.Tables[0].Rows[0][7].ToString();
                            retorno.DesUsuarioIngreso = rowsAffected.Tables[0].Rows[0][8].ToString();
                            retorno.DesUsuarioUltimaModificacion = rowsAffected.Tables[0].Rows[0][9].ToString();
                        }

                        return retorno;

                        #endregion

                    }
                    catch (Exception)
                    {
                        throw;
                    }
                }
        
                public int ClasesVehiculosTotalFilas(String conexion, ParametrosTotalFilasEntidad entidad)
                {

                    int value;

                    #region PARAMETROS

                    SqlParameter[] paramTransaccion = new SqlParameter[]
                    {
                        new SqlParameter("@psValor_Filtro", entidad.ValorFiltro),
                        new SqlParameter("@psColumna_Filtro", entidad.ColumnaFiltro)
                    };

                    #endregion

                    try
                    {

                        #region TOTAL FILAS

                            value = transaccionDA.TransaccionRows(conexion, "Clases_Vehiculos_Total_Filas", paramTransaccion);

                            return value;

                        #endregion

                    }
                    catch (Exception)
                    {
                        throw;
                    }
                }

                public List<ListaEntidad> ClasesVehiculosLista(String conexion, String filtro)
                {
                    List<ListaEntidad> retorno = new List<ListaEntidad>();
                    ListaEntidad elemento;
                    DataSet rowsAffected;

                    #region PARAMETROS

                    SqlParameter[] paramTransaccion = new SqlParameter[]
                    {
                        new SqlParameter("@psFiltro", filtro)
                    };

                    #endregion

                    try
                    {

                        #region LISTA

                        rowsAffected = transaccionDA.TransaccionConsulta(conexion, "Clases_Vehiculos_Lista", paramTransaccion);
                        if (!rowsAffected.Equals(null))
                        {
                            foreach (DataRow dr in rowsAffected.Tables[0].Rows)
                            {
                                elemento = new ListaEntidad();
                                elemento.Valor = dr[0].ToString();
                                elemento.Texto = dr[1].ToString();

                                retorno.Add(elemento);
                            }
                        }
                        return retorno;

                        #endregion

                    }
                    catch (Exception)
                    {
                        throw;
                    }
                }

                public List<ListaEntidad> ClasesVehiculosLista2(String conexion, String filtro)
                {
                    List<ListaEntidad> retorno = new List<ListaEntidad>();
                    ListaEntidad elemento;
                    DataSet rowsAffected;

                    #region PARAMETROS

                    SqlParameter[] paramTransaccion = new SqlParameter[]
                    {
                        new SqlParameter("@psFiltro", filtro)
                    };

                    #endregion

                    try
                    {

                        #region LISTA

                        rowsAffected = transaccionDA.TransaccionConsulta(conexion, "Clases_Vehiculos_Lista_Filtrada", paramTransaccion);
                        if (!rowsAffected.Equals(null))
                        {
                            foreach (DataRow dr in rowsAffected.Tables[0].Rows)
                            {
                                elemento = new ListaEntidad();
                                elemento.Valor = dr[0].ToString();
                                elemento.Texto = dr[1].ToString();

                                retorno.Add(elemento);
                            }
                        }
                        return retorno;

                        #endregion

                    }
                    catch (Exception)
                    {
                        throw;
                    }
                }

            #endregion 

            #region CODIGOS DUPLICADOS
        
                public RespuestaEntidad CodigosDuplicadosInsertar(String conexion, String conexionBitacora, CodigosDuplicadosEntidad codigoDuplicado, BitacorasEntidad _bitacora)
                {
                    RespuestaEntidad elemento = null;
                    DataSet rowsAffected;

                    #region PARAMETROS

                    SqlParameter[] paramTransaccion = new SqlParameter[]
                    {
                        new SqlParameter("@psCod_Codigo_Duplicado", codigoDuplicado.CodCodigoDuplicado),
                        new SqlParameter("@psDes_Codigo_Duplicado", codigoDuplicado.DesCodigoDuplicado),
                        new SqlParameter("@psInd_Metodo_Insercion", codigoDuplicado.IndMetodoInsercion),
                        new SqlParameter("@psCod_Usuario", codigoDuplicado.CodUsuarioIngreso)
                    };

                    #endregion

                    try
                    {

                        #region INSERTAR

                        rowsAffected = transaccionDA.TransaccionInsertar(conexion, conexionBitacora, "Codigos_Duplicados_Inserta", paramTransaccion, EnumTipoBitacora.INSERTAR, _bitacora);
                        if (!rowsAffected.Equals(null))
                        {
                            elemento = new RespuestaEntidad();
                            elemento.ValorEstado = int.Parse(rowsAffected.Tables[0].Rows[0][0].ToString());
                            elemento.ValorError = int.Parse(rowsAffected.Tables[0].Rows[0][1].ToString());
                        }

                        return elemento;

                        #endregion

                    }
                    catch (Exception)
                    {
                        throw;
                    }
                }
        
                public RespuestaEntidad CodigosDuplicadosModificar(String conexion, String conexionBitacora, CodigosDuplicadosEntidad codigoDuplicado, BitacorasEntidad _bitacora)
                {
                    RespuestaEntidad elemento = null;
                    DataSet rowsAffected;

                    #region PARAMETROS

                    SqlParameter[] paramTransaccion = new SqlParameter[]
                    {
                        new SqlParameter("@piId_Codigo_Duplicado", codigoDuplicado.IdCodigoDuplicado),
                        new SqlParameter("@psCod_Codigo_Duplicado", codigoDuplicado.CodCodigoDuplicado),
                        new SqlParameter("@psDes_Codigo_Duplicado", codigoDuplicado.DesCodigoDuplicado),
                        new SqlParameter("@psInd_Metodo_Insercion", codigoDuplicado.IndMetodoInsercion),
                        new SqlParameter("@psCod_Usuario", codigoDuplicado.CodUsuarioIngreso)
                    };

                    #endregion

                    #region KeyValuePair LIST

                    List<KeyValuePair<string, string>> itemConsulta = new List<KeyValuePair<string, string>>();
                    itemConsulta.Add(helper.CrearKeyValuePairItem("@piId_Codigo_Duplicado", codigoDuplicado.IdCodigoDuplicado.ToString()));

                    #endregion

                    try
                    {

                        #region MODIFICAR

                        rowsAffected = transaccionDA.TransaccionModificar(conexion, conexionBitacora, "Codigos_Duplicados_Actualiza", paramTransaccion, EnumTipoBitacora.ACTUALIZAR, itemConsulta, "Codigos_Duplicados_Consulta_Detalle", _bitacora);
                        if (!rowsAffected.Equals(null))
                        {
                            elemento = new RespuestaEntidad();
                            elemento.ValorEstado = int.Parse(rowsAffected.Tables[0].Rows[0][0].ToString());
                            elemento.ValorError = int.Parse(rowsAffected.Tables[0].Rows[0][1].ToString());
                        }

                        return elemento;

                        #endregion

                    }
                    catch (Exception)
                    {
                        throw;
                    }
                }
        
                public RespuestaEntidad CodigosDuplicadosEliminar(String conexion, String conexionBitacora, CodigosDuplicadosEntidad codigoDuplicado, BitacorasEntidad _bitacora)
                {
                    RespuestaEntidad elemento = null;
                    DataSet rowsAffected;

                    #region PARAMETROS

                    SqlParameter[] paramTransaccion = new SqlParameter[]
                    {
                        new SqlParameter("@piId_Codigo_Duplicado", codigoDuplicado.IdCodigoDuplicado)
                    };

                    #endregion

                    #region KeyValuePair LIST

                    List<KeyValuePair<string, string>> itemConsulta = new List<KeyValuePair<string, string>>();
                    itemConsulta.Add(helper.CrearKeyValuePairItem("@piId_Codigo_Duplicado", codigoDuplicado.IdCodigoDuplicado.ToString()));

                    #endregion

                    try
                    {

                        #region ELIMINAR

                        rowsAffected = transaccionDA.TransaccionEliminar(conexion, conexionBitacora, "Codigos_Duplicados_Elimina", paramTransaccion, EnumTipoBitacora.ELIMINAR, itemConsulta, "Codigos_Duplicados_Consulta_Detalle", _bitacora);
                        if (!rowsAffected.Equals(null))
                        {
                            elemento = new RespuestaEntidad();
                            elemento.ValorEstado = int.Parse(rowsAffected.Tables[0].Rows[0][0].ToString());
                            elemento.ValorError = int.Parse(rowsAffected.Tables[0].Rows[0][1].ToString());
                        }

                        return elemento;

                        #endregion

                    }
                    catch (Exception)
                    {
                        throw;
                    }
                }

                public List<CodigosDuplicadosEntidad> CodigosDuplicadosConsultar(String conexion, ParametrosConsultaEntidad entidad)
                {
                    List<CodigosDuplicadosEntidad> retorno = new List<CodigosDuplicadosEntidad>();
                    CodigosDuplicadosEntidad elemento;
                    DataSet rowsAffected;

                    #region PARAMETROS

                    SqlParameter[] paramTransaccion = new SqlParameter[]
                    {
                       new SqlParameter("@piIndice_Inicio_Fila", entidad.IndiceInicioFila),
                       new SqlParameter("@piMaximo_Filas", entidad.MaximoFilas),
                       new SqlParameter("@psValores_Filtro", entidad.ValorFiltro),
                       new SqlParameter("@psColumnas_Filtros", entidad.ColumnaFiltro),
                       new SqlParameter("@psColumna_Ordenar", entidad.ColumnaOrdenar)
                    };

                    #endregion

                    try
                    {

                        #region CONSULTAR

                            rowsAffected = transaccionDA.TransaccionConsulta(conexion, "Codigos_Duplicados_Consulta", paramTransaccion);
                            if (!rowsAffected.Equals(null))
                            {
                                foreach (DataRow dr in rowsAffected.Tables[0].Rows)
                                {
                                    elemento = new CodigosDuplicadosEntidad();
                                    elemento.IdCodigoDuplicado = int.Parse(dr[0].ToString());
                                    elemento.CodCodigoDuplicado = dr[1].ToString();
                                    elemento.DesCodigoDuplicado = dr[2].ToString();

                                    retorno.Add(elemento);
                                }
                            }

                            return retorno;

                        #endregion

                    }
                    catch (Exception)
                    {
                        throw;
                    }
                }
       
                public CodigosDuplicadosEntidad CodigosDuplicadosConsultarDetalle(String conexion, String conexionBitacora, CodigosDuplicadosEntidad codigoDuplicado, BitacorasEntidad _bitacora)
                {
                    CodigosDuplicadosEntidad retorno = new CodigosDuplicadosEntidad();
                    DataSet rowsAffected;

                    #region PARAMETROS

                    SqlParameter[] paramTransaccion = new SqlParameter[]
                    {
                        new SqlParameter("@piId_Codigo_Duplicado", codigoDuplicado.IdCodigoDuplicado)
                    };

                    #endregion

                    #region KeyValuePair LIST

                    List<KeyValuePair<string, string>> itemConsulta = new List<KeyValuePair<string, string>>();
                    itemConsulta.Add(helper.CrearKeyValuePairItem("@piId_Codigo_Duplicado", codigoDuplicado.IdCodigoDuplicado.ToString()));

                    #endregion

                    try
                    {

                        #region CONSULTAR DETALLE

                        rowsAffected = transaccionDA.TransaccionConsultaDetalle(conexion, conexionBitacora, "Codigos_Duplicados_Consulta_Detalle", paramTransaccion, EnumTipoBitacora.CONSULTAR, itemConsulta, "Codigos_Duplicados_Consulta_Detalle", _bitacora);
                        if (!rowsAffected.Equals(null))
                        {
                            retorno.IdCodigoDuplicado = int.Parse(rowsAffected.Tables[0].Rows[0][0].ToString());
                            retorno.CodCodigoDuplicado = rowsAffected.Tables[0].Rows[0][1].ToString();
                            retorno.DesCodigoDuplicado = rowsAffected.Tables[0].Rows[0][2].ToString();
                            retorno.IndMetodoInsercion = rowsAffected.Tables[0].Rows[0][3].ToString();
                            if (rowsAffected.Tables[0].Rows[0][4].ToString().Length > 0)
                                retorno.FechaIngreso = DateTime.Parse(rowsAffected.Tables[0].Rows[0][4].ToString());
                            else
                                retorno.FechaIngreso = null;
                            retorno.CodUsuarioIngreso = rowsAffected.Tables[0].Rows[0][5].ToString();
                            if (rowsAffected.Tables[0].Rows[0][6].ToString().Length > 0)
                                retorno.FechaUltimaModificacion = DateTime.Parse(rowsAffected.Tables[0].Rows[0][6].ToString());
                            else
                                retorno.FechaUltimaModificacion = null;
                            retorno.CodUsuarioUltimaModificacion = rowsAffected.Tables[0].Rows[0][7].ToString();
                            retorno.DesUsuarioIngreso = rowsAffected.Tables[0].Rows[0][8].ToString();
                            retorno.DesUsuarioUltimaModificacion = rowsAffected.Tables[0].Rows[0][9].ToString();
                        }

                        return retorno;

                        #endregion

                    }
                    catch (Exception)
                    {
                        throw;
                    }
                }
        
                public int CodigosDuplicadosTotalFilas(String conexion, ParametrosTotalFilasEntidad entidad)
                {

                    int value;

                    #region PARAMETROS

                    SqlParameter[] paramTransaccion = new SqlParameter[]
                    {
                        new SqlParameter("@psValor_Filtro", entidad.ValorFiltro),
                        new SqlParameter("@psColumna_Filtro", entidad.ColumnaFiltro)
                    };

                    #endregion

                    try
                    {

                        #region TOTAL FILAS

                            value = transaccionDA.TransaccionRows(conexion, "Codigos_Duplicados_Total_Filas", paramTransaccion);

                            return value;

                        #endregion

                    }
                    catch (Exception)
                    {
                        throw;
                    }
                }

                public List<ListaEntidad> CodigosDuplicadosLista(String conexion, String filtro)
                {
                    List<ListaEntidad> retorno = new List<ListaEntidad>();
                    ListaEntidad elemento;
                    DataSet rowsAffected;

                    #region PARAMETROS

                    SqlParameter[] paramTransaccion = new SqlParameter[]
                    {
                        new SqlParameter("@psFiltro", filtro)
                    };

                    #endregion

                    try
                    {

                        #region LISTA

                        rowsAffected = transaccionDA.TransaccionConsulta(conexion, "Codigos_Duplicados_Lista", paramTransaccion);
                        if (!rowsAffected.Equals(null))
                        {
                            foreach (DataRow dr in rowsAffected.Tables[0].Rows)
                            {
                                elemento = new ListaEntidad();
                                elemento.Valor = dr[0].ToString();
                                elemento.Texto = dr[1].ToString();

                                retorno.Add(elemento);
                            }
                        }
                        return retorno;

                        #endregion

                    }
                    catch (Exception)
                    {
                        throw;
                    }
                }

            #endregion 

            #region CODIGOS HORIZONTALIDAD
        
                public RespuestaEntidad CodigosHorizontalidadInsertar(String conexion, String conexionBitacora, CodigosHorizontalidadEntidad codigoHorizontalidad, BitacorasEntidad _bitacora)
                {
                    RespuestaEntidad elemento = null;
                    DataSet rowsAffected;

                    #region PARAMETROS

                    SqlParameter[] paramTransaccion = new SqlParameter[]
                    {
                        new SqlParameter("@psCod_Codigo_Horizontalidad", codigoHorizontalidad.CodCodigoHorizontalidad),
                        new SqlParameter("@psDes_Codigo_Horizontalidad", codigoHorizontalidad.DesCodigoHorizontalidad),
                        new SqlParameter("@psInd_Metodo_Insercion", codigoHorizontalidad.IndMetodoInsercion),
                        new SqlParameter("@psCod_Usuario", codigoHorizontalidad.CodUsuarioIngreso)
                    };

                    #endregion

                    try
                    {

                        #region INSERTAR

                        rowsAffected = transaccionDA.TransaccionInsertar(conexion, conexionBitacora, "Codigos_Horizontalidades_Inserta", paramTransaccion, EnumTipoBitacora.INSERTAR, _bitacora);
                        if (!rowsAffected.Equals(null))
                        {
                            elemento = new RespuestaEntidad();
                            elemento.ValorEstado = int.Parse(rowsAffected.Tables[0].Rows[0][0].ToString());
                            elemento.ValorError = int.Parse(rowsAffected.Tables[0].Rows[0][1].ToString());
                        }

                        return elemento;

                        #endregion

                    }
                    catch (Exception)
                    {
                        throw;
                    }
                }
        
                public RespuestaEntidad CodigosHorizontalidadModificar(String conexion, String conexionBitacora, CodigosHorizontalidadEntidad codigoHorizontalidad, BitacorasEntidad _bitacora)
                {
                    RespuestaEntidad elemento = null;
                    DataSet rowsAffected;

                    #region PARAMETROS

                    SqlParameter[] paramTransaccion = new SqlParameter[]
                    {
                        new SqlParameter("@piId_Codigo_Horizontalidad", codigoHorizontalidad.IdCodigoHorizontalidad),
                        new SqlParameter("@psCod_Codigo_Horizontalidad", codigoHorizontalidad.CodCodigoHorizontalidad),
                        new SqlParameter("@psDes_Codigo_Horizontalidad", codigoHorizontalidad.DesCodigoHorizontalidad),
                        new SqlParameter("@psInd_Metodo_Insercion", codigoHorizontalidad.IndMetodoInsercion),
                        new SqlParameter("@psCod_Usuario", codigoHorizontalidad.CodUsuarioIngreso)
                    };

                    #endregion

                    #region KeyValuePair LIST

                    List<KeyValuePair<string, string>> itemConsulta = new List<KeyValuePair<string, string>>();
                    itemConsulta.Add(helper.CrearKeyValuePairItem("@piId_Codigo_Horizontalidad", codigoHorizontalidad.IdCodigoHorizontalidad.ToString()));

                    #endregion

                    try
                    {

                        #region MODIFICAR

                        rowsAffected = transaccionDA.TransaccionModificar(conexion, conexionBitacora, "Codigos_Horizontalidades_Actualiza", paramTransaccion, EnumTipoBitacora.INSERTAR, itemConsulta, "Codigos_Horizontalidades_Consulta_Detalle", _bitacora);
                        if (!rowsAffected.Equals(null))
                        {
                            elemento = new RespuestaEntidad();
                            elemento.ValorEstado = int.Parse(rowsAffected.Tables[0].Rows[0][0].ToString());
                            elemento.ValorError = int.Parse(rowsAffected.Tables[0].Rows[0][1].ToString());
                        }

                        return elemento; 

                        #endregion

                    }
                    catch (Exception)
                    {
                        throw;
                    }
                }
        
                public RespuestaEntidad CodigosHorizontalidadEliminar(String conexion, String conexionBitacora, CodigosHorizontalidadEntidad codigoHorizontalidad, BitacorasEntidad _bitacora)
                {
                    RespuestaEntidad elemento = null;
                    DataSet rowsAffected;

                    #region PARAMETROS

                    SqlParameter[] paramTransaccion = new SqlParameter[]
                    {
                        new SqlParameter("@piId_Codigo_Horizontalidad", codigoHorizontalidad.IdCodigoHorizontalidad)
                    };

                    #endregion

                    #region KeyValuePair LIST

                    List<KeyValuePair<string, string>> itemConsulta = new List<KeyValuePair<string, string>>();
                    itemConsulta.Add(helper.CrearKeyValuePairItem("@piId_Codigo_Horizontalidad", codigoHorizontalidad.IdCodigoHorizontalidad.ToString()));

                    #endregion

                    try
                    {

                        #region ELIMINAR

                        rowsAffected = transaccionDA.TransaccionEliminar(conexion, conexionBitacora, "Codigos_Horizontalidades_Elimina", paramTransaccion, EnumTipoBitacora.ELIMINAR, itemConsulta, "Codigos_Horizontalidades_Consulta_Detalle", _bitacora);
                        if (!rowsAffected.Equals(null))
                        {
                            elemento = new RespuestaEntidad();
                            elemento.ValorEstado = int.Parse(rowsAffected.Tables[0].Rows[0][0].ToString());
                            elemento.ValorError = int.Parse(rowsAffected.Tables[0].Rows[0][1].ToString());
                        }

                        return elemento;

                        #endregion

                    }
                    catch (Exception)
                    {
                        throw;
                    }
                }

                public List<CodigosHorizontalidadEntidad> CodigosHorizontalidadConsultar(String conexion, ParametrosConsultaEntidad entidad)
                {
                    List<CodigosHorizontalidadEntidad> retorno = new List<CodigosHorizontalidadEntidad>();
                    CodigosHorizontalidadEntidad elemento;
                    DataSet rowsAffected;

                    #region PARAMETROS

                    SqlParameter[] paramTransaccion = new SqlParameter[]
                    {
                       new SqlParameter("@piIndice_Inicio_Fila", entidad.IndiceInicioFila),
                       new SqlParameter("@piMaximo_Filas", entidad.MaximoFilas),
                       new SqlParameter("@psValores_Filtro", entidad.ValorFiltro),
                       new SqlParameter("@psColumnas_Filtros", entidad.ColumnaFiltro),
                       new SqlParameter("@psColumna_Ordenar", entidad.ColumnaOrdenar)
                    };

                    #endregion

                    try
                    {

                        #region CONSULTAR

                            rowsAffected = transaccionDA.TransaccionConsulta(conexion, "Codigos_Horizontalidades_Consulta", paramTransaccion);
                            if (!rowsAffected.Equals(null))
                            {
                                foreach (DataRow dr in rowsAffected.Tables[0].Rows)
                                {
                                    elemento = new CodigosHorizontalidadEntidad();
                                    elemento.IdCodigoHorizontalidad = int.Parse(dr[0].ToString());
                                    elemento.CodCodigoHorizontalidad = dr[1].ToString();
                                    elemento.DesCodigoHorizontalidad = dr[2].ToString();

                                    retorno.Add(elemento);
                                }
                            }

                            return retorno;

                        #endregion

                    }
                    catch (Exception)
                    {
                        throw;
                    }
                }
        
                public CodigosHorizontalidadEntidad CodigosHorizontalidadConsultarDetalle(String conexion, String conexionBitacora, CodigosHorizontalidadEntidad codigoHorizontalidad, BitacorasEntidad _bitacora)
                {
                    CodigosHorizontalidadEntidad retorno = new CodigosHorizontalidadEntidad();
                    DataSet rowsAffected;

                    #region PARAMETROS

                    SqlParameter[] paramTransaccion = new SqlParameter[]
                    {
                        new SqlParameter("@piId_Codigo_Horizontalidad", codigoHorizontalidad.IdCodigoHorizontalidad)
                    };

                    #endregion

                    #region KeyValuePair LIST

                    List<KeyValuePair<string, string>> itemConsulta = new List<KeyValuePair<string, string>>();
                    itemConsulta.Add(helper.CrearKeyValuePairItem("@piId_Codigo_Horizontalidad", codigoHorizontalidad.IdCodigoHorizontalidad.ToString()));

                    #endregion

                    try
                    {

                        #region CONSULTAR DETALLE

                        rowsAffected = transaccionDA.TransaccionConsultaDetalle(conexion, conexionBitacora, "Codigos_Horizontalidades_Consulta_Detalle", paramTransaccion, EnumTipoBitacora.CONSULTAR, itemConsulta, "Codigos_Horizontalidades_Consulta_Detalle", _bitacora);
                        if (!rowsAffected.Equals(null))
                        {
                            retorno.IdCodigoHorizontalidad = int.Parse(rowsAffected.Tables[0].Rows[0][0].ToString());
                            retorno.CodCodigoHorizontalidad = rowsAffected.Tables[0].Rows[0][1].ToString();
                            retorno.DesCodigoHorizontalidad = rowsAffected.Tables[0].Rows[0][2].ToString();
                            retorno.IndMetodoInsercion = rowsAffected.Tables[0].Rows[0][3].ToString();
                            if (rowsAffected.Tables[0].Rows[0][4].ToString().Length > 0)
                                retorno.FechaIngreso = DateTime.Parse(rowsAffected.Tables[0].Rows[0][4].ToString());
                            else
                                retorno.FechaIngreso = null;
                            retorno.CodUsuarioIngreso = rowsAffected.Tables[0].Rows[0][5].ToString();
                            if (rowsAffected.Tables[0].Rows[0][6].ToString().Length > 0)
                                retorno.FechaUltimaModificacion = DateTime.Parse(rowsAffected.Tables[0].Rows[0][6].ToString());
                            else
                                retorno.FechaUltimaModificacion = null;
                            retorno.CodUsuarioUltimaModificacion = rowsAffected.Tables[0].Rows[0][7].ToString();
                            retorno.DesUsuarioIngreso = rowsAffected.Tables[0].Rows[0][8].ToString();
                            retorno.DesUsuarioUltimaModificacion = rowsAffected.Tables[0].Rows[0][9].ToString();
                        }

                        return retorno;

                        #endregion

                    }
                    catch (Exception)
                    {
                        throw;
                    }
                }
        
                public int CodigosHorizontalidadTotalFilas(String conexion, ParametrosTotalFilasEntidad entidad)
                {

                    int value;

                    #region PARAMETROS

                    SqlParameter[] paramTransaccion = new SqlParameter[]
                    {
                        new SqlParameter("@psValor_Filtro", entidad.ValorFiltro),
                        new SqlParameter("@psColumna_Filtro", entidad.ColumnaFiltro)
                    };

                    #endregion

                    try
                    {

                        #region TOTAL FILAS
                        
                            value = transaccionDA.TransaccionRows(conexion, "Codigos_Horizontalidades_Total_Filas", paramTransaccion);

                            return value;

                        #endregion

                    }
                    catch (Exception)
                    {
                        throw;
                    }
                }

                public List<ListaEntidad> CodigosHorizontalidadLista(String conexion, String filtro)
                {
                    List<ListaEntidad> retorno = new List<ListaEntidad>();
                    ListaEntidad elemento;
                    DataSet rowsAffected;

                    #region PARAMETROS

                    SqlParameter[] paramTransaccion = new SqlParameter[]
                    {
                        new SqlParameter("@psFiltro", filtro)
                    };

                    #endregion

                    try
                    {

                        #region LISTA

                        rowsAffected = transaccionDA.TransaccionConsulta(conexion, "Codigos_Horizontalidades_Lista", paramTransaccion);
                        if (!rowsAffected.Equals(null))
                        {
                            foreach (DataRow dr in rowsAffected.Tables[0].Rows)
                            {
                                elemento = new ListaEntidad();
                                elemento.Valor = dr[0].ToString();
                                elemento.Texto = dr[1].ToString();

                                retorno.Add(elemento);
                            }
                        }
                        return retorno;

                        #endregion

                    }
                    catch (Exception)
                    {
                        throw;
                    }
                }

            #endregion 

            #region COLINDANTES
        
                public RespuestaEntidad ColindantesInsertar(String conexion, String conexionBitacora, ColindantesEntidad colindante, BitacorasEntidad _bitacora)
                {
                    RespuestaEntidad elemento = null;
                    DataSet rowsAffected;

                    #region PARAMETROS

                    SqlParameter[] paramTransaccion = new SqlParameter[]
                    {
                        new SqlParameter("@piCod_Colindante", colindante.CodColindante),
                        new SqlParameter("@psDes_Colindante", colindante.DesColindante),
                        new SqlParameter("@psInd_Metodo_Insercion", colindante.IndMetodoInsercion),
                        new SqlParameter("@psCod_Usuario", colindante.CodUsuarioIngreso)
                    };

                    #endregion

                    try
                    {

                        #region INSERTAR

                        rowsAffected = transaccionDA.TransaccionInsertar(conexion, conexionBitacora, "Colindantes_Inserta", paramTransaccion, EnumTipoBitacora.INSERTAR, _bitacora);
                        if (!rowsAffected.Equals(null))
                        {
                            elemento = new RespuestaEntidad();
                            elemento.ValorEstado = int.Parse(rowsAffected.Tables[0].Rows[0][0].ToString());
                            elemento.ValorError = int.Parse(rowsAffected.Tables[0].Rows[0][1].ToString());
                        }

                        return elemento;

                        #endregion

                    }
                    catch (Exception)
                    {
                        throw;
                    }
                }
        
                public RespuestaEntidad ColindantesModificar(String conexion, String conexionBitacora, ColindantesEntidad colindante, BitacorasEntidad _bitacora)
                {
                    RespuestaEntidad elemento = null;
                    DataSet rowsAffected;

                    #region PARAMETROS

                    SqlParameter[] paramTransaccion = new SqlParameter[]
                    {
                        new SqlParameter("@piId_Colindante", colindante.IdColindante),
                        new SqlParameter("@piCod_Colindante", colindante.CodColindante),
                        new SqlParameter("@psDes_Colindante", colindante.DesColindante),
                        new SqlParameter("@psInd_Metodo_Insercion", colindante.IndMetodoInsercion),
                        new SqlParameter("@psCod_Usuario", colindante.CodUsuarioIngreso)
                    };

                    #endregion

                    #region KeyValuePair LIST

                    List<KeyValuePair<string, string>> itemConsulta = new List<KeyValuePair<string, string>>();
                    itemConsulta.Add(helper.CrearKeyValuePairItem("@piId_Colindante", colindante.IdColindante.ToString()));

                    #endregion

                    try
                    {

                        #region MODIFICAR

                        rowsAffected = transaccionDA.TransaccionModificar(conexion, conexionBitacora, "Colindantes_Actualiza", paramTransaccion, EnumTipoBitacora.ACTUALIZAR, itemConsulta, "Colindantes_Consulta_Detalle", _bitacora);
                        if (!rowsAffected.Equals(null))
                        {
                            elemento = new RespuestaEntidad();
                            elemento.ValorEstado = int.Parse(rowsAffected.Tables[0].Rows[0][0].ToString());
                            elemento.ValorError = int.Parse(rowsAffected.Tables[0].Rows[0][1].ToString());
                        }

                        return elemento;

                        #endregion

                    }
                    catch (Exception)
                    {
                        throw;
                    }
                }
        
                public RespuestaEntidad ColindantesEliminar(String conexion, String conexionBitacora, ColindantesEntidad colindante, BitacorasEntidad _bitacora)
                {
                    RespuestaEntidad elemento = null;
                    DataSet rowsAffected;

                    #region PARAMETROS

                    SqlParameter[] paramTransaccion = new SqlParameter[]
                    {
                        new SqlParameter("@piId_Colindante", colindante.IdColindante)
                    };

                    #endregion

                    #region KeyValuePair LIST

                    List<KeyValuePair<string, string>> itemConsulta = new List<KeyValuePair<string, string>>();
                    itemConsulta.Add(helper.CrearKeyValuePairItem("@piId_Colindante", colindante.IdColindante.ToString()));

                    #endregion

                    try
                    {

                        #region ELIMINAR

                        rowsAffected = transaccionDA.TransaccionEliminar(conexion, conexionBitacora, "Colindantes_Elimina", paramTransaccion, EnumTipoBitacora.ELIMINAR, itemConsulta, "Colindantes_Consulta_Detalle", _bitacora);
                        if (!rowsAffected.Equals(null))
                        {
                            elemento = new RespuestaEntidad();
                            elemento.ValorEstado = int.Parse(rowsAffected.Tables[0].Rows[0][0].ToString());
                            elemento.ValorError = int.Parse(rowsAffected.Tables[0].Rows[0][1].ToString());
                        }

                        return elemento;

                        #endregion

                    }
                    catch (Exception)
                    {
                        throw;
                    }
                }

                public List<ColindantesEntidad> ColindantesConsultar(String conexion, ParametrosConsultaEntidad entidad)
                {
                    List<ColindantesEntidad> retorno = new List<ColindantesEntidad>();
                    ColindantesEntidad elemento;
                    DataSet rowsAffected;

                    #region PARAMETROS

                    SqlParameter[] paramTransaccion = new SqlParameter[]
                    {
                       new SqlParameter("@piIndice_Inicio_Fila", entidad.IndiceInicioFila),
                       new SqlParameter("@piMaximo_Filas", entidad.MaximoFilas),
                       new SqlParameter("@psValores_Filtro", entidad.ValorFiltro),
                       new SqlParameter("@psColumnas_Filtros", entidad.ColumnaFiltro),
                       new SqlParameter("@psColumna_Ordenar", entidad.ColumnaOrdenar)
                    };

                    #endregion

                    try
                    {

                        #region CONSULTAR

                            rowsAffected = transaccionDA.TransaccionConsulta(conexion, "Colindantes_Consulta", paramTransaccion);
                            if (!rowsAffected.Equals(null))
                            {
                                foreach (DataRow dr in rowsAffected.Tables[0].Rows)
                                {
                                    elemento = new ColindantesEntidad();
                                    elemento.IdColindante = int.Parse(dr[0].ToString());
                                    elemento.CodColindante = int.Parse(dr[1].ToString());
                                    elemento.DesColindante = dr[2].ToString();

                                    retorno.Add(elemento);
                                }
                            }

                            return retorno;

                        #endregion

                    }
                    catch (Exception)
                    {
                        throw;
                    }
                }
        
                public ColindantesEntidad ColindantesConsultarDetalle(String conexion, String conexionBitacora, ColindantesEntidad colindante, BitacorasEntidad _bitacora)
                {
                    ColindantesEntidad retorno = new ColindantesEntidad();
                    DataSet rowsAffected;

                    #region PARAMETROS

                    SqlParameter[] paramTransaccion = new SqlParameter[]
                    {
                        new SqlParameter("@piId_Colindante", colindante.IdColindante)
                    };

                    #endregion

                    #region KeyValuePair LIST

                    List<KeyValuePair<string, string>> itemConsulta = new List<KeyValuePair<string, string>>();
                    itemConsulta.Add(helper.CrearKeyValuePairItem("@piId_Colindante", colindante.IdColindante.ToString()));

                    #endregion

                    try
                    {

                        #region CONSULTAR DETALLE

                        rowsAffected = transaccionDA.TransaccionConsultaDetalle(conexion, conexionBitacora, "Colindantes_Consulta_Detalle", paramTransaccion, EnumTipoBitacora.CONSULTAR, itemConsulta, "Colindantes_Consulta_Detalle", _bitacora);
                        if (!rowsAffected.Equals(null))
                        {
                            retorno.IdColindante = int.Parse(rowsAffected.Tables[0].Rows[0][0].ToString());
                            retorno.CodColindante = int.Parse(rowsAffected.Tables[0].Rows[0][1].ToString());
                            retorno.DesColindante = rowsAffected.Tables[0].Rows[0][2].ToString();
                            retorno.IndMetodoInsercion = rowsAffected.Tables[0].Rows[0][3].ToString();
                            if (rowsAffected.Tables[0].Rows[0][4].ToString().Length > 0)
                                retorno.FechaIngreso = DateTime.Parse(rowsAffected.Tables[0].Rows[0][4].ToString());
                            else
                                retorno.FechaIngreso = null;
                            retorno.CodUsuarioIngreso = rowsAffected.Tables[0].Rows[0][5].ToString();
                            if (rowsAffected.Tables[0].Rows[0][6].ToString().Length > 0)
                                retorno.FechaUltimaModificacion = DateTime.Parse(rowsAffected.Tables[0].Rows[0][6].ToString());
                            else
                                retorno.FechaUltimaModificacion = null;
                            retorno.CodUsuarioUltimaModificacion = rowsAffected.Tables[0].Rows[0][7].ToString();
                            retorno.DesUsuarioIngreso = rowsAffected.Tables[0].Rows[0][8].ToString();
                            retorno.DesUsuarioUltimaModificacion = rowsAffected.Tables[0].Rows[0][9].ToString();
                        }

                        return retorno;

                        #endregion

                    }
                    catch (Exception)
                    {
                        throw;
                    }
                }
        
                public int ColindantesTotalFilas(String conexion, ParametrosTotalFilasEntidad entidad)
                {

                    int value;

                    #region PARAMETROS

                    SqlParameter[] paramTransaccion = new SqlParameter[]
                    {
                        new SqlParameter("@psValor_Filtro", entidad.ValorFiltro),
                        new SqlParameter("@psColumna_Filtro", entidad.ColumnaFiltro)
                    };

                    #endregion

                    try
                    {

                        #region TOTAL FILAS

                            value = transaccionDA.TransaccionRows(conexion, "Colindantes_Total_Filas", paramTransaccion);

                            return value;

                        #endregion

                    }
                    catch (Exception)
                    {
                        throw;
                    }
                }

            #endregion 

            #region CUBIERTAS TECHOS
        
                public RespuestaEntidad CubiertasTechosInsertar(String conexion, String conexionBitacora, CubiertasTechosEntidad cubiertaTecho, BitacorasEntidad _bitacora)
                {
                    RespuestaEntidad elemento = null;
                    DataSet rowsAffected;

                    #region PARAMETROS

                    SqlParameter[] paramTransaccion = new SqlParameter[]
                    {
                        new SqlParameter("@piCod_Cubierta_Techo", cubiertaTecho.CodCubiertaTecho),
                        new SqlParameter("@psDes_Cubierta_Techo", cubiertaTecho.DesCubiertaTecho),
                        new SqlParameter("@psInd_Metodo_Insercion", cubiertaTecho.IndMetodoInsercion),
                        new SqlParameter("@psCod_Usuario", cubiertaTecho.CodUsuarioIngreso)
                    };

                    #endregion

                    try
                    {

                        #region INSERTAR

                        rowsAffected = transaccionDA.TransaccionInsertar(conexion, conexionBitacora, "Cubiertas_Techos_Inserta", paramTransaccion, EnumTipoBitacora.INSERTAR, _bitacora);
                        if (!rowsAffected.Equals(null))
                        {
                            elemento = new RespuestaEntidad();
                            elemento.ValorEstado = int.Parse(rowsAffected.Tables[0].Rows[0][0].ToString());
                            elemento.ValorError = int.Parse(rowsAffected.Tables[0].Rows[0][1].ToString());
                        }

                        return elemento;

                        #endregion

                    }
                    catch (Exception)
                    {
                        throw;
                    }
                }        
        
                public RespuestaEntidad CubiertasTechosModificar(String conexion, String conexionBitacora, CubiertasTechosEntidad cubiertaTecho, BitacorasEntidad _bitacora)
                {
                    RespuestaEntidad elemento = null;
                    DataSet rowsAffected;

                    #region PARAMETROS

                    SqlParameter[] paramTransaccion = new SqlParameter[]
                    {
                        new SqlParameter("@piId_Cubierta_Techo", cubiertaTecho.IdCubiertaTecho),
                        new SqlParameter("@piCod_Cubierta_Techo", cubiertaTecho.CodCubiertaTecho),
                        new SqlParameter("@psDes_Cubierta_Techo", cubiertaTecho.DesCubiertaTecho),
                        new SqlParameter("@psInd_Metodo_Insercion", cubiertaTecho.IndMetodoInsercion),
                        new SqlParameter("@psCod_Usuario", cubiertaTecho.CodUsuarioIngreso)
                    };

                    #endregion

                    #region KeyValuePair LIST

                    List<KeyValuePair<string, string>> itemConsulta = new List<KeyValuePair<string, string>>();
                    itemConsulta.Add(helper.CrearKeyValuePairItem("@piId_Cubierta_Techo", cubiertaTecho.IdCubiertaTecho.ToString()));

                    #endregion

                    try
                    {

                        #region MODIFICAR

                        rowsAffected = transaccionDA.TransaccionModificar(conexion, conexionBitacora, "Cubiertas_Techos_Actualiza", paramTransaccion, EnumTipoBitacora.ACTUALIZAR, itemConsulta, "Cubiertas_Techos_Consulta_Detalle", _bitacora);
                        if (!rowsAffected.Equals(null))
                        {
                            elemento = new RespuestaEntidad();
                            elemento.ValorEstado = int.Parse(rowsAffected.Tables[0].Rows[0][0].ToString());
                            elemento.ValorError = int.Parse(rowsAffected.Tables[0].Rows[0][1].ToString());
                        }

                        return elemento;

                        #endregion

                    }
                    catch (Exception)
                    {
                        throw;
                    }
                }
        
                public RespuestaEntidad CubiertasTechosEliminar(String conexion, String conexionBitacora, CubiertasTechosEntidad cubiertaTecho, BitacorasEntidad _bitacora)
                {
                    RespuestaEntidad elemento = null;
                    DataSet rowsAffected;

                    #region PARAMETROS

                    SqlParameter[] paramTransaccion = new SqlParameter[]
                    {
                        new SqlParameter("@piId_Cubierta_Techo", cubiertaTecho.IdCubiertaTecho)
                    };

                    #endregion

                    #region KeyValuePair LIST

                    List<KeyValuePair<string, string>> itemConsulta = new List<KeyValuePair<string, string>>();
                    itemConsulta.Add(helper.CrearKeyValuePairItem("@piId_Cubierta_Techo", cubiertaTecho.IdCubiertaTecho.ToString()));

                    #endregion

                    try
                    {

                        #region ELIMINAR

                        rowsAffected = transaccionDA.TransaccionEliminar(conexion, conexionBitacora, "Cubiertas_Techos_Elimina", paramTransaccion, EnumTipoBitacora.ELIMINAR, itemConsulta, "Cubiertas_Techos_Consulta_Detalle", _bitacora);
                        if (!rowsAffected.Equals(null))
                        {
                            elemento = new RespuestaEntidad();
                            elemento.ValorEstado = int.Parse(rowsAffected.Tables[0].Rows[0][0].ToString());
                            elemento.ValorError = int.Parse(rowsAffected.Tables[0].Rows[0][1].ToString());
                        }

                        return elemento;

                        #endregion

                    }
                    catch (Exception)
                    {
                        throw;
                    }
                }

                public List<CubiertasTechosEntidad> CubiertasTechosConsultar(String conexion, ParametrosConsultaEntidad entidad)
                {
                    List<CubiertasTechosEntidad> retorno = new List<CubiertasTechosEntidad>();
                    CubiertasTechosEntidad elemento;
                    DataSet rowsAffected;

                    #region PARAMETROS

                    SqlParameter[] paramTransaccion = new SqlParameter[]
                    {
                       new SqlParameter("@piIndice_Inicio_Fila", entidad.IndiceInicioFila),
                       new SqlParameter("@piMaximo_Filas", entidad.MaximoFilas),
                       new SqlParameter("@psValores_Filtro", entidad.ValorFiltro),
                       new SqlParameter("@psColumnas_Filtros", entidad.ColumnaFiltro),
                       new SqlParameter("@psColumna_Ordenar", entidad.ColumnaOrdenar)
                    };

                    #endregion

                    try
                    {

                        #region CONSULTAR

                            rowsAffected = transaccionDA.TransaccionConsulta(conexion, "Cubiertas_Techos_Consulta", paramTransaccion);
                            if (!rowsAffected.Equals(null))
                            {
                                foreach (DataRow dr in rowsAffected.Tables[0].Rows)
                                {
                                    elemento = new CubiertasTechosEntidad();
                                    elemento.IdCubiertaTecho = int.Parse(dr[0].ToString());
                                    elemento.CodCubiertaTecho = int.Parse(dr[1].ToString());
                                    elemento.DesCubiertaTecho = dr[2].ToString();

                                    retorno.Add(elemento);
                                }
                            }

                            return retorno;

                        #endregion

                    }
                    catch (Exception)
                    {
                        throw;
                    }
                }
        
                public CubiertasTechosEntidad CubiertasTechosConsultarDetalle(String conexion, String conexionBitacora, CubiertasTechosEntidad cubiertaTecho, BitacorasEntidad _bitacora)
                {
                    CubiertasTechosEntidad retorno = new CubiertasTechosEntidad();
                    DataSet rowsAffected;

                    #region PARAMETROS

                    SqlParameter[] paramTransaccion = new SqlParameter[]
                    {
                       new SqlParameter("@piId_Cubierta_Techo", cubiertaTecho.IdCubiertaTecho)
                    };

                    #endregion

                    #region KeyValuePair LIST

                    List<KeyValuePair<string, string>> itemConsulta = new List<KeyValuePair<string, string>>();
                    itemConsulta.Add(helper.CrearKeyValuePairItem("@piId_Cubierta_Techo", cubiertaTecho.IdCubiertaTecho.ToString()));

                    #endregion

                    try
                    {

                        #region CONSULTAR DETALLE

                        rowsAffected = transaccionDA.TransaccionConsultaDetalle(conexion, conexionBitacora, "Cubiertas_Techos_Consulta_Detalle", paramTransaccion, EnumTipoBitacora.CONSULTAR, itemConsulta, "Cubiertas_Techos_Consulta_Detalle", _bitacora);
                        if (!rowsAffected.Equals(null))
                        {
                            retorno.IdCubiertaTecho = int.Parse(rowsAffected.Tables[0].Rows[0][0].ToString());
                            retorno.CodCubiertaTecho = int.Parse(rowsAffected.Tables[0].Rows[0][1].ToString());
                            retorno.DesCubiertaTecho = rowsAffected.Tables[0].Rows[0][2].ToString();
                            retorno.IndMetodoInsercion = rowsAffected.Tables[0].Rows[0][3].ToString();
                            if (rowsAffected.Tables[0].Rows[0][4].ToString().Length > 0)
                                retorno.FechaIngreso = DateTime.Parse(rowsAffected.Tables[0].Rows[0][4].ToString());
                            else
                                retorno.FechaIngreso = null;
                            retorno.CodUsuarioIngreso = rowsAffected.Tables[0].Rows[0][5].ToString();
                            if (rowsAffected.Tables[0].Rows[0][6].ToString().Length > 0)
                                retorno.FechaUltimaModificacion = DateTime.Parse(rowsAffected.Tables[0].Rows[0][6].ToString());
                            else
                                retorno.FechaUltimaModificacion = null;
                            retorno.CodUsuarioUltimaModificacion = rowsAffected.Tables[0].Rows[0][7].ToString();
                            retorno.DesUsuarioIngreso = rowsAffected.Tables[0].Rows[0][8].ToString();
                            retorno.DesUsuarioUltimaModificacion = rowsAffected.Tables[0].Rows[0][9].ToString();
                        }

                        return retorno;

                        #endregion

                    }
                    catch (Exception)
                    {
                        throw;
                    }
                }
       
                public int CubiertasTechosTotalFilas(String conexion, ParametrosTotalFilasEntidad entidad)
                {

                    int value;

                    #region PARAMETROS

                    SqlParameter[] paramTransaccion = new SqlParameter[]
                    {
                        new SqlParameter("@psValor_Filtro", entidad.ValorFiltro),
                        new SqlParameter("@psColumna_Filtro", entidad.ColumnaFiltro)
                    };

                    #endregion

                    try
                    {

                        #region TOTAL FILAS

                            value = transaccionDA.TransaccionRows(conexion, "Cubiertas_Techos_Total_Filas", paramTransaccion);

                            return value;

                        #endregion

                    }
                    catch (Exception)
                    {
                        throw;
                    }
                }

            #endregion 

            #region DECISIONES
        
                public RespuestaEntidad DecisionesInsertar(String conexion, String conexionBitacora, DecisionesEntidad decision, BitacorasEntidad _bitacora)
                {
                    RespuestaEntidad elemento = null;
                    DataSet rowsAffected;

                    #region PARAMETROS

                    SqlParameter[] paramTransaccion = new SqlParameter[]
                        {
                            new SqlParameter("@piCod_Decision", decision.CodDecision),
                            new SqlParameter("@psDes_Decision", decision.DesDecision),
                            new SqlParameter("@psInd_Metodo_Insercion", decision.IndMetodoInsercion),
                            new SqlParameter("@psCod_Usuario", decision.CodUsuarioIngreso)
                        };

                    #endregion

                    try
                    {

                        #region INSERTAR

                        rowsAffected = transaccionDA.TransaccionInsertar(conexion, conexionBitacora, "Decisiones_Inserta", paramTransaccion, EnumTipoBitacora.INSERTAR, _bitacora);
                        if (!rowsAffected.Equals(null))
                        {
                            elemento = new RespuestaEntidad();
                            elemento.ValorEstado = int.Parse(rowsAffected.Tables[0].Rows[0][0].ToString());
                            elemento.ValorError = int.Parse(rowsAffected.Tables[0].Rows[0][1].ToString());
                        }

                        return elemento;

                        #endregion

                    }
                    catch (Exception)
                    {
                        throw;
                    }
                }
        
                public RespuestaEntidad DecisionesModificar(String conexion, String conexionBitacora, DecisionesEntidad decision, BitacorasEntidad _bitacora)
                {
                    RespuestaEntidad elemento = null;
                    DataSet rowsAffected;

                    #region PARAMETROS

                    SqlParameter[] paramTransaccion = new SqlParameter[]
                        {
                            new SqlParameter("@piId_Decision", decision.IdDecision),
                            new SqlParameter("@piCod_Decision", decision.CodDecision),
                            new SqlParameter("@psDes_Decision", decision.DesDecision),
                            new SqlParameter("@psInd_Metodo_Insercion", decision.IndMetodoInsercion),
                            new SqlParameter("@psCod_Usuario", decision.CodUsuarioIngreso)
                        };

                    #endregion

                    #region KeyValuePair LIST

                    List<KeyValuePair<string, string>> itemConsulta = new List<KeyValuePair<string, string>>();
                    itemConsulta.Add(helper.CrearKeyValuePairItem("@piId_Decision", decision.IdDecision.ToString()));

                    #endregion

                    try
                    {

                        #region MODIFICAR

                        rowsAffected = transaccionDA.TransaccionModificar(conexion, conexionBitacora, "Decisiones_Actualiza", paramTransaccion, EnumTipoBitacora.ACTUALIZAR, itemConsulta, "Decisiones_Consulta_Detalle", _bitacora);
                        if (!rowsAffected.Equals(null))
                        {
                            elemento = new RespuestaEntidad();
                            elemento.ValorEstado = int.Parse(rowsAffected.Tables[0].Rows[0][0].ToString());
                            elemento.ValorError = int.Parse(rowsAffected.Tables[0].Rows[0][1].ToString());
                        }

                        return elemento;

                        #endregion

                    }
                    catch (Exception)
                    {
                        throw;
                    }
                }
        
                public RespuestaEntidad DecisionesEliminar(String conexion, String conexionBitacora, DecisionesEntidad decision, BitacorasEntidad _bitacora)
                {
                    RespuestaEntidad elemento = null;
                    DataSet rowsAffected;

                    #region PARAMETROS

                    SqlParameter[] paramTransaccion = new SqlParameter[]
                        {
                            new SqlParameter("@piId_Decision", decision.IdDecision)
                        };

                    #endregion

                    #region KeyValuePair LIST

                    List<KeyValuePair<string, string>> itemConsulta = new List<KeyValuePair<string, string>>();
                    itemConsulta.Add(helper.CrearKeyValuePairItem("@piId_Decision", decision.IdDecision.ToString()));

                    #endregion

                    try
                    {

                        #region ELIMINAR

                        rowsAffected = transaccionDA.TransaccionEliminar(conexion, conexionBitacora, "Decisiones_Elimina", paramTransaccion, EnumTipoBitacora.ELIMINAR, itemConsulta, "Decisiones_Consulta_Detalle", _bitacora);
                        if (!rowsAffected.Equals(null))
                        {
                            elemento = new RespuestaEntidad();
                            elemento.ValorEstado = int.Parse(rowsAffected.Tables[0].Rows[0][0].ToString());
                            elemento.ValorError = int.Parse(rowsAffected.Tables[0].Rows[0][1].ToString());
                        }

                        return elemento;

                        #endregion

                    }
                    catch (Exception)
                    {
                        throw;
                    }
                }

                public List<DecisionesEntidad> DecisionesConsultar(String conexion, ParametrosConsultaEntidad entidad)
                {
                    List<DecisionesEntidad> retorno = new List<DecisionesEntidad>();
                    DecisionesEntidad elemento;
                    DataSet rowsAffected;

                    #region PARAMETROS

                    SqlParameter[] paramTransaccion = new SqlParameter[]
                        {
                            new SqlParameter("@piIndice_Inicio_Fila", entidad.IndiceInicioFila),
                            new SqlParameter("@piMaximo_Filas", entidad.MaximoFilas),
                            new SqlParameter("@psValores_Filtro", entidad.ValorFiltro),
                            new SqlParameter("@psColumnas_Filtros", entidad.ColumnaFiltro),
                            new SqlParameter("@psColumna_Ordenar", entidad.ColumnaOrdenar)
                        };

                    #endregion

                    try
                    {

                        #region CONSULTAR

                            rowsAffected = transaccionDA.TransaccionConsulta(conexion, "Decisiones_Consulta", paramTransaccion);
                            if (!rowsAffected.Equals(null))
                            {
                                foreach (DataRow dr in rowsAffected.Tables[0].Rows)
                                {
                                    elemento = new DecisionesEntidad();
                                    elemento.IdDecision = int.Parse(dr[0].ToString());
                                    elemento.CodDecision = int.Parse(dr[1].ToString());
                                    elemento.DesDecision = dr[2].ToString();

                                    retorno.Add(elemento);
                                }
                            }

                            return retorno;

                        #endregion

                    }
                    catch (Exception)
                    {
                        throw;
                    }
                }
        
                public DecisionesEntidad DecisionesConsultarDetalle(String conexion, String conexionBitacora, DecisionesEntidad decision, BitacorasEntidad _bitacora)
                {
                    DecisionesEntidad retorno = new DecisionesEntidad();
                    DataSet rowsAffected;

                    #region PARAMETROS

                    SqlParameter[] paramTransaccion = new SqlParameter[]
                        {
                            new SqlParameter("@piId_Decision", decision.IdDecision)
                        };

                    #endregion

                    #region KeyValuePair LIST

                    List<KeyValuePair<string, string>> itemConsulta = new List<KeyValuePair<string, string>>();
                    itemConsulta.Add(helper.CrearKeyValuePairItem("@piId_Decision", decision.IdDecision.ToString()));

                    #endregion

                    try
                    {

                        #region CONSULTAR DETALLE

                        rowsAffected = transaccionDA.TransaccionConsultaDetalle(conexion, conexionBitacora, "Decisiones_Consulta_Detalle", paramTransaccion, EnumTipoBitacora.CONSULTAR, itemConsulta, "Decisiones_Consulta_Detalle", _bitacora);
                        if (!rowsAffected.Equals(null))
                        {
                            retorno.IdDecision = int.Parse(rowsAffected.Tables[0].Rows[0][0].ToString());
                            retorno.CodDecision = int.Parse(rowsAffected.Tables[0].Rows[0][1].ToString());
                            retorno.DesDecision = rowsAffected.Tables[0].Rows[0][2].ToString();
                            retorno.IndMetodoInsercion = rowsAffected.Tables[0].Rows[0][3].ToString();
                            if (rowsAffected.Tables[0].Rows[0][4].ToString().Length > 0)
                                retorno.FechaIngreso = DateTime.Parse(rowsAffected.Tables[0].Rows[0][4].ToString());
                            else
                                retorno.FechaIngreso = null;
                            retorno.CodUsuarioIngreso = rowsAffected.Tables[0].Rows[0][5].ToString();
                            if (rowsAffected.Tables[0].Rows[0][6].ToString().Length > 0)
                                retorno.FechaUltimaModificacion = DateTime.Parse(rowsAffected.Tables[0].Rows[0][6].ToString());
                            else
                                retorno.FechaUltimaModificacion = null;
                            retorno.CodUsuarioUltimaModificacion = rowsAffected.Tables[0].Rows[0][7].ToString();
                            retorno.DesUsuarioIngreso = rowsAffected.Tables[0].Rows[0][8].ToString();
                            retorno.DesUsuarioUltimaModificacion = rowsAffected.Tables[0].Rows[0][9].ToString();
                        }

                        return retorno;

                        #endregion

                    }
                    catch (Exception)
                    {
                        throw;
                    }
                }
       
                public int DecisionesTotalFilas(String conexion, ParametrosTotalFilasEntidad entidad)
                {

                    int value;


                    #region PARAMETROS

                    SqlParameter[] paramTransaccion = new SqlParameter[]
                        {
                            new SqlParameter("@psValor_Filtro", entidad.ValorFiltro),
                            new SqlParameter("@psColumna_Filtro", entidad.ColumnaFiltro)
                        };

                    #endregion

                    try
                    {

                        #region TOTAL FILAS

                            value = transaccionDA.TransaccionRows(conexion, "Decisiones_Total_Filas", paramTransaccion);

                            return value;

                        #endregion

                    }
                    catch (Exception)
                    {
                        throw;
                    }
                }

            #endregion 

            #region DELIMITACIONES LINDEROS
        
                public RespuestaEntidad DelimitacionesLinderosInsertar(String conexion, String conexionBitacora, DelimitacionesLinderosEntidad delimitacionLindero, BitacorasEntidad _bitacora)
                {
                    RespuestaEntidad elemento = null;
                    DataSet rowsAffected;

                    #region PARAMETROS

                    SqlParameter[] paramTransaccion = new SqlParameter[]
                    {
                        new SqlParameter("@piCod_Delimitacion_Lindero", delimitacionLindero.CodDelimitacionLindero),
                        new SqlParameter("@psDes_Delimitacion_Lindero", delimitacionLindero.DesDelimitacionLindero),
                        new SqlParameter("@psInd_Metodo_Insercion", delimitacionLindero.IndMetodoInsercion),
                        new SqlParameter("@psCod_Usuario", delimitacionLindero.CodUsuarioIngreso)
                    };

                    #endregion

                    try
                    {

                        #region INSERTAR

                        rowsAffected = transaccionDA.TransaccionInsertar(conexion, conexionBitacora, "Delimitaciones_Linderos_Inserta", paramTransaccion, EnumTipoBitacora.INSERTAR, _bitacora);
                        if (!rowsAffected.Equals(null))
                        {
                            elemento = new RespuestaEntidad();
                            elemento.ValorEstado = int.Parse(rowsAffected.Tables[0].Rows[0][0].ToString());
                            elemento.ValorError = int.Parse(rowsAffected.Tables[0].Rows[0][1].ToString());
                        }

                        return elemento;

                        #endregion

                    }
                    catch (Exception)
                    {
                        throw;
                    }
                }
        
                public RespuestaEntidad DelimitacionesLinderosModificar(String conexion, String conexionBitacora, DelimitacionesLinderosEntidad delimitacionLindero, BitacorasEntidad _bitacora)
                {
                    RespuestaEntidad elemento = null;
                    DataSet rowsAffected;

                    #region PARAMETROS

                    SqlParameter[] paramTransaccion = new SqlParameter[]
                    {
                        new SqlParameter("@piId_Delimitacion_Lindero", delimitacionLindero.IdDelimitacionLindero),
                        new SqlParameter("@piCod_Delimitacion_Lindero", delimitacionLindero.CodDelimitacionLindero),
                        new SqlParameter("@psDes_Delimitacion_Lindero", delimitacionLindero.DesDelimitacionLindero),
                        new SqlParameter("@psInd_Metodo_Insercion", delimitacionLindero.IndMetodoInsercion),
                        new SqlParameter("@psCod_Usuario", delimitacionLindero.CodUsuarioIngreso)
                    };

                    #endregion

                    #region KeyValuePair LIST

                    List<KeyValuePair<string, string>> itemConsulta = new List<KeyValuePair<string, string>>();
                    itemConsulta.Add(helper.CrearKeyValuePairItem("@piId_Delimitacion_Lindero", delimitacionLindero.IdDelimitacionLindero.ToString()));

                    #endregion

                    try
                    {

                        #region MODIFICAR

                        rowsAffected = transaccionDA.TransaccionModificar(conexion, conexionBitacora, "Delimitaciones_Linderos_Actualiza", paramTransaccion, EnumTipoBitacora.ACTUALIZAR, itemConsulta, "Delimitaciones_Linderos_Consulta_Detalle", _bitacora);
                        if (!rowsAffected.Equals(null))
                        {
                            elemento = new RespuestaEntidad();
                            elemento.ValorEstado = int.Parse(rowsAffected.Tables[0].Rows[0][0].ToString());
                            elemento.ValorError = int.Parse(rowsAffected.Tables[0].Rows[0][1].ToString());
                        }

                        return elemento;

                        #endregion

                    }
                    catch (Exception)
                    {
                        throw;
                    }
                }
       
                public RespuestaEntidad DelimitacionesLinderosEliminar(String conexion, String conexionBitacora, DelimitacionesLinderosEntidad delimitacionLindero, BitacorasEntidad _bitacora)
                {
                    RespuestaEntidad elemento = null;
                    DataSet rowsAffected;

                    #region PARAMETROS

                    SqlParameter[] paramTransaccion = new SqlParameter[]
                    {
                        new SqlParameter("@piId_Delimitacion_Lindero", delimitacionLindero.IdDelimitacionLindero)
                    };

                    #endregion

                    #region KeyValuePair LIST

                    List<KeyValuePair<string, string>> itemConsulta = new List<KeyValuePair<string, string>>();
                    itemConsulta.Add(helper.CrearKeyValuePairItem("@piId_Delimitacion_Lindero", delimitacionLindero.IdDelimitacionLindero.ToString()));

                    #endregion

                    try
                    {

                        #region ELIMINAR

                        rowsAffected = transaccionDA.TransaccionEliminar(conexion, conexionBitacora, "Delimitaciones_Linderos_Elimina", paramTransaccion, EnumTipoBitacora.ELIMINAR, itemConsulta, "Delimitaciones_Linderos_Consulta_Detalle", _bitacora);
                        if (!rowsAffected.Equals(null))
                        {
                            elemento = new RespuestaEntidad();
                            elemento.ValorEstado = int.Parse(rowsAffected.Tables[0].Rows[0][0].ToString());
                            elemento.ValorError = int.Parse(rowsAffected.Tables[0].Rows[0][1].ToString());
                        }

                        return elemento;

                        #endregion

                    }
                    catch (Exception)
                    {
                        throw;
                    }
                }

                public List<DelimitacionesLinderosEntidad> DelimitacionesLinderosConsultar(String conexion, ParametrosConsultaEntidad entidad)
                {
                    List<DelimitacionesLinderosEntidad> retorno = new List<DelimitacionesLinderosEntidad>();
                    DelimitacionesLinderosEntidad elemento;
                    DataSet rowsAffected;

                    #region PARAMETROS

                    SqlParameter[] paramTransaccion = new SqlParameter[]
                    {
                       new SqlParameter("@piIndice_Inicio_Fila", entidad.IndiceInicioFila),
                       new SqlParameter("@piMaximo_Filas", entidad.MaximoFilas),
                       new SqlParameter("@psValores_Filtro", entidad.ValorFiltro),
                       new SqlParameter("@psColumnas_Filtros", entidad.ColumnaFiltro),
                       new SqlParameter("@psColumna_Ordenar", entidad.ColumnaOrdenar)
                    };

                    #endregion

                    try
                    {

                        #region CONSULTAR

                            rowsAffected = transaccionDA.TransaccionConsulta(conexion, "Delimitaciones_Linderos_Consulta", paramTransaccion);
                            if (!rowsAffected.Equals(null))
                            {
                                foreach (DataRow dr in rowsAffected.Tables[0].Rows)
                                {
                                    elemento = new DelimitacionesLinderosEntidad();
                                    elemento.IdDelimitacionLindero = int.Parse(dr[0].ToString());
                                    elemento.CodDelimitacionLindero = int.Parse(dr[1].ToString());
                                    elemento.DesDelimitacionLindero = dr[2].ToString();

                                    retorno.Add(elemento);
                                }
                            }

                            return retorno;

                        #endregion

                    }
                    catch (Exception)
                    {
                        throw;
                    }
                }
        
                public DelimitacionesLinderosEntidad DelimitacionesLinderosConsultarDetalle(String conexion, String conexionBitacora, DelimitacionesLinderosEntidad delimitacionLindero, BitacorasEntidad _bitacora)
                {
                    DelimitacionesLinderosEntidad retorno = new DelimitacionesLinderosEntidad();
                    DataSet rowsAffected;

                    #region PARAMETROS

                    SqlParameter[] paramTransaccion = new SqlParameter[]
                    {
                        new SqlParameter("@piId_Delimitacion_Lindero", delimitacionLindero.IdDelimitacionLindero)
                    };

                    #endregion

                    #region KeyValuePair LIST

                    List<KeyValuePair<string, string>> itemConsulta = new List<KeyValuePair<string, string>>();
                    itemConsulta.Add(helper.CrearKeyValuePairItem("@piId_Delimitacion_Lindero", delimitacionLindero.IdDelimitacionLindero.ToString()));

                    #endregion

                    try
                    {

                        #region CONSULTAR DETALLE

                        rowsAffected = transaccionDA.TransaccionConsultaDetalle(conexion, conexionBitacora, "Delimitaciones_Linderos_Consulta_Detalle", paramTransaccion, EnumTipoBitacora.CONSULTAR, itemConsulta, "Delimitaciones_Linderos_Consulta_Detalle", _bitacora);
                        if (!rowsAffected.Equals(null))
                        {
                            retorno.IdDelimitacionLindero = int.Parse(rowsAffected.Tables[0].Rows[0][0].ToString());
                            retorno.CodDelimitacionLindero = int.Parse(rowsAffected.Tables[0].Rows[0][1].ToString());
                            retorno.DesDelimitacionLindero = rowsAffected.Tables[0].Rows[0][2].ToString();
                            retorno.IndMetodoInsercion = rowsAffected.Tables[0].Rows[0][3].ToString();
                            if (rowsAffected.Tables[0].Rows[0][4].ToString().Length > 0)
                                retorno.FechaIngreso = DateTime.Parse(rowsAffected.Tables[0].Rows[0][4].ToString());
                            else
                                retorno.FechaIngreso = null;
                            retorno.CodUsuarioIngreso = rowsAffected.Tables[0].Rows[0][5].ToString();
                            if (rowsAffected.Tables[0].Rows[0][6].ToString().Length > 0)
                                retorno.FechaUltimaModificacion = DateTime.Parse(rowsAffected.Tables[0].Rows[0][6].ToString());
                            else
                                retorno.FechaUltimaModificacion = null;
                            retorno.CodUsuarioUltimaModificacion = rowsAffected.Tables[0].Rows[0][7].ToString();
                            retorno.DesUsuarioIngreso = rowsAffected.Tables[0].Rows[0][8].ToString();
                            retorno.DesUsuarioUltimaModificacion = rowsAffected.Tables[0].Rows[0][9].ToString();
                        }

                        return retorno;

                        #endregion

                    }
                    catch (Exception)
                    {
                        throw;
                    }
                }
        
                public int DelimitacionesLinderosTotalFilas(String conexion, ParametrosTotalFilasEntidad entidad)
                {

                    int value;

                    #region PARAMETROS

                    SqlParameter[] paramTransaccion = new SqlParameter[]
                    {
                        new SqlParameter("@psValor_Filtro", entidad.ValorFiltro),
                        new SqlParameter("@psColumna_Filtro", entidad.ColumnaFiltro)
                    };

                    #endregion

                    try
                    {

                        #region TOTAL FILAS

                            value = transaccionDA.TransaccionRows(conexion, "Delimitaciones_Linderos_Total_Filas", paramTransaccion);

                            return value;

                        #endregion

                    }
                    catch (Exception)
                    {
                        throw;
                    }
                }

            #endregion 

            #region DERECHOS
        
                public RespuestaEntidad DerechosInsertar(String conexion, String conexionBitacora, DerechosEntidad derecho, BitacorasEntidad _bitacora)
                {
                    RespuestaEntidad elemento = null;
                    DataSet rowsAffected;

                    #region PARAMETROS

                    SqlParameter[] paramTransaccion = new SqlParameter[]
                    {
                        new SqlParameter("@psCod_Derecho", derecho.CodDerecho),
                        new SqlParameter("@psInd_Metodo_Insercion", derecho.IndMetodoInsercion),
                        new SqlParameter("@psCod_Usuario", derecho.CodUsuarioIngreso)
                    };

                    #endregion

                    try
                    {

                        #region INSERTAR

                        rowsAffected = transaccionDA.TransaccionInsertar(conexion, conexionBitacora, "Derechos_Inserta", paramTransaccion, EnumTipoBitacora.INSERTAR, _bitacora);
                        if (!rowsAffected.Equals(null))
                        {
                            elemento = new RespuestaEntidad();
                            elemento.ValorEstado = int.Parse(rowsAffected.Tables[0].Rows[0][0].ToString());
                            elemento.ValorError = int.Parse(rowsAffected.Tables[0].Rows[0][1].ToString());
                        }

                        return elemento;

                        #endregion

                    }
                    catch (Exception)
                    {
                        throw;
                    }
                }
        
                public RespuestaEntidad DerechosModificar(String conexion, String conexionBitacora, DerechosEntidad derecho, BitacorasEntidad _bitacora)
                {
                    RespuestaEntidad elemento = null;
                    DataSet rowsAffected;

                    #region PARAMETROS

                    SqlParameter[] paramTransaccion = new SqlParameter[]
                    {
                        new SqlParameter("@piId_Derecho", derecho.IdDerecho),
                        new SqlParameter("@psCod_Derecho", derecho.CodDerecho),
                        new SqlParameter("@psInd_Metodo_Insercion", derecho.IndMetodoInsercion),
                        new SqlParameter("@psCod_Usuario", derecho.CodUsuarioIngreso)
                    };

                    #endregion

                    #region KeyValuePair LIST

                    List<KeyValuePair<string, string>> itemConsulta = new List<KeyValuePair<string, string>>();
                    itemConsulta.Add(helper.CrearKeyValuePairItem("@piId_Derecho", derecho.IdDerecho.ToString()));

                    #endregion

                    try
                    {

                        #region MODIFICAR

                        rowsAffected = transaccionDA.TransaccionModificar(conexion, conexionBitacora, "Derechos_Actualiza", paramTransaccion, EnumTipoBitacora.ACTUALIZAR, itemConsulta, "Derechos_Consulta_Detalle", _bitacora);
                        if (!rowsAffected.Equals(null))
                        {
                            elemento = new RespuestaEntidad();
                            elemento.ValorEstado = int.Parse(rowsAffected.Tables[0].Rows[0][0].ToString());
                            elemento.ValorError = int.Parse(rowsAffected.Tables[0].Rows[0][1].ToString());
                        }

                        return elemento;

                        #endregion

                    }
                    catch (Exception)
                    {
                        throw;
                    }
                }
        
                public RespuestaEntidad DerechosEliminar(String conexion, String conexionBitacora, DerechosEntidad derecho, BitacorasEntidad _bitacora)
                {
                    RespuestaEntidad elemento = null;
                    DataSet rowsAffected;

                    #region PARAMETROS

                    SqlParameter[] paramTransaccion = new SqlParameter[]
                    {
                        new SqlParameter("@piId_Derecho", derecho.IdDerecho)
                    };

                    #endregion

                    #region KeyValuePair LIST

                    List<KeyValuePair<string, string>> itemConsulta = new List<KeyValuePair<string, string>>();
                    itemConsulta.Add(helper.CrearKeyValuePairItem("@piId_Derecho", derecho.IdDerecho.ToString()));

                    #endregion

                    try
                    {

                        #region ELIMINAR

                        rowsAffected = transaccionDA.TransaccionEliminar(conexion, conexionBitacora, "Derechos_Elimina", paramTransaccion, EnumTipoBitacora.ELIMINAR, itemConsulta, "Derechos_Consulta_Detalle", _bitacora);
                        if (!rowsAffected.Equals(null))
                        {
                            elemento = new RespuestaEntidad();
                            elemento.ValorEstado = int.Parse(rowsAffected.Tables[0].Rows[0][0].ToString());
                            elemento.ValorError = int.Parse(rowsAffected.Tables[0].Rows[0][1].ToString());
                        }

                        return elemento;

                        #endregion

                    }
                    catch (Exception)
                    {
                        throw;
                    }
                }

                public List<DerechosEntidad> DerechosConsultar(String conexion, ParametrosConsultaEntidad entidad)
                {
                    List<DerechosEntidad> retorno = new List<DerechosEntidad>();
                    DerechosEntidad elemento;
                    DataSet rowsAffected;

                    #region PARAMETROS

                    SqlParameter[] paramTransaccion = new SqlParameter[]
                    {
                       new SqlParameter("@piIndice_Inicio_Fila", entidad.IndiceInicioFila),
                       new SqlParameter("@piMaximo_Filas", entidad.MaximoFilas),
                       new SqlParameter("@psValores_Filtro", entidad.ValorFiltro),
                       new SqlParameter("@psColumnas_Filtros", entidad.ColumnaFiltro),
                       new SqlParameter("@psColumna_Ordenar", entidad.ColumnaOrdenar)
                    };

                    #endregion

                    try
                    {

                        #region CONSULTAR

                            rowsAffected = transaccionDA.TransaccionConsulta(conexion, "Derechos_Consulta", paramTransaccion);
                            if (!rowsAffected.Equals(null))
                            {
                                foreach (DataRow dr in rowsAffected.Tables[0].Rows)
                                {
                                    elemento = new DerechosEntidad();
                                    elemento.IdDerecho = int.Parse(dr[0].ToString());
                                    elemento.CodDerecho = dr[1].ToString();

                                    retorno.Add(elemento);
                                }
                            }

                            return retorno;

                        #endregion

                    }
                    catch (Exception)
                    {
                        throw;
                    }
                }
        
                public DerechosEntidad DerechosConsultarDetalle(String conexion, String conexionBitacora, DerechosEntidad derecho, BitacorasEntidad _bitacora)
                {
                    DerechosEntidad retorno = new DerechosEntidad();
                    DataSet rowsAffected;

                    #region PARAMETROS

                    SqlParameter[] paramTransaccion = new SqlParameter[]
                    {
                        new SqlParameter("@piId_Derecho", derecho.IdDerecho)
                    };

                    #endregion

                    #region KeyValuePair LIST

                    List<KeyValuePair<string, string>> itemConsulta = new List<KeyValuePair<string, string>>();
                    itemConsulta.Add(helper.CrearKeyValuePairItem("@piId_Derecho", derecho.IdDerecho.ToString()));

                    #endregion

                    try
                    {

                        #region CONSULTAR DETALLE

                        rowsAffected = transaccionDA.TransaccionConsultaDetalle(conexion, conexionBitacora, "Derechos_Consulta_Detalle", paramTransaccion, EnumTipoBitacora.CONSULTAR, itemConsulta, "Derechos_Consulta_Detalle", _bitacora);
                        if (!rowsAffected.Equals(null))
                        {
                            retorno.IdDerecho = int.Parse(rowsAffected.Tables[0].Rows[0][0].ToString());
                            retorno.CodDerecho = rowsAffected.Tables[0].Rows[0][1].ToString();
                            retorno.IndMetodoInsercion = rowsAffected.Tables[0].Rows[0][2].ToString();
                            if (rowsAffected.Tables[0].Rows[0][3].ToString().Length > 0)
                                retorno.FechaIngreso = DateTime.Parse(rowsAffected.Tables[0].Rows[0][3].ToString());
                            else
                                retorno.FechaIngreso = null;
                            retorno.CodUsuarioIngreso = rowsAffected.Tables[0].Rows[0][4].ToString();
                            if (rowsAffected.Tables[0].Rows[0][5].ToString().Length > 0)
                                retorno.FechaUltimaModificacion = DateTime.Parse(rowsAffected.Tables[0].Rows[0][5].ToString());
                            else
                                retorno.FechaUltimaModificacion = null;
                            retorno.CodUsuarioUltimaModificacion = rowsAffected.Tables[0].Rows[0][6].ToString();
                            retorno.DesUsuarioIngreso = rowsAffected.Tables[0].Rows[0][7].ToString();
                            retorno.DesUsuarioUltimaModificacion = rowsAffected.Tables[0].Rows[0][8].ToString();
                        }

                        return retorno;

                        #endregion

                    }
                    catch (Exception)
                    {
                        throw;
                    }
                }
        
                public int DerechosTotalFilas(String conexion, ParametrosTotalFilasEntidad entidad)
                {

                    int value;

                    #region PARAMETROS

                    SqlParameter[] paramTransaccion = new SqlParameter[]
                    {
                        new SqlParameter("@psValor_Filtro", entidad.ValorFiltro),
                        new SqlParameter("@psColumna_Filtro", entidad.ColumnaFiltro)
                    };

                    #endregion

                    try
                    {

                        #region TOTAL FILAS

                            value = transaccionDA.TransaccionRows(conexion, "Derechos_Total_Filas", paramTransaccion);

                            return value;

                        #endregion

                    }
                    catch (Exception)
                    {
                        throw;
                    }
                }

            #endregion 
        
            //REQUERIMIENTO: 1-24105296
            #region DISTRIBUCIONES ZONAS TASADORES
        
                public RespuestaEntidad DistribucionZonasTasadoresInsertar(String conexion, String conexionBitacora, DistribucionesZonasTasadoresEntidad DistribucionesZonasTasadores, BitacorasEntidad _bitacora)
                {
                    RespuestaEntidad elemento = null;
                    DataSet rowsAffected;

                    #region PARAMETROS

                    SqlParameter[] paramTransaccion = new SqlParameter[]
                    {
                        new SqlParameter("@piId_Zona_Tasador", DistribucionesZonasTasadores.IdZonaTasador),
                        new SqlParameter("@piId_Distrito", DistribucionesZonasTasadores.IdDistrito),
                        new SqlParameter("@piId_Canton", DistribucionesZonasTasadores.IdCanton),
                        new SqlParameter("@piId_Provincia", DistribucionesZonasTasadores.IdProvincia),
                        new SqlParameter("@psCod_Tipo_Distribucion_Zona_Tasador", DistribucionesZonasTasadores.CodTipoDistribucionZonaTasador),
                        new SqlParameter("@psInd_Metodo_Insercion", DistribucionesZonasTasadores.IndMetodoInsercion),
                        new SqlParameter("@psCod_Usuario", DistribucionesZonasTasadores.CodUsuarioIngreso)
                    };

                    #endregion

                    try
                    {

                        #region INSERTAR

                        rowsAffected = transaccionDA.TransaccionInsertar(conexion, conexionBitacora, "Distribuciones_Zonas_Tasadores_Inserta", paramTransaccion, EnumTipoBitacora.INSERTAR, _bitacora);
                        if (!rowsAffected.Equals(null))
                        {
                            elemento = new RespuestaEntidad();
                            elemento.ValorEstado = int.Parse(rowsAffected.Tables[0].Rows[0][0].ToString());
                            elemento.ValorError = int.Parse(rowsAffected.Tables[0].Rows[0][1].ToString());
                        }

                        return elemento;

                        #endregion

                    }
                    catch (Exception)
                    {
                        throw;
                    }
                }
                
                public RespuestaEntidad DistribucionZonasTasadoresModificar(String conexion, String conexionBitacora, DistribucionesZonasTasadoresEntidad DistribucionesZonasTasadores, BitacorasEntidad _bitacora)
                {
                    RespuestaEntidad elemento = null;
                    DataSet rowsAffected;

                    #region PARAMETROS

                    SqlParameter[] paramTransaccion = new SqlParameter[]
                    {
                        new SqlParameter("@piId_Distribucion_Zona_Tasador", DistribucionesZonasTasadores.IdDistribucionZonaTasador),
                        new SqlParameter("@piId_Zona_Tasador", DistribucionesZonasTasadores.IdZonaTasador),
                        new SqlParameter("@piId_Distrito", DistribucionesZonasTasadores.IdDistrito),
                        new SqlParameter("@piId_Canton", DistribucionesZonasTasadores.IdCanton),
                        new SqlParameter("@piId_Provincia", DistribucionesZonasTasadores.IdProvincia),
                        new SqlParameter("@psCod_Tipo_Distribucion_Zona_Tasador", DistribucionesZonasTasadores.CodTipoDistribucionZonaTasador),
                        new SqlParameter("@psInd_Metodo_Insercion", DistribucionesZonasTasadores.IndMetodoInsercion),
                        new SqlParameter("@psCod_Usuario", DistribucionesZonasTasadores.CodUsuarioIngreso)
                    };

                    #endregion

                    #region KeyValuePair LIST

                    List<KeyValuePair<string, string>> itemConsulta = new List<KeyValuePair<string, string>>();
                    itemConsulta.Add(helper.CrearKeyValuePairItem("@piId_Distribucion_Zona_Tasador", DistribucionesZonasTasadores.IdDistribucionZonaTasador.ToString()));
                    itemConsulta.Add(helper.CrearKeyValuePairItem("@psCod_Tipo_Zona", DistribucionesZonasTasadores.IdDistribucionZonaTasador.ToString()));

                    #endregion

                    try
                    {

                        #region MODIFICAR

                        rowsAffected = transaccionDA.TransaccionModificar(conexion, conexionBitacora, "Distribuciones_Zonas_Tasadores_Actualiza", paramTransaccion, EnumTipoBitacora.ACTUALIZAR, itemConsulta, "Distribuciones_Zonas_Tasadores_Consulta_Detalle", _bitacora);
                        if (!rowsAffected.Equals(null))
                        {
                            elemento = new RespuestaEntidad();
                            elemento.ValorEstado = int.Parse(rowsAffected.Tables[0].Rows[0][0].ToString());
                            elemento.ValorError = int.Parse(rowsAffected.Tables[0].Rows[0][1].ToString());
                        }

                        return elemento;

                        #endregion

                    }
                    catch (Exception)
                    {
                        throw;
                    }
                }
        
                public RespuestaEntidad DistribucionZonasTasadoresEliminar(String conexion, String conexionBitacora, DistribucionesZonasTasadoresEntidad DistribucionesZonasTasadores, BitacorasEntidad _bitacora)
                {
                    RespuestaEntidad elemento = null;
                    DataSet rowsAffected;

                    #region PARAMETROS

                    SqlParameter[] paramTransaccion = new SqlParameter[]
                    {
                        new SqlParameter("@piId_Distribucion_Zona_Tasador", DistribucionesZonasTasadores.IdDistribucionZonaTasador)
                    };

                    #endregion

                    #region KeyValuePair LIST

                    List<KeyValuePair<string, string>> itemConsulta = new List<KeyValuePair<string, string>>();
                    itemConsulta.Add(helper.CrearKeyValuePairItem("@piId_Distribucion_Zona_Tasador", DistribucionesZonasTasadores.IdDistribucionZonaTasador.ToString()));
                    itemConsulta.Add(helper.CrearKeyValuePairItem("@psCod_Tipo_Zona", DistribucionesZonasTasadores.IdDistribucionZonaTasador.ToString()));

                    #endregion

                    try
                    {

                        #region ELIMINAR

                        rowsAffected = transaccionDA.TransaccionEliminar(conexion, conexionBitacora, "Distribuciones_Zonas_Tasadores_Elimina", paramTransaccion, EnumTipoBitacora.ELIMINAR, itemConsulta, "Distribuciones_Zonas_Tasadores_Consulta_Detalle", _bitacora);
                        if (!rowsAffected.Equals(null))
                        {
                            elemento = new RespuestaEntidad();
                            elemento.ValorEstado = int.Parse(rowsAffected.Tables[0].Rows[0][0].ToString());
                            elemento.ValorError = int.Parse(rowsAffected.Tables[0].Rows[0][1].ToString());
                        }

                        return elemento;

                        #endregion

                    }
                    catch (Exception)
                    {
                        throw;
                    }
                }

                public List<DistribucionesZonasTasadoresEntidad> DistribucionZonasTasadoresConsultar(String conexion, ParametrosConsultaEntidad entidad, string _zona)
                {
                    List<DistribucionesZonasTasadoresEntidad> retorno = new List<DistribucionesZonasTasadoresEntidad>();
                    DistribucionesZonasTasadoresEntidad elemento;
                    DataSet rowsAffected;

                    #region PARAMETROS

                    SqlParameter[] paramTransaccion = new SqlParameter[]
                    {
                       new SqlParameter("@piIndice_Inicio_Fila", entidad.IndiceInicioFila),
                       new SqlParameter("@piMaximo_Filas", entidad.MaximoFilas),
                       new SqlParameter("@psValores_Filtro", entidad.ValorFiltro),
                       new SqlParameter("@psColumnas_Filtros", entidad.ColumnaFiltro),
                       new SqlParameter("@psColumna_Ordenar", entidad.ColumnaOrdenar),
                       new SqlParameter("@psCod_Tipo_Zona", _zona)
                    };

                    #endregion

                    try
                    {

                        #region CONSULTAR

                        rowsAffected = transaccionDA.TransaccionConsulta(conexion, "Distribuciones_Zonas_Tasadores_Consulta", paramTransaccion);
                        if (!rowsAffected.Equals(null))
                        {
                            foreach (DataRow dr in rowsAffected.Tables[0].Rows)
                            {
                                elemento = new DistribucionesZonasTasadoresEntidad();
                                elemento.IdDistribucionZonaTasador = int.Parse(dr[0].ToString());
                                elemento.IdZonaTasador = int.Parse(dr[1].ToString());
                                elemento.CodZonaTasador = dr[2].ToString();
                                elemento.DesZonaTasador = dr[3].ToString();
                                elemento.IdDistrito = int.Parse(dr[4].ToString());
                                elemento.CodDistrito = int.Parse(dr[5].ToString());
                                elemento.DesDistrito = dr[6].ToString();
                                elemento.IdCanton = int.Parse(dr[7].ToString());
                                elemento.CodCanton = int.Parse(dr[8].ToString());
                                elemento.DesCanton = dr[9].ToString();
                                elemento.IdProvincia = int.Parse(dr[10].ToString());
                                elemento.CodProvincia = int.Parse(dr[11].ToString());
                                elemento.DesProvincia = dr[12].ToString();
                                elemento.CodTipoDistribucionZonaTasador = dr[13].ToString();

                                retorno.Add(elemento);
                                
                            }
                        }

                        return retorno;

                        #endregion

                    }
                    catch (Exception)
                    {
                        throw;
                    }
                }
        
                public DistribucionesZonasTasadoresEntidad DistribucionZonasTasadoresConsultarDetalle(String conexion, String conexionBitacora, DistribucionesZonasTasadoresEntidad DistribucionesZonasTasadores, BitacorasEntidad _bitacora)
                {
                    DistribucionesZonasTasadoresEntidad retorno = new DistribucionesZonasTasadoresEntidad();
                    DataSet rowsAffected;

                    #region PARAMETROS

                    SqlParameter[] paramTransaccion = new SqlParameter[]
                    {
                        new SqlParameter("@piId_Distribucion_Zona_Tasador", DistribucionesZonasTasadores.IdDistribucionZonaTasador),
                        new SqlParameter("@psCod_Tipo_Zona", DistribucionesZonasTasadores.CodTipoDistribucionZonaTasador)
                    };

                    #endregion

                    #region KeyValuePair LIST

                    List<KeyValuePair<string, string>> itemConsulta = new List<KeyValuePair<string, string>>();
                    itemConsulta.Add(helper.CrearKeyValuePairItem("@piId_Distribucion_Zona_Tasador", DistribucionesZonasTasadores.IdDistribucionZonaTasador.ToString()));
                    itemConsulta.Add(helper.CrearKeyValuePairItem("@psCod_Tipo_Zona", DistribucionesZonasTasadores.IdDistribucionZonaTasador.ToString()));

                    #endregion

                    try
                    {

                        #region CONSULTAR DETALLE

                        rowsAffected = transaccionDA.TransaccionConsultaDetalle(conexion, conexionBitacora, "Distribuciones_Zonas_Tasadores_Consulta_Detalle", paramTransaccion, EnumTipoBitacora.CONSULTAR, itemConsulta, "Distribuciones_Zonas_Tasadores_Consulta_Detalle", _bitacora);
                        if (!rowsAffected.Equals(null))
                        {
                            retorno.IdDistribucionZonaTasador = int.Parse(rowsAffected.Tables[0].Rows[0][0].ToString());
                            retorno.IdZonaTasador = int.Parse(rowsAffected.Tables[0].Rows[0][1].ToString());
                            retorno.CodZonaTasador = rowsAffected.Tables[0].Rows[0][2].ToString();
                            retorno.DesZonaTasador = rowsAffected.Tables[0].Rows[0][3].ToString();
                            retorno.IdDistrito = int.Parse(rowsAffected.Tables[0].Rows[0][4].ToString());
                            retorno.CodDistrito = int.Parse(rowsAffected.Tables[0].Rows[0][5].ToString());
                            retorno.DesDistrito = rowsAffected.Tables[0].Rows[0][6].ToString();
                            retorno.IdCanton = int.Parse(rowsAffected.Tables[0].Rows[0][7].ToString());
                            retorno.CodCanton = int.Parse(rowsAffected.Tables[0].Rows[0][8].ToString());
                            retorno.DesCanton = rowsAffected.Tables[0].Rows[0][9].ToString();
                            retorno.IdProvincia = int.Parse(rowsAffected.Tables[0].Rows[0][10].ToString());
                            retorno.CodProvincia = int.Parse(rowsAffected.Tables[0].Rows[0][11].ToString());
                            retorno.DesProvincia = rowsAffected.Tables[0].Rows[0][12].ToString();
                            retorno.CodTipoDistribucionZonaTasador = rowsAffected.Tables[0].Rows[0][13].ToString();
                            retorno.IndMetodoInsercion = rowsAffected.Tables[0].Rows[0][14].ToString();
                            if (rowsAffected.Tables[0].Rows[0][15].ToString().Length > 0)
                                retorno.FechaIngreso = DateTime.Parse(rowsAffected.Tables[0].Rows[0][15].ToString());
                            else
                                retorno.FechaIngreso = null;
                            retorno.CodUsuarioIngreso = rowsAffected.Tables[0].Rows[0][16].ToString();
                            if (rowsAffected.Tables[0].Rows[0][17].ToString().Length > 0)
                                retorno.FechaUltimaModificacion = DateTime.Parse(rowsAffected.Tables[0].Rows[0][17].ToString());
                            else
                                retorno.FechaUltimaModificacion = null;
                            retorno.CodUsuarioUltimaModificacion = rowsAffected.Tables[0].Rows[0][18].ToString();
                            retorno.DesUsuarioIngreso = rowsAffected.Tables[0].Rows[0][19].ToString();
                            retorno.DesUsuarioUltimaModificacion = rowsAffected.Tables[0].Rows[0][20].ToString();

                        }

                        return retorno;

                        #endregion

                    }
                    catch (Exception)
                    {
                        throw;
                    }
                }
        
                public int DistribucionZonasTasadoresTotalFilas(String conexion, ParametrosTotalFilasEntidad entidad, string _zona)
                {

                    int value;

                    #region PARAMETROS

                    SqlParameter[] paramTransaccion = new SqlParameter[]
                    {
                        new SqlParameter("@psValor_Filtro", entidad.ValorFiltro),
                        new SqlParameter("@psColumna_Filtro", entidad.ColumnaFiltro),
                        new SqlParameter("@psCod_Tipo_Zona", _zona)
                    };

                    #endregion

                    try
                    {

                        #region TOTAL FILAS

                        value = transaccionDA.TransaccionRows(conexion, "Distribuciones_Zonas_Tasadores_Total_Filas", paramTransaccion);

                        return value;

                        #endregion

                    }
                    catch (Exception)
                    {
                        throw;
                    }
                }

            #endregion 

            #region DISTRITOS
        
                public RespuestaEntidad DistritosInsertar(String conexion, String conexionBitacora, DistritosEntidad distrito, BitacorasEntidad _bitacora)
                {
                    RespuestaEntidad elemento = null;
                    DataSet rowsAffected;

                    #region PARAMETROS

                    SqlParameter[] paramTransaccion = new SqlParameter[]
                    {
                        new SqlParameter("@piCod_Distrito", distrito.CodDistrito),
                        new SqlParameter("@psDes_Distrito", distrito.DesDistrito),
                        new SqlParameter("@piId_Canton", distrito.IdCanton),
                        new SqlParameter("@piId_Provincia", distrito.IdProvincia),
                        new SqlParameter("@psInd_Metodo_Insercion", distrito.IndMetodoInsercion),
                        new SqlParameter("@psCod_Usuario", distrito.CodUsuarioIngreso)
                    };

                    #endregion

                    try
                    {

                        #region INSERTAR

                        rowsAffected = transaccionDA.TransaccionInsertar(conexion, conexionBitacora, "Distritos_Inserta", paramTransaccion, EnumTipoBitacora.INSERTAR, _bitacora);
                        if (!rowsAffected.Equals(null))
                        {
                            elemento = new RespuestaEntidad();
                            elemento.ValorEstado = int.Parse(rowsAffected.Tables[0].Rows[0][0].ToString());
                            elemento.ValorError = int.Parse(rowsAffected.Tables[0].Rows[0][1].ToString());
                        }

                        return elemento;

                        #endregion

                    }
                    catch (Exception)
                    {
                        throw;
                    }
                }
        
                public RespuestaEntidad DistritosModificar(String conexion, String conexionBitacora, DistritosEntidad distrito, BitacorasEntidad _bitacora)
                {
                    RespuestaEntidad elemento = null;
                    DataSet rowsAffected;

                    #region PARAMETROS

                    SqlParameter[] paramTransaccion = new SqlParameter[]
                    {
                        new SqlParameter("@piId_Distrito", distrito.IdDistrito),
                        new SqlParameter("@piCod_Distrito", distrito.CodDistrito),
                        new SqlParameter("@psDes_Distrito", distrito.DesDistrito),
                        new SqlParameter("@piId_Canton", distrito.IdCanton),
                        new SqlParameter("@piId_Provincia", distrito.IdProvincia),
                        new SqlParameter("@psInd_Metodo_Insercion", distrito.IndMetodoInsercion),
                        new SqlParameter("@psCod_Usuario", distrito.CodUsuarioIngreso)
                    };

                    #endregion

                    #region KeyValuePair LIST

                    List<KeyValuePair<string, string>> itemConsulta = new List<KeyValuePair<string, string>>();
                    itemConsulta.Add(helper.CrearKeyValuePairItem("@piId_Distrito", distrito.IdDistrito.ToString()));

                    #endregion

                    try
                    {

                        #region MODIFICAR

                        rowsAffected = transaccionDA.TransaccionModificar(conexion, conexionBitacora, "Distritos_Actualiza", paramTransaccion, EnumTipoBitacora.ACTUALIZAR, itemConsulta, "Distritos_Consulta_Detalle", _bitacora);
                        if (!rowsAffected.Equals(null))
                        {
                            elemento = new RespuestaEntidad();
                            elemento.ValorEstado = int.Parse(rowsAffected.Tables[0].Rows[0][0].ToString());
                            elemento.ValorError = int.Parse(rowsAffected.Tables[0].Rows[0][1].ToString());
                        }

                        return elemento;

                        #endregion

                    }
                    catch (Exception)
                    {
                        throw;
                    }
                }
        
                public RespuestaEntidad DistritosEliminar(String conexion, String conexionBitacora, DistritosEntidad distrito, BitacorasEntidad _bitacora)
                {
                    RespuestaEntidad elemento = null;
                    DataSet rowsAffected;

                    #region PARAMETROS

                    SqlParameter[] paramTransaccion = new SqlParameter[]
                    {
                        new SqlParameter("@piId_Distrito", distrito.IdDistrito)
                    };

                    #endregion

                    #region KeyValuePair LIST

                    List<KeyValuePair<string, string>> itemConsulta = new List<KeyValuePair<string, string>>();
                    itemConsulta.Add(helper.CrearKeyValuePairItem("@piId_Distrito", distrito.IdDistrito.ToString()));

                    #endregion

                    try
                    {

                        #region ELIMINAR

                        rowsAffected = transaccionDA.TransaccionEliminar(conexion, conexionBitacora, "Distritos_Elimina", paramTransaccion, EnumTipoBitacora.ELIMINAR, itemConsulta, "Distritos_Consulta_Detalle", _bitacora);
                        if (!rowsAffected.Equals(null))
                        {
                            elemento = new RespuestaEntidad();
                            elemento.ValorEstado = int.Parse(rowsAffected.Tables[0].Rows[0][0].ToString());
                            elemento.ValorError = int.Parse(rowsAffected.Tables[0].Rows[0][1].ToString());
                        }

                        return elemento;

                        #endregion

                    }
                    catch (Exception)
                    {
                        throw;
                    }
                }

                public List<DistritosEntidad> DistritosConsultar(String conexion, ParametrosConsultaEntidad entidad)
                {
                    List<DistritosEntidad> retorno = new List<DistritosEntidad>();
                    DistritosEntidad elemento;
                    DataSet rowsAffected;

                    #region PARAMETROS

                    SqlParameter[] paramTransaccion = new SqlParameter[]
                    {
                       new SqlParameter("@piIndice_Inicio_Fila", entidad.IndiceInicioFila),
                       new SqlParameter("@piMaximo_Filas", entidad.MaximoFilas),
                       new SqlParameter("@psValores_Filtro", entidad.ValorFiltro),
                       new SqlParameter("@psColumnas_Filtros", entidad.ColumnaFiltro),
                       new SqlParameter("@psColumna_Ordenar", entidad.ColumnaOrdenar)
                    };

                    #endregion

                    try
                    {

                        #region CONSULTAR

                            rowsAffected = transaccionDA.TransaccionConsulta(conexion, "Distritos_Consulta", paramTransaccion);
                            if (!rowsAffected.Equals(null))
                            {
                                foreach (DataRow dr in rowsAffected.Tables[0].Rows)
                                {
                                    elemento = new DistritosEntidad();
                                    elemento.IdDistrito = int.Parse(dr[0].ToString());
                                    elemento.IdCanton = int.Parse(dr[1].ToString());
                                    elemento.IdProvincia = int.Parse(dr[2].ToString());
                                    elemento.CodCanton = int.Parse(dr[3].ToString());
                                    elemento.CodProvincia = int.Parse(dr[4].ToString());
                                    elemento.CodDistrito = int.Parse(dr[5].ToString());
                                    elemento.DesDistrito = dr[6].ToString();
                                    elemento.DesCanton = dr[7].ToString();
                                    elemento.DesProvincia = dr[8].ToString();

                                    retorno.Add(elemento);
                                }
                            }

                            return retorno;

                        #endregion

                    }
                    catch (Exception)
                    {
                        throw;
                    }
                }
        
                public DistritosEntidad DistritosConsultarDetalle(String conexion, String conexionBitacora, DistritosEntidad distrito, BitacorasEntidad _bitacora)
                {
                    DistritosEntidad retorno = new DistritosEntidad();
                    DataSet rowsAffected;

                    #region PARAMETROS

                    SqlParameter[] paramTransaccion = new SqlParameter[]
                    {
                        new SqlParameter("@piId_Distrito", distrito.IdDistrito)
                    };

                    #endregion

                    #region KeyValuePair LIST

                    List<KeyValuePair<string, string>> itemConsulta = new List<KeyValuePair<string, string>>();
                    itemConsulta.Add(helper.CrearKeyValuePairItem("@piId_Distrito", distrito.IdDistrito.ToString()));

                    #endregion

                    try
                    {

                        #region CONSULTAR DETALLE

                        rowsAffected = transaccionDA.TransaccionConsultaDetalle(conexion, conexionBitacora, "Distritos_Consulta_Detalle", paramTransaccion, EnumTipoBitacora.CONSULTAR, itemConsulta, "Distritos_Consulta_Detalle", _bitacora);
                        if (!rowsAffected.Equals(null))
                        {
                            retorno.IdDistrito = int.Parse(rowsAffected.Tables[0].Rows[0][0].ToString());
                            retorno.IdCanton = int.Parse(rowsAffected.Tables[0].Rows[0][1].ToString());
                            retorno.IdProvincia = int.Parse(rowsAffected.Tables[0].Rows[0][2].ToString());
                            retorno.CodDistrito = int.Parse(rowsAffected.Tables[0].Rows[0][3].ToString());
                            retorno.DesDistrito = rowsAffected.Tables[0].Rows[0][4].ToString();
                            retorno.CodCanton = int.Parse(rowsAffected.Tables[0].Rows[0][5].ToString());
                            retorno.DesCanton = rowsAffected.Tables[0].Rows[0][6].ToString();
                            retorno.CodProvincia = int.Parse(rowsAffected.Tables[0].Rows[0][7].ToString());
                            retorno.DesProvincia = rowsAffected.Tables[0].Rows[0][8].ToString();
                            retorno.IndMetodoInsercion = rowsAffected.Tables[0].Rows[0][9].ToString();
                            if (rowsAffected.Tables[0].Rows[0][10].ToString().Length > 0)
                                retorno.FechaIngreso = DateTime.Parse(rowsAffected.Tables[0].Rows[0][10].ToString());
                            else
                                retorno.FechaIngreso = null;
                            retorno.CodUsuarioIngreso = rowsAffected.Tables[0].Rows[0][11].ToString();
                            if (rowsAffected.Tables[0].Rows[0][12].ToString().Length > 0)
                                retorno.FechaUltimaModificacion = DateTime.Parse(rowsAffected.Tables[0].Rows[0][12].ToString());
                            else
                                retorno.FechaUltimaModificacion = null;
                            retorno.CodUsuarioUltimaModificacion = rowsAffected.Tables[0].Rows[0][13].ToString();
                            retorno.DesUsuarioIngreso = rowsAffected.Tables[0].Rows[0][14].ToString();
                            retorno.DesUsuarioUltimaModificacion = rowsAffected.Tables[0].Rows[0][15].ToString();
                        }

                        return retorno;

                        #endregion 

                    }
                    catch (Exception)
                    {
                        throw;
                    }
                }
        
                public int DistritosTotalFilas(String conexion, ParametrosTotalFilasEntidad entidad)
                {

                    int value;

                    #region PARAMETROS

                    SqlParameter[] paramTransaccion = new SqlParameter[]
                    {
                        new SqlParameter("@psValor_Filtro", entidad.ValorFiltro),
                        new SqlParameter("@psColumna_Filtro", entidad.ColumnaFiltro)
                    };

                    #endregion

                    try
                    {

                        #region TOTAL FILAS

                            value = transaccionDA.TransaccionRows(conexion, "Distritos_Total_Filas", paramTransaccion);

                            return value;

                        #endregion

                    }
                    catch (Exception)
                    {
                        throw;
                    }
                }
        
                public List<ListaEntidad> DistritosLista(String conexion, String filtro)
                {
                    List<ListaEntidad> retorno = new List<ListaEntidad>();
                    ListaEntidad elemento;
                    DataSet rowsAffected;

                    #region PARAMETROS

                    SqlParameter[] paramTransaccion = new SqlParameter[]
                    {
                        new SqlParameter("@psFiltro", filtro)
                    };

                    #endregion

                    #region KeyValuePair LIST

                    List<KeyValuePair<string, string>> itemConsulta = new List<KeyValuePair<string, string>>();
                    itemConsulta.Add(helper.CrearKeyValuePairItem("@psFiltro", filtro));

                    #endregion

                    try
                    {

                        #region CONSULTAR DETALLE

                        rowsAffected = transaccionDA.TransaccionConsulta(conexion, "Distritos_Lista", paramTransaccion);
                        if (!rowsAffected.Equals(null))
                        {
                            foreach (DataRow dr in rowsAffected.Tables[0].Rows)
                            {
                                elemento = new ListaEntidad();
                                elemento.Valor = dr[0].ToString();
                                elemento.Texto = dr[1].ToString();

                                retorno.Add(elemento);
                            }
                        }

                        return retorno;

                        #endregion

                    }
                    catch (Exception)
                    {
                        throw;
                    }
                }
        
            #endregion 

            #region EMISIONES INSTRUMENTOS
        
                public RespuestaEntidad EmisionesInstrumentosInsertar(String conexion, String conexionBitacora, EmisionesInstrumentosEntidad emisionInstrumento, BitacorasEntidad _bitacora)
                {
                    RespuestaEntidad elemento = null;
                    DataSet rowsAffected;

                    #region PARAMETROS

                    SqlParameter[] paramTransaccion = new SqlParameter[]
                    {
                        new SqlParameter("@piId_Emisor", emisionInstrumento.IdEmisor),
                        new SqlParameter("@piId_Instrumento", emisionInstrumento.IdInstrumento ),
                        new SqlParameter("@piId_Moneda", emisionInstrumento.IdMoneda),
                        new SqlParameter("@piId_Tipo_Clasificacion_Instrumento", emisionInstrumento.IdTipoClasificacionInstrumento),
                        new SqlParameter("@psSerie", emisionInstrumento.Serie),
                        new SqlParameter("@psISIN", emisionInstrumento.Isin),
                        new SqlParameter("@pnPremio", emisionInstrumento.Premio),
                        new SqlParameter("@pdtVencimiento", emisionInstrumento.Vencimiento),
                        new SqlParameter("@psInd_Metodo_Insercion", emisionInstrumento.IndMetodoInsercion),
                        new SqlParameter("@psCod_Usuario", emisionInstrumento.CodUsuarioIngreso)
                    };

                    #endregion

                    try
                    {

                        #region INSERTAR

                        rowsAffected = transaccionDA.TransaccionInsertar(conexion, conexionBitacora, "Emisiones_Instrumentos_Inserta", paramTransaccion, EnumTipoBitacora.INSERTAR, _bitacora);
                        if (!rowsAffected.Equals(null))
                        {
                            elemento = new RespuestaEntidad();
                            elemento.ValorEstado = int.Parse(rowsAffected.Tables[0].Rows[0][0].ToString());
                            elemento.ValorError = int.Parse(rowsAffected.Tables[0].Rows[0][1].ToString());
                        }

                        return elemento;

                        #endregion

                    }
                    catch (Exception)
                    {
                        throw;
                    }
                }
        
                public RespuestaEntidad EmisionesInstrumentosModificar(String conexion, String conexionBitacora, EmisionesInstrumentosEntidad emisionInstrumento, BitacorasEntidad _bitacora)
                {
                    RespuestaEntidad elemento = null;
                    DataSet rowsAffected;

                    #region PARAMETROS

                    SqlParameter[] paramTransaccion = new SqlParameter[]
                    {
                        new SqlParameter("@piId_Emision_Instrumento", emisionInstrumento.IdEmisionInstrumento),
                        new SqlParameter("@piId_Emisor", emisionInstrumento.IdEmisor),
                        new SqlParameter("@piId_Instrumento", emisionInstrumento.IdInstrumento ),
                        new SqlParameter("@piId_Moneda", emisionInstrumento.IdMoneda),
                        new SqlParameter("@piId_Tipo_Clasificacion_Instrumento", emisionInstrumento.IdTipoClasificacionInstrumento),
                        new SqlParameter("@psSerie", emisionInstrumento.Serie),
                        new SqlParameter("@psISIN", emisionInstrumento.Isin),
                        new SqlParameter("@pnPremio", emisionInstrumento.Premio),
                        new SqlParameter("@pdtVencimiento", emisionInstrumento.Vencimiento),
                        new SqlParameter("@psInd_Metodo_Insercion", emisionInstrumento.IndMetodoInsercion),
                        new SqlParameter("@psCod_Usuario", emisionInstrumento.CodUsuarioIngreso)
                    };

                    #endregion

                    #region KeyValuePair LIST

                    List<KeyValuePair<string, string>> itemConsulta = new List<KeyValuePair<string, string>>();
                    itemConsulta.Add(helper.CrearKeyValuePairItem("@piId_Emision_Instrumento", emisionInstrumento.IdEmisionInstrumento.ToString()));

                    #endregion

                    try
                    {

                        #region MODIFICAR

                        rowsAffected = transaccionDA.TransaccionModificar(conexion, conexionBitacora, "Emisiones_Instrumentos_Actualiza", paramTransaccion, EnumTipoBitacora.ACTUALIZAR, itemConsulta, "Emisiones_Instrumentos_Consulta_Detalle", _bitacora);
                        if (!rowsAffected.Equals(null))
                        {
                            elemento = new RespuestaEntidad();
                            elemento.ValorEstado = int.Parse(rowsAffected.Tables[0].Rows[0][0].ToString());
                            elemento.ValorError = int.Parse(rowsAffected.Tables[0].Rows[0][1].ToString());
                        }

                        return elemento;

                        #endregion

                    }
                    catch (Exception)
                    {
                        throw;
                    }
                }
        
                public RespuestaEntidad EmisionesInstrumentosEliminar(String conexion, String conexionBitacora, EmisionesInstrumentosEntidad emisionInstrumento, BitacorasEntidad _bitacora)
                {
                    RespuestaEntidad elemento = null;
                    DataSet rowsAffected;

                    #region PARAMETROS

                    SqlParameter[] paramTransaccion = new SqlParameter[]
                    {
                        new SqlParameter("@piId_Emision_Instrumento", emisionInstrumento.IdEmisionInstrumento)
                    };

                    #endregion

                    #region KeyValuePair LIST

                    List<KeyValuePair<string, string>> itemConsulta = new List<KeyValuePair<string, string>>();
                    itemConsulta.Add(helper.CrearKeyValuePairItem("@piId_Emision_Instrumento", emisionInstrumento.IdEmisionInstrumento.ToString()));

                    #endregion

                    try
                    {

                        #region ELIMINAR

                        rowsAffected = transaccionDA.TransaccionEliminar(conexion, conexionBitacora, "Emisiones_Instrumentos_Elimina", paramTransaccion, EnumTipoBitacora.ELIMINAR, itemConsulta, "Emisiones_Instrumentos_Consulta_Detalle", _bitacora);
                        if (!rowsAffected.Equals(null))
                        {
                            elemento = new RespuestaEntidad();
                            elemento.ValorEstado = int.Parse(rowsAffected.Tables[0].Rows[0][0].ToString());
                            elemento.ValorError = int.Parse(rowsAffected.Tables[0].Rows[0][1].ToString());
                        }

                        return elemento;

                        #endregion

                    }
                    catch (Exception)
                    {
                        throw;
                    }
                }

                public List<EmisionesInstrumentosEntidad> EmisionesInstrumentosConsultar(String conexion, ParametrosConsultaEntidad entidad)
                {
                    List<EmisionesInstrumentosEntidad> retorno = new List<EmisionesInstrumentosEntidad>();
                    EmisionesInstrumentosEntidad elemento;
                    DataSet rowsAffected;

                    #region PARAMETROS

                    SqlParameter[] paramTransaccion = new SqlParameter[]
                    {
                        new SqlParameter("@piIndice_Inicio_Fila", entidad.IndiceInicioFila),
                        new SqlParameter("@piMaximo_Filas", entidad.MaximoFilas),
                        new SqlParameter("@psValores_Filtro", entidad.ValorFiltro),
                        new SqlParameter("@psColumnas_Filtros", entidad.ColumnaFiltro),
                        new SqlParameter("@psColumna_Ordenar", entidad.ColumnaOrdenar)
                    };

                    #endregion

                    try
                    {

                        #region CONSULTAR

                            rowsAffected = transaccionDA.TransaccionConsulta(conexion, "Emisiones_Instrumentos_Consulta", paramTransaccion);
                            if (!rowsAffected.Equals(null))
                            {
                                foreach (DataRow dr in rowsAffected.Tables[0].Rows)
                                {
                                    elemento = new EmisionesInstrumentosEntidad();
                                    elemento.IdEmisionInstrumento = int.Parse(dr[0].ToString());
                                    elemento.IdEmisor = int.Parse(dr[1].ToString());
                                    elemento.IdInstrumento = int.Parse(dr[2].ToString());
                                    elemento.IdMoneda = int.Parse(dr[3].ToString());
                                    elemento.IdTipoClasificacionInstrumento =int.Parse(dr[4].ToString());
                                    elemento.CodEmisor = dr[5].ToString();
                                    elemento.CodInstrumento = dr[6].ToString();
                                    elemento.CodMoneda = int.Parse(dr[7].ToString());
                                    elemento.codTipoClasificacionInstrumento = int.Parse(dr[8].ToString());
                                    elemento.DesEmisor = dr[9].ToString();
                                    elemento.DesInstrumento = dr[10].ToString();
                                    elemento.DesMoneda = dr[11].ToString();
                                    elemento.DesTipoClasificacionInstrumento = dr[12].ToString();
                                    elemento.Serie = dr[13].ToString();
                                    elemento.Isin = dr[14].ToString();
                                    elemento.Premio = String.IsNullOrEmpty(dr[15].ToString()) ? null : (double?)Double.Parse(dr[15].ToString());
                                    if (dr[16].ToString().Length > 0)
                                        elemento.Vencimiento = DateTime.Parse(dr[16].ToString());
                                    else
                                        elemento.Vencimiento = null;

                                    retorno.Add(elemento);
                                }
                            }

                            return retorno;

                        #endregion

                    }
                    catch (Exception)
                    {
                        throw;
                    }
                }
        
                public EmisionesInstrumentosEntidad EmisionesInstrumentosConsultarDetalle(String conexion, String conexionBitacora, EmisionesInstrumentosEntidad emisionInstrumento, BitacorasEntidad _bitacora)
                {
                    EmisionesInstrumentosEntidad retorno = new EmisionesInstrumentosEntidad();
                    DataSet rowsAffected;

                    #region PARAMETROS

                    SqlParameter[] paramTransaccion = new SqlParameter[]
                    {
                        new SqlParameter("@piId_Emision_Instrumento", emisionInstrumento.IdEmisionInstrumento)
                    };

                    #endregion

                    #region KeyValuePair LIST

                    List<KeyValuePair<string, string>> itemConsulta = new List<KeyValuePair<string, string>>();
                    itemConsulta.Add(helper.CrearKeyValuePairItem("@piId_Emision_Instrumento", emisionInstrumento.IdEmisionInstrumento.ToString()));

                    #endregion

                    try
                    {

                        #region CONSULTAR DETALLE

                        rowsAffected = transaccionDA.TransaccionConsultaDetalle(conexion, conexionBitacora, "Emisiones_Instrumentos_Consulta_Detalle", paramTransaccion, EnumTipoBitacora.CONSULTAR, itemConsulta, "Emisiones_Instrumentos_Consulta_Detalle", _bitacora);
                        if (!rowsAffected.Equals(null))
                        {
                            retorno.IdEmisionInstrumento = int.Parse(rowsAffected.Tables[0].Rows[0][0].ToString());
                            retorno.IdEmisor = int.Parse(rowsAffected.Tables[0].Rows[0][1].ToString());
                            retorno.IdInstrumento = int.Parse(rowsAffected.Tables[0].Rows[0][2].ToString());
                            retorno.IdMoneda = int.Parse(rowsAffected.Tables[0].Rows[0][3].ToString());
                            retorno.IdTipoClasificacionInstrumento = int.Parse(rowsAffected.Tables[0].Rows[0][4].ToString());
                            retorno.CodEmisor = rowsAffected.Tables[0].Rows[0][5].ToString();
                            retorno.CodInstrumento = rowsAffected.Tables[0].Rows[0][6].ToString();
                            retorno.CodMoneda = int.Parse(rowsAffected.Tables[0].Rows[0][7].ToString());
                            retorno.codTipoClasificacionInstrumento = int.Parse(rowsAffected.Tables[0].Rows[0][8].ToString());
                            retorno.DesEmisor = rowsAffected.Tables[0].Rows[0][9].ToString();
                            retorno.DesInstrumento = rowsAffected.Tables[0].Rows[0][10].ToString();
                            retorno.DesMoneda = rowsAffected.Tables[0].Rows[0][11].ToString();
                            retorno.DesTipoClasificacionInstrumento = rowsAffected.Tables[0].Rows[0][12].ToString();
                            retorno.Serie = rowsAffected.Tables[0].Rows[0][13].ToString();
                            retorno.Isin = rowsAffected.Tables[0].Rows[0][14].ToString();
                            if (rowsAffected.Tables[0].Rows[0][15].ToString().Length > 0)
                                retorno.Premio = double.Parse(rowsAffected.Tables[0].Rows[0][15].ToString());
                            else
                                retorno.Premio = null;
                            if (rowsAffected.Tables[0].Rows[0][16].ToString().Length > 0)
                                retorno.Vencimiento = DateTime.Parse(rowsAffected.Tables[0].Rows[0][16].ToString());
                            else
                                retorno.Vencimiento = null;
                            retorno.IndMetodoInsercion = rowsAffected.Tables[0].Rows[0][17].ToString();
                            if (rowsAffected.Tables[0].Rows[0][18].ToString().Length > 0)
                                retorno.FechaIngreso = DateTime.Parse(rowsAffected.Tables[0].Rows[0][18].ToString());
                            else
                                retorno.FechaIngreso = null;
                            retorno.CodUsuarioIngreso = rowsAffected.Tables[0].Rows[0][19].ToString();
                            if (rowsAffected.Tables[0].Rows[0][20].ToString().Length > 0)
                                retorno.FechaUltimaModificacion = DateTime.Parse(rowsAffected.Tables[0].Rows[0][20].ToString());
                            else
                                retorno.FechaUltimaModificacion = null;
                            retorno.CodUsuarioUltimaModificacion = rowsAffected.Tables[0].Rows[0][21].ToString();
                            retorno.DesUsuarioIngreso = rowsAffected.Tables[0].Rows[0][22].ToString();
                            retorno.DesUsuarioUltimaModificacion = rowsAffected.Tables[0].Rows[0][23].ToString();
                        }

                        return retorno;

                        #endregion

                    }
                    catch (Exception)
                    {
                        throw;
                    }
                }
        
                public int EmisionesInstrumentosTotalFilas(String conexion, ParametrosTotalFilasEntidad entidad)
                {

                    int value;

                    #region PARAMETROS

                    SqlParameter[] paramTransaccion = new SqlParameter[]
                    {
                        new SqlParameter("@psValor_Filtro", entidad.ValorFiltro),
                        new SqlParameter("@psColumna_Filtro", entidad.ColumnaFiltro)
                    };

                    #endregion

                    try
                    {

                        #region TOTAL FILAS

                            value = transaccionDA.TransaccionRows(conexion, "Emisiones_Instrumentos_Total_Filas", paramTransaccion);

                            return value;

                        #endregion

                    }
                    catch (Exception)
                    {
                        throw;
                    }
                }

                public List<ListaEntidad> EmisionesInstrumentosEmisorLista(String conexion, String filtro)
                {
                    List<ListaEntidad> retorno = new List<ListaEntidad>();
                    ListaEntidad elemento;
                    DataSet rowsAffected;

                    #region PARAMETROS

                    SqlParameter[] paramTransaccion = new SqlParameter[]
                    {
                        new SqlParameter("@psFiltro", filtro)
                    };

                    #endregion

                    try
                    {

                        #region LISTA

                        rowsAffected = transaccionDA.TransaccionConsulta(conexion, "Emisiones_Instrumentos_Emisor_Lista", paramTransaccion);
                        if (!rowsAffected.Equals(null))
                        {
                            foreach (DataRow dr in rowsAffected.Tables[0].Rows)
                            {
                                elemento = new ListaEntidad();
                                elemento.Valor = dr[0].ToString();
                                elemento.Texto = dr[1].ToString();

                                retorno.Add(elemento);
                            }
                        }
                        return retorno;

                        #endregion

                    }
                    catch (Exception)
                    {
                        throw;
                    }
                }

                public List<ListaEntidad> EmisionesInstrumentosISINLista(String conexion, String idInstrumento, String idEmisor)
                {
                    List<ListaEntidad> retorno = new List<ListaEntidad>();
                    ListaEntidad elemento;
                    DataSet rowsAffected;

                    #region PARAMETROS

                    SqlParameter[] paramTransaccion = new SqlParameter[]
                    {
                        new SqlParameter("@psId_Instrumento", idInstrumento),
                        new SqlParameter("@psId_Emisor", idEmisor)
                    };

                    #endregion

                    try
                    {

                        #region LISTA

                        rowsAffected = transaccionDA.TransaccionConsulta(conexion, "Emisiones_Instrumentos_ISIN_Lista", paramTransaccion);
                        if (!rowsAffected.Equals(null))
                        {
                            foreach (DataRow dr in rowsAffected.Tables[0].Rows)
                            {
                                elemento = new ListaEntidad();
                                elemento.Valor = dr[0].ToString();
                                elemento.Texto = dr[1].ToString();

                                retorno.Add(elemento);
                            }
                        }
                        return retorno;

                        #endregion

                    }
                    catch (Exception)
                    {
                        throw;
                    }
                }

                public List<ListaEntidad> EmisionesInstrumentosSerieLista(String conexion, String idInstrumento, String idEmisor, String ISIN)
                {
                    List<ListaEntidad> retorno = new List<ListaEntidad>();
                    ListaEntidad elemento;
                    DataSet rowsAffected;

                    #region PARAMETROS

                    SqlParameter[] paramTransaccion = new SqlParameter[]
                    {
                        new SqlParameter("@psId_Instrumento", idInstrumento),
                        new SqlParameter("@psId_Emisor", idEmisor),
                        new SqlParameter("@psISIN ", ISIN )
                    };

                    #endregion

                    try
                    {

                        #region LISTA

                        rowsAffected = transaccionDA.TransaccionConsulta(conexion, "Emisiones_Instrumentos_Serie_Lista", paramTransaccion);
                        if (!rowsAffected.Equals(null))
                        {
                            foreach (DataRow dr in rowsAffected.Tables[0].Rows)
                            {
                                elemento = new ListaEntidad();
                                elemento.Valor = dr[0].ToString();
                                elemento.Texto = dr[1].ToString();

                                retorno.Add(elemento);
                            }
                        }
                        return retorno;

                        #endregion

                    }
                    catch (Exception)
                    {
                        throw;
                    }
                }

                public List<ListaEntidad> EmisionesInstrumentosTipoClasificacionPremioLista(String conexion, String idInstrumento, String idEmisor, String ISIN, String serie)
                {
                    List<ListaEntidad> retorno = new List<ListaEntidad>();
                    ListaEntidad elemento;
                    DataSet rowsAffected;

                    #region PARAMETROS

                    SqlParameter[] paramTransaccion = new SqlParameter[]
                    {
                        new SqlParameter("@psId_Instrumento", idInstrumento),
                        new SqlParameter("@psId_Emisor", idEmisor),
                        new SqlParameter("@psISIN ", (ISIN.Length != 0 ? ISIN : null) ),
                        new SqlParameter("@psSerie ", (serie.Length != 0 ? serie : null) )
                    };

                    #endregion

                    try
                    {

                        #region LISTA

                        rowsAffected = transaccionDA.TransaccionConsulta(conexion, "Emisiones_Instrumentos_Tipo_Clasificacion_Premio_Lista", paramTransaccion);
                        if (!rowsAffected.Equals(null))
                        {
                            foreach (DataRow dr in rowsAffected.Tables[0].Rows)
                            {
                                elemento = new ListaEntidad();
                                elemento.Valor = dr[0].ToString();
                                elemento.Texto = dr[1].ToString();

                                retorno.Add(elemento);
                            }
                        }
                        return retorno;

                        #endregion

                    }
                    catch (Exception)
                    {
                        throw;
                    }
                }

                public List<ListaEntidad> EmisionesInstrumentosFechaVencimientoLista(String conexion, String idInstrumento, String idEmisor, String ISIN, String serie, String premio)
                {
                    List<ListaEntidad> retorno = new List<ListaEntidad>();
                    ListaEntidad elemento;
                    DataSet rowsAffected;

                    #region PARAMETROS

                    SqlParameter[] paramTransaccion = new SqlParameter[]
                    {
                        new SqlParameter("@psId_Instrumento", idInstrumento),
                        new SqlParameter("@psId_Emisor", idEmisor),
                        new SqlParameter("@psISIN ", (ISIN.Length != 0 ? ISIN : null) ),
                        new SqlParameter("@psSerie ", (serie.Length != 0 ? serie : null) ),
                        new SqlParameter("@pnPremio ", (premio.Length != 0 ? premio : null) )
                    };

                    #endregion

                    try
                    {

                        #region LISTA

                        rowsAffected = transaccionDA.TransaccionConsulta(conexion, "Emisiones_Instrumentos_Fecha_Vencimiento_Lista", paramTransaccion);
                        if (!rowsAffected.Equals(null))
                        {
                            foreach (DataRow dr in rowsAffected.Tables[0].Rows)
                            {
                                elemento = new ListaEntidad();
                                elemento.Valor = dr[0].ToString();
                                elemento.Texto = dr[1].ToString();

                                retorno.Add(elemento);
                            }
                        }
                        return retorno;

                        #endregion

                    }
                    catch (Exception)
                    {
                        throw;
                    }
                }

                public List<ListaEntidad> EmisionesInstrumentosMonedaLista(String conexion, String idInstrumento, String idEmisor, String ISIN, String serie, String idTipoInstrumento)
                {
                    List<ListaEntidad> retorno = new List<ListaEntidad>();
                    ListaEntidad elemento;
                    DataSet rowsAffected;

                    #region PARAMETROS

                    SqlParameter[] paramTransaccion = new SqlParameter[]
                    {
                        new SqlParameter("@psId_Instrumento", idInstrumento),
                        new SqlParameter("@psId_Emisor", idEmisor),
                        new SqlParameter("@psISIN ", (ISIN.Length != 0 ? ISIN : null) ),
                        new SqlParameter("@psSerie ", (serie.Length != 0 ? serie : null) ),
                        new SqlParameter("@piId_Tipo_Instrumento ", idTipoInstrumento)
                    };

                    #endregion

                    try
                    {

                        #region LISTA

                        rowsAffected = transaccionDA.TransaccionConsulta(conexion, "Emisiones_Instrumentos_Moneda_Lista", paramTransaccion);
                        if (!rowsAffected.Equals(null))
                        {
                            foreach (DataRow dr in rowsAffected.Tables[0].Rows)
                            {
                                elemento = new ListaEntidad();
                                elemento.Valor = dr[0].ToString();
                                elemento.Texto = dr[1].ToString();

                                retorno.Add(elemento);
                            }
                        }
                        return retorno;

                        #endregion

                    }
                    catch (Exception)
                    {
                        throw;
                    }
                }

            #endregion 

            #region EMISORES
        
                public RespuestaEntidad EmisoresInsertar(String conexion, String conexionBitacora, EmisoresEntidad emisor, BitacorasEntidad _bitacora)
                {
                    RespuestaEntidad elemento = null;
                    DataSet rowsAffected;

                    #region PARAMETROS

                    SqlParameter[] paramTransaccion = new SqlParameter[]
                    {
                        new SqlParameter("@psCod_Emisor", emisor.CodEmisor),
                        new SqlParameter("@psDes_Emisor", emisor.DesEmisor),
                        new SqlParameter("@psInd_Metodo_Insercion", emisor.IndMetodoInsercion),
                        new SqlParameter("@psCod_Usuario", emisor.CodUsuarioIngreso)
                    };

                    #endregion

                    try
                    {

                        #region INSERTAR

                        rowsAffected = transaccionDA.TransaccionInsertar(conexion, conexionBitacora, "Emisores_Inserta", paramTransaccion, EnumTipoBitacora.INSERTAR, _bitacora);
                        if (!rowsAffected.Equals(null))
                        {
                            elemento = new RespuestaEntidad();
                            elemento.ValorEstado = int.Parse(rowsAffected.Tables[0].Rows[0][0].ToString());
                            elemento.ValorError = int.Parse(rowsAffected.Tables[0].Rows[0][1].ToString());
                        }

                        return elemento;

                        #endregion

                    }
                    catch (Exception)
                    {
                        throw;
                    }
                }
        
                public RespuestaEntidad EmisoresModificar(String conexion, String conexionBitacora, EmisoresEntidad emisor, BitacorasEntidad _bitacora)
                {
                    RespuestaEntidad elemento = null;
                    DataSet rowsAffected;

                    #region PARAMETROS

                    SqlParameter[] paramTransaccion = new SqlParameter[]
                    {
                        new SqlParameter("@piId_Emisor", emisor.IdEmisor),
                        new SqlParameter("@psCod_Emisor", emisor.CodEmisor),
                        new SqlParameter("@psDes_Emisor", emisor.DesEmisor),
                        new SqlParameter("@psInd_Metodo_Insercion", emisor.IndMetodoInsercion),
                        new SqlParameter("@psCod_Usuario", emisor.CodUsuarioIngreso)
                    };

                    #endregion

                    #region KeyValuePair LIST

                    List<KeyValuePair<string, string>> itemConsulta = new List<KeyValuePair<string, string>>();
                    itemConsulta.Add(helper.CrearKeyValuePairItem("@piId_Emisor", emisor.IdEmisor.ToString()));

                    #endregion

                    try
                    {

                        #region MODIFICAR

                        rowsAffected = transaccionDA.TransaccionModificar(conexion, conexionBitacora, "Emisores_Actualiza", paramTransaccion, EnumTipoBitacora.ACTUALIZAR, itemConsulta, "Emisores_Consulta_Detalle", _bitacora);
                        if (!rowsAffected.Equals(null))
                        {
                            elemento = new RespuestaEntidad();
                            elemento.ValorEstado = int.Parse(rowsAffected.Tables[0].Rows[0][0].ToString());
                            elemento.ValorError = int.Parse(rowsAffected.Tables[0].Rows[0][1].ToString());
                        }

                        return elemento;

                        #endregion

                    }
                    catch (Exception)
                    {
                        throw;
                    }
                }
        
                public RespuestaEntidad EmisoresEliminar(String conexion, String conexionBitacora, EmisoresEntidad emisor, BitacorasEntidad _bitacora)
                {
                    RespuestaEntidad elemento = null;
                    DataSet rowsAffected;

                    #region PARAMETROS

                    SqlParameter[] paramTransaccion = new SqlParameter[]
                    {
                        new SqlParameter("@piId_Emisor", emisor.IdEmisor)
                    };

                    #endregion

                    #region KeyValuePair LIST

                    List<KeyValuePair<string, string>> itemConsulta = new List<KeyValuePair<string, string>>();
                    itemConsulta.Add(helper.CrearKeyValuePairItem("@piId_Emisor", emisor.IdEmisor.ToString()));

                    #endregion

                    try
                    {

                        #region ELIMINAR

                        rowsAffected = transaccionDA.TransaccionEliminar(conexion, conexionBitacora, "Emisores_Elimina", paramTransaccion, EnumTipoBitacora.ELIMINAR, itemConsulta, "Emisores_Consulta_Detalle", _bitacora);
                        if (!rowsAffected.Equals(null))
                        {
                            elemento = new RespuestaEntidad();
                            elemento.ValorEstado = int.Parse(rowsAffected.Tables[0].Rows[0][0].ToString());
                            elemento.ValorError = int.Parse(rowsAffected.Tables[0].Rows[0][1].ToString());
                        }

                        return elemento;

                        #endregion

                    }
                    catch (Exception)
                    {
                        throw;
                    }
                }

                public List<EmisoresEntidad> EmisoresConsultar(String conexion, ParametrosConsultaEntidad entidad)
                {
                    List<EmisoresEntidad> retorno = new List<EmisoresEntidad>();
                    EmisoresEntidad elemento;
                    DataSet rowsAffected;

                    #region PARAMETROS

                    SqlParameter[] paramTransaccion = new SqlParameter[]
                    {
                       new SqlParameter("@piIndice_Inicio_Fila", entidad.IndiceInicioFila),
                       new SqlParameter("@piMaximo_Filas", entidad.MaximoFilas),
                       new SqlParameter("@psValores_Filtro", entidad.ValorFiltro),
                       new SqlParameter("@psColumnas_Filtros", entidad.ColumnaFiltro),
                       new SqlParameter("@psColumna_Ordenar", entidad.ColumnaOrdenar)
                    };

                    #endregion

                    try
                    {

                        #region CONSULTAR

                        rowsAffected = transaccionDA.TransaccionConsulta(conexion, "Emisores_Consulta", paramTransaccion);
                        if (!rowsAffected.Equals(null))
                        {
                            foreach (DataRow dr in rowsAffected.Tables[0].Rows)
                            {
                                elemento = new EmisoresEntidad();
                                elemento.IdEmisor = int.Parse(dr[0].ToString());
                                elemento.CodEmisor = dr[1].ToString();
                                elemento.DesEmisor = dr[2].ToString();

                                retorno.Add(elemento);
                            }
                        }

                        return retorno;

                        #endregion

                    }
                    catch (Exception)
                    {
                        throw;
                    }
                }
        
                public EmisoresEntidad EmisoresConsultarDetalle(String conexion, String conexionBitacora, EmisoresEntidad emisor, BitacorasEntidad _bitacora)
                {
                    EmisoresEntidad retorno = new EmisoresEntidad();
                    DataSet rowsAffected;

                    #region PARAMETROS

                    SqlParameter[] paramTransaccion = new SqlParameter[]
                    {
                        new SqlParameter("@piId_Emisor", emisor.IdEmisor)
                    };

                    #endregion

                    #region KeyValuePair LIST

                    List<KeyValuePair<string, string>> itemConsulta = new List<KeyValuePair<string, string>>();
                    itemConsulta.Add(helper.CrearKeyValuePairItem("@piId_Emisor", emisor.IdEmisor.ToString()));

                    #endregion

                    try
                    {

                        #region CONSULTAR DETALLE

                        rowsAffected = transaccionDA.TransaccionConsultaDetalle(conexion, conexionBitacora, "Emisores_Consulta_Detalle", paramTransaccion, EnumTipoBitacora.CONSULTAR, itemConsulta, "Emisores_Consulta_Detalle", _bitacora);
                        if (!rowsAffected.Equals(null))
                        {
                            retorno.IdEmisor = int.Parse(rowsAffected.Tables[0].Rows[0][0].ToString());
                            retorno.CodEmisor = rowsAffected.Tables[0].Rows[0][1].ToString();
                            retorno.DesEmisor = rowsAffected.Tables[0].Rows[0][2].ToString();
                            retorno.IndMetodoInsercion = rowsAffected.Tables[0].Rows[0][3].ToString();
                            if (rowsAffected.Tables[0].Rows[0][4].ToString().Length > 0)
                                retorno.FechaIngreso = DateTime.Parse(rowsAffected.Tables[0].Rows[0][4].ToString());
                            else
                                retorno.FechaIngreso = null;
                            retorno.CodUsuarioIngreso = rowsAffected.Tables[0].Rows[0][5].ToString();
                            if (rowsAffected.Tables[0].Rows[0][6].ToString().Length > 0)
                                retorno.FechaUltimaModificacion = DateTime.Parse(rowsAffected.Tables[0].Rows[0][6].ToString());
                            else
                                retorno.FechaUltimaModificacion = null;
                            retorno.CodUsuarioUltimaModificacion = rowsAffected.Tables[0].Rows[0][7].ToString();
                            retorno.DesUsuarioIngreso = rowsAffected.Tables[0].Rows[0][8].ToString();
                            retorno.DesUsuarioUltimaModificacion = rowsAffected.Tables[0].Rows[0][9].ToString();
                        }

                        return retorno;

                        #endregion

                    }
                    catch (Exception)
                    {
                        throw;
                    }
                }
        
                public int EmisoresTotalFilas(String conexion, ParametrosTotalFilasEntidad entidad)
                {

                    int value;

                    #region PARAMETROS

                    SqlParameter[] paramTransaccion = new SqlParameter[]
                    {
                        new SqlParameter("@psValor_Filtro", entidad.ValorFiltro),
                        new SqlParameter("@psColumna_Filtro", entidad.ColumnaFiltro)
                    };

                    #endregion

                    try
                    {

                        #region TOTAL FILAS

                            value = transaccionDA.TransaccionRows(conexion, "Emisores_Total_Filas", paramTransaccion);

                            return value;

                        #endregion

                    }
                    catch (Exception)
                    {
                        throw;
                    }
                }
        
                public List<ListaEntidad> EmisoresLista(String conexion, String filtro)
                {
                    List<ListaEntidad> retorno = new List<ListaEntidad>();
                    ListaEntidad elemento;
                    DataSet rowsAffected;

                    #region PARAMETROS

                    SqlParameter[] paramTransaccion = new SqlParameter[]
                    {
                        new SqlParameter("@psFiltro", filtro)
                    };

                    #endregion

                    #region KeyValuePair LIST

                    List<KeyValuePair<string, string>> itemConsulta = new List<KeyValuePair<string, string>>();
                    itemConsulta.Add(helper.CrearKeyValuePairItem("@psFiltro", filtro));

                    #endregion

                    try
                    {

                        #region LISTA

                        rowsAffected = transaccionDA.TransaccionConsulta(conexion, "Emisores_Lista", paramTransaccion);
                        if (!rowsAffected.Equals(null))
                        {
                            foreach (DataRow dr in rowsAffected.Tables[0].Rows)
                            {
                                elemento = new ListaEntidad();
                                elemento.Valor = dr[0].ToString();
                                elemento.Texto = dr[1].ToString();

                                retorno.Add(elemento);
                            }
                        }

                        return retorno;

                        #endregion


                    }
                    catch (Exception)
                    {
                        throw;
                    }
                }
        
            #endregion 

            //REQUERIMIENTO: 1-24105296
            #region EMPRESAS CALIFICADORAS
        
                public RespuestaEntidad EmpresasCalificadorasInsertar(String conexion, String conexionBitacora, EmpresasCalificadorasEntidad entidad, BitacorasEntidad _bitacora)
                {
                    RespuestaEntidad elemento = null;
                    DataSet rowsAffected;

                    #region PARAMETROS

                    SqlParameter[] paramTransaccion = new SqlParameter[]
                    {
                        new SqlParameter("@psCod_Empresa_Calificadora", entidad.CodEmpresaCalificadora),
                        new SqlParameter("@psDes_Empresa_Calificadora", entidad.DesEmpresaCalificadora),
                        new SqlParameter("@piId_Plazo_Calificacion", entidad.IdPlazoCalificacion),
                        new SqlParameter("@psInd_Metodo_Insercion", entidad.IndMetodoInsercion),
                        new SqlParameter("@psCod_Usuario", entidad.CodUsuarioIngreso)
                    };

                    #endregion

                    try
                    {

                        #region INSERTAR


                        rowsAffected = transaccionDA.TransaccionInsertar(conexion, conexionBitacora, "Empresas_Calificadoras_Inserta", paramTransaccion, EnumTipoBitacora.INSERTAR, _bitacora);
                        if (!rowsAffected.Equals(null))
                        {
                            elemento = new RespuestaEntidad();
                            elemento.ValorEstado = int.Parse(rowsAffected.Tables[0].Rows[0][0].ToString());
                            elemento.ValorError = int.Parse(rowsAffected.Tables[0].Rows[0][1].ToString());
                        }

                        return elemento;

                        #endregion

                    }
                    catch (Exception)
                    {
                        throw;
                    }
                }
        
                public RespuestaEntidad EmpresasCalificadorasModificar(String conexion, String conexionBitacora, EmpresasCalificadorasEntidad entidad, BitacorasEntidad _bitacora)
                {
                    RespuestaEntidad elemento = null;
                    DataSet rowsAffected;

                    #region PARAMETROS

                    SqlParameter[] paramTransaccion = new SqlParameter[]
                    {
                        new SqlParameter("@piId_Empresa_Calificadora", entidad.IdEmpresaCalificadora),
                        new SqlParameter("@psCod_Empresa_Calificadora", entidad.CodEmpresaCalificadora),
                        new SqlParameter("@psDes_Empresa_Calificadora", entidad.DesEmpresaCalificadora),
                        new SqlParameter("@piId_Plazo_Calificacion", entidad.IdPlazoCalificacion),
                        new SqlParameter("@psInd_Metodo_Insercion", entidad.IndMetodoInsercion),
                        new SqlParameter("@psCod_Usuario", entidad.CodUsuarioIngreso)
                    };

                    #endregion

                    #region KeyValuePair LIST

                    List<KeyValuePair<string, string>> itemConsulta = new List<KeyValuePair<string, string>>();
                    itemConsulta.Add(helper.CrearKeyValuePairItem("@piId_Empresa_Calificadora", entidad.IdEmpresaCalificadora.ToString()));

                    #endregion

                    try
                    {

                        #region MODIFICAR

                        rowsAffected = transaccionDA.TransaccionModificar(conexion, conexionBitacora, "Empresas_Calificadoras_Actualiza", paramTransaccion, EnumTipoBitacora.ACTUALIZAR, itemConsulta, "Empresas_Calificadoras_Consulta_Detalle", _bitacora);
                        if (!rowsAffected.Equals(null))
                        {
                            elemento = new RespuestaEntidad();
                            elemento.ValorEstado = int.Parse(rowsAffected.Tables[0].Rows[0][0].ToString());
                            elemento.ValorError = int.Parse(rowsAffected.Tables[0].Rows[0][1].ToString());
                        }

                        return elemento;

                        #endregion

                    }
                    catch (Exception)
                    {
                        throw;
                    }
                }
        
                public RespuestaEntidad EmpresasCalificadorasEliminar(String conexion, String conexionBitacora, EmpresasCalificadorasEntidad entidad, BitacorasEntidad _bitacora)
                {
                    RespuestaEntidad elemento = null;
                    DataSet rowsAffected;

                    #region PARAMETROS

                    SqlParameter[] paramTransaccion = new SqlParameter[]
                    {
                        new SqlParameter("@piId_Empresa_Calificadora", entidad.IdEmpresaCalificadora)
                    };

                    #endregion

                    #region KeyValuePair LIST

                    List<KeyValuePair<string, string>> itemConsulta = new List<KeyValuePair<string, string>>();
                    itemConsulta.Add(helper.CrearKeyValuePairItem("@piId_Empresa_Calificadora", entidad.IdEmpresaCalificadora.ToString()));

                    #endregion

                    try
                    {

                        #region ELIMINAR

                        rowsAffected = transaccionDA.TransaccionEliminar(conexion, conexionBitacora, "Empresas_Calificadoras_Elimina", paramTransaccion, EnumTipoBitacora.ELIMINAR, itemConsulta, "Empresas_Calificadoras_Consulta_Detalle", _bitacora);
                        if (!rowsAffected.Equals(null))
                        {
                            elemento = new RespuestaEntidad();
                            elemento.ValorEstado = int.Parse(rowsAffected.Tables[0].Rows[0][0].ToString());
                            elemento.ValorError = int.Parse(rowsAffected.Tables[0].Rows[0][1].ToString());
                        }

                        return elemento;

                        #endregion

                    }
                    catch (Exception)
                    {
                        throw;
                    }
                }

                public List<EmpresasCalificadorasEntidad> EmpresasCalificadorasConsultar(String conexion, ParametrosConsultaEntidad entidad)
                {
                    List<EmpresasCalificadorasEntidad> retorno = new List<EmpresasCalificadorasEntidad>();
                    EmpresasCalificadorasEntidad elemento;
                    DataSet rowsAffected;

                    #region PARAMETROS

                    SqlParameter[] paramTransaccion = new SqlParameter[]
                    {
                       new SqlParameter("@piIndice_Inicio_Fila", entidad.IndiceInicioFila),
                       new SqlParameter("@piMaximo_Filas", entidad.MaximoFilas),
                       new SqlParameter("@psValores_Filtro", entidad.ValorFiltro),
                       new SqlParameter("@psColumnas_Filtros", entidad.ColumnaFiltro),
                       new SqlParameter("@psColumna_Ordenar", entidad.ColumnaOrdenar)
                    };

                    #endregion

                    try
                    {

                        #region CONSULTAR

                        rowsAffected = transaccionDA.TransaccionConsulta(conexion, "Empresas_Calificadoras_Consulta", paramTransaccion);
                        if (!rowsAffected.Equals(null))
                        {
                            foreach (DataRow dr in rowsAffected.Tables[0].Rows)
                            {
                                elemento = new EmpresasCalificadorasEntidad();
                                elemento.IdEmpresaCalificadora = int.Parse(dr[0].ToString());
                                elemento.IdPlazoCalificacion = int.Parse(dr[1].ToString());
                                elemento.CodPlazoCalificacion = dr[2].ToString();
                                elemento.DesPlazoCalificacion = dr[3].ToString();
                                elemento.CodEmpresaCalificadora = dr[4].ToString();
                                elemento.DesEmpresaCalificadora = dr[5].ToString();

                                retorno.Add(elemento);
                            }
                        }

                        return retorno;

                        #endregion

                    }
                    catch (Exception)
                    {
                        throw;
                    }
                }
        
                public EmpresasCalificadorasEntidad EmpresasCalificadorasConsultarDetalle(String conexion, String conexionBitacora, EmpresasCalificadorasEntidad entidad, BitacorasEntidad _bitacora)
                {
                    EmpresasCalificadorasEntidad retorno = new EmpresasCalificadorasEntidad();
                    DataSet rowsAffected;

                    #region PARAMETROS

                    SqlParameter[] paramTransaccion = new SqlParameter[]
                        {
                            new SqlParameter("@piId_Empresa_Calificadora", entidad.IdEmpresaCalificadora)
                        };

                    #endregion

                    #region KeyValuePair LIST

                    List<KeyValuePair<string, string>> itemConsulta = new List<KeyValuePair<string, string>>();
                    itemConsulta.Add(helper.CrearKeyValuePairItem("@piId_Empresa_Calificadora", entidad.IdEmpresaCalificadora.ToString()));

                    #endregion

                    try
                    {

                        #region CONSULTAR DETALLE

                        rowsAffected = transaccionDA.TransaccionConsultaDetalle(conexion, conexionBitacora, "Empresas_Calificadoras_Consulta_Detalle", paramTransaccion, EnumTipoBitacora.CONSULTAR, itemConsulta, "Empresas_Calificadoras_Consulta_Detalle", _bitacora);
                        if (!rowsAffected.Equals(null))
                        {
                            retorno.IdEmpresaCalificadora = int.Parse(rowsAffected.Tables[0].Rows[0][0].ToString());
                            retorno.IdPlazoCalificacion = int.Parse(rowsAffected.Tables[0].Rows[0][1].ToString());
                            retorno.CodPlazoCalificacion = rowsAffected.Tables[0].Rows[0][2].ToString();
                            retorno.DesPlazoCalificacion = rowsAffected.Tables[0].Rows[0][3].ToString();
                            retorno.CodEmpresaCalificadora = rowsAffected.Tables[0].Rows[0][4].ToString();
                            retorno.DesEmpresaCalificadora = rowsAffected.Tables[0].Rows[0][5].ToString();
                            retorno.IndMetodoInsercion = rowsAffected.Tables[0].Rows[0][6].ToString();
                            if (rowsAffected.Tables[0].Rows[0][7].ToString().Length > 0)
                                retorno.FechaIngreso = DateTime.Parse(rowsAffected.Tables[0].Rows[0][7].ToString());
                            else
                                retorno.FechaIngreso = null;
                            retorno.CodUsuarioIngreso = rowsAffected.Tables[0].Rows[0][8].ToString();
                            if (rowsAffected.Tables[0].Rows[0][9].ToString().Length > 0)
                                retorno.FechaUltimaModificacion = DateTime.Parse(rowsAffected.Tables[0].Rows[0][9].ToString());
                            else
                                retorno.FechaUltimaModificacion = null;
                            retorno.CodUsuarioUltimaModificacion = rowsAffected.Tables[0].Rows[0][10].ToString();
                            retorno.DesUsuarioIngreso = rowsAffected.Tables[0].Rows[0][11].ToString();
                            retorno.DesUsuarioUltimaModificacion = rowsAffected.Tables[0].Rows[0][12].ToString();
                        }

                        return retorno;

                        #endregion

                    }
                    catch (Exception)
                    {
                        throw;
                    }
                }
        
                public int EmpresasCalificadorasTotalFilas(String conexion, ParametrosTotalFilasEntidad entidad)
                {
                    int value;

                    #region PARAMETROS

                    SqlParameter[] paramTransaccion = new SqlParameter[]
                    {
                        new SqlParameter("@psValor_Filtro", entidad.ValorFiltro),
                        new SqlParameter("@psColumna_Filtro", entidad.ColumnaFiltro)
                    };

                    #endregion

                    try
                    {

                        #region TOTAL FILAS

                        value = transaccionDA.TransaccionRows(conexion, "Empresas_Calificadoras_Total_Filas", paramTransaccion);

                        return value;

                        #endregion

                    }
                    catch (Exception)
                    {
                        throw;
                    }
                }

                public List<ListaEntidad> EmpresasCalificadorasLista(String conexion, String filtro)
                {
                    List<ListaEntidad> retorno = new List<ListaEntidad>();
                    ListaEntidad elemento;
                    DataSet rowsAffected;

                    #region PARAMETROS

                    SqlParameter[] paramTransaccion = new SqlParameter[]
                    {
                        new SqlParameter("@psFiltro", filtro)
                    };

                    #endregion

                    try
                    {

                        #region LISTA

                        rowsAffected = transaccionDA.TransaccionConsulta(conexion, "Empresas_Calificadoras_Lista", paramTransaccion);
                        if (!rowsAffected.Equals(null))
                        {
                            foreach (DataRow dr in rowsAffected.Tables[0].Rows)
                            {
                                elemento = new ListaEntidad();
                                elemento.Valor = dr[0].ToString();
                                elemento.Texto = dr[1].ToString();

                                retorno.Add(elemento);
                            }
                        }
                        return retorno;

                        #endregion

                    }
                    catch (Exception)
                    {
                        throw;
                    }
                }

            #endregion 
        
            //REQUERIMIENTO: 1-24105296
            #region EMPRESAS TASADORAS
        
                public RespuestaEntidad EmpresasTasadorasInsertar(String conexion, String conexionBitacora, TasadoresEntidad tasador, BitacorasEntidad _bitacora)
                {
                    RespuestaEntidad elemento = null;
                    DataSet rowsAffected;

                    #region PARAMETROS

                    SqlParameter[] paramTransaccion = new SqlParameter[]
                    {
                        new SqlParameter("@piId_Tipo_Persona", tasador.IdTipoPersona),
                        new SqlParameter("@psCod_Tasador", tasador.CodTasador),
                        new SqlParameter("@psNombre_Tasador", tasador.DesNombreTasador),
                        new SqlParameter("@psCod_Tipo_Tasador", tasador.CodTipoTasador),
                        new SqlParameter("@psOrigen_Tasador", tasador.OrigenTasador),
                        new SqlParameter("@psInd_Metodo_Insercion", tasador.IndMetodoInsercion),
                        new SqlParameter("@psCod_Usuario", tasador.CodUsuarioIngreso)
                    };

                    #endregion

                    try
                    {

                        #region INSERTAR


                        rowsAffected = transaccionDA.TransaccionInsertar(conexion, conexionBitacora, "Empresas_Tasadoras_Inserta", paramTransaccion, EnumTipoBitacora.INSERTAR, _bitacora);
                        if (!rowsAffected.Equals(null))
                        {
                            elemento = new RespuestaEntidad();
                            elemento.ValorEstado = int.Parse(rowsAffected.Tables[0].Rows[0][0].ToString());
                            elemento.ValorError = int.Parse(rowsAffected.Tables[0].Rows[0][1].ToString());
                        }

                        return elemento;

                        #endregion

                    }
                    catch (Exception)
                    {
                        throw;
                    }
                }
        
                public RespuestaEntidad EmpresasTasadorasModificar(String conexion, String conexionBitacora, TasadoresEntidad tasador, BitacorasEntidad _bitacora)
                {
                    RespuestaEntidad elemento = null;
                    DataSet rowsAffected;

                    #region PARAMETROS

                    SqlParameter[] paramTransaccion = new SqlParameter[]
                    {
                        new SqlParameter("@piId_Tasador", tasador.IdTasador),
                        new SqlParameter("@piId_Tipo_Persona", tasador.IdTipoPersona),
                        new SqlParameter("@psCod_Tasador", tasador.CodTasador),
                        new SqlParameter("@psNombre_Tasador", tasador.DesNombreTasador),
                        new SqlParameter("@psOrigen_Tasador", tasador.OrigenTasador),
                        new SqlParameter("@psCod_Tipo_Tasador", tasador.CodTipoTasador),
                        new SqlParameter("@psInd_Metodo_Insercion", tasador.IndMetodoInsercion),
                        new SqlParameter("@psCod_Usuario", tasador.CodUsuarioIngreso)
                    };

                    #endregion

                    #region KeyValuePair LIST

                    List<KeyValuePair<string, string>> itemConsulta = new List<KeyValuePair<string, string>>();
                    itemConsulta.Add(helper.CrearKeyValuePairItem("@piId_Tasador", tasador.IdTasador.ToString()));

                    #endregion

                    try
                    {

                        #region MODIFICAR

                        rowsAffected = transaccionDA.TransaccionModificar(conexion, conexionBitacora, "Empresas_Tasadoras_Actualiza", paramTransaccion, EnumTipoBitacora.ACTUALIZAR, itemConsulta, "Empresas_Tasadoras_Consulta_Detalle", _bitacora);
                        if (!rowsAffected.Equals(null))
                        {
                            elemento = new RespuestaEntidad();
                            elemento.ValorEstado = int.Parse(rowsAffected.Tables[0].Rows[0][0].ToString());
                            elemento.ValorError = int.Parse(rowsAffected.Tables[0].Rows[0][1].ToString());
                        }

                        return elemento;

                        #endregion

                    }
                    catch (Exception)
                    {
                        throw;
                    }
                }
        
                public RespuestaEntidad EmpresasTasadorasEliminar(String conexion, String conexionBitacora, TasadoresEntidad tasador, BitacorasEntidad _bitacora)
                {
                    RespuestaEntidad elemento = null;
                    DataSet rowsAffected;

                    #region PARAMETROS

                    SqlParameter[] paramTransaccion = new SqlParameter[]
                    {
                        new SqlParameter("@piId_Tasador", tasador.IdTasador)
                    };

                    #endregion

                    #region KeyValuePair LIST

                    List<KeyValuePair<string, string>> itemConsulta = new List<KeyValuePair<string, string>>();
                    itemConsulta.Add(helper.CrearKeyValuePairItem("@piId_Tasador", tasador.IdTasador.ToString()));

                    #endregion

                    try
                    {

                        #region ELIMINAR

                        rowsAffected = transaccionDA.TransaccionEliminar(conexion, conexionBitacora, "Empresas_Tasadoras_Elimina", paramTransaccion, EnumTipoBitacora.ELIMINAR, itemConsulta, "Empresas_Tasadoras_Consulta_Detalle", _bitacora);
                        if (!rowsAffected.Equals(null))
                        {
                            elemento = new RespuestaEntidad();
                            elemento.ValorEstado = int.Parse(rowsAffected.Tables[0].Rows[0][0].ToString());
                            elemento.ValorError = int.Parse(rowsAffected.Tables[0].Rows[0][1].ToString());
                        }

                        return elemento;

                        #endregion

                    }
                    catch (Exception)
                    {
                        throw;
                    }
                }

                public List<TasadoresEntidad> EmpresasTasadorasConsultar(String conexion, ParametrosConsultaEntidad entidad)
                {
                    List<TasadoresEntidad> retorno = new List<TasadoresEntidad>();
                    TasadoresEntidad elemento;
                    DataSet rowsAffected;

                    #region PARAMETROS

                    SqlParameter[] paramTransaccion = new SqlParameter[]
                    {
                       new SqlParameter("@piIndice_Inicio_Fila", entidad.IndiceInicioFila),
                       new SqlParameter("@piMaximo_Filas", entidad.MaximoFilas),
                       new SqlParameter("@psValores_Filtro", entidad.ValorFiltro),
                       new SqlParameter("@psColumnas_Filtros", entidad.ColumnaFiltro),
                       new SqlParameter("@psColumna_Ordenar", entidad.ColumnaOrdenar)
                    };

                    #endregion

                    try
                    {

                        #region CONSULTAR

                        rowsAffected = transaccionDA.TransaccionConsulta(conexion, "Empresas_Tasadoras_Consulta", paramTransaccion);
                        if (!rowsAffected.Equals(null))
                        {
                            foreach (DataRow dr in rowsAffected.Tables[0].Rows)
                            {
                                elemento = new TasadoresEntidad();
                                elemento.IdTasador = int.Parse(dr[0].ToString());
                                elemento.IdTipoPersona = int.Parse(dr[1].ToString());
                                elemento.CodTipoPersona = int.Parse(dr[2].ToString());
                                elemento.DesTipoPersona = dr[3].ToString();
                                elemento.CodTasador = dr[4].ToString();
                                elemento.DesNombreTasador = dr[5].ToString();
                                elemento.OrigenTasador = dr[6].ToString();
                                elemento.DesOrigenTasador = dr[7].ToString();
                                elemento.CodTipoTasador = dr[8].ToString();
                                elemento.DesTipoTasador = dr[9].ToString();

                                retorno.Add(elemento);
                            }
                        }

                        return retorno;

                        #endregion

                    }
                    catch (Exception)
                    {
                        throw;
                    }
                }
        
                public TasadoresEntidad EmpresasTasadorasConsultarDetalle(String conexion, String conexionBitacora, TasadoresEntidad tasador, BitacorasEntidad _bitacora)
                {
                    TasadoresEntidad retorno = new TasadoresEntidad();
                    DataSet rowsAffected;

                    #region PARAMETROS

                    SqlParameter[] paramTransaccion = new SqlParameter[]
                        {
                            new SqlParameter("@piId_Tasador", tasador.IdTasador)
                        };

                    #endregion

                    #region KeyValuePair LIST

                    List<KeyValuePair<string, string>> itemConsulta = new List<KeyValuePair<string, string>>();
                    itemConsulta.Add(helper.CrearKeyValuePairItem("@piId_Tasador", tasador.IdTasador.ToString()));

                    #endregion

                    try
                    {

                        #region CONSULTAR DETALLE

                        rowsAffected = transaccionDA.TransaccionConsultaDetalle(conexion, conexionBitacora, "Empresas_Tasadoras_Consulta_Detalle", paramTransaccion, EnumTipoBitacora.CONSULTAR, itemConsulta, "Empresas_Tasadoras_Consulta_Detalle", _bitacora);
                        if (!rowsAffected.Equals(null))
                        {
                            retorno.IdTasador = int.Parse(rowsAffected.Tables[0].Rows[0][0].ToString());
                            retorno.IdTipoPersona = int.Parse(rowsAffected.Tables[0].Rows[0][1].ToString());
                            retorno.CodTipoPersona = int.Parse(rowsAffected.Tables[0].Rows[0][2].ToString());
                            retorno.DesTipoPersona = rowsAffected.Tables[0].Rows[0][3].ToString();
                            retorno.CodTasador = rowsAffected.Tables[0].Rows[0][4].ToString();
                            retorno.DesNombreTasador = rowsAffected.Tables[0].Rows[0][5].ToString();
                            retorno.OrigenTasador = rowsAffected.Tables[0].Rows[0][6].ToString();
                            retorno.CodTipoTasador = rowsAffected.Tables[0].Rows[0][7].ToString();
                            retorno.IndMetodoInsercion = rowsAffected.Tables[0].Rows[0][8].ToString();
                            if (rowsAffected.Tables[0].Rows[0][9].ToString().Length > 0)
                                retorno.FechaIngreso = DateTime.Parse(rowsAffected.Tables[0].Rows[0][9].ToString());
                            else
                                retorno.FechaIngreso = null;
                            retorno.CodUsuarioIngreso = rowsAffected.Tables[0].Rows[0][10].ToString();
                            if (rowsAffected.Tables[0].Rows[0][11].ToString().Length > 0)
                                retorno.FechaUltimaModificacion = DateTime.Parse(rowsAffected.Tables[0].Rows[0][11].ToString());
                            else
                                retorno.FechaUltimaModificacion = null;
                            retorno.CodUsuarioUltimaModificacion = rowsAffected.Tables[0].Rows[0][12].ToString();
                            retorno.DesUsuarioIngreso = rowsAffected.Tables[0].Rows[0][13].ToString();
                            retorno.DesUsuarioUltimaModificacion = rowsAffected.Tables[0].Rows[0][14].ToString();
                        }

                        return retorno;

                        #endregion

                    }
                    catch (Exception)
                    {
                        throw;
                    }
                }
        
                public int EmpresasTasadorasTotalFilas(String conexion, ParametrosTotalFilasEntidad entidad)
                {
                    int value;

                    #region PARAMETROS

                    SqlParameter[] paramTransaccion = new SqlParameter[]
                    {
                        new SqlParameter("@psValor_Filtro", entidad.ValorFiltro),
                        new SqlParameter("@psColumna_Filtro", entidad.ColumnaFiltro)
                    };

                    #endregion

                    try
                    {

                        #region TOTAL FILAS

                        value = transaccionDA.TransaccionRows(conexion, "Empresas_Tasadoras_Total_Filas", paramTransaccion);

                        return value;

                        #endregion

                    }
                    catch (Exception)
                    {
                        throw;
                    }
                }

            #endregion 

            #region ENCHAPES
        
                public RespuestaEntidad EnchapesInsertar(String conexion, String conexionBitacora, EnchapesEntidad enchape, BitacorasEntidad _bitacora)
                {
                    RespuestaEntidad elemento = null;
                    DataSet rowsAffected;

                    #region PARAMETROS

                    SqlParameter[] paramTransaccion = new SqlParameter[]
                    {
                        new SqlParameter("@piCod_Enchape", enchape.CodEnchape),
                        new SqlParameter("@psDes_Enchape", enchape.DesEnchape),
                        new SqlParameter("@psInd_Metodo_Insercion", enchape.IndMetodoInsercion),
                        new SqlParameter("@psCod_Usuario", enchape.CodUsuarioIngreso)
                    };

                    #endregion

                    try
                    {

                        #region INSERTAR

                        rowsAffected = transaccionDA.TransaccionInsertar(conexion, conexionBitacora, "Enchapes_Inserta", paramTransaccion, EnumTipoBitacora.INSERTAR, _bitacora);
                        if (!rowsAffected.Equals(null))
                        {
                            elemento = new RespuestaEntidad();
                            elemento.ValorEstado = int.Parse(rowsAffected.Tables[0].Rows[0][0].ToString());
                            elemento.ValorError = int.Parse(rowsAffected.Tables[0].Rows[0][1].ToString());
                        }

                        return elemento;

                        #endregion

                    }
                    catch (Exception)
                    {
                        throw;
                    }
                }
        
                public RespuestaEntidad EnchapesModificar(String conexion, String conexionBitacora, EnchapesEntidad enchape, BitacorasEntidad _bitacora)
                {
                    RespuestaEntidad elemento = null;
                    DataSet rowsAffected;

                    #region PARAMETROS

                    SqlParameter[] paramTransaccion = new SqlParameter[]
                    {
                        new SqlParameter("@piId_Enchape", enchape.IdEnchape),
                        new SqlParameter("@piCod_Enchape", enchape.CodEnchape),
                        new SqlParameter("@psDes_Enchape", enchape.DesEnchape),
                        new SqlParameter("@psInd_Metodo_Insercion", enchape.IndMetodoInsercion),
                        new SqlParameter("@psCod_Usuario", enchape.CodUsuarioIngreso)
                    };

                    #endregion

                    #region KeyValuePair LIST

                    List<KeyValuePair<string, string>> itemConsulta = new List<KeyValuePair<string, string>>();
                    itemConsulta.Add(helper.CrearKeyValuePairItem("@piId_Enchape", enchape.IdEnchape.ToString()));

                    #endregion

                    try
                    {

                        #region MODIFICAR

                        rowsAffected = transaccionDA.TransaccionModificar(conexion, conexionBitacora, "Enchapes_Actualiza", paramTransaccion, EnumTipoBitacora.ACTUALIZAR, itemConsulta, "Enchapes_Consulta_Detalle", _bitacora);
                        if (!rowsAffected.Equals(null))
                        {
                            elemento = new RespuestaEntidad();
                            elemento.ValorEstado = int.Parse(rowsAffected.Tables[0].Rows[0][0].ToString());
                            elemento.ValorError = int.Parse(rowsAffected.Tables[0].Rows[0][1].ToString());
                        }

                        return elemento;

                        #endregion

                    }
                    catch (Exception)
                    {
                        throw;
                    }
                }
        
                public RespuestaEntidad EnchapesEliminar(String conexion, String conexionBitacora, EnchapesEntidad enchape, BitacorasEntidad _bitacora)
                {
                    RespuestaEntidad elemento = null;
                    DataSet rowsAffected;

                    #region PARAMETROS

                    SqlParameter[] paramTransaccion = new SqlParameter[]
                    {
                        new SqlParameter("@piId_Enchape", enchape.IdEnchape)
                    };

                    #endregion

                    #region KeyValuePair LIST

                    List<KeyValuePair<string, string>> itemConsulta = new List<KeyValuePair<string, string>>();
                    itemConsulta.Add(helper.CrearKeyValuePairItem("@piId_Enchape", enchape.IdEnchape.ToString()));

                    #endregion
                    
                    try
                    {

                        #region ELIMINAR

                        rowsAffected = transaccionDA.TransaccionEliminar(conexion, conexionBitacora, "Enchapes_Elimina", paramTransaccion, EnumTipoBitacora.ELIMINAR, itemConsulta, "Enchapes_Consulta_Detalle", _bitacora);
                        if (!rowsAffected.Equals(null))
                        {
                            elemento = new RespuestaEntidad();
                            elemento.ValorEstado = int.Parse(rowsAffected.Tables[0].Rows[0][0].ToString());
                            elemento.ValorError = int.Parse(rowsAffected.Tables[0].Rows[0][1].ToString());
                        }

                        return elemento;

                        #endregion

                    }
                    catch (Exception)
                    {
                        throw;
                    }
                }

                public List<EnchapesEntidad> EnchapesConsultar(String conexion, ParametrosConsultaEntidad entidad)
                {
                    List<EnchapesEntidad> retorno = new List<EnchapesEntidad>();
                    EnchapesEntidad elemento;
                    DataSet rowsAffected;

                    #region PARAMETROS

                    SqlParameter[] paramTransaccion = new SqlParameter[]
                    {
                       new SqlParameter("@piIndice_Inicio_Fila", entidad.IndiceInicioFila),
                       new SqlParameter("@piMaximo_Filas", entidad.MaximoFilas),
                       new SqlParameter("@psValores_Filtro", entidad.ValorFiltro),
                       new SqlParameter("@psColumnas_Filtros", entidad.ColumnaFiltro),
                       new SqlParameter("@psColumna_Ordenar", entidad.ColumnaOrdenar)
                    };

                    #endregion

                    try
                    {

                        #region CONSULTAR

                        rowsAffected = transaccionDA.TransaccionConsulta(conexion, "Enchapes_Consulta", paramTransaccion);
                        if (!rowsAffected.Equals(null))
                        {
                            foreach (DataRow dr in rowsAffected.Tables[0].Rows)
                            {
                                elemento = new EnchapesEntidad();
                                elemento.IdEnchape = int.Parse(dr[0].ToString());
                                elemento.CodEnchape = int.Parse(dr[1].ToString());
                                elemento.DesEnchape = dr[2].ToString();

                                retorno.Add(elemento);
                            }
                        }

                        return retorno;

                        #endregion

                    }
                    catch (Exception)
                    {
                        throw;
                    }
                }
        
                public EnchapesEntidad EnchapesConsultarDetalle(String conexion, String conexionBitacora, EnchapesEntidad enchape, BitacorasEntidad _bitacora)
                {
                    EnchapesEntidad retorno = new EnchapesEntidad();
                    DataSet rowsAffected;

                    #region PARAMETROS

                    SqlParameter[] paramTransaccion = new SqlParameter[]
                    {
                        new SqlParameter("@piId_Enchape", enchape.IdEnchape)
                    };

                    #endregion

                    #region KeyValuePair LIST

                    List<KeyValuePair<string, string>> itemConsulta = new List<KeyValuePair<string, string>>();
                    itemConsulta.Add(helper.CrearKeyValuePairItem("@piId_Enchape", enchape.IdEnchape.ToString()));

                    #endregion

                    try
                    {

                        #region CONSULTAR DETALLE

                        rowsAffected = transaccionDA.TransaccionConsultaDetalle(conexion, conexionBitacora, "Enchapes_Consulta_Detalle", paramTransaccion, EnumTipoBitacora.CONSULTAR, itemConsulta, "Enchapes_Consulta_Detalle", _bitacora);
                        if (!rowsAffected.Equals(null))
                        {
                            retorno.IdEnchape = int.Parse(rowsAffected.Tables[0].Rows[0][0].ToString());
                            retorno.CodEnchape = int.Parse(rowsAffected.Tables[0].Rows[0][1].ToString());
                            retorno.DesEnchape = rowsAffected.Tables[0].Rows[0][2].ToString(); 
                            retorno.IndMetodoInsercion = rowsAffected.Tables[0].Rows[0][3].ToString();
                            if (rowsAffected.Tables[0].Rows[0][4].ToString().Length > 0)
                                retorno.FechaIngreso = DateTime.Parse(rowsAffected.Tables[0].Rows[0][4].ToString());
                            else
                                retorno.FechaIngreso = null;
                            retorno.CodUsuarioIngreso = rowsAffected.Tables[0].Rows[0][5].ToString();
                            if (rowsAffected.Tables[0].Rows[0][6].ToString().Length > 0)
                                retorno.FechaUltimaModificacion = DateTime.Parse(rowsAffected.Tables[0].Rows[0][6].ToString());
                            else
                                retorno.FechaUltimaModificacion = null;
                            retorno.CodUsuarioUltimaModificacion = rowsAffected.Tables[0].Rows[0][7].ToString();
                            retorno.DesUsuarioIngreso = rowsAffected.Tables[0].Rows[0][8].ToString();
                            retorno.DesUsuarioUltimaModificacion = rowsAffected.Tables[0].Rows[0][9].ToString();
                        }

                        return retorno;

                        #endregion

                    }
                    catch (Exception)
                    {
                        throw;
                    }
                }
        
                public int EnchapesTotalFilas(String conexion, ParametrosTotalFilasEntidad entidad)
                {

                    int value;

                    #region PARAMETROS

                    SqlParameter[] paramTransaccion = new SqlParameter[]
                    {
                        new SqlParameter("@psValor_Filtro", entidad.ValorFiltro),
                        new SqlParameter("@psColumna_Filtro", entidad.ColumnaFiltro)
                    };

                    #endregion

                    try
                    {

                        #region TOTAL FILAS

                            value = transaccionDA.TransaccionRows(conexion, "Enchapes_Total_Filas", paramTransaccion);

                            return value;

                        #endregion

                    }
                    catch (Exception)
                    {
                        throw;
                    }
                }

            #endregion 

            #region ENFOQUES
        
                public RespuestaEntidad EnfoquesInsertar(String conexion, String conexionBitacora, EnfoquesEntidad enfoque, BitacorasEntidad _bitacora)
                {
                    RespuestaEntidad elemento = null;
                    DataSet rowsAffected;

                    #region PARAMETROS

                    SqlParameter[] paramTransaccion = new SqlParameter[]
                    {
                        new SqlParameter("@piCod_Enfoque", enfoque.CodEnfoque),
                        new SqlParameter("@psDes_Enfoque", enfoque.DesEnfoque),
                        new SqlParameter("@psInd_Metodo_Insercion", enfoque.IndMetodoInsercion),
                        new SqlParameter("@psCod_Usuario", enfoque.CodUsuarioIngreso)
                    };

                    #endregion

                    try
                    {

                        #region INSERTAR

                        rowsAffected = transaccionDA.TransaccionInsertar(conexion, conexionBitacora, "Enfoques_Inserta", paramTransaccion, EnumTipoBitacora.INSERTAR, _bitacora);
                        if (!rowsAffected.Equals(null))
                        {
                            elemento = new RespuestaEntidad();
                            elemento.ValorEstado = int.Parse(rowsAffected.Tables[0].Rows[0][0].ToString());
                            elemento.ValorError = int.Parse(rowsAffected.Tables[0].Rows[0][1].ToString());
                        }

                        return elemento;

                        #endregion

                    }
                    catch (Exception)
                    {
                        throw;
                    }
                }
        
                public RespuestaEntidad EnfoquesModificar(String conexion, String conexionBitacora, EnfoquesEntidad enfoque, BitacorasEntidad _bitacora)
                {
                    RespuestaEntidad elemento = null;
                    DataSet rowsAffected;

                    #region PARAMETROS

                    SqlParameter[] paramTransaccion = new SqlParameter[]
                    {
                        new SqlParameter("@piId_Enfoque", enfoque.IdEnfoque),
                        new SqlParameter("@piCod_Enfoque", enfoque.CodEnfoque),
                        new SqlParameter("@psDes_Enfoque", enfoque.DesEnfoque),
                        new SqlParameter("@psInd_Metodo_Insercion", enfoque.IndMetodoInsercion),
                        new SqlParameter("@psCod_Usuario", enfoque.CodUsuarioIngreso)
                    };

                    #endregion

                    #region KeyValuePair LIST

                    List<KeyValuePair<string, string>> itemConsulta = new List<KeyValuePair<string, string>>();
                    itemConsulta.Add(helper.CrearKeyValuePairItem("@piId_Enfoque", enfoque.IdEnfoque.ToString()));

                    #endregion

                    try
                    {

                        #region MODIFICAR

                        rowsAffected = transaccionDA.TransaccionModificar(conexion, conexionBitacora, "Enfoques_Actualiza", paramTransaccion, EnumTipoBitacora.ACTUALIZAR, itemConsulta, "Enfoques_Consulta_Detalle", _bitacora);
                        if (!rowsAffected.Equals(null))
                        {
                            elemento = new RespuestaEntidad();
                            elemento.ValorEstado = int.Parse(rowsAffected.Tables[0].Rows[0][0].ToString());
                            elemento.ValorError = int.Parse(rowsAffected.Tables[0].Rows[0][1].ToString());
                        }

                        return elemento;

                        #endregion

                    }
                    catch (Exception)
                    {
                        throw;
                    }
                }
        
                public RespuestaEntidad EnfoquesEliminar(String conexion, String conexionBitacora, EnfoquesEntidad enfoque, BitacorasEntidad _bitacora)
                {
                    RespuestaEntidad elemento = null;
                    DataSet rowsAffected;

                    #region PARAMETROS

                    SqlParameter[] paramTransaccion = new SqlParameter[]
                    {
                        new SqlParameter("@piId_Enfoque", enfoque.IdEnfoque)
                    };

                    #endregion

                    #region KeyValuePair LIST

                    List<KeyValuePair<string, string>> itemConsulta = new List<KeyValuePair<string, string>>();
                    itemConsulta.Add(helper.CrearKeyValuePairItem("@piId_Enfoque", enfoque.IdEnfoque.ToString()));

                    #endregion

                    try
                    {

                        #region ELIMINAR

                        rowsAffected = transaccionDA.TransaccionEliminar(conexion, conexionBitacora, "Enfoques_Elimina", paramTransaccion, EnumTipoBitacora.ELIMINAR, itemConsulta, "Enfoques_Consulta_Detalle", _bitacora);
                        if (!rowsAffected.Equals(null))
                        {
                            elemento = new RespuestaEntidad();
                            elemento.ValorEstado = int.Parse(rowsAffected.Tables[0].Rows[0][0].ToString());
                            elemento.ValorError = int.Parse(rowsAffected.Tables[0].Rows[0][1].ToString());
                        }

                        return elemento;

                        #endregion

                    }
                    catch (Exception)
                    {
                        throw;
                    }
                }

                public List<EnfoquesEntidad> EnfoquesConsultar(String conexion, ParametrosConsultaEntidad entidad)
                {
                    List<EnfoquesEntidad> retorno = new List<EnfoquesEntidad>();
                    EnfoquesEntidad elemento;
                    DataSet rowsAffected;

                    #region PARAMETROS

                    SqlParameter[] paramTransaccion = new SqlParameter[]
                    {
                        new SqlParameter("@piIndice_Inicio_Fila", entidad.IndiceInicioFila),
                        new SqlParameter("@piMaximo_Filas", entidad.MaximoFilas),
                        new SqlParameter("@psValores_Filtro", entidad.ValorFiltro),
                        new SqlParameter("@psColumnas_Filtros", entidad.ColumnaFiltro),
                        new SqlParameter("@psColumna_Ordenar", entidad.ColumnaOrdenar)
                    };

                    #endregion

                    try
                    {

                        #region CONSULTAR

                        rowsAffected = transaccionDA.TransaccionConsulta(conexion, "Enfoques_Consulta", paramTransaccion);
                        if (!rowsAffected.Equals(null))
                        {
                            foreach (DataRow dr in rowsAffected.Tables[0].Rows)
                            {
                                elemento = new EnfoquesEntidad();
                                elemento.IdEnfoque = int.Parse(dr[0].ToString());
                                elemento.CodEnfoque = int.Parse(dr[1].ToString());
                                elemento.DesEnfoque = dr[2].ToString();

                                retorno.Add(elemento);
                            }
                        }

                        return retorno;

                        #endregion

                    }
                    catch (Exception)
                    {
                        throw;
                    }
                }
        
                public EnfoquesEntidad EnfoquesConsultarDetalle(String conexion, String conexionBitacora, EnfoquesEntidad enfoque, BitacorasEntidad _bitacora)
                {
                    EnfoquesEntidad retorno = new EnfoquesEntidad();
                    DataSet rowsAffected;

                    #region PARAMETROS

                    SqlParameter[] paramTransaccion = new SqlParameter[]
                    {
                        new SqlParameter("@piId_Enfoque", enfoque.IdEnfoque)
                    };

                    #endregion

                    #region KeyValuePair LIST

                    List<KeyValuePair<string, string>> itemConsulta = new List<KeyValuePair<string, string>>();
                    itemConsulta.Add(helper.CrearKeyValuePairItem("@piId_Enfoque", enfoque.IdEnfoque.ToString()));

                    #endregion

                    try
                    {

                        #region CONSULTAR DETALLE

                        rowsAffected = transaccionDA.TransaccionConsultaDetalle(conexion, conexionBitacora, "Enfoques_Consulta_Detalle", paramTransaccion, EnumTipoBitacora.CONSULTAR, itemConsulta, "Enfoques_Consulta_Detalle", _bitacora);
                        if (!rowsAffected.Equals(null))
                        {
                            retorno.IdEnfoque = int.Parse(rowsAffected.Tables[0].Rows[0][0].ToString());
                            retorno.CodEnfoque = int.Parse(rowsAffected.Tables[0].Rows[0][1].ToString());
                            retorno.DesEnfoque = rowsAffected.Tables[0].Rows[0][2].ToString();
                            retorno.IndMetodoInsercion = rowsAffected.Tables[0].Rows[0][3].ToString();
                            if (rowsAffected.Tables[0].Rows[0][4].ToString().Length > 0)
                                retorno.FechaIngreso = DateTime.Parse(rowsAffected.Tables[0].Rows[0][4].ToString());
                            else
                                retorno.FechaIngreso = null;
                            retorno.CodUsuarioIngreso = rowsAffected.Tables[0].Rows[0][5].ToString();
                            if (rowsAffected.Tables[0].Rows[0][6].ToString().Length > 0)
                                retorno.FechaUltimaModificacion = DateTime.Parse(rowsAffected.Tables[0].Rows[0][6].ToString());
                            else
                                retorno.FechaUltimaModificacion = null;
                            retorno.CodUsuarioUltimaModificacion = rowsAffected.Tables[0].Rows[0][7].ToString();
                            retorno.DesUsuarioIngreso = rowsAffected.Tables[0].Rows[0][8].ToString();
                            retorno.DesUsuarioUltimaModificacion = rowsAffected.Tables[0].Rows[0][9].ToString();
                        }

                        return retorno;

                        #endregion

                    }
                    catch (Exception)
                    {
                        throw;
                    }
                }
        
                public int EnfoquesTotalFilas(String conexion, ParametrosTotalFilasEntidad entidad)
                {

                    int value;

                    #region PARAMETROS

                    SqlParameter[] paramTransaccion = new SqlParameter[]
                    {
                        new SqlParameter("@psValor_Filtro", entidad.ValorFiltro),
                        new SqlParameter("@psColumna_Filtro", entidad.ColumnaFiltro)
                    };

                    #endregion

                    try
                    {

                        #region TOTAL FILAS

                            value = transaccionDA.TransaccionRows(conexion, "Enfoques_Total_Filas", paramTransaccion);

                            return value;

                        #endregion

                    }
                    catch (Exception)
                    {
                        throw;
                    }
                }

            #endregion 

            #region ENTIDADES
        
                public RespuestaEntidad EntidadesInsertar(String conexion, String conexionBitacora, EntidadesEntidad entidad, BitacorasEntidad _bitacora)
                {
                    RespuestaEntidad elemento = null;
                    DataSet rowsAffected;

                    #region PARAMETROS

                    SqlParameter[] paramTransaccion = new SqlParameter[]
                    {
                        new SqlParameter("@piId_Activo", entidad.IdActivo),
                        new SqlParameter("@piId_Regimen_Fiscalizacion", entidad.IdRegimenFiscalizacion),
                        new SqlParameter("@piId_Tipo_Entidad", entidad.IdTipoEntidad),
                        new SqlParameter("@psCod_Entidad", entidad.CodEntidad),
                        new SqlParameter("@psDes_Entidad", entidad.DesEntidad),
                        new SqlParameter("@psInd_Metodo_Insercion", entidad.IndMetodoInsercion),
                        new SqlParameter("@psCod_Usuario", entidad.CodUsuarioIngreso)
                    };

                    #endregion

                    try
                    {

                        #region INSERTAR

                        rowsAffected = transaccionDA.TransaccionInsertar(conexion, conexionBitacora, "Entidades_Inserta", paramTransaccion, EnumTipoBitacora.INSERTAR, _bitacora);
                        if (!rowsAffected.Equals(null))
                        {
                            elemento = new RespuestaEntidad();
                            elemento.ValorEstado = int.Parse(rowsAffected.Tables[0].Rows[0][0].ToString());
                            elemento.ValorError = int.Parse(rowsAffected.Tables[0].Rows[0][1].ToString());
                        }

                        return elemento;

                        #endregion

                    }
                    catch (Exception)
                    {
                        throw;
                    }
                }
        
                public RespuestaEntidad EntidadesModificar(String conexion, String conexionBitacora, EntidadesEntidad entidad, BitacorasEntidad _bitacora)
                {
                    RespuestaEntidad elemento = null;
                    DataSet rowsAffected;

                    #region PARAMETROS

                    SqlParameter[] paramTransaccion = new SqlParameter[]
                    {
                        new SqlParameter("@piId_Entidad", entidad.IdEntidad),
                        new SqlParameter("@piId_Activo", entidad.IdActivo),
                        new SqlParameter("@piId_Regimen_Fiscalizacion", entidad.IdRegimenFiscalizacion),
                        new SqlParameter("@piId_Tipo_Entidad", entidad.IdTipoEntidad),
                        new SqlParameter("@psCod_Entidad", entidad.CodEntidad),
                        new SqlParameter("@psDes_Entidad", entidad.DesEntidad),
                        new SqlParameter("@psInd_Metodo_Insercion", entidad.IndMetodoInsercion),
                        new SqlParameter("@psCod_Usuario", entidad.CodUsuarioIngreso)
                    };

                    #endregion

                    #region KeyValuePair LIST

                    List<KeyValuePair<string, string>> itemConsulta = new List<KeyValuePair<string, string>>();
                    itemConsulta.Add(helper.CrearKeyValuePairItem("@piId_Entidad", entidad.IdEntidad.ToString()));

                    #endregion

                    try
                    {

                        #region MODIFICAR

                        rowsAffected = transaccionDA.TransaccionModificar(conexion, conexionBitacora, "Entidades_Actualiza", paramTransaccion, EnumTipoBitacora.ACTUALIZAR, itemConsulta, "Entidades_Consulta_Detalle", _bitacora);
                        if (!rowsAffected.Equals(null))
                        {
                            elemento = new RespuestaEntidad();
                            elemento.ValorEstado = int.Parse(rowsAffected.Tables[0].Rows[0][0].ToString());
                            elemento.ValorError = int.Parse(rowsAffected.Tables[0].Rows[0][1].ToString());
                        }

                        return elemento;

                        #endregion

                    }
                    catch (Exception)
                    {
                        throw;
                    }
                }
        
                public RespuestaEntidad EntidadesEliminar(String conexion, String conexionBitacora, EntidadesEntidad entidad, BitacorasEntidad _bitacora)
                {
                    RespuestaEntidad elemento = null;
                    DataSet rowsAffected;

                    #region PARAMETROS

                    SqlParameter[] paramTransaccion = new SqlParameter[]
                    {
                        new SqlParameter("@piId_Entidad", entidad.IdEntidad)
                    };

                    #endregion

                    #region KeyValuePair LIST

                    List<KeyValuePair<string, string>> itemConsulta = new List<KeyValuePair<string, string>>();
                    itemConsulta.Add(helper.CrearKeyValuePairItem("@piId_Entidad", entidad.IdEntidad.ToString()));

                    #endregion

                    try
                    {

                        #region ELIMINAR

                        rowsAffected = transaccionDA.TransaccionEliminar(conexion, conexionBitacora, "Entidades_Elimina", paramTransaccion, EnumTipoBitacora.ELIMINAR, itemConsulta, "Entidades_Consulta_Detalle", _bitacora);
                        if (!rowsAffected.Equals(null))
                        {
                            elemento = new RespuestaEntidad();
                            elemento.ValorEstado = int.Parse(rowsAffected.Tables[0].Rows[0][0].ToString());
                            elemento.ValorError = int.Parse(rowsAffected.Tables[0].Rows[0][1].ToString());
                        }

                        return elemento;

                        #endregion

                    }
                    catch (Exception)
                    {
                        throw;
                    }
                }

                public List<EntidadesEntidad> EntidadesConsultar(String conexion, ParametrosConsultaEntidad entidad)
                {
                    List<EntidadesEntidad> retorno = new List<EntidadesEntidad>();
                    EntidadesEntidad elemento;
                    DataSet rowsAffected;

                    #region PARAMETROS

                    SqlParameter[] paramTransaccion = new SqlParameter[]
                    {
                       new SqlParameter("@piIndice_Inicio_Fila", entidad.IndiceInicioFila),
                       new SqlParameter("@piMaximo_Filas", entidad.MaximoFilas),
                       new SqlParameter("@psValores_Filtro", entidad.ValorFiltro),
                       new SqlParameter("@psColumnas_Filtros", entidad.ColumnaFiltro),
                       new SqlParameter("@psColumna_Ordenar", entidad.ColumnaOrdenar)
                    };

                    #endregion

                    try
                    {

                        #region CONSULTAR

                            rowsAffected = transaccionDA.TransaccionConsulta(conexion, "Entidades_Consulta", paramTransaccion);
                            if (!rowsAffected.Equals(null))
                            {
                                foreach (DataRow dr in rowsAffected.Tables[0].Rows)
                                {
                                    elemento = new EntidadesEntidad();
                                    elemento.IdEntidad = int.Parse(dr[0].ToString());
                                    elemento.IdActivo = int.Parse(dr[1].ToString());
                                    elemento.IdRegimenFiscalizacion = int.Parse(dr[2].ToString());
                                    elemento.IdTipoEntidad = int.Parse(dr[3].ToString());
                                    elemento.CodEntidad = dr[4].ToString();
                                    elemento.CodRegimenFiscalizacion = int.Parse(dr[5].ToString());
                                    elemento.CodTipoEntidad = int.Parse(dr[6].ToString());
                                    elemento.DesActivo = dr[7].ToString();
                                    elemento.DesEntidad = dr[8].ToString();
                                    elemento.DesRegimenFiscalizacion = dr[9].ToString();
                                    elemento.DesTipoEntidad = dr[10].ToString();

                                    retorno.Add(elemento);
                                }
                            }

                            return retorno;

                        #endregion

                    }
                    catch (Exception)
                    {
                        throw;
                    }
                }
        
                public EntidadesEntidad EntidadesConsultarDetalle(String conexion, String conexionBitacora, EntidadesEntidad entidad, BitacorasEntidad _bitacora)
                {
                    EntidadesEntidad retorno = new EntidadesEntidad();
                    DataSet rowsAffected;

                    #region PARAMETROS

                    SqlParameter[] paramTransaccion = new SqlParameter[]
                    {
                        new SqlParameter("@piId_Entidad", entidad.IdEntidad)
                    };

                    #endregion

                    #region KeyValuePair LIST

                    List<KeyValuePair<string, string>> itemConsulta = new List<KeyValuePair<string, string>>();
                    itemConsulta.Add(helper.CrearKeyValuePairItem("@piId_Entidad", entidad.IdEntidad.ToString()));

                    #endregion

                    try
                    {

                        #region CONSULTAR DETALLE

                        rowsAffected = transaccionDA.TransaccionConsultaDetalle(conexion, conexionBitacora, "Entidades_Consulta_Detalle", paramTransaccion, EnumTipoBitacora.CONSULTAR, itemConsulta, "Entidades_Consulta_Detalle", _bitacora);
                        if (!rowsAffected.Equals(null))
                        {
                            retorno.IdEntidad = int.Parse(rowsAffected.Tables[0].Rows[0][0].ToString());
                            retorno.IdActivo = int.Parse(rowsAffected.Tables[0].Rows[0][1].ToString());
                            retorno.IdRegimenFiscalizacion = int.Parse(rowsAffected.Tables[0].Rows[0][2].ToString());
                            retorno.IdTipoEntidad = int.Parse(rowsAffected.Tables[0].Rows[0][3].ToString());
                            retorno.CodEntidad = rowsAffected.Tables[0].Rows[0][4].ToString();
                            retorno.DesEntidad = rowsAffected.Tables[0].Rows[0][5].ToString();
                            retorno.CodRegimenFiscalizacion = int.Parse(rowsAffected.Tables[0].Rows[0][6].ToString());
                            retorno.CodTipoEntidad = int.Parse(rowsAffected.Tables[0].Rows[0][7].ToString());
                            retorno.CodActivo = int.Parse(rowsAffected.Tables[0].Rows[0][8].ToString());
                            retorno.DesActivo = rowsAffected.Tables[0].Rows[0][9].ToString();
                            retorno.DesRegimenFiscalizacion = rowsAffected.Tables[0].Rows[0][10].ToString();
                            retorno.DesTipoEntidad = rowsAffected.Tables[0].Rows[0][11].ToString();

                            retorno.IndMetodoInsercion = rowsAffected.Tables[0].Rows[0][12].ToString();
                            if (rowsAffected.Tables[0].Rows[0][13].ToString().Length > 0)
                                retorno.FechaIngreso = DateTime.Parse(rowsAffected.Tables[0].Rows[0][13].ToString());
                            else
                                retorno.FechaIngreso = null;
                            retorno.CodUsuarioIngreso = rowsAffected.Tables[0].Rows[0][14].ToString();
                            if (rowsAffected.Tables[0].Rows[0][15].ToString().Length > 0)
                                retorno.FechaUltimaModificacion = DateTime.Parse(rowsAffected.Tables[0].Rows[0][15].ToString());
                            else
                                retorno.FechaUltimaModificacion = null;
                            retorno.CodUsuarioUltimaModificacion = rowsAffected.Tables[0].Rows[0][16].ToString();
                            retorno.DesUsuarioIngreso = rowsAffected.Tables[0].Rows[0][17].ToString();
                            retorno.DesUsuarioUltimaModificacion = rowsAffected.Tables[0].Rows[0][18].ToString();
                        }

                        return retorno;

                        #endregion

                    }
                    catch (Exception)
                    {
                        throw;
                    }
                }
        
                public int EntidadesTotalFilas(String conexion, ParametrosTotalFilasEntidad entidad)
                {

                    int value;

                    #region PARAMETROS

                    SqlParameter[] paramTransaccion = new SqlParameter[]
                    {
                        new SqlParameter("@psValor_Filtro", entidad.ValorFiltro),
                        new SqlParameter("@psColumna_Filtro", entidad.ColumnaFiltro)
                    };

                    #endregion

                    try
                    {

                        #region TOTAL FILAS

                            value = transaccionDA.TransaccionRows(conexion, "Entidades_Total_Filas", paramTransaccion);

                            return value;

                        #endregion

                    }
                    catch (Exception)
                    {
                        throw;
                    }
                }

            #endregion 

            #region ENTREPISOS
        
                public RespuestaEntidad EntrepisosInsertar(String conexion, String conexionBitacora, EntrepisosEntidad entrepiso, BitacorasEntidad _bitacora)
                {
                    RespuestaEntidad elemento = null;
                    DataSet rowsAffected;

                    #region PARAMETROS

                    SqlParameter[] paramTransaccion = new SqlParameter[]
                    {
                        new SqlParameter("@piCod_Entrepiso", entrepiso.CodEntrepiso),
                        new SqlParameter("@psDes_Entrepiso", entrepiso.DesEntrepiso),
                        new SqlParameter("@psInd_Metodo_Insercion", entrepiso.IndMetodoInsercion),
                        new SqlParameter("@psCod_Usuario", entrepiso.CodUsuarioIngreso)
                    };

                    #endregion

                    try
                    {

                        #region INSERTAR

                        rowsAffected = transaccionDA.TransaccionInsertar(conexion, conexionBitacora, "Entrepisos_Inserta", paramTransaccion, EnumTipoBitacora.INSERTAR, _bitacora);
                        if (!rowsAffected.Equals(null))
                        {
                            elemento = new RespuestaEntidad();
                            elemento.ValorEstado = int.Parse(rowsAffected.Tables[0].Rows[0][0].ToString());
                            elemento.ValorError = int.Parse(rowsAffected.Tables[0].Rows[0][1].ToString());
                        }

                        return elemento;

                        #endregion

                    }
                    catch (Exception)
                    {
                        throw;
                    }
                }
        
                public RespuestaEntidad EntrepisosModificar(String conexion, String conexionBitacora, EntrepisosEntidad entrepiso, BitacorasEntidad _bitacora)
                {
                    RespuestaEntidad elemento = null;
                    DataSet rowsAffected;

                    #region PARAMETROS

                    SqlParameter[] paramTransaccion = new SqlParameter[]
                    {
                        new SqlParameter("@piId_Entrepiso", entrepiso.IdEntrepiso),
                        new SqlParameter("@piCod_Entrepiso", entrepiso.CodEntrepiso),
                        new SqlParameter("@psDes_Entrepiso", entrepiso.DesEntrepiso),
                        new SqlParameter("@psInd_Metodo_Insercion", entrepiso.IndMetodoInsercion),
                        new SqlParameter("@psCod_Usuario", entrepiso.CodUsuarioIngreso)
                    };

                    #endregion

                    #region KeyValuePair LIST

                    List<KeyValuePair<string, string>> itemConsulta = new List<KeyValuePair<string, string>>();
                    itemConsulta.Add(helper.CrearKeyValuePairItem("@piId_Entrepiso", entrepiso.IdEntrepiso.ToString()));

                    #endregion

                    try
                    {

                        #region MODIFICAR

                        rowsAffected = transaccionDA.TransaccionModificar(conexion, conexionBitacora, "Entrepisos_Actualiza", paramTransaccion, EnumTipoBitacora.ACTUALIZAR, itemConsulta, "Entrepisos_Consulta_Detalle", _bitacora);
                        if (!rowsAffected.Equals(null))
                        {
                            elemento = new RespuestaEntidad();
                            elemento.ValorEstado = int.Parse(rowsAffected.Tables[0].Rows[0][0].ToString());
                            elemento.ValorError = int.Parse(rowsAffected.Tables[0].Rows[0][1].ToString());
                        }

                        return elemento;

                        #endregion

                    }
                    catch (Exception)
                    {
                        throw;
                    }
                }
        
                public RespuestaEntidad EntrepisosEliminar(String conexion, String conexionBitacora, EntrepisosEntidad entrepiso, BitacorasEntidad _bitacora)
                {
                    RespuestaEntidad elemento = null;
                    DataSet rowsAffected;

                    #region PARAMETROS

                    SqlParameter[] paramTransaccion = new SqlParameter[]
                    {
                        new SqlParameter("@piId_Entrepiso", entrepiso.IdEntrepiso)
                    };

                    #endregion

                    #region KeyValuePair LIST

                    List<KeyValuePair<string, string>> itemConsulta = new List<KeyValuePair<string, string>>();
                    itemConsulta.Add(helper.CrearKeyValuePairItem("@piId_Entrepiso", entrepiso.IdEntrepiso.ToString()));

                    #endregion

                    try
                    {

                        #region ELIMINAR

                        rowsAffected = transaccionDA.TransaccionEliminar(conexion, conexionBitacora, "Entrepisos_Elimina", paramTransaccion, EnumTipoBitacora.ELIMINAR, itemConsulta, "Entrepisos_Consulta_Detalle", _bitacora);
                        if (!rowsAffected.Equals(null))
                        {
                            elemento = new RespuestaEntidad();
                            elemento.ValorEstado = int.Parse(rowsAffected.Tables[0].Rows[0][0].ToString());
                            elemento.ValorError = int.Parse(rowsAffected.Tables[0].Rows[0][1].ToString());
                        }

                        return elemento;

                        #endregion

                    }
                    catch (Exception)
                    {
                        throw;
                    }
                }

                public List<EntrepisosEntidad> EntrepisosConsultar(String conexion, ParametrosConsultaEntidad entidad)
                {
                    List<EntrepisosEntidad> retorno = new List<EntrepisosEntidad>();
                    EntrepisosEntidad elemento;
                    DataSet rowsAffected;

                    #region PARAMETROS

                    SqlParameter[] paramTransaccion = new SqlParameter[]
                    {
                       new SqlParameter("@piIndice_Inicio_Fila", entidad.IndiceInicioFila),
                       new SqlParameter("@piMaximo_Filas", entidad.MaximoFilas),
                       new SqlParameter("@psValores_Filtro", entidad.ValorFiltro),
                       new SqlParameter("@psColumnas_Filtros", entidad.ColumnaFiltro),
                       new SqlParameter("@psColumna_Ordenar", entidad.ColumnaOrdenar)
                    };

                    #endregion

                    try
                    {

                        #region CONSULTAR

                            rowsAffected = transaccionDA.TransaccionConsulta(conexion, "Entrepisos_Consulta", paramTransaccion);
                            if (!rowsAffected.Equals(null))
                            {
                                foreach (DataRow dr in rowsAffected.Tables[0].Rows)
                                {
                                    elemento = new EntrepisosEntidad();
                                    elemento.IdEntrepiso = int.Parse(dr[0].ToString());
                                    elemento.CodEntrepiso = int.Parse(dr[1].ToString());
                                    elemento.DesEntrepiso = dr[2].ToString();

                                    retorno.Add(elemento);
                                }
                            }

                            return retorno;

                        #endregion

                    }
                    catch (Exception)
                    {
                        throw;
                    }
                }
        
                public EntrepisosEntidad EntrepisosConsultarDetalle(String conexion, String conexionBitacora, EntrepisosEntidad entrepiso, BitacorasEntidad _bitacora)
                {
                    EntrepisosEntidad retorno = new EntrepisosEntidad();
                    DataSet rowsAffected;

                    #region PARAMETROS

                    SqlParameter[] paramTransaccion = new SqlParameter[]
                    {
                        new SqlParameter("@piId_Entrepiso", entrepiso.IdEntrepiso)
                    };

                    #endregion

                    #region KeyValuePair LIST

                    List<KeyValuePair<string, string>> itemConsulta = new List<KeyValuePair<string, string>>();
                    itemConsulta.Add(helper.CrearKeyValuePairItem("@piId_Entrepiso", entrepiso.IdEntrepiso.ToString()));

                    #endregion

                    try
                    {

                        #region CONSULTAR DETALLE

                        rowsAffected = transaccionDA.TransaccionConsultaDetalle(conexion, conexionBitacora, "Entrepisos_Consulta_Detalle", paramTransaccion, EnumTipoBitacora.CONSULTAR, itemConsulta, "Entrepisos_Consulta_Detalle", _bitacora);
                        if (!rowsAffected.Equals(null))
                        {
                            retorno.IdEntrepiso = int.Parse(rowsAffected.Tables[0].Rows[0][0].ToString());
                            retorno.CodEntrepiso = int.Parse(rowsAffected.Tables[0].Rows[0][1].ToString());
                            retorno.DesEntrepiso = rowsAffected.Tables[0].Rows[0][2].ToString();
                            retorno.IndMetodoInsercion = rowsAffected.Tables[0].Rows[0][3].ToString();
                            if (rowsAffected.Tables[0].Rows[0][4].ToString().Length > 0)
                                retorno.FechaIngreso = DateTime.Parse(rowsAffected.Tables[0].Rows[0][4].ToString());
                            else
                                retorno.FechaIngreso = null;
                            retorno.CodUsuarioIngreso = rowsAffected.Tables[0].Rows[0][5].ToString();
                            if (rowsAffected.Tables[0].Rows[0][6].ToString().Length > 0)
                                retorno.FechaUltimaModificacion = DateTime.Parse(rowsAffected.Tables[0].Rows[0][6].ToString());
                            else
                                retorno.FechaUltimaModificacion = null;
                            retorno.CodUsuarioUltimaModificacion = rowsAffected.Tables[0].Rows[0][7].ToString();
                            retorno.DesUsuarioIngreso = rowsAffected.Tables[0].Rows[0][8].ToString();
                            retorno.DesUsuarioUltimaModificacion = rowsAffected.Tables[0].Rows[0][9].ToString();
                        }

                        return retorno;

                        #endregion

                    }
                    catch (Exception)
                    {
                        throw;
                    }
                }
        
                public int EntrepisosTotalFilas(String conexion, ParametrosTotalFilasEntidad entidad)
                {

                    int value;                    

                    #region PARAMETROS

                    SqlParameter[] paramTransaccion = new SqlParameter[]
                    {
                        new SqlParameter("@psValor_Filtro", entidad.ValorFiltro),
                        new SqlParameter("@psColumna_Filtro", entidad.ColumnaFiltro)
                    };

                    #endregion

                    try
                    {

                        #region TOTAL FILAS

                            value = transaccionDA.TransaccionRows(conexion, "Entrepisos_Total_Filas", paramTransaccion);

                            return value;

                        #endregion

                    }
                    catch (Exception)
                    {
                        throw;
                    }
                }

            #endregion 

            #region ESCALERAS
        
                public RespuestaEntidad EscalerasInsertar(String conexion, String conexionBitacora, EscalerasEntidad escalera, BitacorasEntidad _bitacora)
                {
                    RespuestaEntidad elemento = null;
                    DataSet rowsAffected;

                    #region PARAMETROS

                    SqlParameter[] paramTransaccion = new SqlParameter[]
                    {
                        new SqlParameter("@piCod_Escalera", escalera.CodEscalera),
                        new SqlParameter("@psDes_Escalera ", escalera.DesEscalera),
                        new SqlParameter("@psInd_Metodo_Insercion", escalera.IndMetodoInsercion),
                        new SqlParameter("@psCod_Usuario", escalera.CodUsuarioIngreso)
                    };

                    #endregion

                    try
                    {

                        #region INSERTAR

                        rowsAffected = transaccionDA.TransaccionInsertar(conexion, conexionBitacora, "Escaleras_Inserta", paramTransaccion, EnumTipoBitacora.INSERTAR, _bitacora);
                        if (!rowsAffected.Equals(null))
                        {
                            elemento = new RespuestaEntidad();
                            elemento.ValorEstado = int.Parse(rowsAffected.Tables[0].Rows[0][0].ToString());
                            elemento.ValorError = int.Parse(rowsAffected.Tables[0].Rows[0][1].ToString());
                        }

                        return elemento;

                        #endregion

                    }
                    catch (Exception)
                    {
                        throw;
                    }
                }
        
                public RespuestaEntidad EscalerasModificar(String conexion, String conexionBitacora, EscalerasEntidad escalera, BitacorasEntidad _bitacora)
                {
                    RespuestaEntidad elemento = null;
                    DataSet rowsAffected;

                    #region PARAMETROS

                    SqlParameter[] paramTransaccion = new SqlParameter[]
                    {
                        new SqlParameter("@piId_Escalera", escalera.IdEscalera),
                        new SqlParameter("@piCod_Escalera", escalera.CodEscalera),
                        new SqlParameter("@psDes_Escalera ", escalera.DesEscalera),
                        new SqlParameter("@psInd_Metodo_Insercion", escalera.IndMetodoInsercion),
                        new SqlParameter("@psCod_Usuario", escalera.CodUsuarioIngreso)
                    };

                    #endregion

                    #region KeyValuePair LIST

                    List<KeyValuePair<string, string>> itemConsulta = new List<KeyValuePair<string, string>>();
                    itemConsulta.Add(helper.CrearKeyValuePairItem("@piId_Escalera", escalera.IdEscalera.ToString()));

                    #endregion

                    try
                    {

                        #region MODIFICAR

                        rowsAffected = transaccionDA.TransaccionModificar(conexion, conexionBitacora, "Escaleras_Actualiza", paramTransaccion, EnumTipoBitacora.ACTUALIZAR, itemConsulta, "Escaleras_Consulta_Detalle", _bitacora);
                        if (!rowsAffected.Equals(null))
                        {
                            elemento = new RespuestaEntidad();
                            elemento.ValorEstado = int.Parse(rowsAffected.Tables[0].Rows[0][0].ToString());
                            elemento.ValorError = int.Parse(rowsAffected.Tables[0].Rows[0][1].ToString());
                        }

                        return elemento;

                        #endregion

                    }
                    catch (Exception)
                    {
                        throw;
                    }
                }
        
                public RespuestaEntidad EscalerasEliminar(String conexion, String conexionBitacora, EscalerasEntidad escalera, BitacorasEntidad _bitacora)
                {
                    RespuestaEntidad elemento = null;
                    DataSet rowsAffected;

                    #region PARAMETROS

                    SqlParameter[] paramTransaccion = new SqlParameter[]
                    {
                        new SqlParameter("@piId_Escalera", escalera.IdEscalera)
                    };

                    #endregion

                    #region KeyValuePair LIST

                    List<KeyValuePair<string, string>> itemConsulta = new List<KeyValuePair<string, string>>();
                    itemConsulta.Add(helper.CrearKeyValuePairItem("@piId_Escalera", escalera.IdEscalera.ToString()));

                    #endregion

                    try
                    {

                        #region ELIMINAR

                        rowsAffected = transaccionDA.TransaccionEliminar(conexion, conexionBitacora, "Escaleras_Elimina", paramTransaccion, EnumTipoBitacora.ELIMINAR, itemConsulta, "Escaleras_Consulta_Detalle", _bitacora);
                        if (!rowsAffected.Equals(null))
                        {
                            elemento = new RespuestaEntidad();
                            elemento.ValorEstado = int.Parse(rowsAffected.Tables[0].Rows[0][0].ToString());
                            elemento.ValorError = int.Parse(rowsAffected.Tables[0].Rows[0][1].ToString());
                        }

                        return elemento;

                        #endregion

                    }
                    catch (Exception)
                    {
                        throw;
                    }
                }

                public List<EscalerasEntidad> EscalerasConsultar(String conexion, ParametrosConsultaEntidad entidad)
                {
                    List<EscalerasEntidad> retorno = new List<EscalerasEntidad>();
                    EscalerasEntidad elemento;
                    DataSet rowsAffected;

                    #region PARAMETROS

                    SqlParameter[] paramTransaccion = new SqlParameter[]
                    {
                       new SqlParameter("@piIndice_Inicio_Fila", entidad.IndiceInicioFila),
                       new SqlParameter("@piMaximo_Filas", entidad.MaximoFilas),
                       new SqlParameter("@psValores_Filtro", entidad.ValorFiltro),
                       new SqlParameter("@psColumnas_Filtros", entidad.ColumnaFiltro),
                       new SqlParameter("@psColumna_Ordenar", entidad.ColumnaOrdenar)
                    };

                    #endregion

                    try
                    {

                        #region CONSULTAR

                            rowsAffected = transaccionDA.TransaccionConsulta(conexion, "Escaleras_Consulta", paramTransaccion);
                            if (!rowsAffected.Equals(null))
                            {
                                foreach (DataRow dr in rowsAffected.Tables[0].Rows)
                                {
                                    elemento = new EscalerasEntidad();
                                    elemento.IdEscalera = int.Parse(dr[0].ToString());
                                    elemento.CodEscalera = int.Parse(dr[1].ToString());
                                    elemento.DesEscalera = dr[2].ToString();

                                    retorno.Add(elemento);
                                }
                            }

                            return retorno;

                        #endregion

                    }
                    catch (Exception) 
                    {
                        throw;
                    }
                }
        
                public EscalerasEntidad EscalerasConsultarDetalle(String conexion, String conexionBitacora, EscalerasEntidad escalera, BitacorasEntidad _bitacora)
                {
                    EscalerasEntidad retorno = new EscalerasEntidad();
                    DataSet rowsAffected;

                    #region PARAMETROS

                    SqlParameter[] paramTransaccion = new SqlParameter[]
                    {
                        new SqlParameter("@piId_Escalera", escalera.IdEscalera)
                    };

                    #endregion

                    #region KeyValuePair LIST

                    List<KeyValuePair<string, string>> itemConsulta = new List<KeyValuePair<string, string>>();
                    itemConsulta.Add(helper.CrearKeyValuePairItem("@piId_Escalera", escalera.IdEscalera.ToString()));

                    #endregion

                    try
                    {

                        #region CONSULTAR DETALLE

                        rowsAffected = transaccionDA.TransaccionConsultaDetalle(conexion, conexionBitacora, "Escaleras_Consulta_Detalle", paramTransaccion, EnumTipoBitacora.CONSULTAR, itemConsulta, "Escaleras_Consulta_Detalle", _bitacora);
                        if (!rowsAffected.Equals(null))
                        {
                            retorno.IdEscalera = int.Parse(rowsAffected.Tables[0].Rows[0][0].ToString());
                            retorno.CodEscalera = int.Parse(rowsAffected.Tables[0].Rows[0][1].ToString());
                            retorno.DesEscalera = rowsAffected.Tables[0].Rows[0][2].ToString();
                            retorno.IndMetodoInsercion = rowsAffected.Tables[0].Rows[0][3].ToString();
                            if (rowsAffected.Tables[0].Rows[0][4].ToString().Length > 0)
                                retorno.FechaIngreso = DateTime.Parse(rowsAffected.Tables[0].Rows[0][4].ToString());
                            else
                                retorno.FechaIngreso = null;
                            retorno.CodUsuarioIngreso = rowsAffected.Tables[0].Rows[0][5].ToString();
                            if (rowsAffected.Tables[0].Rows[0][6].ToString().Length > 0)
                                retorno.FechaUltimaModificacion = DateTime.Parse(rowsAffected.Tables[0].Rows[0][6].ToString());
                            else
                                retorno.FechaUltimaModificacion = null;
                            retorno.CodUsuarioUltimaModificacion = rowsAffected.Tables[0].Rows[0][7].ToString();
                            retorno.DesUsuarioIngreso = rowsAffected.Tables[0].Rows[0][8].ToString();
                            retorno.DesUsuarioUltimaModificacion = rowsAffected.Tables[0].Rows[0][9].ToString();
                        }

                        return retorno;

                        #endregion

                    }
                    catch (Exception)
                    {
                        throw;
                    }
                }
        
                public int EscalerasTotalFilas(String conexion, ParametrosTotalFilasEntidad entidad)
                {

                    int value;                    

                    #region PARAMETROS

                    SqlParameter[] paramTransaccion = new SqlParameter[]
                    {
                        new SqlParameter("@psValor_Filtro", entidad.ValorFiltro),
                        new SqlParameter("@psColumna_Filtro", entidad.ColumnaFiltro)
                    };

                    #endregion

                    try
                    {

                        #region TOTAL FILAS

                            value = transaccionDA.TransaccionRows(conexion, "Escaleras_Total_Filas", paramTransaccion);

                            return value;

                        #endregion

                    }
                    catch (Exception)
                    {
                        throw;
                    }
                }

            #endregion 

            #region ESTADOS AVALUOS
        
                public RespuestaEntidad EstadosAvaluosInsertar(String conexion, String conexionBitacora, EstadosAvaluosEntidad estadoAvaluo, BitacorasEntidad _bitacora)
                {
                    RespuestaEntidad elemento = null;
                    DataSet rowsAffected;

                    #region PARAMETROS

                    SqlParameter[] paramTransaccion = new SqlParameter[]
                    {
                        new SqlParameter("@piId_Tipo_Estado_Avaluo", estadoAvaluo.IdTipoEstadoAvaluo),
                        new SqlParameter("@piCod_Estado_Avaluo", estadoAvaluo.CodEstadoAvaluo),
                        new SqlParameter("@psDes_Estado_Avaluo", estadoAvaluo.DesEstadoAvaluo),
                        new SqlParameter("@psInd_Metodo_Insercion", estadoAvaluo.IndMetodoInsercion),
                        new SqlParameter("@psCod_Usuario", estadoAvaluo.CodUsuarioIngreso)
                    };

                    #endregion

                    try
                    {

                        #region INSERTAR

                        rowsAffected = transaccionDA.TransaccionInsertar(conexion, conexionBitacora, "Estados_Avaluos_Inserta", paramTransaccion, EnumTipoBitacora.INSERTAR, _bitacora);
                        if (!rowsAffected.Equals(null))
                        {
                            elemento = new RespuestaEntidad();
                            elemento.ValorEstado = int.Parse(rowsAffected.Tables[0].Rows[0][0].ToString());
                            elemento.ValorError = int.Parse(rowsAffected.Tables[0].Rows[0][1].ToString());
                        }

                        return elemento;

                        #endregion

                    }
                    catch (Exception)
                    {
                        throw;
                    }
                }
        
                public RespuestaEntidad EstadosAvaluosModificar(String conexion, String conexionBitacora, EstadosAvaluosEntidad estadoAvaluo, BitacorasEntidad _bitacora)
                {
                    RespuestaEntidad elemento = null;
                    DataSet rowsAffected;

                    #region PARAMETROS

                    SqlParameter[] paramTransaccion = new SqlParameter[]
                    {
                        new SqlParameter("@piId_Estado_Avaluo", estadoAvaluo.IdEstadoAvaluo),
                        new SqlParameter("@piId_Tipo_Estado_Avaluo", estadoAvaluo.IdTipoEstadoAvaluo),
                        new SqlParameter("@piCod_Estado_Avaluo", estadoAvaluo.CodEstadoAvaluo),
                        new SqlParameter("@psDes_Estado_Avaluo", estadoAvaluo.DesEstadoAvaluo),
                        new SqlParameter("@psInd_Metodo_Insercion", estadoAvaluo.IndMetodoInsercion),
                        new SqlParameter("@psCod_Usuario", estadoAvaluo.CodUsuarioIngreso)
                    };

                    #endregion

                    #region KeyValuePair LIST

                    List<KeyValuePair<string, string>> itemConsulta = new List<KeyValuePair<string, string>>();
                    itemConsulta.Add(helper.CrearKeyValuePairItem("@piId_Estado_Avaluo", estadoAvaluo.IdEstadoAvaluo.ToString()));

                    #endregion

                    try
                    {

                        #region MODIFICAR

                        rowsAffected = transaccionDA.TransaccionModificar(conexion, conexionBitacora, "Estados_Avaluos_Actualiza", paramTransaccion, EnumTipoBitacora.ACTUALIZAR, itemConsulta, "Estados_Avaluos_Consulta_Detalle", _bitacora);
                        if (!rowsAffected.Equals(null))
                        {
                            elemento = new RespuestaEntidad();
                            elemento.ValorEstado = int.Parse(rowsAffected.Tables[0].Rows[0][0].ToString());
                            elemento.ValorError = int.Parse(rowsAffected.Tables[0].Rows[0][1].ToString());
                        }

                        return elemento;

                        #endregion

                    }
                    catch (Exception)
                    {
                        throw;
                    }
                }
        
                public RespuestaEntidad EstadosAvaluosEliminar(String conexion, String conexionBitacora, EstadosAvaluosEntidad estadoAvaluo, BitacorasEntidad _bitacora)
                {
                    RespuestaEntidad elemento = null;
                    DataSet rowsAffected;

                    #region PARAMETROS

                    SqlParameter[] paramTransaccion = new SqlParameter[]
                    {
                        new SqlParameter("@piId_Estado_Avaluo", estadoAvaluo.IdEstadoAvaluo)
                    };

                    #endregion

                    #region KeyValuePair LIST

                    List<KeyValuePair<string, string>> itemConsulta = new List<KeyValuePair<string, string>>();
                    itemConsulta.Add(helper.CrearKeyValuePairItem("@piId_Estado_Avaluo", estadoAvaluo.IdEstadoAvaluo.ToString()));

                    #endregion

                    try
                    {

                        #region ELIMINAR

                        rowsAffected = transaccionDA.TransaccionEliminar(conexion, conexionBitacora, "Estados_Avaluos_Elimina", paramTransaccion, EnumTipoBitacora.ELIMINAR, itemConsulta, "Estados_Avaluos_Consulta_Detalle", _bitacora);
                        if (!rowsAffected.Equals(null))
                        {
                            elemento = new RespuestaEntidad();
                            elemento.ValorEstado = int.Parse(rowsAffected.Tables[0].Rows[0][0].ToString());
                            elemento.ValorError = int.Parse(rowsAffected.Tables[0].Rows[0][1].ToString());
                        }

                        return elemento;

                        #endregion

                    }
                    catch (Exception)
                    {
                        throw;
                    }
                }

                public List<EstadosAvaluosEntidad> EstadosAvaluosConsultar(String conexion, ParametrosConsultaEntidad entidad)
                {
                    List<EstadosAvaluosEntidad> retorno = new List<EstadosAvaluosEntidad>();
                    EstadosAvaluosEntidad elemento;
                    DataSet rowsAffected;

                    #region PARAMETROS

                    SqlParameter[] paramTransaccion = new SqlParameter[]
                    {
                       new SqlParameter("@piIndice_Inicio_Fila", entidad.IndiceInicioFila),
                       new SqlParameter("@piMaximo_Filas", entidad.MaximoFilas),
                       new SqlParameter("@psValores_Filtro", entidad.ValorFiltro),
                       new SqlParameter("@psColumnas_Filtros", entidad.ColumnaFiltro),
                       new SqlParameter("@psColumna_Ordenar", entidad.ColumnaOrdenar)
                    };

                    #endregion

                    try
                    {

                        #region CONSULTAR

                        rowsAffected = transaccionDA.TransaccionConsulta(conexion, "Estados_Avaluos_Consulta", paramTransaccion);
                        if (!rowsAffected.Equals(null))
                        {
                            foreach (DataRow dr in rowsAffected.Tables[0].Rows)
                            {
                                elemento = new EstadosAvaluosEntidad();
                                elemento.IdEstadoAvaluo = int.Parse(dr[0].ToString());
                                elemento.IdTipoEstadoAvaluo = int.Parse(dr[1].ToString());
                                elemento.CodEstadoAvaluo = int.Parse(dr[2].ToString());
                                elemento.CodTipoEstadoAvaluo = int.Parse(dr[3].ToString());
                                elemento.DesEstadoAvaluo = dr[4].ToString();
                                elemento.DesTipoEstadoAvaluo = dr[5].ToString();

                                retorno.Add(elemento);
                            }
                        }

                        return retorno;

                        #endregion

                    }
                    catch (Exception)
                    {
                        throw;
                    }
                }
        
                public EstadosAvaluosEntidad EstadosAvaluosConsultarDetalle(String conexion, String conexionBitacora, EstadosAvaluosEntidad estadoAvaluo, BitacorasEntidad _bitacora)
                {
                    EstadosAvaluosEntidad retorno = new EstadosAvaluosEntidad();
                    DataSet rowsAffected;

                    #region PARAMETROS

                    SqlParameter[] paramTransaccion = new SqlParameter[]
                    {
                        new SqlParameter("@piId_Estado_Avaluo", estadoAvaluo.IdEstadoAvaluo)
                    };

                    #endregion

                    #region KeyValuePair LIST

                    List<KeyValuePair<string, string>> itemConsulta = new List<KeyValuePair<string, string>>();
                    itemConsulta.Add(helper.CrearKeyValuePairItem("@piId_Estado_Avaluo", estadoAvaluo.IdEstadoAvaluo.ToString()));

                    #endregion

                    try
                    {

                        #region CONSULTAR DETALLE

                        rowsAffected = transaccionDA.TransaccionConsultaDetalle(conexion, conexionBitacora, "Estados_Avaluos_Consulta_Detalle", paramTransaccion, EnumTipoBitacora.CONSULTAR, itemConsulta, "Estados_Avaluos_Consulta_Detalle", _bitacora);
                        if (!rowsAffected.Equals(null))
                        {
                            retorno.IdEstadoAvaluo = int.Parse(rowsAffected.Tables[0].Rows[0][0].ToString());
                            retorno.IdTipoEstadoAvaluo = int.Parse(rowsAffected.Tables[0].Rows[0][1].ToString());
                            retorno.CodEstadoAvaluo = int.Parse(rowsAffected.Tables[0].Rows[0][2].ToString());
                            retorno.CodTipoEstadoAvaluo = int.Parse(rowsAffected.Tables[0].Rows[0][3].ToString());
                            retorno.DesEstadoAvaluo = rowsAffected.Tables[0].Rows[0][4].ToString();
                            retorno.DesTipoEstadoAvaluo = rowsAffected.Tables[0].Rows[0][5].ToString();
                            retorno.IndMetodoInsercion = rowsAffected.Tables[0].Rows[0][6].ToString();
                            if (rowsAffected.Tables[0].Rows[0][7].ToString().Length > 0)
                                retorno.FechaIngreso = DateTime.Parse(rowsAffected.Tables[0].Rows[0][7].ToString());
                            else
                                retorno.FechaIngreso = null;
                            retorno.CodUsuarioIngreso = rowsAffected.Tables[0].Rows[0][8].ToString();
                            if (rowsAffected.Tables[0].Rows[0][9].ToString().Length > 0)
                                retorno.FechaUltimaModificacion = DateTime.Parse(rowsAffected.Tables[0].Rows[0][9].ToString());
                            else
                                retorno.FechaUltimaModificacion = null;
                            retorno.CodUsuarioUltimaModificacion = rowsAffected.Tables[0].Rows[0][10].ToString();
                            retorno.DesUsuarioIngreso = rowsAffected.Tables[0].Rows[0][11].ToString();
                            retorno.DesUsuarioUltimaModificacion = rowsAffected.Tables[0].Rows[0][12].ToString();
                        }

                        return retorno;

                        #endregion

                    }
                    catch (Exception)
                    {
                        throw;
                    }
                }
        
                public int EstadosAvaluosTotalFilas(String conexion, ParametrosTotalFilasEntidad entidad)
                {

                    int value;                    

                    #region PARAMETROS

                    SqlParameter[] paramTransaccion = new SqlParameter[]
                    {
                        new SqlParameter("@psValor_Filtro", entidad.ValorFiltro),
                        new SqlParameter("@psColumna_Filtro", entidad.ColumnaFiltro)
                    };

                    #endregion

                    try
                    {

                        #region TOTAL FILAS

                            value = transaccionDA.TransaccionRows(conexion, "Estados_Avaluos_Total_Filas", paramTransaccion);

                            return value;

                        #endregion

                    }
                    catch (Exception)
                    {
                        throw;
                    }
                }

            #endregion 

            #region ESTADOS CONSTRUCCIONES
        
                public RespuestaEntidad EstadosConstruccionesInsertar(String conexion, String conexionBitacora, EstadosConstruccionesEntidad estadoConstruccion, BitacorasEntidad _bitacora)
                {
                    RespuestaEntidad elemento = null;
                    DataSet rowsAffected;

                    #region PARAMETROS

                    SqlParameter[] paramTransaccion = new SqlParameter[]
                    {
                        new SqlParameter("@piCod_Estado_Construccion", estadoConstruccion.CodEstadoConstruccion),
                        new SqlParameter("@psDes_Estado_Construccion", estadoConstruccion.DesEstadoConstruccion),
                        new SqlParameter("@psInd_Metodo_Insercion", estadoConstruccion.IndMetodoInsercion),
                        new SqlParameter("@psCod_Usuario", estadoConstruccion.CodUsuarioIngreso)
                    };

                    #endregion

                    try
                    {

                        #region INSERTAR

                        rowsAffected = transaccionDA.TransaccionInsertar(conexion, conexionBitacora, "Estados_Construcciones_Inserta", paramTransaccion, EnumTipoBitacora.INSERTAR, _bitacora);
                        if (!rowsAffected.Equals(null))
                        {
                            elemento = new RespuestaEntidad();
                            elemento.ValorEstado = int.Parse(rowsAffected.Tables[0].Rows[0][0].ToString());
                            elemento.ValorError = int.Parse(rowsAffected.Tables[0].Rows[0][1].ToString());
                        }

                        return elemento;

                        #endregion

                    }
                    catch (Exception)
                    {
                        throw;
                    }
                }
        
                public RespuestaEntidad EstadosConstruccionesModificar(String conexion, String conexionBitacora, EstadosConstruccionesEntidad estadoConstruccion, BitacorasEntidad _bitacora)
                {
                    RespuestaEntidad elemento = null;
                    DataSet rowsAffected;

                    #region PARAMETROS

                    SqlParameter[] paramTransaccion = new SqlParameter[]
                    {
                        new SqlParameter("@piId_Estado_Construccion", estadoConstruccion.IdEstadoConstruccion),
                        new SqlParameter("@piCod_Estado_Construccion", estadoConstruccion.CodEstadoConstruccion),
                        new SqlParameter("@psDes_Estado_Construccion", estadoConstruccion.DesEstadoConstruccion),
                        new SqlParameter("@psInd_Metodo_Insercion", estadoConstruccion.IndMetodoInsercion),
                        new SqlParameter("@psCod_Usuario", estadoConstruccion.CodUsuarioIngreso)
                    };

                    #endregion

                    #region KeyValuePair LIST

                    List<KeyValuePair<string, string>> itemConsulta = new List<KeyValuePair<string, string>>();
                    itemConsulta.Add(helper.CrearKeyValuePairItem("@piId_Estado_Construccion", estadoConstruccion.IdEstadoConstruccion.ToString()));

                    #endregion

                    try
                    {

                        #region MODIFICAR

                        rowsAffected = transaccionDA.TransaccionModificar(conexion, conexionBitacora, "Estados_Construcciones_Actualiza", paramTransaccion, EnumTipoBitacora.ACTUALIZAR, itemConsulta, "Estados_Construcciones_Consulta_Detalle", _bitacora);
                        if (!rowsAffected.Equals(null))
                        {
                            elemento = new RespuestaEntidad();
                            elemento.ValorEstado = int.Parse(rowsAffected.Tables[0].Rows[0][0].ToString());
                            elemento.ValorError = int.Parse(rowsAffected.Tables[0].Rows[0][1].ToString());
                        }

                        return elemento;

                        #endregion

                    }
                    catch (Exception)
                    {
                        throw;
                    }
                }
        
                public RespuestaEntidad EstadosConstruccionesEliminar(String conexion, String conexionBitacora, EstadosConstruccionesEntidad estadoConstruccion, BitacorasEntidad _bitacora)
                {
                    RespuestaEntidad elemento = null;
                    DataSet rowsAffected;

                    #region PARAMETROS

                    SqlParameter[] paramTransaccion = new SqlParameter[]
                    {
                        new SqlParameter("@piId_Estado_Construccion", estadoConstruccion.IdEstadoConstruccion)
                    };

                    #endregion

                    #region KeyValuePair LIST

                    List<KeyValuePair<string, string>> itemConsulta = new List<KeyValuePair<string, string>>();
                    itemConsulta.Add(helper.CrearKeyValuePairItem("@piId_Estado_Construccion", estadoConstruccion.IdEstadoConstruccion.ToString()));

                    #endregion

                    try
                    {

                        #region ELIMINAR

                        rowsAffected = transaccionDA.TransaccionEliminar(conexion, conexionBitacora, "Estados_Construcciones_Elimina", paramTransaccion, EnumTipoBitacora.ELIMINAR, itemConsulta, "Estados_Construcciones_Consulta_Detalle", _bitacora);
                        if (!rowsAffected.Equals(null))
                        {
                            elemento = new RespuestaEntidad();
                            elemento.ValorEstado = int.Parse(rowsAffected.Tables[0].Rows[0][0].ToString());
                            elemento.ValorError = int.Parse(rowsAffected.Tables[0].Rows[0][1].ToString());
                        }

                        return elemento;

                        #endregion

                    }
                    catch (Exception)
                    {
                        throw;
                    }
                }

                public List<EstadosConstruccionesEntidad> EstadosConstruccionesConsultar(String conexion, ParametrosConsultaEntidad entidad)
                {
                    List<EstadosConstruccionesEntidad> retorno = new List<EstadosConstruccionesEntidad>();
                    EstadosConstruccionesEntidad elemento;
                    DataSet rowsAffected;

                    #region PARAMETROS

                    SqlParameter[] paramTransaccion = new SqlParameter[]
                    {
                       new SqlParameter("@piIndice_Inicio_Fila", entidad.IndiceInicioFila),
                       new SqlParameter("@piMaximo_Filas", entidad.MaximoFilas),
                       new SqlParameter("@psValores_Filtro", entidad.ValorFiltro),
                       new SqlParameter("@psColumnas_Filtros", entidad.ColumnaFiltro),
                       new SqlParameter("@psColumna_Ordenar", entidad.ColumnaOrdenar)
                    };

                    #endregion

                    try
                    {

                        #region CONSULTAR

                        rowsAffected = transaccionDA.TransaccionConsulta(conexion, "Estados_Construcciones_Consulta", paramTransaccion);
                        if (!rowsAffected.Equals(null))
                        {
                            foreach (DataRow dr in rowsAffected.Tables[0].Rows)
                            {
                                elemento = new EstadosConstruccionesEntidad();
                                elemento.IdEstadoConstruccion = int.Parse(dr[0].ToString());
                                elemento.CodEstadoConstruccion = int.Parse(dr[1].ToString());
                                elemento.DesEstadoConstruccion = dr[2].ToString();

                                retorno.Add(elemento);
                            }
                        }

                        return retorno;

                        #endregion

                    }
                    catch (Exception)
                    {
                        throw;
                    }
                }
        
                public EstadosConstruccionesEntidad EstadosConstruccionesConsultarDetalle(String conexion, String conexionBitacora, EstadosConstruccionesEntidad estadoConstruccion, BitacorasEntidad _bitacora)
                {
                    EstadosConstruccionesEntidad retorno = new EstadosConstruccionesEntidad();
                    DataSet rowsAffected;

                    #region PARAMETROS

                    SqlParameter[] paramTransaccion = new SqlParameter[]
                    {
                       new SqlParameter("@piId_Estado_Construccion", estadoConstruccion.IdEstadoConstruccion)
                    };

                    #endregion

                    #region KeyValuePair LIST

                    List<KeyValuePair<string, string>> itemConsulta = new List<KeyValuePair<string, string>>();
                    itemConsulta.Add(helper.CrearKeyValuePairItem("@piId_Estado_Construccion", estadoConstruccion.IdEstadoConstruccion.ToString()));

                    #endregion

                    try
                    {

                        #region CONSULTAR DETALLE

                        rowsAffected = transaccionDA.TransaccionConsultaDetalle(conexion, conexionBitacora, "Estados_Construcciones_Consulta_Detalle", paramTransaccion, EnumTipoBitacora.CONSULTAR, itemConsulta, "Estados_Construcciones_Consulta_Detalle", _bitacora);
                        if (!rowsAffected.Equals(null))
                        {
                            retorno.IdEstadoConstruccion = int.Parse(rowsAffected.Tables[0].Rows[0][0].ToString());
                            retorno.CodEstadoConstruccion = int.Parse(rowsAffected.Tables[0].Rows[0][1].ToString());
                            retorno.DesEstadoConstruccion = rowsAffected.Tables[0].Rows[0][2].ToString(); 
                            retorno.IndMetodoInsercion = rowsAffected.Tables[0].Rows[0][3].ToString();
                            if (rowsAffected.Tables[0].Rows[0][4].ToString().Length > 0)
                                retorno.FechaIngreso = DateTime.Parse(rowsAffected.Tables[0].Rows[0][4].ToString());
                            else
                                retorno.FechaIngreso = null;
                            retorno.CodUsuarioIngreso = rowsAffected.Tables[0].Rows[0][5].ToString();
                            if (rowsAffected.Tables[0].Rows[0][6].ToString().Length > 0)
                                retorno.FechaUltimaModificacion = DateTime.Parse(rowsAffected.Tables[0].Rows[0][6].ToString());
                            else
                                retorno.FechaUltimaModificacion = null;
                            retorno.CodUsuarioUltimaModificacion = rowsAffected.Tables[0].Rows[0][7].ToString();
                            retorno.DesUsuarioIngreso = rowsAffected.Tables[0].Rows[0][8].ToString();
                            retorno.DesUsuarioUltimaModificacion = rowsAffected.Tables[0].Rows[0][9].ToString();
                        }

                        return retorno;

                        #endregion

                    }
                    catch (Exception)
                    {
                        throw;
                    }
                }
        
                public int EstadosConstruccionesTotalFilas(String conexion, ParametrosTotalFilasEntidad entidad)
                {

                    int value;

                    #region PARAMETROS

                    SqlParameter[] paramTransaccion = new SqlParameter[]
                    {
                        new SqlParameter("@psValor_Filtro", entidad.ValorFiltro),
                        new SqlParameter("@psColumna_Filtro", entidad.ColumnaFiltro)
                    };

                    #endregion

                    try
                    {

                        #region TOTAL FILAS

                            value = transaccionDA.TransaccionRows(conexion, "Estados_Construcciones_Total_Filas", paramTransaccion);

                            return value;

                        #endregion

                    }
                    catch (Exception)
                    {
                        throw;
                    }
                }

            #endregion 

            #region ESTADOS GARANTIAS

                public List<ListaEntidad> EstadosGarantiasLista(String conexion, String filtro)
                {
                    List<ListaEntidad> retorno = new List<ListaEntidad>();
                    ListaEntidad elemento;
                    DataSet rowsAffected;

                    #region PARAMETROS

                    SqlParameter[] paramTransaccion = new SqlParameter[]
                    {
                        new SqlParameter("@psFiltro", filtro)
                    };

                    #endregion

                    try
                    {

                        #region LISTA

                        rowsAffected = transaccionDA.TransaccionConsulta(conexion, "Estados_Garantias_Lista", paramTransaccion);
                        if (!rowsAffected.Equals(null))
                        {
                            foreach (DataRow dr in rowsAffected.Tables[0].Rows)
                            {
                                elemento = new ListaEntidad();
                                elemento.Valor = dr[0].ToString();
                                elemento.Texto = dr[1].ToString();

                                retorno.Add(elemento);
                            }
                        }
                        return retorno;

                        #endregion

                    }
                    catch (Exception)
                    {
                        throw;
                    }
                }

            #endregion

            #region ESTADOS INSTALACIONES ELECTRICAS
        
                public RespuestaEntidad EstadosInstalacionesElectricasInsertar(String conexion, String conexionBitacora, EstadosInstalacionesElectricasEntidad estadoInstalacionElectrica, BitacorasEntidad _bitacora)
                {
                    RespuestaEntidad elemento = null;
                    DataSet rowsAffected;

                    #region PARAMETROS

                    SqlParameter[] paramTransaccion = new SqlParameter[]
                    {
                        new SqlParameter("@piCod_Estado_Instalacion_Electrica", estadoInstalacionElectrica.CodEstadoInstalacionElectrica),
                        new SqlParameter("@psDes_Estado_Instalacion_Electrica", estadoInstalacionElectrica.DesEstadoInstalacionElectrica),
                        new SqlParameter("@psInd_Metodo_Insercion", estadoInstalacionElectrica.IndMetodoInsercion),
                        new SqlParameter("@psCod_Usuario", estadoInstalacionElectrica.CodUsuarioIngreso)
                    };

                    #endregion

                    try
                    {

                        #region INSERTAR

                        rowsAffected = transaccionDA.TransaccionInsertar(conexion, conexionBitacora, "Estados_Instalaciones_Electricas_Inserta", paramTransaccion, EnumTipoBitacora.INSERTAR, _bitacora);
                        if (!rowsAffected.Equals(null))
                        {
                            elemento = new RespuestaEntidad();
                            elemento.ValorEstado = int.Parse(rowsAffected.Tables[0].Rows[0][0].ToString());
                            elemento.ValorError = int.Parse(rowsAffected.Tables[0].Rows[0][1].ToString());
                        }

                        return elemento;

                        #endregion

                    }
                    catch (Exception)
                    {
                        throw;
                    }
                }
        
                public RespuestaEntidad EstadosInstalacionesElectricasModificar(String conexion, String conexionBitacora, EstadosInstalacionesElectricasEntidad estadoInstalacionElectrica, BitacorasEntidad _bitacora)
                {
                    RespuestaEntidad elemento = null;
                    DataSet rowsAffected;

                    #region PARAMETROS

                    SqlParameter[] paramTransaccion = new SqlParameter[]
                    {
                        new SqlParameter("@piId_Estado_Instalacion_Electrica", estadoInstalacionElectrica.IdEstadoInstalacionElectrica),
                        new SqlParameter("@piCod_Estado_Instalacion_Electrica", estadoInstalacionElectrica.CodEstadoInstalacionElectrica),
                        new SqlParameter("@psDes_Estado_Instalacion_Electrica", estadoInstalacionElectrica.DesEstadoInstalacionElectrica),
                        new SqlParameter("@psInd_Metodo_Insercion", estadoInstalacionElectrica.IndMetodoInsercion),
                        new SqlParameter("@psCod_Usuario", estadoInstalacionElectrica.CodUsuarioIngreso)
                    };

                    #endregion

                    #region KeyValuePair LIST

                    List<KeyValuePair<string, string>> itemConsulta = new List<KeyValuePair<string, string>>();
                    itemConsulta.Add(helper.CrearKeyValuePairItem("@piId_Estado_Instalacion_Electrica", estadoInstalacionElectrica.IdEstadoInstalacionElectrica.ToString()));

                    #endregion

                    try
                    {

                        #region MODIFICAR

                        rowsAffected = transaccionDA.TransaccionModificar(conexion, conexionBitacora, "Estados_Instalaciones_Electricas_Actualiza", paramTransaccion, EnumTipoBitacora.ACTUALIZAR, itemConsulta, "Estados_Instalaciones_Electricas_Consulta_Detalle", _bitacora);
                        if (!rowsAffected.Equals(null))
                        {
                            elemento = new RespuestaEntidad();
                            elemento.ValorEstado = int.Parse(rowsAffected.Tables[0].Rows[0][0].ToString());
                            elemento.ValorError = int.Parse(rowsAffected.Tables[0].Rows[0][1].ToString());
                        }

                        return elemento;

                        #endregion

                    }
                    catch (Exception)
                    {
                        throw;
                    }
                }
        
                public RespuestaEntidad EstadosInstalacionesElectricasEliminar(String conexion, String conexionBitacora, EstadosInstalacionesElectricasEntidad estadoInstalacionElectrica, BitacorasEntidad _bitacora)
                {
                    RespuestaEntidad elemento = null;
                    DataSet rowsAffected;

                    #region PARAMETROS

                    SqlParameter[] paramTransaccion = new SqlParameter[]
                    {
                        new SqlParameter("@piId_Estado_Instalacion_Electrica", estadoInstalacionElectrica.IdEstadoInstalacionElectrica),
                    };

                    #endregion

                    #region KeyValuePair LIST

                    List<KeyValuePair<string, string>> itemConsulta = new List<KeyValuePair<string, string>>();
                    itemConsulta.Add(helper.CrearKeyValuePairItem("@piId_Estado_Instalacion_Electrica", estadoInstalacionElectrica.IdEstadoInstalacionElectrica.ToString()));

                    #endregion

                    try
                    {

                        #region ELIMINAR

                        rowsAffected = transaccionDA.TransaccionEliminar(conexion, conexionBitacora, "Estados_Instalaciones_Electricas_Elimina", paramTransaccion, EnumTipoBitacora.ELIMINAR, itemConsulta, "Estados_Instalaciones_Electricas_Consulta_Detalle", _bitacora);
                        if (!rowsAffected.Equals(null))
                        {
                            elemento = new RespuestaEntidad();
                            elemento.ValorEstado = int.Parse(rowsAffected.Tables[0].Rows[0][0].ToString());
                            elemento.ValorError = int.Parse(rowsAffected.Tables[0].Rows[0][1].ToString());
                        }

                        return elemento;

                        #endregion

                    }
                    catch (Exception)
                    {
                        throw;
                    }
                }

                public List<EstadosInstalacionesElectricasEntidad> EstadosInstalacionesElectricasConsultar(String conexion, ParametrosConsultaEntidad entidad)
                {
                    List<EstadosInstalacionesElectricasEntidad> retorno = new List<EstadosInstalacionesElectricasEntidad>();
                    EstadosInstalacionesElectricasEntidad elemento;
                    DataSet rowsAffected;

                    #region PARAMETROS

                    SqlParameter[] paramTransaccion = new SqlParameter[]
                    {
                       new SqlParameter("@piIndice_Inicio_Fila", entidad.IndiceInicioFila),
                       new SqlParameter("@piMaximo_Filas", entidad.MaximoFilas),
                       new SqlParameter("@psValores_Filtro", entidad.ValorFiltro),
                       new SqlParameter("@psColumnas_Filtros", entidad.ColumnaFiltro),
                       new SqlParameter("@psColumna_Ordenar", entidad.ColumnaOrdenar)
                    };

                    #endregion

                    try
                    {

                        #region CONSULTAR

                        rowsAffected = transaccionDA.TransaccionConsulta(conexion, "Estados_Instalaciones_Electricas_Consulta", paramTransaccion);
                        if (!rowsAffected.Equals(null))
                        {
                            foreach (DataRow dr in rowsAffected.Tables[0].Rows)
                            {
                                elemento = new EstadosInstalacionesElectricasEntidad();
                                elemento.IdEstadoInstalacionElectrica = int.Parse(dr[0].ToString());
                                elemento.CodEstadoInstalacionElectrica = int.Parse(dr[1].ToString());
                                elemento.DesEstadoInstalacionElectrica = dr[2].ToString();

                                retorno.Add(elemento);
                            }
                        }

                        return retorno;

                        #endregion

                    }
                    catch (Exception)
                    {
                        throw;
                    }
                }
        
                public EstadosInstalacionesElectricasEntidad EstadosInstalacionesElectricasConsultarDetalle(String conexion, String conexionBitacora, EstadosInstalacionesElectricasEntidad estadoInstalacionElectrica, BitacorasEntidad _bitacora)
                {
                    EstadosInstalacionesElectricasEntidad retorno = new EstadosInstalacionesElectricasEntidad();
                    DataSet rowsAffected;

                    #region PARAMETROS

                    SqlParameter[] paramTransaccion = new SqlParameter[]
                    {
                        new SqlParameter("@piId_Estado_Instalacion_Electrica", estadoInstalacionElectrica.IdEstadoInstalacionElectrica),
                    };

                    #endregion

                    #region KeyValuePair LIST

                    List<KeyValuePair<string, string>> itemConsulta = new List<KeyValuePair<string, string>>();
                    itemConsulta.Add(helper.CrearKeyValuePairItem("@piId_Estado_Instalacion_Electrica", estadoInstalacionElectrica.IdEstadoInstalacionElectrica.ToString()));

                    #endregion

                    try
                    {

                        #region CONSULTAR DETALLE

                        rowsAffected = transaccionDA.TransaccionConsultaDetalle(conexion, conexionBitacora, "Estados_Instalaciones_Electricas_Consulta_Detalle", paramTransaccion, EnumTipoBitacora.CONSULTAR, itemConsulta, "Estados_Instalaciones_Electricas_Consulta_Detalle", _bitacora);
                        if (!rowsAffected.Equals(null))
                        {
                            retorno.IdEstadoInstalacionElectrica = int.Parse(rowsAffected.Tables[0].Rows[0][0].ToString());
                            retorno.CodEstadoInstalacionElectrica = int.Parse(rowsAffected.Tables[0].Rows[0][1].ToString());
                            retorno.DesEstadoInstalacionElectrica = rowsAffected.Tables[0].Rows[0][2].ToString(); 
                            retorno.IndMetodoInsercion = rowsAffected.Tables[0].Rows[0][3].ToString();
                            if (rowsAffected.Tables[0].Rows[0][4].ToString().Length > 0)
                                retorno.FechaIngreso = DateTime.Parse(rowsAffected.Tables[0].Rows[0][4].ToString());
                            else
                                retorno.FechaIngreso = null;
                            retorno.CodUsuarioIngreso = rowsAffected.Tables[0].Rows[0][5].ToString();
                            if (rowsAffected.Tables[0].Rows[0][6].ToString().Length > 0)
                                retorno.FechaUltimaModificacion = DateTime.Parse(rowsAffected.Tables[0].Rows[0][6].ToString());
                            else
                                retorno.FechaUltimaModificacion = null;
                            retorno.CodUsuarioUltimaModificacion = rowsAffected.Tables[0].Rows[0][7].ToString();
                            retorno.DesUsuarioIngreso = rowsAffected.Tables[0].Rows[0][8].ToString();
                            retorno.DesUsuarioUltimaModificacion = rowsAffected.Tables[0].Rows[0][9].ToString();
                        }

                        return retorno;

                        #endregion

                    }
                    catch (Exception)
                    {
                        throw;
                    }
                }
        
                public int EstadosInstalacionesElectricasTotalFilas(String conexion, ParametrosTotalFilasEntidad entidad)
                {

                    int value;

                    #region PARAMETROS

                    SqlParameter[] paramTransaccion = new SqlParameter[]
                    {
                        new SqlParameter("@psValor_Filtro", entidad.ValorFiltro),
                        new SqlParameter("@psColumna_Filtro", entidad.ColumnaFiltro)
                    };

                    #endregion

                    try
                    {

                        #region TOTAL FILAS

                            value = transaccionDA.TransaccionRows(conexion, "Estados_Instalaciones_Electricas_Total_Filas", paramTransaccion);

                            return value;

                        #endregion

                    }
                    catch (Exception)
                    {
                        throw;
                    }
                }

            #endregion 

            #region ESTRUCTURAS TECHOS
        
                public RespuestaEntidad EstructurasTechosInsertar(String conexion, String conexionBitacora, EstructurasTechosEntidad estructuraTecho, BitacorasEntidad _bitacora)
                {
                    RespuestaEntidad elemento = null;
                    DataSet rowsAffected;

                    #region PARAMETROS

                    SqlParameter[] paramTransaccion = new SqlParameter[]
                    {
                        new SqlParameter("@piCod_Estructura_Techo", estructuraTecho.CodEstructuraTecho),
                        new SqlParameter("@psDes_Estructura_Techo", estructuraTecho.DesEstructuraTecho),
                        new SqlParameter("@psInd_Metodo_Insercion", estructuraTecho.IndMetodoInsercion),
                        new SqlParameter("@psCod_Usuario", estructuraTecho.CodUsuarioIngreso)
                    };

                    #endregion

                    try
                    {

                        #region INSERTAR

                        rowsAffected = transaccionDA.TransaccionInsertar(conexion, conexionBitacora, "Estructuras_Techos_Inserta", paramTransaccion, EnumTipoBitacora.INSERTAR, _bitacora);
                        if (!rowsAffected.Equals(null))
                        {
                            elemento = new RespuestaEntidad();
                            elemento.ValorEstado = int.Parse(rowsAffected.Tables[0].Rows[0][0].ToString());
                            elemento.ValorError = int.Parse(rowsAffected.Tables[0].Rows[0][1].ToString());
                        }

                        return elemento;

                        #endregion

                    }
                    catch (Exception)
                    {
                        throw;
                    }
                }
        
                public RespuestaEntidad EstructurasTechosModificar(String conexion, String conexionBitacora, EstructurasTechosEntidad estructuraTecho, BitacorasEntidad _bitacora)
                {
                    RespuestaEntidad elemento = null;
                    DataSet rowsAffected;

                    #region PARAMETROS

                    SqlParameter[] paramTransaccion = new SqlParameter[]
                    {
                        new SqlParameter("@piId_Estructura_Techo", estructuraTecho.IdEstructuraTecho),
                        new SqlParameter("@piCod_Estructura_Techo", estructuraTecho.CodEstructuraTecho),
                        new SqlParameter("@psDes_Estructura_Techo", estructuraTecho.DesEstructuraTecho),
                        new SqlParameter("@psInd_Metodo_Insercion", estructuraTecho.IndMetodoInsercion),
                        new SqlParameter("@psCod_Usuario", estructuraTecho.CodUsuarioIngreso)
                    };

                    #endregion

                    #region KeyValuePair LIST

                    List<KeyValuePair<string, string>> itemConsulta = new List<KeyValuePair<string, string>>();
                    itemConsulta.Add(helper.CrearKeyValuePairItem("@piId_Estructura_Techo", estructuraTecho.IdEstructuraTecho.ToString()));

                    #endregion

                    try
                    {

                        #region MODIFICAR

                        rowsAffected = transaccionDA.TransaccionModificar(conexion, conexionBitacora, "Estructuras_Techos_Actualiza", paramTransaccion, EnumTipoBitacora.ACTUALIZAR, itemConsulta, "Estructuras_Techos_Consulta_Detalle", _bitacora);
                        if (!rowsAffected.Equals(null))
                        {
                            elemento = new RespuestaEntidad();
                            elemento.ValorEstado = int.Parse(rowsAffected.Tables[0].Rows[0][0].ToString());
                            elemento.ValorError = int.Parse(rowsAffected.Tables[0].Rows[0][1].ToString());
                        }

                        return elemento;

                        #endregion

                    }
                    catch (Exception)
                    {
                        throw;
                    }
                }
        
                public RespuestaEntidad EstructurasTechosEliminar(String conexion, String conexionBitacora, EstructurasTechosEntidad estructuraTecho, BitacorasEntidad _bitacora)
                {
                    RespuestaEntidad elemento = null;
                    DataSet rowsAffected;

                    #region PARAMETROS

                    SqlParameter[] paramTransaccion = new SqlParameter[]
                    {
                        new SqlParameter("@piId_Estructura_Techo", estructuraTecho.IdEstructuraTecho)
                    };

                    #endregion

                    #region KeyValuePair LIST

                    List<KeyValuePair<string, string>> itemConsulta = new List<KeyValuePair<string, string>>();
                    itemConsulta.Add(helper.CrearKeyValuePairItem("@piId_Estructura_Techo", estructuraTecho.IdEstructuraTecho.ToString()));

                    #endregion

                    try
                    {

                        #region ELIMINAR

                        rowsAffected = transaccionDA.TransaccionEliminar(conexion, conexionBitacora, "Estructuras_Techos_Elimina", paramTransaccion, EnumTipoBitacora.ELIMINAR, itemConsulta, "Estructuras_Techos_Consulta_Detalle", _bitacora);
                        if (!rowsAffected.Equals(null))
                        {
                            elemento = new RespuestaEntidad();
                            elemento.ValorEstado = int.Parse(rowsAffected.Tables[0].Rows[0][0].ToString());
                            elemento.ValorError = int.Parse(rowsAffected.Tables[0].Rows[0][1].ToString());
                        }

                        return elemento;

                        #endregion

                    }
                    catch (Exception)
                    {
                        throw;
                    }
                }

                public List<EstructurasTechosEntidad> EstructurasTechosConsultar(String conexion, ParametrosConsultaEntidad entidad)
                {
                    List<EstructurasTechosEntidad> retorno = new List<EstructurasTechosEntidad>();
                    EstructurasTechosEntidad elemento;
                    DataSet rowsAffected;

                    #region PARAMETROS


                    SqlParameter[] paramTransaccion = new SqlParameter[]
                    {
                       new SqlParameter("@piIndice_Inicio_Fila", entidad.IndiceInicioFila),
                       new SqlParameter("@piMaximo_Filas", entidad.MaximoFilas),
                       new SqlParameter("@psValores_Filtro", entidad.ValorFiltro),
                       new SqlParameter("@psColumnas_Filtros", entidad.ColumnaFiltro),
                       new SqlParameter("@psColumna_Ordenar", entidad.ColumnaOrdenar)
                    };

                    #endregion

                    try
                    {

                        #region CONSULTAR

                        rowsAffected = transaccionDA.TransaccionConsulta(conexion, "Estructuras_Techos_Consulta", paramTransaccion);
                        if (!rowsAffected.Equals(null))
                        {
                            foreach (DataRow dr in rowsAffected.Tables[0].Rows)
                            {
                                elemento = new EstructurasTechosEntidad();
                                elemento.IdEstructuraTecho = int.Parse(dr[0].ToString());
                                elemento.CodEstructuraTecho = int.Parse(dr[1].ToString());
                                elemento.DesEstructuraTecho = dr[2].ToString();

                                retorno.Add(elemento);
                            }
                        }

                        return retorno;

                        #endregion

                    }
                    catch (Exception)
                    {
                        throw;
                    }
                }
        
                public EstructurasTechosEntidad EstructurasTechosConsultarDetalle(String conexion, String conexionBitacora, EstructurasTechosEntidad estructuraTecho, BitacorasEntidad _bitacora)
                {
                    EstructurasTechosEntidad retorno = new EstructurasTechosEntidad();
                    DataSet rowsAffected;

                    #region PARAMETROS

                    SqlParameter[] paramTransaccion = new SqlParameter[]
                    {
                        new SqlParameter("@piId_Estructura_Techo", estructuraTecho.IdEstructuraTecho)
                    };

                    #endregion

                    #region KeyValuePair LIST

                    List<KeyValuePair<string, string>> itemConsulta = new List<KeyValuePair<string, string>>();
                    itemConsulta.Add(helper.CrearKeyValuePairItem("@piId_Estructura_Techo", estructuraTecho.IdEstructuraTecho.ToString()));

                    #endregion

                    try
                    {

                        #region CONSULTAR DETALLE

                        rowsAffected = transaccionDA.TransaccionConsultaDetalle(conexion, conexionBitacora, "Estructuras_Techos_Consulta_Detalle", paramTransaccion, EnumTipoBitacora.CONSULTAR, itemConsulta, "Estructuras_Techos_Consulta_Detalle", _bitacora);
                        if (!rowsAffected.Equals(null))
                        {
                            retorno.IdEstructuraTecho = int.Parse(rowsAffected.Tables[0].Rows[0][0].ToString());
                            retorno.CodEstructuraTecho = int.Parse(rowsAffected.Tables[0].Rows[0][1].ToString());
                            retorno.DesEstructuraTecho = rowsAffected.Tables[0].Rows[0][2].ToString(); retorno.IndMetodoInsercion = rowsAffected.Tables[0].Rows[0][3].ToString();
                            if (rowsAffected.Tables[0].Rows[0][4].ToString().Length > 0)
                                retorno.FechaIngreso = DateTime.Parse(rowsAffected.Tables[0].Rows[0][4].ToString());
                            else
                                retorno.FechaIngreso = null;
                            retorno.CodUsuarioIngreso = rowsAffected.Tables[0].Rows[0][5].ToString();
                            if (rowsAffected.Tables[0].Rows[0][6].ToString().Length > 0)
                                retorno.FechaUltimaModificacion = DateTime.Parse(rowsAffected.Tables[0].Rows[0][6].ToString());
                            else
                                retorno.FechaUltimaModificacion = null;
                            retorno.CodUsuarioUltimaModificacion = rowsAffected.Tables[0].Rows[0][7].ToString();
                            retorno.DesUsuarioIngreso = rowsAffected.Tables[0].Rows[0][8].ToString();
                            retorno.DesUsuarioUltimaModificacion = rowsAffected.Tables[0].Rows[0][9].ToString();
                        }

                        return retorno;

                        #endregion

                    }
                    catch (Exception)
                    {
                        throw;
                    }
                }
        
                public int EstructurasTechosTotalFilas(String conexion, ParametrosTotalFilasEntidad entidad)
                {

                    int value;

                    #region PARAMETROS


                    SqlParameter[] paramTransaccion = new SqlParameter[]
                    {
                        new SqlParameter("@psValor_Filtro", entidad.ValorFiltro),
                        new SqlParameter("@psColumna_Filtro", entidad.ColumnaFiltro)
                    };

                    #endregion

                    try
                    {

                        #region TOTAL FILAS

                            value = transaccionDA.TransaccionRows(conexion, "Estructuras_Techos_Total_Filas", paramTransaccion);

                            return value;

                        #endregion

                    }
                    catch (Exception)
                    {
                        throw;
                    }
                }

            #endregion 

            //REQUERIMIENTO: 1-24105296
            #region FISCALIZADORES
        
                public RespuestaEntidad FiscalizadoresInsertar(String conexion, String conexionBitacora, FiscalizadoresEntidad fiscalizador, BitacorasEntidad _bitacora)
                {
                    RespuestaEntidad elemento = null;
                    DataSet rowsAffected;

                    #region PARAMETROS

                    SqlParameter[] paramTransaccion = new SqlParameter[]
                    {                        
                        new SqlParameter("@piId_Tipo_Persona", fiscalizador.IdTipoPersona),
                        new SqlParameter("@psCod_Tasador", fiscalizador.CodTasador),
                        new SqlParameter("@psNombre_Tasador", fiscalizador.DesNombreTasador),
                        new SqlParameter("@psCod_Tipo_Fiscalizador", fiscalizador.CodTipoFiscalizador),
                        new SqlParameter("@psInd_Metodo_Insercion", fiscalizador.IndMetodoInsercion),
                        new SqlParameter("@psCod_Usuario", fiscalizador.CodUsuarioIngreso)
                    };

                    #endregion

                    try
                    {

                        #region INSERTAR
                        
                        rowsAffected = transaccionDA.TransaccionInsertar(conexion, conexionBitacora, "Fiscalizadores_Inserta", paramTransaccion, EnumTipoBitacora.INSERTAR, _bitacora);
                        if (!rowsAffected.Equals(null))
                        {
                            elemento = new RespuestaEntidad();
                            elemento.ValorEstado = int.Parse(rowsAffected.Tables[0].Rows[0][0].ToString());
                            elemento.ValorError = int.Parse(rowsAffected.Tables[0].Rows[0][1].ToString());
                        }

                        return elemento;

                        #endregion

                    }
                    catch (Exception)
                    {
                        throw;
                    }
                }
        
                public RespuestaEntidad FiscalizadoresModificar(String conexion, String conexionBitacora, FiscalizadoresEntidad fiscalizador, BitacorasEntidad _bitacora)
                {
                    RespuestaEntidad elemento = null;
                    DataSet rowsAffected;

                    #region PARAMETROS

                    SqlParameter[] paramTransaccion = new SqlParameter[]
                    {
                        new SqlParameter("@piId_Fiscalizador", fiscalizador.IdFiscalizador),
                        new SqlParameter("@piId_Tipo_Persona", fiscalizador.IdTipoPersona),
                        new SqlParameter("@psCod_Tasador", fiscalizador.CodTasador),
                        new SqlParameter("@psNombre_Tasador", fiscalizador.DesNombreTasador),
                        new SqlParameter("@psCod_Tipo_Fiscalizador", fiscalizador.CodTipoFiscalizador),
                        new SqlParameter("@psInd_Metodo_Insercion", fiscalizador.IndMetodoInsercion),
                        new SqlParameter("@psCod_Usuario", fiscalizador.CodUsuarioIngreso)
                    };

                    #endregion

                    #region KeyValuePair LIST

                    List<KeyValuePair<string, string>> itemConsulta = new List<KeyValuePair<string, string>>();
                    itemConsulta.Add(helper.CrearKeyValuePairItem("@piId_Fiscalizador", fiscalizador.IdFiscalizador.ToString()));

                    #endregion

                    try
                    {

                        #region MODIFICAR

                        rowsAffected = transaccionDA.TransaccionModificar(conexion, conexionBitacora, "Fiscalizadores_Actualiza", paramTransaccion, EnumTipoBitacora.ACTUALIZAR, itemConsulta, "Fiscalizadores_Consulta_Detalle", _bitacora);
                        if (!rowsAffected.Equals(null))
                        {
                            elemento = new RespuestaEntidad();
                            elemento.ValorEstado = int.Parse(rowsAffected.Tables[0].Rows[0][0].ToString());
                            elemento.ValorError = int.Parse(rowsAffected.Tables[0].Rows[0][1].ToString());
                        }

                        return elemento;

                        #endregion

                    }
                    catch (Exception)
                    {
                        throw;
                    }
                }
        
                public RespuestaEntidad FiscalizadoresEliminar(String conexion, String conexionBitacora, FiscalizadoresEntidad fiscalizador, BitacorasEntidad _bitacora)
                {
                    RespuestaEntidad elemento = null;
                    DataSet rowsAffected;

                    #region PARAMETROS

                    SqlParameter[] paramTransaccion = new SqlParameter[]
                    {
                        new SqlParameter("@piId_Fiscalizador", fiscalizador.IdFiscalizador)
                    };

                    #endregion

                    #region KeyValuePair LIST

                    List<KeyValuePair<string, string>> itemConsulta = new List<KeyValuePair<string, string>>();
                    itemConsulta.Add(helper.CrearKeyValuePairItem("@piId_Fiscalizador", fiscalizador.IdFiscalizador.ToString()));

                    #endregion

                    try
                    {

                        #region ELIMINAR

                        rowsAffected = transaccionDA.TransaccionEliminar(conexion, conexionBitacora, "Fiscalizadores_Elimina", paramTransaccion, EnumTipoBitacora.ELIMINAR, itemConsulta, "Fiscalizadores_Consulta_Detalle", _bitacora);
                        if (!rowsAffected.Equals(null))
                        {
                            elemento = new RespuestaEntidad();
                            elemento.ValorEstado = int.Parse(rowsAffected.Tables[0].Rows[0][0].ToString());
                            elemento.ValorError = int.Parse(rowsAffected.Tables[0].Rows[0][1].ToString());
                        }

                        return elemento;

                        #endregion

                    }
                    catch (Exception)
                    {
                        throw;
                    }
                }

                public List<FiscalizadoresEntidad> FiscalizadoresConsultar(String conexion, ParametrosConsultaEntidad entidad)
                {
                    List<FiscalizadoresEntidad> retorno = new List<FiscalizadoresEntidad>();
                    FiscalizadoresEntidad elemento;
                    DataSet rowsAffected;

                    #region PARAMETROS

                    SqlParameter[] paramTransaccion = new SqlParameter[]
                    {
                       new SqlParameter("@piIndice_Inicio_Fila", entidad.IndiceInicioFila),
                       new SqlParameter("@piMaximo_Filas", entidad.MaximoFilas),
                       new SqlParameter("@psValores_Filtro", entidad.ValorFiltro),
                       new SqlParameter("@psColumnas_Filtros", entidad.ColumnaFiltro),
                       new SqlParameter("@psColumna_Ordenar", entidad.ColumnaOrdenar)
                    };

                    #endregion

                    try
                    {

                        #region CONSULTAR

                        rowsAffected = transaccionDA.TransaccionConsulta(conexion, "Fiscalizadores_Consulta", paramTransaccion);
                        if (!rowsAffected.Equals(null))
                        {
                            foreach (DataRow dr in rowsAffected.Tables[0].Rows)
                            {
                                elemento = new FiscalizadoresEntidad();
                                elemento.IdFiscalizador = int.Parse(dr[0].ToString());
                                elemento.IdTipoPersona = int.Parse(dr[1].ToString());
                                elemento.DesTipoPersona = dr[2].ToString();
                                elemento.CodTasador = dr[3].ToString();
                                elemento.DesNombreTasador = dr[4].ToString();
                                elemento.CodTipoFiscalizador = dr[5].ToString();
                                elemento.DesTipoFiscalizador = dr[6].ToString();

                                retorno.Add(elemento);

                            }
                        }

                        return retorno;

                        #endregion

                    }
                    catch (Exception)
                    {
                        throw;
                    }
                }
        
                public FiscalizadoresEntidad FiscalizadoresConsultarDetalle(String conexion, String conexionBitacora, FiscalizadoresEntidad fiscalizador, BitacorasEntidad _bitacora)
                {
                    FiscalizadoresEntidad retorno = new FiscalizadoresEntidad();
                    DataSet rowsAffected;

                    #region PARAMETROS

                    SqlParameter[] paramTransaccion = new SqlParameter[]
                        {
                            new SqlParameter("@piId_Fiscalizador", fiscalizador.IdFiscalizador)
                        };

                    #endregion

                    #region KeyValuePair LIST

                    List<KeyValuePair<string, string>> itemConsulta = new List<KeyValuePair<string, string>>();
                    itemConsulta.Add(helper.CrearKeyValuePairItem("@piId_Fiscalizador", fiscalizador.IdFiscalizador.ToString()));

                    #endregion

                    try
                    {

                        #region CONSULTAR DETALLE

                        rowsAffected = transaccionDA.TransaccionConsultaDetalle(conexion, conexionBitacora, "Fiscalizadores_Consulta_Detalle", paramTransaccion, EnumTipoBitacora.CONSULTAR, itemConsulta, "Fiscalizadores_Consulta_Detalle", _bitacora);
                        if (!rowsAffected.Equals(null))
                        {
                            retorno.IdFiscalizador = int.Parse(rowsAffected.Tables[0].Rows[0][0].ToString());
                            retorno.IdTipoPersona = int.Parse(rowsAffected.Tables[0].Rows[0][1].ToString());
                            retorno.DesTipoPersona = rowsAffected.Tables[0].Rows[0][2].ToString();
                            retorno.CodTasador = rowsAffected.Tables[0].Rows[0][3].ToString();
                            retorno.DesNombreTasador = rowsAffected.Tables[0].Rows[0][4].ToString();
                            retorno.CodTipoFiscalizador = rowsAffected.Tables[0].Rows[0][5].ToString();

                            retorno.IndMetodoInsercion = rowsAffected.Tables[0].Rows[0][6].ToString();
                            if (rowsAffected.Tables[0].Rows[0][7].ToString().Length > 0)
                                retorno.FechaIngreso = DateTime.Parse(rowsAffected.Tables[0].Rows[0][7].ToString());
                            else
                                retorno.FechaIngreso = null;
                            retorno.CodUsuarioIngreso = rowsAffected.Tables[0].Rows[0][8].ToString();
                            if (rowsAffected.Tables[0].Rows[0][9].ToString().Length > 0)
                                retorno.FechaUltimaModificacion = DateTime.Parse(rowsAffected.Tables[0].Rows[0][9].ToString());
                            else
                                retorno.FechaUltimaModificacion = null;
                            retorno.CodUsuarioUltimaModificacion = rowsAffected.Tables[0].Rows[0][10].ToString();
                            retorno.DesUsuarioIngreso = rowsAffected.Tables[0].Rows[0][11].ToString();
                            retorno.DesUsuarioUltimaModificacion = rowsAffected.Tables[0].Rows[0][12].ToString();
                            
                        }

                        return retorno;

                        #endregion

                    }
                    catch (Exception)
                    {
                        throw;
                    }
                }
        
                public int FiscalizadoresTotalFilas(String conexion, ParametrosTotalFilasEntidad entidad)
                {
                    int value;

                    #region PARAMETROS

                    SqlParameter[] paramTransaccion = new SqlParameter[]
                    {
                        new SqlParameter("@psValor_Filtro", entidad.ValorFiltro),
                        new SqlParameter("@psColumna_Filtro", entidad.ColumnaFiltro)
                    };

                    #endregion

                    try
                    {

                        #region TOTAL FILAS

                        value = transaccionDA.TransaccionRows(conexion, "Fiscalizadores_Total_Filas", paramTransaccion);

                        return value;

                        #endregion

                    }
                    catch (Exception)
                    {
                        throw;
                    }
                }

            #endregion 

            #region FORMAS
        
                public RespuestaEntidad FormasInsertar(String conexion, String conexionBitacora, FormasEntidad forma, BitacorasEntidad _bitacora)
                {
                    RespuestaEntidad elemento = null;
                    DataSet rowsAffected;

                    #region PARAMETROS

                    SqlParameter[] paramTransaccion = new SqlParameter[]
                    {
                        new SqlParameter("@piCod_Forma", forma.CodForma),
                        new SqlParameter("@psDes_Forma", forma.DesForma),
                        new SqlParameter("@psInd_Metodo_Insercion", forma.IndMetodoInsercion),
                        new SqlParameter("@psCod_Usuario", forma.CodUsuarioIngreso)
                    };

                    #endregion

                    try
                    {

                        #region INSERTAR

                        rowsAffected = transaccionDA.TransaccionInsertar(conexion, conexionBitacora, "Formas_Inserta", paramTransaccion, EnumTipoBitacora.INSERTAR, _bitacora);
                        if (!rowsAffected.Equals(null))
                        {
                            elemento = new RespuestaEntidad();
                            elemento.ValorEstado = int.Parse(rowsAffected.Tables[0].Rows[0][0].ToString());
                            elemento.ValorError = int.Parse(rowsAffected.Tables[0].Rows[0][1].ToString());
                        }

                        return elemento;

                        #endregion

                    }
                    catch (Exception)
                    {
                        throw;
                    }
                }
        
                public RespuestaEntidad FormasModificar(String conexion, String conexionBitacora, FormasEntidad forma, BitacorasEntidad _bitacora)
                {
                    RespuestaEntidad elemento = null;
                    DataSet rowsAffected;

                    #region PARAMETROS

                    SqlParameter[] paramTransaccion = new SqlParameter[]
                    {
                        new SqlParameter("@piId_Forma", forma.IdForma),
                        new SqlParameter("@piCod_Forma", forma.CodForma),
                        new SqlParameter("@psDes_Forma", forma.DesForma),
                        new SqlParameter("@psInd_Metodo_Insercion", forma.IndMetodoInsercion),
                        new SqlParameter("@psCod_Usuario", forma.CodUsuarioIngreso)
                    };

                    #endregion

                    #region KeyValuePair LIST

                    List<KeyValuePair<string, string>> itemConsulta = new List<KeyValuePair<string, string>>();
                    itemConsulta.Add(helper.CrearKeyValuePairItem("@piId_Forma", forma.IdForma.ToString()));

                    #endregion

                    try
                    {

                        #region MODIFICAR

                        rowsAffected = transaccionDA.TransaccionModificar(conexion, conexionBitacora, "Formas_Actualiza", paramTransaccion, EnumTipoBitacora.ACTUALIZAR, itemConsulta, "Formas_Consulta_Detalle", _bitacora);
                        if (!rowsAffected.Equals(null))
                        {
                            elemento = new RespuestaEntidad();
                            elemento.ValorEstado = int.Parse(rowsAffected.Tables[0].Rows[0][0].ToString());
                            elemento.ValorError = int.Parse(rowsAffected.Tables[0].Rows[0][1].ToString());
                        }

                        return elemento;

                        #endregion

                    }
                    catch (Exception)
                    {
                        throw;
                    }
                }
        
                public RespuestaEntidad FormasEliminar(String conexion, String conexionBitacora, FormasEntidad forma, BitacorasEntidad _bitacora)
                {
                    RespuestaEntidad elemento = null;
                    DataSet rowsAffected;

                    #region PARAMETROS

                    SqlParameter[] paramTransaccion = new SqlParameter[]
                    {
                        new SqlParameter("@piId_Forma", forma.IdForma)
                    };

                    #endregion

                    #region KeyValuePair LIST

                    List<KeyValuePair<string, string>> itemConsulta = new List<KeyValuePair<string, string>>();
                    itemConsulta.Add(helper.CrearKeyValuePairItem("@piId_Forma", forma.IdForma.ToString()));

                    #endregion

                    try
                    {

                        #region ELIMINAR

                        rowsAffected = transaccionDA.TransaccionEliminar(conexion, conexionBitacora, "Formas_Elimina", paramTransaccion, EnumTipoBitacora.ELIMINAR, itemConsulta, "Formas_Consulta_Detalle", _bitacora);
                        if (!rowsAffected.Equals(null))
                        {
                            elemento = new RespuestaEntidad();
                            elemento.ValorEstado = int.Parse(rowsAffected.Tables[0].Rows[0][0].ToString());
                            elemento.ValorError = int.Parse(rowsAffected.Tables[0].Rows[0][1].ToString());
                        }

                        return elemento;

                        #endregion

                    }
                    catch (Exception)
                    {
                        throw;
                    }
                }

                public List<FormasEntidad> FormasConsultar(String conexion, ParametrosConsultaEntidad entidad)
                {
                    List<FormasEntidad> retorno = new List<FormasEntidad>();
                    FormasEntidad elemento;
                    DataSet rowsAffected;

                    #region PARAMETROS


                    SqlParameter[] paramTransaccion = new SqlParameter[]
                    {
                       new SqlParameter("@piIndice_Inicio_Fila", entidad.IndiceInicioFila),
                       new SqlParameter("@piMaximo_Filas", entidad.MaximoFilas),
                       new SqlParameter("@psValores_Filtro", entidad.ValorFiltro),
                       new SqlParameter("@psColumnas_Filtros", entidad.ColumnaFiltro),
                       new SqlParameter("@psColumna_Ordenar", entidad.ColumnaOrdenar)
                    };

                    #endregion

                    try
                    {

                        #region CONSULTAR

                        rowsAffected = transaccionDA.TransaccionConsulta(conexion, "Formas_Consulta", paramTransaccion);
                        if (!rowsAffected.Equals(null))
                        {
                            foreach (DataRow dr in rowsAffected.Tables[0].Rows)
                            {
                                elemento = new FormasEntidad();
                                elemento.IdForma = int.Parse(dr[0].ToString());
                                elemento.CodForma = int.Parse(dr[1].ToString());
                                elemento.DesForma = dr[2].ToString();

                                retorno.Add(elemento);
                            }
                        }

                        return retorno;

                        #endregion

                    }
                    catch (Exception)
                    {
                        throw;
                    }
                }
        
                public FormasEntidad FormasConsultarDetalle(String conexion, String conexionBitacora, FormasEntidad forma, BitacorasEntidad _bitacora)
                {
                    FormasEntidad retorno = new FormasEntidad();
                    DataSet rowsAffected;

                    #region PARAMETROS

                    SqlParameter[] paramTransaccion = new SqlParameter[]
                    {
                        new SqlParameter("@piId_Forma", forma.IdForma)
                    };

                    #endregion

                    #region KeyValuePair LIST

                    List<KeyValuePair<string, string>> itemConsulta = new List<KeyValuePair<string, string>>();
                    itemConsulta.Add(helper.CrearKeyValuePairItem("@piId_Forma", forma.IdForma.ToString()));

                    #endregion

                    try
                    {

                        #region CONSULTAR DETALLE

                        rowsAffected = transaccionDA.TransaccionConsultaDetalle(conexion, conexionBitacora, "Formas_Consulta_Detalle", paramTransaccion, EnumTipoBitacora.CONSULTAR, itemConsulta, "Formas_Consulta_Detalle", _bitacora);
                        if (!rowsAffected.Equals(null))
                        {
                            retorno.IdForma = int.Parse(rowsAffected.Tables[0].Rows[0][0].ToString());
                            retorno.CodForma = int.Parse(rowsAffected.Tables[0].Rows[0][1].ToString());
                            retorno.DesForma = rowsAffected.Tables[0].Rows[0][2].ToString(); 
                            retorno.IndMetodoInsercion = rowsAffected.Tables[0].Rows[0][3].ToString();
                            if (rowsAffected.Tables[0].Rows[0][4].ToString().Length > 0)
                                retorno.FechaIngreso = DateTime.Parse(rowsAffected.Tables[0].Rows[0][4].ToString());
                            else
                                retorno.FechaIngreso = null;
                            retorno.CodUsuarioIngreso = rowsAffected.Tables[0].Rows[0][5].ToString();
                            if (rowsAffected.Tables[0].Rows[0][6].ToString().Length > 0)
                                retorno.FechaUltimaModificacion = DateTime.Parse(rowsAffected.Tables[0].Rows[0][6].ToString());
                            else
                                retorno.FechaUltimaModificacion = null;
                            retorno.CodUsuarioUltimaModificacion = rowsAffected.Tables[0].Rows[0][7].ToString();
                            retorno.DesUsuarioIngreso = rowsAffected.Tables[0].Rows[0][8].ToString();
                            retorno.DesUsuarioUltimaModificacion = rowsAffected.Tables[0].Rows[0][9].ToString();
                        }

                        return retorno;

                        #endregion

                    }
                    catch (Exception)
                    {
                        throw;
                    }
                }
        
                public int FormasTotalFilas(String conexion, ParametrosTotalFilasEntidad entidad)
                {

                    int value;

                    #region PARAMETROS


                    SqlParameter[] paramTransaccion = new SqlParameter[]
                    {
                        new SqlParameter("@psValor_Filtro", entidad.ValorFiltro),
                        new SqlParameter("@psColumna_Filtro", entidad.ColumnaFiltro)
                    };

                    #endregion

                    try
                    {

                        #region TOTAL FILAS

                            value = transaccionDA.TransaccionRows(conexion, "Formas_Total_Filas", paramTransaccion);

                            return value;

                        #endregion

                    }
                    catch (Exception)
                    {
                        throw;
                    }
                }

            #endregion 

            #region GRADOS GRAVAMENES
        
                public RespuestaEntidad GradosGravamenesInsertar(String conexion, String conexionBitacora, GradosGravamenesEntidad gradoGravamen, BitacorasEntidad _bitacora)
                {
                    RespuestaEntidad elemento = null;
                    DataSet rowsAffected;

                    #region PARAMETROS

                    SqlParameter[] paramTransaccion = new SqlParameter[]
                    {
                        new SqlParameter("@psCod_Grado_Gravamen", gradoGravamen.CodGradoGravamen),
                        new SqlParameter("@psDes_Grado_Gravamen", gradoGravamen.DesGradoGravamen),
                        new SqlParameter("@psInd_Metodo_Insercion", gradoGravamen.IndMetodoInsercion),
                        new SqlParameter("@psCod_Usuario", gradoGravamen.CodUsuarioIngreso)

                    };

                    #endregion

                    try
                    {

                        #region INSERTAR

                        rowsAffected = transaccionDA.TransaccionInsertar(conexion, conexionBitacora, "Grados_Gravamenes_Inserta", paramTransaccion, EnumTipoBitacora.INSERTAR, _bitacora);
                        if (!rowsAffected.Equals(null))
                        {
                            elemento = new RespuestaEntidad();
                            elemento.ValorEstado = int.Parse(rowsAffected.Tables[0].Rows[0][0].ToString());
                            elemento.ValorError = int.Parse(rowsAffected.Tables[0].Rows[0][1].ToString());
                        }

                        return elemento;

                        #endregion

                    }
                    catch (Exception)
                    {
                        throw;
                    }
                }
        
                public RespuestaEntidad GradosGravamenesModificar(String conexion, String conexionBitacora, GradosGravamenesEntidad gradoGravamen, BitacorasEntidad _bitacora)
                {
                    RespuestaEntidad elemento = null;
                    DataSet rowsAffected;

                    #region PARAMETROS

                    SqlParameter[] paramTransaccion = new SqlParameter[]
                    {
                        new SqlParameter("@piId_Grado_Gravamen", gradoGravamen.IdGradoGravamen),
                        new SqlParameter("@psCod_Grado_Gravamen", gradoGravamen.CodGradoGravamen),
                        new SqlParameter("@psDes_Grado_Gravamen", gradoGravamen.DesGradoGravamen),
                        new SqlParameter("@psInd_Metodo_Insercion", gradoGravamen.IndMetodoInsercion),
                        new SqlParameter("@psCod_Usuario", gradoGravamen.CodUsuarioIngreso)
                    };

                    #endregion

                    #region KeyValuePair LIST

                    List<KeyValuePair<string, string>> itemConsulta = new List<KeyValuePair<string, string>>();
                    itemConsulta.Add(helper.CrearKeyValuePairItem("@piId_Grado_Gravamen", gradoGravamen.IdGradoGravamen.ToString()));

                    #endregion

                    try
                    {

                        #region MODIFICAR

                        rowsAffected = transaccionDA.TransaccionModificar(conexion, conexionBitacora, "Grados_Gravamenes_Actualiza", paramTransaccion, EnumTipoBitacora.ACTUALIZAR, itemConsulta, "Grados_Gravamenes_Consulta_Detalle", _bitacora);
                        if (!rowsAffected.Equals(null))
                        {
                            elemento = new RespuestaEntidad();
                            elemento.ValorEstado = int.Parse(rowsAffected.Tables[0].Rows[0][0].ToString());
                            elemento.ValorError = int.Parse(rowsAffected.Tables[0].Rows[0][1].ToString());
                        }

                        return elemento;

                        #endregion

                    }
                    catch (Exception)
                    {
                        throw;
                    }
                }
        
                public RespuestaEntidad GradosGravamenesEliminar(String conexion, String conexionBitacora, GradosGravamenesEntidad gradoGravamen, BitacorasEntidad _bitacora)
                {
                    RespuestaEntidad elemento = null;
                    DataSet rowsAffected;

                    #region PARAMETROS

                    SqlParameter[] paramTransaccion = new SqlParameter[]
                    {
                        new SqlParameter("@piId_Grado_Gravamen", gradoGravamen.IdGradoGravamen)
                    };

                    #endregion

                    #region KeyValuePair LIST

                    List<KeyValuePair<string, string>> itemConsulta = new List<KeyValuePair<string, string>>();
                    itemConsulta.Add(helper.CrearKeyValuePairItem("@piId_Grado_Gravamen", gradoGravamen.IdGradoGravamen.ToString()));

                    #endregion

                    try
                    {

                        #region ELIMINAR

                        rowsAffected = transaccionDA.TransaccionEliminar(conexion, conexionBitacora, "Grados_Gravamenes_Elimina", paramTransaccion, EnumTipoBitacora.ACTUALIZAR, itemConsulta, "Grados_Gravamenes_Consulta_Detalle", _bitacora);
                        if (!rowsAffected.Equals(null))
                        {
                            elemento = new RespuestaEntidad();
                            elemento.ValorEstado = int.Parse(rowsAffected.Tables[0].Rows[0][0].ToString());
                            elemento.ValorError = int.Parse(rowsAffected.Tables[0].Rows[0][1].ToString());
                        }

                        return elemento;

                        #endregion

                    }
                    catch (Exception)
                    {
                        throw;
                    }
                }

                public List<GradosGravamenesEntidad> GradosGravamenesConsultar(String conexion, ParametrosConsultaEntidad entidad)
                {
                    List<GradosGravamenesEntidad> retorno = new List<GradosGravamenesEntidad>();
                    GradosGravamenesEntidad elemento;
                    DataSet rowsAffected;

                    #region PARAMETROS

                    SqlParameter[] paramTransaccion = new SqlParameter[]
                    {
                       new SqlParameter("@piIndice_Inicio_Fila", entidad.IndiceInicioFila),
                       new SqlParameter("@piMaximo_Filas", entidad.MaximoFilas),
                       new SqlParameter("@psValores_Filtro", entidad.ValorFiltro),
                       new SqlParameter("@psColumnas_Filtros", entidad.ColumnaFiltro),
                       new SqlParameter("@psColumna_Ordenar", entidad.ColumnaOrdenar)
                    };

                    #endregion

                    try
                    {

                        #region CONSULTAR

                        rowsAffected = transaccionDA.TransaccionConsulta(conexion, "Grados_Gravamenes_Consulta", paramTransaccion);
                        if (!rowsAffected.Equals(null))
                        {
                            foreach (DataRow dr in rowsAffected.Tables[0].Rows)
                            {
                                elemento = new GradosGravamenesEntidad();
                                elemento.IdGradoGravamen = int.Parse(dr[0].ToString());
                                elemento.CodGradoGravamen = dr[1].ToString();
                                elemento.DesGradoGravamen = dr[2].ToString();

                                retorno.Add(elemento);
                            }
                        }

                        return retorno;

                        #endregion

                    }
                    catch (Exception)
                    {
                        throw;
                    }
                }
        
                public GradosGravamenesEntidad GradosGravamenesConsultarDetalle(String conexion, String conexionBitacora, GradosGravamenesEntidad gradoGravamen, BitacorasEntidad _bitacora)
                {
                    GradosGravamenesEntidad retorno = new GradosGravamenesEntidad();
                    DataSet rowsAffected;

                    #region PARAMETROS

                    SqlParameter[] paramTransaccion = new SqlParameter[]
                    {
                        new SqlParameter("@piId_Grado_Gravamen", gradoGravamen.IdGradoGravamen)
                    };

                    #endregion

                    #region KeyValuePair LIST

                    List<KeyValuePair<string, string>> itemConsulta = new List<KeyValuePair<string, string>>();
                    itemConsulta.Add(helper.CrearKeyValuePairItem("@piId_Grado_Gravamen", gradoGravamen.IdGradoGravamen.ToString()));

                    #endregion

                    try
                    {

                        #region CONSULTAR DETALLE

                        rowsAffected = transaccionDA.TransaccionConsultaDetalle(conexion, conexionBitacora, "Grados_Gravamenes_Consulta_Detalle", paramTransaccion, EnumTipoBitacora.CONSULTAR, itemConsulta, "Grados_Gravamenes_Consulta_Detalle", _bitacora);
                        if (!rowsAffected.Equals(null))
                        {
                            retorno.IdGradoGravamen = int.Parse(rowsAffected.Tables[0].Rows[0][0].ToString());
                            retorno.CodGradoGravamen = rowsAffected.Tables[0].Rows[0][1].ToString();
                            retorno.DesGradoGravamen = rowsAffected.Tables[0].Rows[0][2].ToString();
                            retorno.IndMetodoInsercion = rowsAffected.Tables[0].Rows[0][3].ToString();
                            if (rowsAffected.Tables[0].Rows[0][4].ToString().Length > 0)
                                retorno.FechaIngreso = DateTime.Parse(rowsAffected.Tables[0].Rows[0][4].ToString());
                            else
                                retorno.FechaIngreso = null;
                            retorno.CodUsuarioIngreso = rowsAffected.Tables[0].Rows[0][5].ToString();
                            if (rowsAffected.Tables[0].Rows[0][6].ToString().Length > 0)
                                retorno.FechaUltimaModificacion = DateTime.Parse(rowsAffected.Tables[0].Rows[0][6].ToString());
                            else
                                retorno.FechaUltimaModificacion = null;
                            retorno.CodUsuarioUltimaModificacion = rowsAffected.Tables[0].Rows[0][7].ToString();
                            retorno.DesUsuarioIngreso = rowsAffected.Tables[0].Rows[0][8].ToString();
                            retorno.DesUsuarioUltimaModificacion = rowsAffected.Tables[0].Rows[0][9].ToString();
                        }

                        return retorno;

                        #endregion

                    }
                    catch (Exception)
                    {
                        throw;
                    }
                }
        
                public int GradosGravamenesTotalFilas(String conexion, ParametrosTotalFilasEntidad entidad)
                {

                    int value;

                    #region PARAMETROS

                    SqlParameter[] paramTransaccion = new SqlParameter[]
                    {
                        new SqlParameter("@psValor_Filtro", entidad.ValorFiltro),
                        new SqlParameter("@psColumna_Filtro", entidad.ColumnaFiltro)
                    };

                    #endregion

                    try
                    {

                        #region TOTAL FILAS

                            value = transaccionDA.TransaccionRows(conexion, "Grados_Gravamenes_Total_Filas", paramTransaccion);

                            return value;

                        #endregion

                    }
                    catch (Exception)
                    {
                        throw;
                    }
                }

                public List<ListaEntidad> GradosGravamenesLista(String conexion, String filtro)
                {
                    List<ListaEntidad> retorno = new List<ListaEntidad>();
                    ListaEntidad elemento;
                    DataSet rowsAffected;

                    #region PARAMETROS

                    SqlParameter[] paramTransaccion = new SqlParameter[]
                    {
                        new SqlParameter("@psFiltro", filtro)
                    };

                    #endregion

                    try
                    {

                        #region LISTA

                        rowsAffected = transaccionDA.TransaccionConsulta(conexion, "Grados_Gravamenes_Lista", paramTransaccion);
                        if (!rowsAffected.Equals(null))
                        {
                            foreach (DataRow dr in rowsAffected.Tables[0].Rows)
                            {
                                elemento = new ListaEntidad();
                                elemento.Valor = dr[0].ToString();
                                elemento.Texto = dr[1].ToString();

                                retorno.Add(elemento);
                            }
                        }
                        return retorno;

                        #endregion

                    }
                    catch (Exception)
                    {
                        throw;
                    }
                }

            #endregion 

            #region GRUPOS FINANCIEROS
        
                public RespuestaEntidad GruposFinancierosInsertar(String conexion, String conexionBitacora, GruposFinancierosEntidad grupoFinanciero, BitacorasEntidad _bitacora)
                {
                    RespuestaEntidad elemento = null;
                    DataSet rowsAffected;

                    #region PARAMETROS

                    SqlParameter[] paramTransaccion = new SqlParameter[]
                    {
                        new SqlParameter("@piCod_Grupo_Financiero", grupoFinanciero.CodGrupoFinanciero),
                        new SqlParameter("@piId_Tipo_Grupo_Financiero", grupoFinanciero.IdTipoGrupoFinanciero),
                        new SqlParameter("@psDes_Grupo_Financiero", grupoFinanciero.DesGrupoFinanciero),
                        new SqlParameter("@psInd_Metodo_Insercion", grupoFinanciero.IndMetodoInsercion),
                        new SqlParameter("@psCod_Usuario", grupoFinanciero.CodUsuarioIngreso)
                    };

                    #endregion

                    try
                    {

                        #region INSERTAR

                        rowsAffected = transaccionDA.TransaccionInsertar(conexion, conexionBitacora, "Grupos_Financieros_Inserta", paramTransaccion, EnumTipoBitacora.INSERTAR, _bitacora);
                        if (!rowsAffected.Equals(null))
                        {
                            elemento = new RespuestaEntidad();
                            elemento.ValorEstado = int.Parse(rowsAffected.Tables[0].Rows[0][0].ToString());
                            elemento.ValorError = int.Parse(rowsAffected.Tables[0].Rows[0][1].ToString());
                        }

                        return elemento;

                        #endregion

                    }
                    catch (Exception)
                    {
                        throw;
                    }
                }
        
                public RespuestaEntidad GruposFinancierosModificar(String conexion, String conexionBitacora, GruposFinancierosEntidad grupoFinanciero, BitacorasEntidad _bitacora)
                {
                    RespuestaEntidad elemento = null;
                    DataSet rowsAffected;

                    #region PARAMETROS

                    SqlParameter[] paramTransaccion = new SqlParameter[]
                    {
                        new SqlParameter("@piId_Grupo_Financiero", grupoFinanciero.IdGrupoFinanciero),
                        new SqlParameter("@piCod_Grupo_Financiero", grupoFinanciero.CodGrupoFinanciero),
                        new SqlParameter("@piId_Tipo_Grupo_Financiero", grupoFinanciero.IdTipoGrupoFinanciero),
                        new SqlParameter("@psDes_Grupo_Financiero", grupoFinanciero.DesGrupoFinanciero),
                        new SqlParameter("@psInd_Metodo_Insercion", grupoFinanciero.IndMetodoInsercion),
                        new SqlParameter("@psCod_Usuario", grupoFinanciero.CodUsuarioIngreso)
                    };

                    #endregion

                    #region KeyValuePair LIST

                    List<KeyValuePair<string, string>> itemConsulta = new List<KeyValuePair<string, string>>();
                    itemConsulta.Add(helper.CrearKeyValuePairItem("@piId_Grupo_Financiero", grupoFinanciero.IdGrupoFinanciero.ToString()));

                    #endregion

                    try
                    {

                        #region MODIFICAR

                        rowsAffected = transaccionDA.TransaccionModificar(conexion, conexionBitacora, "Grupos_Financieros_Actualiza", paramTransaccion, EnumTipoBitacora.ACTUALIZAR, itemConsulta, "Grupos_Financieros_Consulta_Detalle", _bitacora);
                        if (!rowsAffected.Equals(null))
                        {
                            elemento = new RespuestaEntidad();
                            elemento.ValorEstado = int.Parse(rowsAffected.Tables[0].Rows[0][0].ToString());
                            elemento.ValorError = int.Parse(rowsAffected.Tables[0].Rows[0][1].ToString());
                        }

                        return elemento;

                        #endregion

                    }
                    catch (Exception)
                    {
                        throw;
                    }
                }
        
                public RespuestaEntidad GruposFinancierosEliminar(String conexion, String conexionBitacora, GruposFinancierosEntidad grupoFinanciero, BitacorasEntidad _bitacora)
                {
                    RespuestaEntidad elemento = null;
                    DataSet rowsAffected;

                    #region PARAMETROS

                    SqlParameter[] paramTransaccion = new SqlParameter[]
                    {
                        new SqlParameter("@piId_Grupo_Financiero", grupoFinanciero.IdGrupoFinanciero)
                    };

                    #endregion

                    #region KeyValuePair LIST

                    List<KeyValuePair<string, string>> itemConsulta = new List<KeyValuePair<string, string>>();
                    itemConsulta.Add(helper.CrearKeyValuePairItem("@piId_Grupo_Financiero", grupoFinanciero.IdGrupoFinanciero.ToString()));

                    #endregion

                    try
                    {

                        #region ELIMINAR

                        rowsAffected = transaccionDA.TransaccionEliminar(conexion, conexionBitacora, "Grupos_Financieros_Elimina", paramTransaccion, EnumTipoBitacora.ELIMINAR, itemConsulta, "Grupos_Financieros_Consulta_Detalle", _bitacora);
                        if (!rowsAffected.Equals(null))
                        {
                            elemento = new RespuestaEntidad();
                            elemento.ValorEstado = int.Parse(rowsAffected.Tables[0].Rows[0][0].ToString());
                            elemento.ValorError = int.Parse(rowsAffected.Tables[0].Rows[0][1].ToString());
                        }

                        return elemento;

                        #endregion

                    }
                    catch (Exception)
                    {
                        throw;
                    }
                }

                public List<GruposFinancierosEntidad> GruposFinancierosConsultar(String conexion, ParametrosConsultaEntidad entidad)
                {
                    List<GruposFinancierosEntidad> retorno = new List<GruposFinancierosEntidad>();
                    GruposFinancierosEntidad elemento;
                    DataSet rowsAffected;

                    #region PARAMETROS

                    SqlParameter[] paramTransaccion = new SqlParameter[]
                    {
                       new SqlParameter("@piIndice_Inicio_Fila", entidad.IndiceInicioFila),
                       new SqlParameter("@piMaximo_Filas", entidad.MaximoFilas),
                       new SqlParameter("@psValores_Filtro", entidad.ValorFiltro),
                       new SqlParameter("@psColumnas_Filtros", entidad.ColumnaFiltro),
                       new SqlParameter("@psColumna_Ordenar", entidad.ColumnaOrdenar)
                    }; ;

                    #endregion

                    try
                    {

                        #region CONSULTAR

                        rowsAffected = transaccionDA.TransaccionConsulta(conexion, "Grupos_Financieros_Consulta", paramTransaccion);
                        if (!rowsAffected.Equals(null))
                        {
                            foreach (DataRow dr in rowsAffected.Tables[0].Rows)
                            {
                                elemento = new GruposFinancierosEntidad();
                                elemento.IdGrupoFinanciero = int.Parse(dr[0].ToString());
                                elemento.IdTipoGrupoFinanciero = int.Parse(dr[1].ToString());
                                elemento.CodGrupoFinanciero = int.Parse(dr[2].ToString());
                                elemento.CodTipoGrupoFinanciero = int.Parse(dr[3].ToString());
                                elemento.DesGrupoFinanciero = dr[4].ToString();
                                elemento.DesTipoGrupoFinanciero = dr[5].ToString();

                                retorno.Add(elemento);
                            }
                        }

                        return retorno;

                        #endregion

                    }
                    catch (Exception)
                    {
                        throw;
                    }
                }
        
                public GruposFinancierosEntidad GruposFinancierosConsultarDetalle(String conexion, String conexionBitacora, GruposFinancierosEntidad grupoFinanciero, BitacorasEntidad _bitacora)
                {
                    GruposFinancierosEntidad retorno = new GruposFinancierosEntidad();
                    DataSet rowsAffected;

                    #region PARAMETROS

                    SqlParameter[] paramTransaccion = new SqlParameter[]
                    {
                        new SqlParameter("@piId_Grupo_Financiero", grupoFinanciero.IdGrupoFinanciero)
                    };

                    #endregion

                    #region KeyValuePair LIST

                    List<KeyValuePair<string, string>> itemConsulta = new List<KeyValuePair<string, string>>();
                    itemConsulta.Add(helper.CrearKeyValuePairItem("@piId_Grupo_Financiero", grupoFinanciero.IdGrupoFinanciero.ToString()));

                    #endregion

                    try
                    {

                        #region CONSULTAR DETALLE

                        rowsAffected = transaccionDA.TransaccionConsultaDetalle(conexion, conexionBitacora, "Grupos_Financieros_Consulta_Detalle", paramTransaccion, EnumTipoBitacora.CONSULTAR, itemConsulta, "Grupos_Financieros_Consulta_Detalle", _bitacora);
                        if (!rowsAffected.Equals(null))
                        {
                            retorno.IdGrupoFinanciero = int.Parse(rowsAffected.Tables[0].Rows[0][0].ToString());
                            retorno.IdTipoGrupoFinanciero = int.Parse(rowsAffected.Tables[0].Rows[0][1].ToString());
                            retorno.CodGrupoFinanciero = int.Parse(rowsAffected.Tables[0].Rows[0][2].ToString());
                            retorno.DesGrupoFinanciero = rowsAffected.Tables[0].Rows[0][3].ToString();
                            retorno.CodTipoGrupoFinanciero = int.Parse(rowsAffected.Tables[0].Rows[0][4].ToString());
                            retorno.DesTipoGrupoFinanciero = rowsAffected.Tables[0].Rows[0][5].ToString();
                            retorno.IndMetodoInsercion = rowsAffected.Tables[0].Rows[0][6].ToString();
                            if (rowsAffected.Tables[0].Rows[0][7].ToString().Length > 0)
                                retorno.FechaIngreso = DateTime.Parse(rowsAffected.Tables[0].Rows[0][7].ToString());
                            else
                                retorno.FechaIngreso = null;
                            retorno.CodUsuarioIngreso = rowsAffected.Tables[0].Rows[0][8].ToString();
                            if (rowsAffected.Tables[0].Rows[0][9].ToString().Length > 0)
                                retorno.FechaUltimaModificacion = DateTime.Parse(rowsAffected.Tables[0].Rows[0][9].ToString());
                            else
                                retorno.FechaUltimaModificacion = null;
                            retorno.CodUsuarioUltimaModificacion = rowsAffected.Tables[0].Rows[0][10].ToString();
                            retorno.DesUsuarioIngreso = rowsAffected.Tables[0].Rows[0][11].ToString();
                            retorno.DesUsuarioUltimaModificacion = rowsAffected.Tables[0].Rows[0][12].ToString();                            
                        }

                        return retorno;

                        #endregion

                    }
                    catch (Exception)
                    {
                        throw;
                    }
                }
        
                public int GruposFinancierosTotalFilas(String conexion, ParametrosTotalFilasEntidad entidad)
                {

                    int value;

                    #region PARAMETROS

                    SqlParameter[] paramTransaccion = new SqlParameter[]
                    {
                        new SqlParameter("@psValor_Filtro", entidad.ValorFiltro),
                        new SqlParameter("@psColumna_Filtro", entidad.ColumnaFiltro)
                    };

                    #endregion

                    try
                    {

                        #region TOTAL FILAS

                            value = transaccionDA.TransaccionRows(conexion, "Grupos_Financieros_Total_Filas", paramTransaccion);

                            return value;

                        #endregion

                    }
                    catch (Exception)
                    {
                        throw;
                    }
                }

            #endregion 

            #region GRUPOS RIESGOS DEUDORES
        
                public RespuestaEntidad GruposRiesgosDeudoresInsertar(String conexion, String conexionBitacora, GruposRiesgosDeudoresEntidad grupoRiesgoDeudor, BitacorasEntidad _bitacora)
                {
                    RespuestaEntidad elemento = null;
                    DataSet rowsAffected;

                    #region PARAMETROS

                    SqlParameter[] paramTransaccion = new SqlParameter[]
                    {
                        new SqlParameter("@psCod_Grupo_Riesgo_Deudor", grupoRiesgoDeudor.CodGrupoRiesgoDeudor),
                        new SqlParameter("@psDes_Grupo_Riesgo_Deudor", grupoRiesgoDeudor.DesGrupoRiesgoDeudor),
                        new SqlParameter("@psInd_Metodo_Insercion", grupoRiesgoDeudor.IndMetodoInsercion),
                        new SqlParameter("@psCod_Usuario", grupoRiesgoDeudor.CodUsuarioIngreso)
                    };

                    #endregion

                    try
                    {

                        #region INSERTAR

                        rowsAffected = transaccionDA.TransaccionInsertar(conexion, conexionBitacora, "Grupos_Riesgos_Deudores_Inserta", paramTransaccion, EnumTipoBitacora.INSERTAR, _bitacora);
                        if (!rowsAffected.Equals(null))
                        {
                            elemento = new RespuestaEntidad();
                            elemento.ValorEstado = int.Parse(rowsAffected.Tables[0].Rows[0][0].ToString());
                            elemento.ValorError = int.Parse(rowsAffected.Tables[0].Rows[0][1].ToString());
                        }

                        return elemento;

                        #endregion

                    }
                    catch (Exception)
                    {
                        throw;
                    }
                }
        
                public RespuestaEntidad GruposRiesgosDeudoresModificar(String conexion, String conexionBitacora, GruposRiesgosDeudoresEntidad grupoRiesgoDeudor, BitacorasEntidad _bitacora)
                {
                    RespuestaEntidad elemento = null;
                    DataSet rowsAffected;

                    #region PARAMETROS

                    SqlParameter[] paramTransaccion = new SqlParameter[]
                    {
                        new SqlParameter("@piId_Grupo_Riesgo_Deudor", grupoRiesgoDeudor.IdGrupoRiesgoDeudor),
                        new SqlParameter("@psCod_Grupo_Riesgo_Deudor", grupoRiesgoDeudor.CodGrupoRiesgoDeudor),
                        new SqlParameter("@psDes_Grupo_Riesgo_Deudor", grupoRiesgoDeudor.DesGrupoRiesgoDeudor),
                        new SqlParameter("@psInd_Metodo_Insercion", grupoRiesgoDeudor.IndMetodoInsercion),
                        new SqlParameter("@psCod_Usuario", grupoRiesgoDeudor.CodUsuarioIngreso)
                    };

                    #endregion

                    #region KeyValuePair LIST

                    List<KeyValuePair<string, string>> itemConsulta = new List<KeyValuePair<string, string>>();
                    itemConsulta.Add(helper.CrearKeyValuePairItem("@piId_Grupo_Riesgo_Deudor", grupoRiesgoDeudor.IdGrupoRiesgoDeudor.ToString()));

                    #endregion

                    try
                    {

                        #region MODIFICAR

                        rowsAffected = transaccionDA.TransaccionModificar(conexion, conexionBitacora, "Grupos_Riesgos_Deudores_Actualiza", paramTransaccion, EnumTipoBitacora.ACTUALIZAR, itemConsulta, "Grupos_Riesgos_Deudores_Consulta_Detalle", _bitacora);
                        if (!rowsAffected.Equals(null))
                        {
                            elemento = new RespuestaEntidad();
                            elemento.ValorEstado = int.Parse(rowsAffected.Tables[0].Rows[0][0].ToString());
                            elemento.ValorError = int.Parse(rowsAffected.Tables[0].Rows[0][1].ToString());
                        }

                        return elemento;

                        #endregion

                    }
                    catch (Exception)
                    {
                        throw;
                    }
                }
        
                public RespuestaEntidad GruposRiesgosDeudoresEliminar(String conexion, String conexionBitacora, GruposRiesgosDeudoresEntidad grupoRiesgoDeudor, BitacorasEntidad _bitacora)
                {
                    RespuestaEntidad elemento = null;
                    DataSet rowsAffected;

                    #region PARAMETROS

                    SqlParameter[] paramTransaccion = new SqlParameter[]
                    {
                        new SqlParameter("@piId_Grupo_Riesgo_Deudor", grupoRiesgoDeudor.IdGrupoRiesgoDeudor)
                    };

                    #endregion

                    #region KeyValuePair LIST

                    List<KeyValuePair<string, string>> itemConsulta = new List<KeyValuePair<string, string>>();
                    itemConsulta.Add(helper.CrearKeyValuePairItem("@piId_Grupo_Riesgo_Deudor", grupoRiesgoDeudor.IdGrupoRiesgoDeudor.ToString()));

                    #endregion

                    try
                    {

                        #region ELIMINAR

                        rowsAffected = transaccionDA.TransaccionEliminar(conexion, conexionBitacora, "Grupos_Riesgos_Deudores_Elimina", paramTransaccion, EnumTipoBitacora.ELIMINAR, itemConsulta, "Grupos_Riesgos_Deudores_Consulta_Detalle", _bitacora);
                        if (!rowsAffected.Equals(null))
                        {
                            elemento = new RespuestaEntidad();
                            elemento.ValorEstado = int.Parse(rowsAffected.Tables[0].Rows[0][0].ToString());
                            elemento.ValorError = int.Parse(rowsAffected.Tables[0].Rows[0][1].ToString());
                        }

                        return elemento;

                        #endregion

                    }
                    catch (Exception)
                    {
                        throw;
                    }
                }

                public List<GruposRiesgosDeudoresEntidad> GruposRiesgosDeudoresConsultar(String conexion, ParametrosConsultaEntidad entidad)
                {
                    List<GruposRiesgosDeudoresEntidad> retorno = new List<GruposRiesgosDeudoresEntidad>();
                    GruposRiesgosDeudoresEntidad elemento;
                    DataSet rowsAffected;

                    #region PARAMETROS

                    SqlParameter[] paramTransaccion = new SqlParameter[]
                    {
                        new SqlParameter("@piIndice_Inicio_Fila", entidad.IndiceInicioFila),
                        new SqlParameter("@piMaximo_Filas", entidad.MaximoFilas),
                        new SqlParameter("@psValores_Filtro", entidad.ValorFiltro),
                        new SqlParameter("@psColumnas_Filtros", entidad.ColumnaFiltro),
                        new SqlParameter("@psColumna_Ordenar", entidad.ColumnaOrdenar)
                    };

                    #endregion

                    try
                    {

                        #region CONSULTAR

                        rowsAffected = transaccionDA.TransaccionConsulta(conexion, "Grupos_Riesgos_Deudores_Consulta", paramTransaccion);
                        if (!rowsAffected.Equals(null))
                        {
                            foreach (DataRow dr in rowsAffected.Tables[0].Rows)
                            {
                                elemento = new GruposRiesgosDeudoresEntidad();
                                elemento.IdGrupoRiesgoDeudor = int.Parse(dr[0].ToString());
                                elemento.CodGrupoRiesgoDeudor = dr[1].ToString();
                                elemento.DesGrupoRiesgoDeudor = dr[2].ToString();

                                retorno.Add(elemento);
                            }
                        }

                        return retorno;

                        #endregion

                    }
                    catch (Exception)
                    {
                        throw;
                    }
                }
        
                public GruposRiesgosDeudoresEntidad GruposRiesgosDeudoresConsultarDetalle(String conexion, String conexionBitacora, GruposRiesgosDeudoresEntidad grupoRiesgoDeudor, BitacorasEntidad _bitacora)
                {
                    GruposRiesgosDeudoresEntidad retorno = new GruposRiesgosDeudoresEntidad();
                    DataSet rowsAffected;

                    #region PARAMETROS

                    SqlParameter[] paramTransaccion = new SqlParameter[]
                    {
                        new SqlParameter("@piId_Grupo_Riesgo_Deudor", grupoRiesgoDeudor.IdGrupoRiesgoDeudor)
                    };

                    #endregion

                    #region KeyValuePair LIST

                    List<KeyValuePair<string, string>> itemConsulta = new List<KeyValuePair<string, string>>();
                    itemConsulta.Add(helper.CrearKeyValuePairItem("@piId_Grupo_Riesgo_Deudor", grupoRiesgoDeudor.IdGrupoRiesgoDeudor.ToString()));

                    #endregion

                    try
                    {

                        #region CONSULTAR DETALLE

                        rowsAffected = transaccionDA.TransaccionConsultaDetalle(conexion, conexionBitacora, "Grupos_Riesgos_Deudores_Consulta_Detalle", paramTransaccion, EnumTipoBitacora.CONSULTAR, itemConsulta, "Grupos_Riesgos_Deudores_Consulta_Detalle", _bitacora);
                        if (!rowsAffected.Equals(null))
                        {
                            retorno.IdGrupoRiesgoDeudor = int.Parse(rowsAffected.Tables[0].Rows[0][0].ToString());
                            retorno.CodGrupoRiesgoDeudor = rowsAffected.Tables[0].Rows[0][1].ToString();
                            retorno.DesGrupoRiesgoDeudor = rowsAffected.Tables[0].Rows[0][2].ToString();
                            retorno.IndMetodoInsercion = rowsAffected.Tables[0].Rows[0][3].ToString();
                            if (rowsAffected.Tables[0].Rows[0][4].ToString().Length > 0)
                                retorno.FechaIngreso = DateTime.Parse(rowsAffected.Tables[0].Rows[0][4].ToString());
                            else
                                retorno.FechaIngreso = null;
                            retorno.CodUsuarioIngreso = rowsAffected.Tables[0].Rows[0][5].ToString();
                            if (rowsAffected.Tables[0].Rows[0][6].ToString().Length > 0)
                                retorno.FechaUltimaModificacion = DateTime.Parse(rowsAffected.Tables[0].Rows[0][6].ToString());
                            else
                                retorno.FechaUltimaModificacion = null;
                            retorno.CodUsuarioUltimaModificacion = rowsAffected.Tables[0].Rows[0][7].ToString();
                            retorno.DesUsuarioIngreso = rowsAffected.Tables[0].Rows[0][8].ToString();
                            retorno.DesUsuarioUltimaModificacion = rowsAffected.Tables[0].Rows[0][9].ToString();
                        }

                        return retorno;

                        #endregion

                    }
                    catch (Exception)
                    {
                        throw;
                    }
                }
        
                public int GruposRiesgosDeudoresTotalFilas(String conexion, ParametrosTotalFilasEntidad entidad)
                {

                    int value;

                    #region PARAMETROS

                    SqlParameter[] paramTransaccion = new SqlParameter[]
                    {
                        new SqlParameter("@psValor_Filtro", entidad.ValorFiltro),
                        new SqlParameter("@psColumna_Filtro", entidad.ColumnaFiltro)
                    };

                    #endregion

                    try
                    {

                        #region TOTAL FILAS

                            value = transaccionDA.TransaccionRows(conexion, "Grupos_Riesgos_Deudores_Total_Filas", paramTransaccion);

                            return value;

                        #endregion

                    }
                    catch (Exception)
                    {
                        throw;
                    }
                }

            #endregion 

            #region INDICACIONES AJUSTES AREAS
        
                public RespuestaEntidad IndicacionesAjustesAreasInsertar(String conexion, String conexionBitacora, IndicacionesAjustesAreasEntidad indicadorAjusteArea, BitacorasEntidad _bitacora)
                {
                    RespuestaEntidad elemento = null;
                    DataSet rowsAffected;

                    #region PARAMETROS

                    SqlParameter[] paramTransaccion = new SqlParameter[]
                    {
                        new SqlParameter("@piCod_Indicacion_Ajuste_Area", indicadorAjusteArea.CodIndicacionAjusteArea),
                        new SqlParameter("@psDes_Indicacion_Ajuste_Area", indicadorAjusteArea.DesIndicacionAjusteArea),
                        new SqlParameter("@psInd_Metodo_Insercion", indicadorAjusteArea.IndMetodoInsercion),
                        new SqlParameter("@psCod_Usuario", indicadorAjusteArea.CodUsuarioIngreso)
                    };

                    #endregion

                    try
                    {

                        #region INSERTAR

                        rowsAffected = transaccionDA.TransaccionInsertar(conexion, conexionBitacora, "Indicaciones_Ajustes_Areas_Inserta", paramTransaccion, EnumTipoBitacora.INSERTAR, _bitacora);
                        if (!rowsAffected.Equals(null))
                        {
                            elemento = new RespuestaEntidad();
                            elemento.ValorEstado = int.Parse(rowsAffected.Tables[0].Rows[0][0].ToString());
                            elemento.ValorError = int.Parse(rowsAffected.Tables[0].Rows[0][1].ToString());
                        }

                        return elemento;

                        #endregion

                    }
                    catch (Exception)
                    {
                        throw;
                    }
                }
        
                public RespuestaEntidad IndicacionesAjustesAreasModificar(String conexion, String conexionBitacora, IndicacionesAjustesAreasEntidad indicadorAjusteArea, BitacorasEntidad _bitacora)
                {
                    RespuestaEntidad elemento = null;
                    DataSet rowsAffected;

                    #region PARAMETROS

                    SqlParameter[] paramTransaccion = new SqlParameter[]
                    {
                        new SqlParameter("@piId_Indicacion_Ajuste_Area", indicadorAjusteArea.IdIndicacionAjusteArea),
                        new SqlParameter("@piCod_Indicacion_Ajuste_Area", indicadorAjusteArea.CodIndicacionAjusteArea),
                        new SqlParameter("@psDes_Indicacion_Ajuste_Area", indicadorAjusteArea.DesIndicacionAjusteArea),
                        new SqlParameter("@psInd_Metodo_Insercion", indicadorAjusteArea.IndMetodoInsercion),
                        new SqlParameter("@psCod_Usuario", indicadorAjusteArea.CodUsuarioIngreso)
                    };

                    #endregion

                    #region KeyValuePair LIST

                    List<KeyValuePair<string, string>> itemConsulta = new List<KeyValuePair<string, string>>();
                    itemConsulta.Add(helper.CrearKeyValuePairItem("@piId_Indicacion_Ajuste_Area", indicadorAjusteArea.IdIndicacionAjusteArea.ToString()));

                    #endregion


                    try
                    {

                        #region MODIFICAR

                        rowsAffected = transaccionDA.TransaccionModificar(conexion, conexionBitacora, "Indicaciones_Ajustes_Areas_Actualiza", paramTransaccion, EnumTipoBitacora.ACTUALIZAR, itemConsulta, "Indicaciones_Ajustes_Areas_Consulta_Detalle", _bitacora);
                        if (!rowsAffected.Equals(null))
                        {
                            elemento = new RespuestaEntidad();
                            elemento.ValorEstado = int.Parse(rowsAffected.Tables[0].Rows[0][0].ToString());
                            elemento.ValorError = int.Parse(rowsAffected.Tables[0].Rows[0][1].ToString());
                        }

                        return elemento;

                        #endregion

                    }
                    catch (Exception)
                    {
                        throw;
                    }
                }
        
                public RespuestaEntidad IndicacionesAjustesAreasEliminar(String conexion, String conexionBitacora, IndicacionesAjustesAreasEntidad indicadorAjusteArea, BitacorasEntidad _bitacora)
                {
                    RespuestaEntidad elemento = null;
                    DataSet rowsAffected;

                    #region PARAMETROS

                    SqlParameter[] paramTransaccion = new SqlParameter[]
                    {
                        new SqlParameter("@piId_Indicacion_Ajuste_Area", indicadorAjusteArea.IdIndicacionAjusteArea)
                    };

                    #endregion

                    #region KeyValuePair LIST

                    List<KeyValuePair<string, string>> itemConsulta = new List<KeyValuePair<string, string>>();
                    itemConsulta.Add(helper.CrearKeyValuePairItem("@piId_Indicacion_Ajuste_Area", indicadorAjusteArea.IdIndicacionAjusteArea.ToString()));

                    #endregion

                    try
                    {

                        #region ELIMINAR

                        rowsAffected = transaccionDA.TransaccionEliminar(conexion, conexionBitacora, "Indicaciones_Ajustes_Areas_Elimina", paramTransaccion, EnumTipoBitacora.ELIMINAR, itemConsulta, "Indicaciones_Ajustes_Areas_Consulta_Detalle", _bitacora);
                        if (!rowsAffected.Equals(null))
                        {
                            elemento = new RespuestaEntidad();
                            elemento.ValorEstado = int.Parse(rowsAffected.Tables[0].Rows[0][0].ToString());
                            elemento.ValorError = int.Parse(rowsAffected.Tables[0].Rows[0][1].ToString());
                        }

                        return elemento;

                        #endregion

                    }
                    catch (Exception)
                    {
                        throw;
                    }
                }

                public List<IndicacionesAjustesAreasEntidad> IndicacionesAjustesAreasConsultar(String conexion, ParametrosConsultaEntidad entidad)
                {
                    List<IndicacionesAjustesAreasEntidad> retorno = new List<IndicacionesAjustesAreasEntidad>();
                    IndicacionesAjustesAreasEntidad elemento;
                    DataSet rowsAffected;

                    #region PARAMETROS

                    SqlParameter[] paramTransaccion = new SqlParameter[]
                    {
                       new SqlParameter("@piIndice_Inicio_Fila", entidad.IndiceInicioFila),
                       new SqlParameter("@piMaximo_Filas", entidad.MaximoFilas),
                       new SqlParameter("@psValores_Filtro", entidad.ValorFiltro),
                       new SqlParameter("@psColumnas_Filtros", entidad.ColumnaFiltro),
                       new SqlParameter("@psColumna_Ordenar", entidad.ColumnaOrdenar)
                    };

                    #endregion

                    try
                    {

                        #region CONSULTAR

                        rowsAffected = transaccionDA.TransaccionConsulta(conexion, "Indicaciones_Ajustes_Areas_Consulta", paramTransaccion);
                        if (!rowsAffected.Equals(null))
                        {
                            foreach (DataRow dr in rowsAffected.Tables[0].Rows)
                            {
                                elemento = new IndicacionesAjustesAreasEntidad();
                                elemento.IdIndicacionAjusteArea = int.Parse(dr[0].ToString());
                                elemento.CodIndicacionAjusteArea = int.Parse(dr[1].ToString());
                                elemento.DesIndicacionAjusteArea = dr[2].ToString();

                                retorno.Add(elemento);
                            }
                        }

                        return retorno;

                        #endregion

                    }
                    catch (Exception)
                    {
                        throw;
                    }
                }
        
                public IndicacionesAjustesAreasEntidad IndicacionesAjustesAreasConsultarDetalle(String conexion, String conexionBitacora, IndicacionesAjustesAreasEntidad indicadorAjusteArea, BitacorasEntidad _bitacora)
                {
                    IndicacionesAjustesAreasEntidad retorno = new IndicacionesAjustesAreasEntidad();
                    DataSet rowsAffected;

                    #region PARAMETROS

                    SqlParameter[] paramTransaccion = new SqlParameter[]
                    {
                        new SqlParameter("@piId_Indicacion_Ajuste_Area", indicadorAjusteArea.IdIndicacionAjusteArea)
                    };

                    #endregion


                    #region KeyValuePair LIST

                    List<KeyValuePair<string, string>> itemConsulta = new List<KeyValuePair<string, string>>();
                    itemConsulta.Add(helper.CrearKeyValuePairItem("@piId_Indicacion_Ajuste_Area", indicadorAjusteArea.IdIndicacionAjusteArea.ToString()));

                    #endregion

                    try
                    {

                        #region CONSULTAR DETALLE

                        rowsAffected = transaccionDA.TransaccionConsultaDetalle(conexion, conexionBitacora, "Indicaciones_Ajustes_Areas_Consulta_Detalle", paramTransaccion, EnumTipoBitacora.CONSULTAR, itemConsulta, "Indicaciones_Ajustes_Areas_Consulta_Detalle", _bitacora);
                        if (!rowsAffected.Equals(null))
                        {
                            retorno.IdIndicacionAjusteArea = int.Parse(rowsAffected.Tables[0].Rows[0][0].ToString());
                            retorno.CodIndicacionAjusteArea = int.Parse(rowsAffected.Tables[0].Rows[0][1].ToString());
                            retorno.DesIndicacionAjusteArea = rowsAffected.Tables[0].Rows[0][2].ToString();
                            retorno.IndMetodoInsercion = rowsAffected.Tables[0].Rows[0][3].ToString();
                            if (rowsAffected.Tables[0].Rows[0][4].ToString().Length > 0)
                                retorno.FechaIngreso = DateTime.Parse(rowsAffected.Tables[0].Rows[0][4].ToString());
                            else
                                retorno.FechaIngreso = null;
                            retorno.CodUsuarioIngreso = rowsAffected.Tables[0].Rows[0][5].ToString();
                            if (rowsAffected.Tables[0].Rows[0][6].ToString().Length > 0)
                                retorno.FechaUltimaModificacion = DateTime.Parse(rowsAffected.Tables[0].Rows[0][6].ToString());
                            else
                                retorno.FechaUltimaModificacion = null;
                            retorno.CodUsuarioUltimaModificacion = rowsAffected.Tables[0].Rows[0][7].ToString();
                            retorno.DesUsuarioIngreso = rowsAffected.Tables[0].Rows[0][8].ToString();
                            retorno.DesUsuarioUltimaModificacion = rowsAffected.Tables[0].Rows[0][9].ToString();
                        }

                        return retorno;

                        #endregion

                    }
                    catch (Exception)
                    {
                        throw;
                    }
                }
        
                public int IndicacionesAjustesAreasTotalFilas(String conexion, ParametrosTotalFilasEntidad entidad)
                {

                    int value;

                    #region PARAMETROS

                    SqlParameter[] paramTransaccion = new SqlParameter[]
                    {
                        new SqlParameter("@psValor_Filtro", entidad.ValorFiltro),
                        new SqlParameter("@psColumna_Filtro", entidad.ColumnaFiltro)
                    };

                    #endregion

                    try
                    {

                        #region TOTAL FILAS

                            value = transaccionDA.TransaccionRows(conexion, "Indicaciones_Ajustes_Areas_Total_Filas", paramTransaccion);

                            return value;

                        #endregion

                    }
                    catch (Exception)
                    {
                        throw;
                    }
                }

            #endregion 

            #region INDICADORES GENERADORES DIVISAS
        
                public RespuestaEntidad IndicadoresGeneradoresDivisasInsertar(String conexion, String conexionBitacora, IndicadoresGeneradoresDivisasEntidad indicadorGeneradorDivisa, BitacorasEntidad _bitacora)
                {
                    RespuestaEntidad elemento = null;
                    DataSet rowsAffected;

                    #region PARAMETROS

                    SqlParameter[] paramTransaccion = new SqlParameter[]
                    {
                        new SqlParameter("@piCod_Indicador_Generador_Divisa", indicadorGeneradorDivisa.CodIndicadorGeneradorDivisa),
                        new SqlParameter("@psDes_Indicador_Generador_Divisa", indicadorGeneradorDivisa.DesIndicadorGeneradorDivisa),
                        new SqlParameter("@psInd_Metodo_Insercion", indicadorGeneradorDivisa.IndMetodoInsercion),
                        new SqlParameter("@psCod_Usuario", indicadorGeneradorDivisa.CodUsuarioIngreso)
                    };

                    #endregion

                    try
                    {

                        #region INSERTAR

                        rowsAffected = transaccionDA.TransaccionInsertar(conexion, conexionBitacora, "Indicadores_Generadores_Divisas_Inserta", paramTransaccion, EnumTipoBitacora.INSERTAR, _bitacora);
                        if (!rowsAffected.Equals(null))
                        {
                            elemento = new RespuestaEntidad();
                            elemento.ValorEstado = int.Parse(rowsAffected.Tables[0].Rows[0][0].ToString());
                            elemento.ValorError = int.Parse(rowsAffected.Tables[0].Rows[0][1].ToString());
                        }

                        return elemento;

                        #endregion

                    }
                    catch (Exception)
                    {
                        throw;
                    }
                }
        
                public RespuestaEntidad IndicadoresGeneradoresDivisasModificar(String conexion, String conexionBitacora, IndicadoresGeneradoresDivisasEntidad indicadorGeneradorDivisa, BitacorasEntidad _bitacora)
                {
                    RespuestaEntidad elemento = null;
                    DataSet rowsAffected;

                    #region PARAMETROS

                    SqlParameter[] paramTransaccion = new SqlParameter[]
                    {
                        new SqlParameter("@piId_Indicador_Generador_Divisa", indicadorGeneradorDivisa.IdIndicadorGeneradorDivisa),
                        new SqlParameter("@piCod_Indicador_Generador_Divisa", indicadorGeneradorDivisa.CodIndicadorGeneradorDivisa),
                        new SqlParameter("@psDes_Indicador_Generador_Divisa", indicadorGeneradorDivisa.DesIndicadorGeneradorDivisa),
                        new SqlParameter("@psInd_Metodo_Insercion", indicadorGeneradorDivisa.IndMetodoInsercion),
                        new SqlParameter("@psCod_Usuario", indicadorGeneradorDivisa.CodUsuarioIngreso)
                    };

                    #endregion

                    #region KeyValuePair LIST

                    List<KeyValuePair<string, string>> itemConsulta = new List<KeyValuePair<string, string>>();
                    itemConsulta.Add(helper.CrearKeyValuePairItem("@piId_Indicador_Generador_Divisa", indicadorGeneradorDivisa.IdIndicadorGeneradorDivisa.ToString()));

                    #endregion

                    try
                    {

                        #region MODIFICAR

                        rowsAffected = transaccionDA.TransaccionModificar(conexion, conexionBitacora, "Indicadores_Generadores_Divisas_Actualiza", paramTransaccion, EnumTipoBitacora.ACTUALIZAR, itemConsulta, "Indicadores_Generadores_Divisas_Consulta_Detalle", _bitacora);
                        if (!rowsAffected.Equals(null))
                        {
                            elemento = new RespuestaEntidad();
                            elemento.ValorEstado = int.Parse(rowsAffected.Tables[0].Rows[0][0].ToString());
                            elemento.ValorError = int.Parse(rowsAffected.Tables[0].Rows[0][1].ToString());
                        }

                        return elemento;

                        #endregion

                    }
                    catch (Exception)
                    {
                        throw;
                    }
                }
        
                public RespuestaEntidad IndicadoresGeneradoresDivisasEliminar(String conexion, String conexionBitacora, IndicadoresGeneradoresDivisasEntidad indicadorGeneradorDivisa, BitacorasEntidad _bitacora)
                {
                    RespuestaEntidad elemento = null;
                    DataSet rowsAffected;

                    #region PARAMETROS

                    SqlParameter[] paramTransaccion = new SqlParameter[]
                    {
                       new SqlParameter("@piId_Indicador_Generador_Divisa", indicadorGeneradorDivisa.IdIndicadorGeneradorDivisa)
                    };

                    #endregion

                    #region KeyValuePair LIST

                    List<KeyValuePair<string, string>> itemConsulta = new List<KeyValuePair<string, string>>();
                    itemConsulta.Add(helper.CrearKeyValuePairItem("@piId_Indicador_Generador_Divisa", indicadorGeneradorDivisa.IdIndicadorGeneradorDivisa.ToString()));

                    #endregion

                    try
                    {

                        #region ELIMINAR

                        rowsAffected = transaccionDA.TransaccionEliminar(conexion, conexionBitacora, "Indicadores_Generadores_Divisas_Elimina", paramTransaccion, EnumTipoBitacora.ELIMINAR, itemConsulta, "Indicadores_Generadores_Divisas_Consulta_Detalle", _bitacora);
                        if (!rowsAffected.Equals(null))
                        {
                            elemento = new RespuestaEntidad();
                            elemento.ValorEstado = int.Parse(rowsAffected.Tables[0].Rows[0][0].ToString());
                            elemento.ValorError = int.Parse(rowsAffected.Tables[0].Rows[0][1].ToString());
                        }

                        return elemento;

                        #endregion

                    }
                    catch (Exception)
                    {
                        throw;
                    }
                }

                public List<IndicadoresGeneradoresDivisasEntidad> IndicadoresGeneradoresDivisasConsultar(String conexion, ParametrosConsultaEntidad entidad)
                {
                    List<IndicadoresGeneradoresDivisasEntidad> retorno = new List<IndicadoresGeneradoresDivisasEntidad>();
                    IndicadoresGeneradoresDivisasEntidad elemento;
                    DataSet rowsAffected;

                    #region PARAMETROS

                    SqlParameter[] paramTransaccion = new SqlParameter[]
                    {
                       new SqlParameter("@piIndice_Inicio_Fila", entidad.IndiceInicioFila),
                       new SqlParameter("@piMaximo_Filas", entidad.MaximoFilas),
                       new SqlParameter("@psValores_Filtro", entidad.ValorFiltro),
                       new SqlParameter("@psColumnas_Filtros", entidad.ColumnaFiltro),
                       new SqlParameter("@psColumna_Ordenar", entidad.ColumnaOrdenar)
                    };

                    #endregion

                    try
                    {

                        #region CONSULTAR

                        rowsAffected = transaccionDA.TransaccionConsulta(conexion, "Indicadores_Generadores_Divisas_Consulta", paramTransaccion);
                        if (!rowsAffected.Equals(null))
                        {
                            foreach (DataRow dr in rowsAffected.Tables[0].Rows)
                            {
                                elemento = new IndicadoresGeneradoresDivisasEntidad();
                                elemento.IdIndicadorGeneradorDivisa = int.Parse(dr[0].ToString());
                                elemento.CodIndicadorGeneradorDivisa = int.Parse(dr[1].ToString());
                                elemento.DesIndicadorGeneradorDivisa = dr[2].ToString();

                                retorno.Add(elemento);
                            }
                        }

                        return retorno;

                        #endregion

                    }
                    catch (Exception)
                    {
                        throw;
                    }
                }
        
                public IndicadoresGeneradoresDivisasEntidad IndicadoresGeneradoresDivisasConsultarDetalle(String conexion, String conexionBitacora, IndicadoresGeneradoresDivisasEntidad indicadorGeneradorDivisa, BitacorasEntidad _bitacora)
                {
                    IndicadoresGeneradoresDivisasEntidad retorno = new IndicadoresGeneradoresDivisasEntidad();
                    DataSet rowsAffected;

                    #region PARAMETROS

                    SqlParameter[] paramTransaccion = new SqlParameter[]
                    {
                        new SqlParameter("@piId_Indicador_Generador_Divisa", indicadorGeneradorDivisa.IdIndicadorGeneradorDivisa)
                    };

                    #endregion

                    #region KeyValuePair LIST

                    List<KeyValuePair<string, string>> itemConsulta = new List<KeyValuePair<string, string>>();
                    itemConsulta.Add(helper.CrearKeyValuePairItem("@piId_Indicador_Generador_Divisa", indicadorGeneradorDivisa.IdIndicadorGeneradorDivisa.ToString()));

                    #endregion

                    try
                    {

                        #region CONSULTAR DETALLE

                        rowsAffected = transaccionDA.TransaccionConsultaDetalle(conexion, conexionBitacora, "Indicadores_Generadores_Divisas_Consulta_Detalle", paramTransaccion, EnumTipoBitacora.CONSULTAR, itemConsulta, "Indicadores_Generadores_Divisas_Consulta_Detalle", _bitacora);
                        if (!rowsAffected.Equals(null))
                        {
                            retorno.IdIndicadorGeneradorDivisa = int.Parse(rowsAffected.Tables[0].Rows[0][0].ToString());
                            retorno.CodIndicadorGeneradorDivisa = int.Parse(rowsAffected.Tables[0].Rows[0][1].ToString());
                            retorno.DesIndicadorGeneradorDivisa = rowsAffected.Tables[0].Rows[0][2].ToString();
                            retorno.IndMetodoInsercion = rowsAffected.Tables[0].Rows[0][3].ToString();
                            if (rowsAffected.Tables[0].Rows[0][4].ToString().Length > 0)
                                retorno.FechaIngreso = DateTime.Parse(rowsAffected.Tables[0].Rows[0][4].ToString());
                            else
                                retorno.FechaIngreso = null;
                            retorno.CodUsuarioIngreso = rowsAffected.Tables[0].Rows[0][5].ToString();
                            if (rowsAffected.Tables[0].Rows[0][6].ToString().Length > 0)
                                retorno.FechaUltimaModificacion = DateTime.Parse(rowsAffected.Tables[0].Rows[0][6].ToString());
                            else
                                retorno.FechaUltimaModificacion = null;
                            retorno.CodUsuarioUltimaModificacion = rowsAffected.Tables[0].Rows[0][7].ToString();
                            retorno.DesUsuarioIngreso = rowsAffected.Tables[0].Rows[0][8].ToString();
                            retorno.DesUsuarioUltimaModificacion = rowsAffected.Tables[0].Rows[0][9].ToString();
                        }

                        return retorno;

                        #endregion

                    }
                    catch (Exception)
                    {
                        throw;
                    }
                }
        
                public int IndicadoresGeneradoresDivisasTotalFilas(String conexion, ParametrosTotalFilasEntidad entidad)
                {

                    int value;

                    #region PARAMETROS

                    SqlParameter[] paramTransaccion = new SqlParameter[]
                    {
                        new SqlParameter("@psValor_Filtro", entidad.ValorFiltro),
                        new SqlParameter("@psColumna_Filtro", entidad.ColumnaFiltro)
                    };

                    #endregion

                    try
                    {

                        #region TOTAL FILAS

                            value = transaccionDA.TransaccionRows(conexion, "Indicadores_Generadores_Divisas_Total_Filas", paramTransaccion);

                            return value;

                        #endregion

                    }
                    catch (Exception)
                    {
                        throw;
                    }
                }

            #endregion 

            #region INDICADORES MONEDAS EXTRANJERAS
        
                public RespuestaEntidad IndicadoresMonedasExtranjerasInsertar(String conexion, String conexionBitacora, IndicadoresMonedasExtranjerasEntidad indicadorMonedaExtranjera, BitacorasEntidad _bitacora)
                {
                    RespuestaEntidad elemento = null;
                    DataSet rowsAffected;

                    #region PARAMETROS

                    SqlParameter[] paramTransaccion = new SqlParameter[]
                    {
                        new SqlParameter("@psCod_Indicador_Moneda_Extranjera", indicadorMonedaExtranjera.CodIndicadorMonedaExtranjera),
                        new SqlParameter("@psDes_Indicador_Moneda_Extranjera", indicadorMonedaExtranjera.DesIndicadorMonedaExtranjera),
                        new SqlParameter("@psInd_Metodo_Insercion", indicadorMonedaExtranjera.IndMetodoInsercion),
                        new SqlParameter("@psCod_Usuario", indicadorMonedaExtranjera.CodUsuarioIngreso)
                    };

                    #endregion

                    try
                    {

                        #region INSERTAR

                        rowsAffected = transaccionDA.TransaccionInsertar(conexion, conexionBitacora, "Indicadores_Monedas_Extranjeras_Inserta", paramTransaccion, EnumTipoBitacora.INSERTAR, _bitacora);
                        if (!rowsAffected.Equals(null))
                        {
                            elemento = new RespuestaEntidad();
                            elemento.ValorEstado = int.Parse(rowsAffected.Tables[0].Rows[0][0].ToString());
                            elemento.ValorError = int.Parse(rowsAffected.Tables[0].Rows[0][1].ToString());
                        }

                        return elemento;

                        #endregion

                    }
                    catch (Exception)
                    {
                        throw;
                    }
                }
        
                public RespuestaEntidad IndicadoresMonedasExtranjerasModificar(String conexion, String conexionBitacora, IndicadoresMonedasExtranjerasEntidad indicadorMonedaExtranjera, BitacorasEntidad _bitacora)
                {
                    RespuestaEntidad elemento = null;
                    DataSet rowsAffected;

                    #region PARAMETROS

                    SqlParameter[] paramTransaccion = new SqlParameter[]
                    {
                        new SqlParameter("@piId_Indicador_Moneda_Extranjera", indicadorMonedaExtranjera.IdIndicadorMonedaExtranjera),
                        new SqlParameter("@psCod_Indicador_Moneda_Extranjera", indicadorMonedaExtranjera.CodIndicadorMonedaExtranjera),
                        new SqlParameter("@psDes_Indicador_Moneda_Extranjera", indicadorMonedaExtranjera.DesIndicadorMonedaExtranjera),
                        new SqlParameter("@psInd_Metodo_Insercion", indicadorMonedaExtranjera.IndMetodoInsercion),
                        new SqlParameter("@psCod_Usuario", indicadorMonedaExtranjera.CodUsuarioIngreso)
                    };

                    #endregion

                    #region KeyValuePair LIST

                    List<KeyValuePair<string, string>> itemConsulta = new List<KeyValuePair<string, string>>();
                    itemConsulta.Add(helper.CrearKeyValuePairItem("@piId_Indicador_Moneda_Extranjera", indicadorMonedaExtranjera.IdIndicadorMonedaExtranjera.ToString()));

                    #endregion

                    try
                    {

                        #region MODIFICAR

                        rowsAffected = transaccionDA.TransaccionModificar(conexion, conexionBitacora, "Indicadores_Monedas_Extranjeras_Actualiza", paramTransaccion, EnumTipoBitacora.ACTUALIZAR, itemConsulta, "Indicadores_Monedas_Extranjeras_Consulta_Detalle", _bitacora);
                        if (!rowsAffected.Equals(null))
                        {
                            elemento = new RespuestaEntidad();
                            elemento.ValorEstado = int.Parse(rowsAffected.Tables[0].Rows[0][0].ToString());
                            elemento.ValorError = int.Parse(rowsAffected.Tables[0].Rows[0][1].ToString());
                        }

                        return elemento;

                        #endregion

                    }
                    catch (Exception)
                    {
                        throw;
                    }
                }
        
                public RespuestaEntidad IndicadoresMonedasExtranjerasEliminar(String conexion, String conexionBitacora, IndicadoresMonedasExtranjerasEntidad indicadorMonedaExtranjera, BitacorasEntidad _bitacora)
                {
                    RespuestaEntidad elemento = null;
                    DataSet rowsAffected;

                    #region PARAMETROS

                    SqlParameter[] paramTransaccion = new SqlParameter[]
                    {
                        new SqlParameter("@piId_Indicador_Moneda_Extranjera", indicadorMonedaExtranjera.IdIndicadorMonedaExtranjera)
                    };

                    #endregion
                    
                    #region KeyValuePair LIST

                    List<KeyValuePair<string, string>> itemConsulta = new List<KeyValuePair<string, string>>();
                    itemConsulta.Add(helper.CrearKeyValuePairItem("@piId_Indicador_Moneda_Extranjera", indicadorMonedaExtranjera.IdIndicadorMonedaExtranjera.ToString()));

                    #endregion

                    try
                    {

                        #region ELIMINAR

                        rowsAffected = transaccionDA.TransaccionEliminar(conexion, conexionBitacora, "Indicadores_Monedas_Extranjeras_Elimina", paramTransaccion, EnumTipoBitacora.ELIMINAR, itemConsulta, "Indicadores_Monedas_Extranjeras_Consulta_Detalle", _bitacora);
                        if (!rowsAffected.Equals(null))
                        {
                            elemento = new RespuestaEntidad();
                            elemento.ValorEstado = int.Parse(rowsAffected.Tables[0].Rows[0][0].ToString());
                            elemento.ValorError = int.Parse(rowsAffected.Tables[0].Rows[0][1].ToString());
                        }

                        return elemento;

                        #endregion

                    }
                    catch (Exception)
                    {
                        throw;
                    }
                }

                public List<IndicadoresMonedasExtranjerasEntidad> IndicadoresMonedasExtranjerasConsultar(String conexion, ParametrosConsultaEntidad entidad)
                {
                    List<IndicadoresMonedasExtranjerasEntidad> retorno = new List<IndicadoresMonedasExtranjerasEntidad>();
                    IndicadoresMonedasExtranjerasEntidad elemento;
                    DataSet rowsAffected;

                    #region PARAMETROS

                    SqlParameter[] paramTransaccion = new SqlParameter[]
                    {
                       new SqlParameter("@piIndice_Inicio_Fila", entidad.IndiceInicioFila),
                       new SqlParameter("@piMaximo_Filas", entidad.MaximoFilas),
                       new SqlParameter("@psValores_Filtro", entidad.ValorFiltro),
                       new SqlParameter("@psColumnas_Filtros", entidad.ColumnaFiltro),
                       new SqlParameter("@psColumna_Ordenar", entidad.ColumnaOrdenar)
                    };

                    #endregion

                    try
                    {

                        #region CONSULTAR

                        rowsAffected = transaccionDA.TransaccionConsulta(conexion, "Indicadores_Monedas_Extranjeras_Consulta", paramTransaccion);
                        if (!rowsAffected.Equals(null))
                        {
                            foreach (DataRow dr in rowsAffected.Tables[0].Rows)
                            {
                                elemento = new IndicadoresMonedasExtranjerasEntidad();
                                elemento.IdIndicadorMonedaExtranjera = int.Parse(dr[0].ToString());
                                elemento.CodIndicadorMonedaExtranjera = dr[1].ToString();
                                elemento.DesIndicadorMonedaExtranjera = dr[2].ToString();

                                retorno.Add(elemento);
                            }
                        }

                        return retorno;

                        #endregion

                    }
                    catch (Exception)
                    {
                        throw;
                    }
                }
        
                public IndicadoresMonedasExtranjerasEntidad IndicadoresMonedasExtranjerasConsultarDetalle(String conexion, String conexionBitacora, IndicadoresMonedasExtranjerasEntidad indicadorMonedaExtranjera, BitacorasEntidad _bitacora)
                {
                    IndicadoresMonedasExtranjerasEntidad retorno = new IndicadoresMonedasExtranjerasEntidad();
                    DataSet rowsAffected;

                    #region PARAMETROS

                    SqlParameter[] paramTransaccion = new SqlParameter[]
                    {
                        new SqlParameter("@piId_Indicador_Moneda_Extranjera", indicadorMonedaExtranjera.IdIndicadorMonedaExtranjera)
                    };

                    #endregion

                    #region KeyValuePair LIST

                    List<KeyValuePair<string, string>> itemConsulta = new List<KeyValuePair<string, string>>();
                    itemConsulta.Add(helper.CrearKeyValuePairItem("@piId_Indicador_Moneda_Extranjera", indicadorMonedaExtranjera.IdIndicadorMonedaExtranjera.ToString()));

                    #endregion

                    try
                    {

                        #region CONSULTAR DETALLE

                        rowsAffected = transaccionDA.TransaccionConsultaDetalle(conexion, conexionBitacora, "Indicadores_Monedas_Extranjeras_Consulta_Detalle", paramTransaccion, EnumTipoBitacora.CONSULTAR, itemConsulta, "Indicadores_Monedas_Extranjeras_Consulta_Detalle", _bitacora);
                        if (!rowsAffected.Equals(null))
                        {
                            retorno.IdIndicadorMonedaExtranjera = int.Parse(rowsAffected.Tables[0].Rows[0][0].ToString());
                            retorno.CodIndicadorMonedaExtranjera = rowsAffected.Tables[0].Rows[0][1].ToString();
                            retorno.DesIndicadorMonedaExtranjera = rowsAffected.Tables[0].Rows[0][2].ToString();
                            retorno.IndMetodoInsercion = rowsAffected.Tables[0].Rows[0][3].ToString();
                            if (rowsAffected.Tables[0].Rows[0][4].ToString().Length > 0)
                                retorno.FechaIngreso = DateTime.Parse(rowsAffected.Tables[0].Rows[0][4].ToString());
                            else
                                retorno.FechaIngreso = null;
                            retorno.CodUsuarioIngreso = rowsAffected.Tables[0].Rows[0][5].ToString();
                            if (rowsAffected.Tables[0].Rows[0][6].ToString().Length > 0)
                                retorno.FechaUltimaModificacion = DateTime.Parse(rowsAffected.Tables[0].Rows[0][6].ToString());
                            else
                                retorno.FechaUltimaModificacion = null;
                            retorno.CodUsuarioUltimaModificacion = rowsAffected.Tables[0].Rows[0][7].ToString();
                            retorno.DesUsuarioIngreso = rowsAffected.Tables[0].Rows[0][8].ToString();
                            retorno.DesUsuarioUltimaModificacion = rowsAffected.Tables[0].Rows[0][9].ToString();
                        }

                        return retorno;

                        #endregion

                    }
                    catch (Exception)
                    {
                        throw;
                    }
                }
        
                public int IndicadoresMonedasExtranjerasTotalFilas(String conexion, ParametrosTotalFilasEntidad entidad)
                {

                    int value;

                    #region PARAMETROS

                    SqlParameter[] paramTransaccion = new SqlParameter[]
                    {
                        new SqlParameter("@psValor_Filtro", entidad.ValorFiltro),
                        new SqlParameter("@psColumna_Filtro", entidad.ColumnaFiltro)
                    };

                    #endregion

                    try
                    {

                        #region TOTAL FILAS

                            value = transaccionDA.TransaccionRows(conexion, "Indicadores_Monedas_Extranjeras_Total_Filas", paramTransaccion);

                            return value;

                        #endregion

                    }
                    catch (Exception)
                    {
                        throw;
                    }
                }
        
                public List<ListaEntidad> IndicadoresMonedasExtranjerasLista(String conexion, String filtro)
                {
                    List<ListaEntidad> retorno = new List<ListaEntidad>();
                    ListaEntidad elemento;
                    DataSet rowsAffected;

                    #region PARAMETROS

                    SqlParameter[] paramTransaccion = new SqlParameter[]
                    {
                        new SqlParameter("@psFiltro", filtro)
                    };

                    #endregion

                    #region KeyValuePair LIST

                    List<KeyValuePair<string, string>> itemConsulta = new List<KeyValuePair<string, string>>();
                    itemConsulta.Add(helper.CrearKeyValuePairItem("@psFiltro", filtro));

                    #endregion

                    try
                    {

                        #region LISTA

                        rowsAffected = transaccionDA.TransaccionConsulta(conexion, "Indicadores_Monedas_Extranjeras_Lista", paramTransaccion);
                        if (!rowsAffected.Equals(null))
                        {
                            foreach (DataRow dr in rowsAffected.Tables[0].Rows)
                            {
                                elemento = new ListaEntidad();
                                elemento.Valor = dr[0].ToString();
                                elemento.Texto = dr[1].ToString();

                                retorno.Add(elemento);
                            }
                        }

                        return retorno;

                        #endregion

                    }
                    catch (Exception)
                    {
                        throw;
                    }
                }
        
            #endregion 

            #region INSTRUMENTOS
        
                public RespuestaEntidad InstrumentosInsertar(String conexion, String conexionBitacora, InstrumentosEntidad instrumento, BitacorasEntidad _bitacora)
                {
                    RespuestaEntidad elemento = null;
                    DataSet rowsAffected;

                    #region PARAMETROS

                    SqlParameter[] paramTransaccion = new SqlParameter[]
                    {
                        new SqlParameter("@piId_Tipo_Instrumento", instrumento.IdTipoInstrumento),
                        new SqlParameter("@psCod_Instrumento", instrumento.CodInstrumento),
                        new SqlParameter("@psDes_Instrumento", instrumento.DesInstrumento),
                        new SqlParameter("@psInd_Metodo_Insercion", instrumento.IndMetodoInsercion),
                        new SqlParameter("@psCod_Usuario", instrumento.CodUsuarioIngreso)
                    };

                    #endregion

                    try
                    {

                        #region INSERTAR

                        rowsAffected = transaccionDA.TransaccionInsertar(conexion, conexionBitacora, "Instrumentos_Inserta", paramTransaccion, EnumTipoBitacora.INSERTAR, _bitacora);
                        if (!rowsAffected.Equals(null))
                        {
                            elemento = new RespuestaEntidad();
                            elemento.ValorEstado = int.Parse(rowsAffected.Tables[0].Rows[0][0].ToString());
                            elemento.ValorError = int.Parse(rowsAffected.Tables[0].Rows[0][1].ToString());
                        }

                        return elemento;

                        #endregion

                    }
                    catch (Exception)
                    {
                        throw;
                    }
                }
        
                public RespuestaEntidad InstrumentosModificar(String conexion, String conexionBitacora, InstrumentosEntidad instrumento, BitacorasEntidad _bitacora)
                {
                    RespuestaEntidad elemento = null;
                    DataSet rowsAffected;

                    #region PARAMETROS

                    SqlParameter[] paramTransaccion = new SqlParameter[]
                    {
                        new SqlParameter("@piId_Instrumento", instrumento.IdInstrumento),
                        new SqlParameter("@piId_Tipo_Instrumento", instrumento.IdTipoInstrumento),
                        new SqlParameter("@psCod_Instrumento", instrumento.CodInstrumento),
                        new SqlParameter("@psDes_Instrumento", instrumento.DesInstrumento),
                        new SqlParameter("@psInd_Metodo_Insercion", instrumento.IndMetodoInsercion),
                        new SqlParameter("@psCod_Usuario", instrumento.CodUsuarioIngreso)
                    };

                    #endregion

                    #region KeyValuePair LIST

                    List<KeyValuePair<string, string>> itemConsulta = new List<KeyValuePair<string, string>>();
                    itemConsulta.Add(helper.CrearKeyValuePairItem("@piId_Instrumento", instrumento.IdInstrumento.ToString()));

                    #endregion

                    try
                    {

                        #region MODIFICAR

                        rowsAffected = transaccionDA.TransaccionModificar(conexion, conexionBitacora, "Instrumentos_Actualiza", paramTransaccion, EnumTipoBitacora.ACTUALIZAR, itemConsulta, "Instrumentos_Consulta_Detalle", _bitacora);
                        if (!rowsAffected.Equals(null))
                        {
                            elemento = new RespuestaEntidad();
                            elemento.ValorEstado = int.Parse(rowsAffected.Tables[0].Rows[0][0].ToString());
                            elemento.ValorError = int.Parse(rowsAffected.Tables[0].Rows[0][1].ToString());
                        }

                        return elemento;

                        #endregion

                    }
                    catch (Exception)
                    {
                        throw;
                    }
                }
        
                public RespuestaEntidad InstrumentosEliminar(String conexion, String conexionBitacora, InstrumentosEntidad instrumento, BitacorasEntidad _bitacora)
                {
                    RespuestaEntidad elemento = null;
                    DataSet rowsAffected;

                    #region PARAMETROS

                    SqlParameter[] paramTransaccion = new SqlParameter[]
                    {
                        new SqlParameter("@piId_Instrumento", instrumento.IdInstrumento)                        
                    };

                    #endregion

                    #region KeyValuePair LIST

                    List<KeyValuePair<string, string>> itemConsulta = new List<KeyValuePair<string, string>>();
                    itemConsulta.Add(helper.CrearKeyValuePairItem("@piId_Instrumento", instrumento.IdInstrumento.ToString()));

                    #endregion

                    try
                    {

                        #region ELIMINAR

                        rowsAffected = transaccionDA.TransaccionEliminar(conexion, conexionBitacora, "Instrumentos_Elimina", paramTransaccion, EnumTipoBitacora.ELIMINAR, itemConsulta, "Instrumentos_Consulta_Detalle", _bitacora);
                        if (!rowsAffected.Equals(null))
                        {
                            elemento = new RespuestaEntidad();
                            elemento.ValorEstado = int.Parse(rowsAffected.Tables[0].Rows[0][0].ToString());
                            elemento.ValorError = int.Parse(rowsAffected.Tables[0].Rows[0][1].ToString());
                        }

                        return elemento;

                        #endregion

                    }
                    catch (Exception)
                    {
                        throw;
                    }
                }

                public List<InstrumentosEntidad> InstrumentosConsultar(String conexion, ParametrosConsultaEntidad entidad)
                {
                    List<InstrumentosEntidad> retorno = new List<InstrumentosEntidad>();
                    InstrumentosEntidad elemento;
                    DataSet rowsAffected;

                    #region PARAMETROS

                    SqlParameter[] paramTransaccion = new SqlParameter[]
                    {
                       new SqlParameter("@piIndice_Inicio_Fila", entidad.IndiceInicioFila),
                       new SqlParameter("@piMaximo_Filas", entidad.MaximoFilas),
                       new SqlParameter("@psValores_Filtro", entidad.ValorFiltro),
                       new SqlParameter("@psColumnas_Filtros", entidad.ColumnaFiltro),
                       new SqlParameter("@psColumna_Ordenar", entidad.ColumnaOrdenar)
                    };

                    #endregion

                    try
                    {

                        #region CONSULTAR

                        rowsAffected = transaccionDA.TransaccionConsulta(conexion, "Instrumentos_Consulta", paramTransaccion);
                        if (!rowsAffected.Equals(null))
                        {
                            foreach (DataRow dr in rowsAffected.Tables[0].Rows)
                            {
                                elemento = new InstrumentosEntidad();
                                elemento.IdInstrumento = int.Parse(dr[0].ToString());
                                elemento.IdTipoInstrumento = int.Parse(dr[1].ToString());
                                elemento.CodInstrumento = dr[2].ToString();
                                elemento.CodTipoInstrumento = dr[3].ToString();
                                elemento.DesInstrumento = dr[4].ToString(); 
                                elemento.DesTipoInstrumento = dr[5].ToString();

                                retorno.Add(elemento);
                            }
                        }

                        return retorno;

                        #endregion

                    }
                    catch (Exception)
                    {
                        throw;
                    }
                }
        
                public InstrumentosEntidad InstrumentosConsultarDetalle(String conexion, String conexionBitacora, InstrumentosEntidad instrumento, BitacorasEntidad _bitacora)
                {
                    InstrumentosEntidad retorno = new InstrumentosEntidad();
                    DataSet rowsAffected;

                    #region PARAMETROS

                    SqlParameter[] paramTransaccion = new SqlParameter[]
                    {
                        new SqlParameter("@piId_Instrumento", instrumento.IdInstrumento)
                    };

                    #endregion

                    #region KeyValuePair LIST

                    List<KeyValuePair<string, string>> itemConsulta = new List<KeyValuePair<string, string>>();
                    itemConsulta.Add(helper.CrearKeyValuePairItem("@piId_Instrumento", instrumento.IdInstrumento.ToString()));

                    #endregion

                    try
                    {

                        #region CONSULTAR DETALLE

                        rowsAffected = transaccionDA.TransaccionConsultaDetalle(conexion, conexionBitacora, "Instrumentos_Consulta_Detalle", paramTransaccion, EnumTipoBitacora.CONSULTAR, itemConsulta, "Instrumentos_Consulta_Detalle", _bitacora);
                        if (!rowsAffected.Equals(null))
                        {
                            retorno.IdInstrumento = int.Parse(rowsAffected.Tables[0].Rows[0][0].ToString());
                            retorno.IdTipoInstrumento = int.Parse(rowsAffected.Tables[0].Rows[0][1].ToString());
                            retorno.CodInstrumento = rowsAffected.Tables[0].Rows[0][2].ToString();
                            retorno.DesInstrumento = rowsAffected.Tables[0].Rows[0][3].ToString();
                            retorno.CodTipoInstrumento = rowsAffected.Tables[0].Rows[0][4].ToString();
                            retorno.DesTipoInstrumento = rowsAffected.Tables[0].Rows[0][5].ToString();

                            retorno.IndMetodoInsercion = rowsAffected.Tables[0].Rows[0][6].ToString();
                            if (rowsAffected.Tables[0].Rows[0][7].ToString().Length > 0)
                                retorno.FechaIngreso = DateTime.Parse(rowsAffected.Tables[0].Rows[0][7].ToString());
                            else
                                retorno.FechaIngreso = null;
                            retorno.CodUsuarioIngreso = rowsAffected.Tables[0].Rows[0][8].ToString();
                            if (rowsAffected.Tables[0].Rows[0][9].ToString().Length > 0)
                                retorno.FechaUltimaModificacion = DateTime.Parse(rowsAffected.Tables[0].Rows[0][9].ToString());
                            else
                                retorno.FechaUltimaModificacion = null;
                            retorno.CodUsuarioUltimaModificacion = rowsAffected.Tables[0].Rows[0][10].ToString();
                            retorno.DesUsuarioIngreso = rowsAffected.Tables[0].Rows[0][11].ToString();
                            retorno.DesUsuarioUltimaModificacion = rowsAffected.Tables[0].Rows[0][12].ToString();
                        }

                        return retorno;

                        #endregion

                    }
                    catch (Exception)
                    {
                        throw;
                    }
                }
        
                public int InstrumentosTotalFilas(String conexion, ParametrosTotalFilasEntidad entidad)
                {

                    int value;

                    #region PARAMETROS

                    SqlParameter[] paramTransaccion = new SqlParameter[]
                    {
                        new SqlParameter("@psValor_Filtro", entidad.ValorFiltro),
                        new SqlParameter("@psColumna_Filtro", entidad.ColumnaFiltro)
                    };

                    #endregion

                    try
                    {

                        #region TOTAL FILAS

                            value = transaccionDA.TransaccionRows(conexion, "Instrumentos_Total_Filas", paramTransaccion);

                            return value;

                        #endregion

                    }
                    catch (Exception)
                    {
                        throw;
                    }
                }
        
                public List<ListaEntidad> InstrumentosLista(String conexion, String filtro)
                {
                    List<ListaEntidad> retorno = new List<ListaEntidad>();
                    ListaEntidad elemento;
                    DataSet rowsAffected;

                    #region PARAMETROS

                    SqlParameter[] paramTransaccion = new SqlParameter[]
                    {
                        new SqlParameter("@psFiltro", filtro)
                    };

                    #endregion

                    #region KeyValuePair LIST

                    List<KeyValuePair<string, string>> itemConsulta = new List<KeyValuePair<string, string>>();
                    itemConsulta.Add(helper.CrearKeyValuePairItem("@psFiltro", filtro));

                    #endregion

                    try
                    {

                        #region LISTA

                        rowsAffected = transaccionDA.TransaccionConsulta(conexion, "Instrumentos_Lista", paramTransaccion);
                        if (!rowsAffected.Equals(null))
                        {
                            foreach (DataRow dr in rowsAffected.Tables[0].Rows)
                            {
                                elemento = new ListaEntidad();
                                elemento.Valor = dr[0].ToString();
                                elemento.Texto = dr[1].ToString();

                                retorno.Add(elemento);
                            }
                        }

                        return retorno;

                        #endregion

                    }
                    catch (Exception)
                    {
                        throw;
                    }
                }
        
                public List<ListaEntidad> InstrumentosFiltradoLista(String conexion, String filtro)
                {
                    List<ListaEntidad> retorno = new List<ListaEntidad>();
                    ListaEntidad elemento;
                    DataSet rowsAffected;

                    #region PARAMETROS

                    SqlParameter[] paramTransaccion = new SqlParameter[]
                    {
                        new SqlParameter("@psFiltro", filtro)
                    };

                    #endregion

                    try
                    {

                        #region LISTA

                        rowsAffected = transaccionDA.TransaccionConsulta(conexion, "Instrumentos_Filtrado_Lista", paramTransaccion);
                        if (!rowsAffected.Equals(null))
                        {
                            foreach (DataRow dr in rowsAffected.Tables[0].Rows)
                            {
                                elemento = new ListaEntidad();
                                elemento.Valor = dr[0].ToString();
                                elemento.Texto = dr[1].ToString();

                                retorno.Add(elemento);
                            }
                        }
                        return retorno;

                        #endregion

                    }
                    catch (Exception)
                    {
                        throw;
                    }
                }

                public List<ListaEntidad> InstrumentosEmisionesFiltradoLista(String conexion, String filtro)
                {
                    List<ListaEntidad> retorno = new List<ListaEntidad>();
                    ListaEntidad elemento;
                    DataSet rowsAffected;

                    #region PARAMETROS

                    SqlParameter[] paramTransaccion = new SqlParameter[]
                    {
                        new SqlParameter("@psFiltro", filtro)
                    };

                    #endregion

                    try
                    {

                        #region LISTA

                        rowsAffected = transaccionDA.TransaccionConsulta(conexion, "Emisiones_Instrumentos_Instrumento_Lista", paramTransaccion);
                        if (!rowsAffected.Equals(null))
                        {
                            foreach (DataRow dr in rowsAffected.Tables[0].Rows)
                            {
                                elemento = new ListaEntidad();
                                elemento.Valor = dr[0].ToString();
                                elemento.Texto = dr[1].ToString();

                                retorno.Add(elemento);
                            }
                        }
                        return retorno;

                        #endregion

                    }
                    catch (Exception)
                    {
                        throw;
                    }
                }

                public List<ListaEntidad> InstrumentosTipoInstrumentoLista(String conexion, String filtro)
                {
                    List<ListaEntidad> retorno = new List<ListaEntidad>();
                    ListaEntidad elemento;
                    DataSet rowsAffected;

                    #region PARAMETROS

                    SqlParameter[] paramTransaccion = new SqlParameter[]
                    {
                        new SqlParameter("@psFiltro", filtro)
                    };

                    #endregion

                    try
                    {

                        #region LISTA

                        rowsAffected = transaccionDA.TransaccionConsulta(conexion, "Instrumentos_Tipo_Instrumento_Lista", paramTransaccion);
                        if (!rowsAffected.Equals(null))
                        {
                            foreach (DataRow dr in rowsAffected.Tables[0].Rows)
                            {
                                elemento = new ListaEntidad();
                                elemento.Valor = dr[0].ToString();
                                elemento.Texto = dr[1].ToString();

                                retorno.Add(elemento);
                            }
                        }
                        return retorno;

                        #endregion

                    }
                    catch (Exception)
                    {
                        throw;
                    }
                }
        
            #endregion 

            #region INTERRUPTORES INSTALACIONES ELECTRICAS
        
                public RespuestaEntidad InterruptoresInstalacionesElectricasInsertar(String conexion, String conexionBitacora, InterruptoresInstalacionesElectricasEntidad interruptorInstalacionElectrica, BitacorasEntidad _bitacora)
                {
                    RespuestaEntidad elemento = null;
                    DataSet rowsAffected;

                    #region PARAMETROS

                    SqlParameter[] paramTransaccion = new SqlParameter[]
                    {
                        new SqlParameter("@piCod_Interruptor_Instalacion_Electrica", interruptorInstalacionElectrica.CodInterruptorInstalacionElectrica),
                        new SqlParameter("@psDes_Interruptor_Instalacion_Electrica", interruptorInstalacionElectrica.DesInterruptorInstalacionElectrica),
                        new SqlParameter("@psInd_Metodo_Insercion", interruptorInstalacionElectrica.IndMetodoInsercion),
                        new SqlParameter("@psCod_Usuario", interruptorInstalacionElectrica.CodUsuarioIngreso)
                    };

                    #endregion

                    try
                    {

                        #region INSERTAR

                        rowsAffected = transaccionDA.TransaccionInsertar(conexion, conexionBitacora, "Interruptores_Instalaciones_Electricas_Inserta", paramTransaccion, EnumTipoBitacora.INSERTAR, _bitacora);
                        if (!rowsAffected.Equals(null))
                        {
                            elemento = new RespuestaEntidad();
                            elemento.ValorEstado = int.Parse(rowsAffected.Tables[0].Rows[0][0].ToString());
                            elemento.ValorError = int.Parse(rowsAffected.Tables[0].Rows[0][1].ToString());
                        }

                        return elemento;

                        #endregion

                    }
                    catch (Exception)
                    {
                        throw;
                    }
                }
        
                public RespuestaEntidad InterruptoresInstalacionesElectricasModificar(String conexion, String conexionBitacora, InterruptoresInstalacionesElectricasEntidad interruptorInstalacionElectrica, BitacorasEntidad _bitacora)
                {
                    RespuestaEntidad elemento = null;
                    DataSet rowsAffected;

                    #region PARAMETROS

                    SqlParameter[] paramTransaccion = new SqlParameter[]
                    {
                        new SqlParameter("@piId_Interruptor_Instalacion_Electrica", interruptorInstalacionElectrica.IdInterruptorInstalacionElectrica),
                        new SqlParameter("@piCod_Interruptor_Instalacion_Electrica", interruptorInstalacionElectrica.CodInterruptorInstalacionElectrica),
                        new SqlParameter("@psDes_Interruptor_Instalacion_Electrica", interruptorInstalacionElectrica.DesInterruptorInstalacionElectrica),
                        new SqlParameter("@psInd_Metodo_Insercion", interruptorInstalacionElectrica.IndMetodoInsercion),
                        new SqlParameter("@psCod_Usuario", interruptorInstalacionElectrica.CodUsuarioIngreso)
                    };

                    #endregion

                    #region KeyValuePair LIST

                    List<KeyValuePair<string, string>> itemConsulta = new List<KeyValuePair<string, string>>();
                    itemConsulta.Add(helper.CrearKeyValuePairItem("@piId_Interruptor_Instalacion_Electrica", interruptorInstalacionElectrica.IdInterruptorInstalacionElectrica.ToString()));

                    #endregion

                    try
                    {

                        #region MODIFICAR

                        rowsAffected = transaccionDA.TransaccionModificar(conexion, conexionBitacora, "Interruptores_Instalaciones_Electricas_Actualiza", paramTransaccion, EnumTipoBitacora.ACTUALIZAR, itemConsulta, "Interruptores_Instalaciones_Electricas_Consulta_Detalle", _bitacora);
                        if (!rowsAffected.Equals(null))
                        {
                            elemento = new RespuestaEntidad();
                            elemento.ValorEstado = int.Parse(rowsAffected.Tables[0].Rows[0][0].ToString());
                            elemento.ValorError = int.Parse(rowsAffected.Tables[0].Rows[0][1].ToString());
                        }

                        return elemento;

                        #endregion

                    }
                    catch (Exception)
                    {
                        throw;
                    }
                }
        
                public RespuestaEntidad InterruptoresInstalacionesElectricasEliminar(String conexion, String conexionBitacora, InterruptoresInstalacionesElectricasEntidad interruptorInstalacionElectrica, BitacorasEntidad _bitacora)
                {
                    RespuestaEntidad elemento = null;
                    DataSet rowsAffected;

                    #region PARAMETROS

                    SqlParameter[] paramTransaccion = new SqlParameter[]
                    {
                        new SqlParameter("@piId_Interruptor_Instalacion_Electrica", interruptorInstalacionElectrica.IdInterruptorInstalacionElectrica)
                    };

                    #endregion

                    #region KeyValuePair LIST

                    List<KeyValuePair<string, string>> itemConsulta = new List<KeyValuePair<string, string>>();
                    itemConsulta.Add(helper.CrearKeyValuePairItem("@piId_Interruptor_Instalacion_Electrica", interruptorInstalacionElectrica.IdInterruptorInstalacionElectrica.ToString()));

                    #endregion

                    try
                    {

                        #region ELIMINAR

                        rowsAffected = transaccionDA.TransaccionEliminar(conexion, conexionBitacora, "Interruptores_Instalaciones_Electricas_Elimina", paramTransaccion, EnumTipoBitacora.ELIMINAR, itemConsulta, "Interruptores_Instalaciones_Electricas_Consulta_Detalle", _bitacora);
                        if (!rowsAffected.Equals(null))
                        {
                            elemento = new RespuestaEntidad();
                            elemento.ValorEstado = int.Parse(rowsAffected.Tables[0].Rows[0][0].ToString());
                            elemento.ValorError = int.Parse(rowsAffected.Tables[0].Rows[0][1].ToString());
                        }

                        return elemento;

                        #endregion

                    }
                    catch (Exception)
                    {
                        throw;
                    }
                }

                public List<InterruptoresInstalacionesElectricasEntidad> InterruptoresInstalacionesElectricasConsultar(String conexion, ParametrosConsultaEntidad entidad)
                {
                    List<InterruptoresInstalacionesElectricasEntidad> retorno = new List<InterruptoresInstalacionesElectricasEntidad>();
                    InterruptoresInstalacionesElectricasEntidad elemento;
                    DataSet rowsAffected;

                    #region PARAMETROS

                    SqlParameter[] paramTransaccion = new SqlParameter[]
                    {
                        new SqlParameter("@piIndice_Inicio_Fila", entidad.IndiceInicioFila),
                        new SqlParameter("@piMaximo_Filas", entidad.MaximoFilas),
                        new SqlParameter("@psValores_Filtro", entidad.ValorFiltro),
                        new SqlParameter("@psColumnas_Filtros", entidad.ColumnaFiltro),
                        new SqlParameter("@psColumna_Ordenar", entidad.ColumnaOrdenar)
                    };

                    #endregion

                    try
                    {

                        #region CONSULTAR

                        rowsAffected = transaccionDA.TransaccionConsulta(conexion, "Interruptores_Instalaciones_Electricas_Consulta", paramTransaccion);
                        if (!rowsAffected.Equals(null))
                        {
                            foreach (DataRow dr in rowsAffected.Tables[0].Rows)
                            {
                                elemento = new InterruptoresInstalacionesElectricasEntidad();
                                elemento.IdInterruptorInstalacionElectrica = int.Parse(dr[0].ToString());
                                elemento.CodInterruptorInstalacionElectrica = int.Parse(dr[1].ToString());
                                elemento.DesInterruptorInstalacionElectrica = dr[2].ToString();

                                retorno.Add(elemento);
                            }
                        }

                        return retorno;

                        #endregion

                    }
                    catch (Exception)
                    {
                        throw;
                    }
                }
        
                public InterruptoresInstalacionesElectricasEntidad InterruptoresInstalacionesElectricasConsultarDetalle(String conexion, String conexionBitacora, InterruptoresInstalacionesElectricasEntidad interruptorInstalacionElectrica, BitacorasEntidad _bitacora)
                {
                    InterruptoresInstalacionesElectricasEntidad retorno = new InterruptoresInstalacionesElectricasEntidad();
                    DataSet rowsAffected;

                    #region PARAMETROS

                    SqlParameter[] paramTransaccion = new SqlParameter[]
                    {
                        new SqlParameter("@piId_Interruptor_Instalacion_Electrica", interruptorInstalacionElectrica.IdInterruptorInstalacionElectrica)
                    };

                    #endregion

                    #region KeyValuePair LIST

                    List<KeyValuePair<string, string>> itemConsulta = new List<KeyValuePair<string, string>>();
                    itemConsulta.Add(helper.CrearKeyValuePairItem("@piId_Interruptor_Instalacion_Electrica", interruptorInstalacionElectrica.IdInterruptorInstalacionElectrica.ToString()));

                    #endregion

                    try
                    {

                        #region CONSULTAR DETALLE

                        rowsAffected = transaccionDA.TransaccionConsultaDetalle(conexion, conexionBitacora, "Interruptores_Instalaciones_Electricas_Consulta_Detalle", paramTransaccion, EnumTipoBitacora.CONSULTAR, itemConsulta, "Interruptores_Instalaciones_Electricas_Consulta_Detalle", _bitacora);
                        if (!rowsAffected.Equals(null))
                        {
                            retorno.IdInterruptorInstalacionElectrica = int.Parse(rowsAffected.Tables[0].Rows[0][0].ToString());
                            retorno.CodInterruptorInstalacionElectrica = int.Parse(rowsAffected.Tables[0].Rows[0][1].ToString());
                            retorno.DesInterruptorInstalacionElectrica = rowsAffected.Tables[0].Rows[0][2].ToString();
                            retorno.IndMetodoInsercion = rowsAffected.Tables[0].Rows[0][3].ToString();
                            if (rowsAffected.Tables[0].Rows[0][4].ToString().Length > 0)
                                retorno.FechaIngreso = DateTime.Parse(rowsAffected.Tables[0].Rows[0][4].ToString());
                            else
                                retorno.FechaIngreso = null;
                            retorno.CodUsuarioIngreso = rowsAffected.Tables[0].Rows[0][5].ToString();
                            if (rowsAffected.Tables[0].Rows[0][6].ToString().Length > 0)
                                retorno.FechaUltimaModificacion = DateTime.Parse(rowsAffected.Tables[0].Rows[0][6].ToString());
                            else
                                retorno.FechaUltimaModificacion = null;
                            retorno.CodUsuarioUltimaModificacion = rowsAffected.Tables[0].Rows[0][7].ToString();
                            retorno.DesUsuarioIngreso = rowsAffected.Tables[0].Rows[0][8].ToString();
                            retorno.DesUsuarioUltimaModificacion = rowsAffected.Tables[0].Rows[0][9].ToString();
                        }

                        return retorno;

                        #endregion

                    }
                    catch (Exception)
                    {
                        throw;
                    }
                }
        
                public int InterruptoresInstalacionesElectricasTotalFilas(String conexion, ParametrosTotalFilasEntidad entidad)
                {

                    int value;

                    #region PARAMETROS

                    SqlParameter[] paramTransaccion = new SqlParameter[]
                    {
                        new SqlParameter("@psValor_Filtro", entidad.ValorFiltro),
                        new SqlParameter("@psColumna_Filtro", entidad.ColumnaFiltro)
                    };

                    #endregion

                    try
                    {

                        #region TOTAL FILAS

                            value = transaccionDA.TransaccionRows(conexion, "Interruptores_Instalaciones_Electricas_Total_Filas", paramTransaccion);

                            return value;

                        #endregion

                    }
                    catch (Exception)
                    {
                        throw;
                    }
                }

            #endregion 

            #region LOTES SEGREGADOS
        
                public RespuestaEntidad LotesSegregadosInsertar(String conexion, String conexionBitacora, LotesSegregadosEntidad loteSegregado, BitacorasEntidad _bitacora)
                {
                    RespuestaEntidad elemento = null;
                    DataSet rowsAffected;

                    #region PARAMETROS

                    SqlParameter[] paramTransaccion = new SqlParameter[]
                    {
                        new SqlParameter("@piCantidad_Lote_Segregado", loteSegregado.CantidadLotesSegregados ),
                        new SqlParameter("@psInd_Metodo_Insercion", loteSegregado.IndMetodoInsercion),
                        new SqlParameter("@psCod_Usuario", loteSegregado.CodUsuarioIngreso)
                    };

                    #endregion

                    try
                    {

                        #region INSERTAR

                        rowsAffected = transaccionDA.TransaccionInsertar(conexion, conexionBitacora, "Lotes_Segregados_Inserta", paramTransaccion, EnumTipoBitacora.INSERTAR, _bitacora);
                        if (!rowsAffected.Equals(null))
                        {
                            elemento = new RespuestaEntidad();
                            elemento.ValorEstado = int.Parse(rowsAffected.Tables[0].Rows[0][0].ToString());
                            elemento.ValorError = int.Parse(rowsAffected.Tables[0].Rows[0][1].ToString());
                        }

                        return elemento;

                        #endregion

                    }
                    catch (Exception)
                    {
                        throw;
                    }
                }
        
                public RespuestaEntidad LotesSegregadosModificar(String conexion, String conexionBitacora, LotesSegregadosEntidad loteSegregado, BitacorasEntidad _bitacora)
                {
                    RespuestaEntidad elemento = null;
                    DataSet rowsAffected;

                    #region PARAMETROS

                    SqlParameter[] paramTransaccion = new SqlParameter[]
                    {
                        new SqlParameter("@piId_Lote_Segregado", loteSegregado.IdLoteSegregado),
                        new SqlParameter("@piCantidad_Lote_Segregado", loteSegregado.CantidadLotesSegregados),
                        new SqlParameter("@psInd_Metodo_Insercion", loteSegregado.IndMetodoInsercion),
                        new SqlParameter("@psCod_Usuario", loteSegregado.CodUsuarioIngreso)
                    };

                    #endregion

                    #region KeyValuePair LIST

                    List<KeyValuePair<string, string>> itemConsulta = new List<KeyValuePair<string, string>>();
                    itemConsulta.Add(helper.CrearKeyValuePairItem("@piId_Lote_Segregado", loteSegregado.IdLoteSegregado.ToString()));

                    #endregion

                    try
                    {

                        #region MODIFICAR

                        rowsAffected = transaccionDA.TransaccionModificar(conexion, conexionBitacora, "Lotes_Segregados_Actualiza", paramTransaccion, EnumTipoBitacora.ACTUALIZAR, itemConsulta, "Lotes_Segregados_Consulta_Detalle", _bitacora);
                        if (!rowsAffected.Equals(null))
                        {
                            elemento = new RespuestaEntidad();
                            elemento.ValorEstado = int.Parse(rowsAffected.Tables[0].Rows[0][0].ToString());
                            elemento.ValorError = int.Parse(rowsAffected.Tables[0].Rows[0][1].ToString());
                        }

                        return elemento;

                        #endregion

                    }
                    catch (Exception)
                    {
                        throw;
                    }
                }
        
                public RespuestaEntidad LotesSegregadosEliminar(String conexion, String conexionBitacora, LotesSegregadosEntidad loteSegregado, BitacorasEntidad _bitacora)
                {
                    RespuestaEntidad elemento = null;
                    DataSet rowsAffected;

                    #region PARAMETROS

                    SqlParameter[] paramTransaccion = new SqlParameter[]
                    {
                        new SqlParameter("@piId_Lote_Segregado", loteSegregado.IdLoteSegregado)
                    };

                    #endregion

                    #region KeyValuePair LIST

                    List<KeyValuePair<string, string>> itemConsulta = new List<KeyValuePair<string, string>>();
                    itemConsulta.Add(helper.CrearKeyValuePairItem("@piId_Lote_Segregado", loteSegregado.IdLoteSegregado.ToString()));

                    #endregion

                    try
                    {

                        #region ELIMINAR

                        rowsAffected = transaccionDA.TransaccionEliminar(conexion, conexionBitacora, "Lotes_Segregados_Elimina", paramTransaccion, EnumTipoBitacora.ELIMINAR, itemConsulta, "Lotes_Segregados_Consulta_Detalle", _bitacora);
                        if (!rowsAffected.Equals(null))
                        {
                            elemento = new RespuestaEntidad();
                            elemento.ValorEstado = int.Parse(rowsAffected.Tables[0].Rows[0][0].ToString());
                            elemento.ValorError = int.Parse(rowsAffected.Tables[0].Rows[0][1].ToString());
                        }

                        return elemento;

                        #endregion

                    }
                    catch (Exception)
                    {
                        throw;
                    }
                }

                public List<LotesSegregadosEntidad> LotesSegregadosConsultar(String conexion, ParametrosConsultaEntidad entidad)
                {
                    List<LotesSegregadosEntidad> retorno = new List<LotesSegregadosEntidad>();
                    LotesSegregadosEntidad elemento;
                    DataSet rowsAffected;

                    #region PARAMETROS

                    SqlParameter[] paramTransaccion = new SqlParameter[]
                    {
                        new SqlParameter("@piIndice_Inicio_Fila", entidad.IndiceInicioFila),
                        new SqlParameter("@piMaximo_Filas", entidad.MaximoFilas),
                        new SqlParameter("@psValores_Filtro", entidad.ValorFiltro),
                        new SqlParameter("@psColumnas_Filtros", entidad.ColumnaFiltro),
                        new SqlParameter("@psColumna_Ordenar", entidad.ColumnaOrdenar)
                    };

                    #endregion

                    try
                    {

                        #region CONSULTAR

                        rowsAffected = transaccionDA.TransaccionConsulta(conexion, "Lotes_Segregados_Consulta", paramTransaccion);
                        if (!rowsAffected.Equals(null))
                        {
                            foreach (DataRow dr in rowsAffected.Tables[0].Rows)
                            {
                                elemento = new LotesSegregadosEntidad();
                                elemento.IdLoteSegregado = int.Parse(dr[0].ToString());
                                elemento.CantidadLotesSegregados = int.Parse(dr[1].ToString());

                                retorno.Add(elemento);
                            }
                        }

                        return retorno;

                        #endregion

                    }
                    catch (Exception)
                    {
                        throw;
                    }
                }
        
                public LotesSegregadosEntidad LotesSegregadosConsultarDetalle(String conexion, String conexionBitacora, LotesSegregadosEntidad loteSegregado, BitacorasEntidad _bitacora)
                {
                    LotesSegregadosEntidad retorno = new LotesSegregadosEntidad();
                    DataSet rowsAffected;

                    #region PARAMETROS

                    SqlParameter[] paramTransaccion = new SqlParameter[]
                    {
                        new SqlParameter("@piId_Lote_Segregado", loteSegregado.IdLoteSegregado)
                    };

                    #endregion

                    #region KeyValuePair LIST

                    List<KeyValuePair<string, string>> itemConsulta = new List<KeyValuePair<string, string>>();
                    itemConsulta.Add(helper.CrearKeyValuePairItem("@piId_Lote_Segregado", loteSegregado.IdLoteSegregado.ToString()));

                    #endregion

                    try
                    {

                        #region CONSULTAR DETALLE

                        rowsAffected = transaccionDA.TransaccionConsultaDetalle(conexion, conexionBitacora, "Lotes_Segregados_Consulta_Detalle", paramTransaccion, EnumTipoBitacora.CONSULTAR, itemConsulta, "Lotes_Segregados_Consulta_Detalle", _bitacora);
                        if (!rowsAffected.Equals(null))
                        {
                            retorno.IdLoteSegregado = int.Parse(rowsAffected.Tables[0].Rows[0][0].ToString());
                            retorno.CantidadLotesSegregados = int.Parse(rowsAffected.Tables[0].Rows[0][1].ToString());
                            retorno.IndMetodoInsercion = rowsAffected.Tables[0].Rows[0][2].ToString();
                            if (rowsAffected.Tables[0].Rows[0][3].ToString().Length > 0)
                                retorno.FechaIngreso = DateTime.Parse(rowsAffected.Tables[0].Rows[0][3].ToString());
                            else
                                retorno.FechaIngreso = null;
                            retorno.CodUsuarioIngreso = rowsAffected.Tables[0].Rows[0][4].ToString();
                            if (rowsAffected.Tables[0].Rows[0][5].ToString().Length > 0)
                                retorno.FechaUltimaModificacion = DateTime.Parse(rowsAffected.Tables[0].Rows[0][5].ToString());
                            else
                                retorno.FechaUltimaModificacion = null;
                            retorno.CodUsuarioUltimaModificacion = rowsAffected.Tables[0].Rows[0][6].ToString();
                            retorno.DesUsuarioIngreso = rowsAffected.Tables[0].Rows[0][7].ToString();
                            retorno.DesUsuarioUltimaModificacion = rowsAffected.Tables[0].Rows[0][8].ToString();
                        }

                        return retorno;

                        #endregion

                    }
                    catch (Exception)
                    {
                        throw;
                    }
                }
        
                public int LotesSegregadosTotalFilas(String conexion, ParametrosTotalFilasEntidad entidad)
                {

                    int value;

                    #region PARAMETROS

                    SqlParameter[] paramTransaccion = new SqlParameter[]
                    {
                        new SqlParameter("@psValor_Filtro", entidad.ValorFiltro),
                        new SqlParameter("@psColumna_Filtro", entidad.ColumnaFiltro)
                    };

                    #endregion

                    try
                    {

                        #region TOTAL FILAS

                            value = transaccionDA.TransaccionRows(conexion, "Lotes_Segregados_Total_Filas", paramTransaccion);

                            return value;

                        #endregion

                    }
                    catch (Exception)
                    {
                        throw;
                    }
                }

            #endregion 

            #region MATERIALES CONSTRUCCIONES PREDOMINANTES
        
                public RespuestaEntidad MaterialesConstruccionesPredominantesInsertar(String conexion, String conexionBitacora, MaterialesConstruccionesPredominantesEntidad materialConstruccionPredominante, BitacorasEntidad _bitacora)
                {
                    RespuestaEntidad elemento = null;
                    DataSet rowsAffected;

                    #region PARAMETROS

                    SqlParameter[] paramTransaccion = new SqlParameter[]
                    {
                        new SqlParameter("@piCod_Material_Construccion", materialConstruccionPredominante.CodMaterialConstruccionPredominante),
                        new SqlParameter("@psDes_Material_Construccion", materialConstruccionPredominante.DesMaterialConstruccionPredominante),
                        new SqlParameter("@psInd_Metodo_Insercion", materialConstruccionPredominante.IndMetodoInsercion),
                        new SqlParameter("@psCod_Usuario", materialConstruccionPredominante.CodUsuarioIngreso)
                    };

                    #endregion

                    try
                    {

                        #region INSERTAR

                        rowsAffected = transaccionDA.TransaccionInsertar(conexion, conexionBitacora, "Materiales_Construcciones_Predominantes_Inserta", paramTransaccion, EnumTipoBitacora.INSERTAR, _bitacora);
                        if (!rowsAffected.Equals(null))
                        {
                            elemento = new RespuestaEntidad();
                            elemento.ValorEstado = int.Parse(rowsAffected.Tables[0].Rows[0][0].ToString());
                            elemento.ValorError = int.Parse(rowsAffected.Tables[0].Rows[0][1].ToString());
                        }

                        return elemento;

                        #endregion

                    }
                    catch (Exception)
                    {
                        throw;
                    }
                }
        
                public RespuestaEntidad MaterialesConstruccionesPredominantesModificar(String conexion, String conexionBitacora, MaterialesConstruccionesPredominantesEntidad materialConstruccionPredominante, BitacorasEntidad _bitacora)
                {
                    RespuestaEntidad elemento = null;
                    DataSet rowsAffected;

                    #region PARAMETROS

                    SqlParameter[] paramTransaccion = new SqlParameter[]
                    {
                        new SqlParameter("@piId_Material_Construccion", materialConstruccionPredominante.IdMaterialConstruccionPredominante),
                        new SqlParameter("@piCod_Material_Construccion", materialConstruccionPredominante.CodMaterialConstruccionPredominante),
                        new SqlParameter("@psDes_Material_Construccion", materialConstruccionPredominante.DesMaterialConstruccionPredominante),
                        new SqlParameter("@psInd_Metodo_Insercion", materialConstruccionPredominante.IndMetodoInsercion),
                        new SqlParameter("@psCod_Usuario", materialConstruccionPredominante.CodUsuarioIngreso)
                    };

                    #endregion

                    #region KeyValuePair LIST

                    List<KeyValuePair<string, string>> itemConsulta = new List<KeyValuePair<string, string>>();
                    itemConsulta.Add(helper.CrearKeyValuePairItem("@piId_Material_Construccion", materialConstruccionPredominante.IdMaterialConstruccionPredominante.ToString()));

                    #endregion

                    try
                    {

                        #region MODIFICAR

                        rowsAffected = transaccionDA.TransaccionModificar(conexion, conexionBitacora, "Materiales_Construcciones_Predominantes_Actualiza", paramTransaccion, EnumTipoBitacora.ACTUALIZAR, itemConsulta, "Materiales_Construcciones_Predominantes_Consulta_Detalle", _bitacora);
                        if (!rowsAffected.Equals(null))
                        {
                            elemento = new RespuestaEntidad();
                            elemento.ValorEstado = int.Parse(rowsAffected.Tables[0].Rows[0][0].ToString());
                            elemento.ValorError = int.Parse(rowsAffected.Tables[0].Rows[0][1].ToString());
                        }

                        return elemento;

                        #endregion

                    }
                    catch (Exception)
                    {
                        throw;
                    }
                }
        
                public RespuestaEntidad MaterialesConstruccionesPredominantesEliminar(String conexion, String conexionBitacora, MaterialesConstruccionesPredominantesEntidad materialConstruccionPredominante, BitacorasEntidad _bitacora)
                {
                    RespuestaEntidad elemento = null;
                    DataSet rowsAffected;

                    #region PARAMETROS

                    SqlParameter[] paramTransaccion = new SqlParameter[]
                    {
                        new SqlParameter("@piId_Material_Construccion", materialConstruccionPredominante.IdMaterialConstruccionPredominante)
                    };

                    #endregion

                    #region KeyValuePair LIST

                    List<KeyValuePair<string, string>> itemConsulta = new List<KeyValuePair<string, string>>();
                    itemConsulta.Add(helper.CrearKeyValuePairItem("@piId_Material_Construccion", materialConstruccionPredominante.IdMaterialConstruccionPredominante.ToString()));

                    #endregion

                    try
                    {

                        #region ELIMINAR

                        rowsAffected = transaccionDA.TransaccionEliminar(conexion, conexionBitacora, "Materiales_Construcciones_Predominantes_Elimina", paramTransaccion, EnumTipoBitacora.ELIMINAR, itemConsulta, "Materiales_Construcciones_Predominantes_Consulta_Detalle", _bitacora);
                        if (!rowsAffected.Equals(null))
                        {
                            elemento = new RespuestaEntidad();
                            elemento.ValorEstado = int.Parse(rowsAffected.Tables[0].Rows[0][0].ToString());
                            elemento.ValorError = int.Parse(rowsAffected.Tables[0].Rows[0][1].ToString());
                        }

                        return elemento;

                        #endregion

                    }
                    catch (Exception)
                    {
                        throw;
                    }
                }

                public List<MaterialesConstruccionesPredominantesEntidad> MaterialesConstruccionesPredominantesConsultar(String conexion, ParametrosConsultaEntidad entidad)
                {
                    List<MaterialesConstruccionesPredominantesEntidad> retorno = new List<MaterialesConstruccionesPredominantesEntidad>();
                    MaterialesConstruccionesPredominantesEntidad elemento;
                    DataSet rowsAffected;

                    #region PARAMETROS

                    SqlParameter[] paramTransaccion = new SqlParameter[]
                    {
                        new SqlParameter("@piIndice_Inicio_Fila", entidad.IndiceInicioFila),
                        new SqlParameter("@piMaximo_Filas", entidad.MaximoFilas),
                        new SqlParameter("@psValores_Filtro", entidad.ValorFiltro),
                        new SqlParameter("@psColumnas_Filtros", entidad.ColumnaFiltro),
                        new SqlParameter("@psColumna_Ordenar", entidad.ColumnaOrdenar)
                    };

                    #endregion

                    try
                    {

                        #region CONSULTAR

                        rowsAffected = transaccionDA.TransaccionConsulta(conexion, "Materiales_Construcciones_Predominantes_Consulta", paramTransaccion);
                        if (!rowsAffected.Equals(null))
                        {
                            foreach (DataRow dr in rowsAffected.Tables[0].Rows)
                            {
                                elemento = new MaterialesConstruccionesPredominantesEntidad();
                                elemento.IdMaterialConstruccionPredominante = int.Parse(dr[0].ToString());
                                elemento.CodMaterialConstruccionPredominante = int.Parse(dr[1].ToString());
                                elemento.DesMaterialConstruccionPredominante = dr[2].ToString();

                                retorno.Add(elemento);
                            }
                        }

                        return retorno;

                        #endregion

                    }
                    catch (Exception)
                    {
                        throw;
                    }
                }
        
                public MaterialesConstruccionesPredominantesEntidad MaterialesConstruccionesPredominantesConsultarDetalle(String conexion, String conexionBitacora, MaterialesConstruccionesPredominantesEntidad materialConstruccionPredominante, BitacorasEntidad _bitacora)
                {
                    MaterialesConstruccionesPredominantesEntidad retorno = new MaterialesConstruccionesPredominantesEntidad();
                    DataSet rowsAffected;

                    #region PARAMETROS

                    SqlParameter[] paramTransaccion = new SqlParameter[]
                    {
                        new SqlParameter("@piId_Material_Construccion", materialConstruccionPredominante.IdMaterialConstruccionPredominante)
                    };

                    #endregion

                    #region KeyValuePair LIST

                    List<KeyValuePair<string, string>> itemConsulta = new List<KeyValuePair<string, string>>();
                    itemConsulta.Add(helper.CrearKeyValuePairItem("@piId_Material_Construccion", materialConstruccionPredominante.IdMaterialConstruccionPredominante.ToString()));

                    #endregion

                    try
                    {

                        #region CONSULTAR DETALLE

                        rowsAffected = transaccionDA.TransaccionConsultaDetalle(conexion, conexionBitacora, "Materiales_Construcciones_Predominantes_Consulta_Detalle", paramTransaccion, EnumTipoBitacora.CONSULTAR, itemConsulta, "Materiales_Construcciones_Predominantes_Consulta_Detalle", _bitacora);
                        if (!rowsAffected.Equals(null))
                        {
                            retorno.IdMaterialConstruccionPredominante = int.Parse(rowsAffected.Tables[0].Rows[0][0].ToString());
                            retorno.CodMaterialConstruccionPredominante = int.Parse(rowsAffected.Tables[0].Rows[0][1].ToString());
                            retorno.DesMaterialConstruccionPredominante = rowsAffected.Tables[0].Rows[0][2].ToString();
                            retorno.IndMetodoInsercion = rowsAffected.Tables[0].Rows[0][3].ToString();
                            if (rowsAffected.Tables[0].Rows[0][4].ToString().Length > 0)
                                retorno.FechaIngreso = DateTime.Parse(rowsAffected.Tables[0].Rows[0][4].ToString());
                            else
                                retorno.FechaIngreso = null;
                            retorno.CodUsuarioIngreso = rowsAffected.Tables[0].Rows[0][5].ToString();
                            if (rowsAffected.Tables[0].Rows[0][6].ToString().Length > 0)
                                retorno.FechaUltimaModificacion = DateTime.Parse(rowsAffected.Tables[0].Rows[0][6].ToString());
                            else
                                retorno.FechaUltimaModificacion = null;
                            retorno.CodUsuarioUltimaModificacion = rowsAffected.Tables[0].Rows[0][7].ToString();
                            retorno.DesUsuarioIngreso = rowsAffected.Tables[0].Rows[0][8].ToString();
                            retorno.DesUsuarioUltimaModificacion = rowsAffected.Tables[0].Rows[0][9].ToString();
                        }

                        return retorno;

                        #endregion

                    }
                    catch (Exception)
                    {
                        throw;
                    }
                }
        
                public int MaterialesConstruccionesPredominantesTotalFilas(String conexion, ParametrosTotalFilasEntidad entidad)
                {

                    int value;

                    #region PARAMETROS

                    SqlParameter[] paramTransaccion = new SqlParameter[]
                    {
                        new SqlParameter("@psValor_Filtro", entidad.ValorFiltro),
                        new SqlParameter("@psColumna_Filtro", entidad.ColumnaFiltro)
                    };

                    #endregion

                    try
                    {

                        #region TOTAL FILAS

                            value = transaccionDA.TransaccionRows(conexion, "Materiales_Construcciones_Predominantes_Total_Filas", paramTransaccion);

                            return value;

                        #endregion

                    }
                    catch (Exception)
                    {
                        throw;
                    }
                }

            #endregion 

            #region MATERIALES EXTERNOS INTERNOS
        
                public RespuestaEntidad MaterialesParedesExternasInternasInsertar(String conexion, String conexionBitacora, MaterialesExternosInternosEntidad materialExternoInterno, BitacorasEntidad _bitacora)
                {
                    RespuestaEntidad elemento = null;
                    DataSet rowsAffected;

                    #region PARAMETROS

                    SqlParameter[] paramTransaccion = new SqlParameter[]
                    {
                        new SqlParameter("@piCod_Material_Externo_Interno", materialExternoInterno.CodMaterialExternoInterno),
                        new SqlParameter("@psDes_Material_Externo_Interno", materialExternoInterno.DesMaterialExternoInterno),
                        new SqlParameter("@psInd_Metodo_Insercion", materialExternoInterno.IndMetodoInsercion),
                        new SqlParameter("@psCod_Usuario", materialExternoInterno.CodUsuarioIngreso)
                    };

                    #endregion

                    try
                    {

                        #region INSERTAR

                        rowsAffected = transaccionDA.TransaccionInsertar(conexion, conexionBitacora, "Materiales_Externos_Internos_Inserta", paramTransaccion, EnumTipoBitacora.INSERTAR, _bitacora);
                        if (!rowsAffected.Equals(null))
                        {
                            elemento = new RespuestaEntidad();
                            elemento.ValorEstado = int.Parse(rowsAffected.Tables[0].Rows[0][0].ToString());
                            elemento.ValorError = int.Parse(rowsAffected.Tables[0].Rows[0][1].ToString());
                        }

                        return elemento;

                        #endregion

                    }
                    catch (Exception)
                    {
                        throw;
                    }
                }
        
                public RespuestaEntidad MaterialesParedesExternasInternasModificar(String conexion, String conexionBitacora, MaterialesExternosInternosEntidad materialExternoInterno, BitacorasEntidad _bitacora)
                {
                    RespuestaEntidad elemento = null;
                    DataSet rowsAffected;

                    #region PARAMETROS

                    SqlParameter[] paramTransaccion = new SqlParameter[]
                    {
                        new SqlParameter("@piId_Material_Externo_Interno", materialExternoInterno.IdMaterialExternoInterno),
                        new SqlParameter("@piCod_Material_Externo_Interno", materialExternoInterno.CodMaterialExternoInterno),
                        new SqlParameter("@psDes_Material_Externo_Interno", materialExternoInterno.DesMaterialExternoInterno),
                        new SqlParameter("@psInd_Metodo_Insercion", materialExternoInterno.IndMetodoInsercion),
                        new SqlParameter("@psCod_Usuario", materialExternoInterno.CodUsuarioIngreso)
                    };

                    #endregion

                    #region KeyValuePair LIST

                    List<KeyValuePair<string, string>> itemConsulta = new List<KeyValuePair<string, string>>();
                    itemConsulta.Add(helper.CrearKeyValuePairItem("@piId_Material_Externo_Interno", materialExternoInterno.IdMaterialExternoInterno.ToString()));

                    #endregion

                    try
                    {

                        #region MODIFICAR

                        rowsAffected = transaccionDA.TransaccionModificar(conexion, conexionBitacora, "Materiales_Externos_Internos_Actualiza", paramTransaccion, EnumTipoBitacora.ACTUALIZAR, itemConsulta, "Materiales_Externos_Internos_Consulta_Detalle", _bitacora);
                        if (!rowsAffected.Equals(null))
                        {
                            elemento = new RespuestaEntidad();
                            elemento.ValorEstado = int.Parse(rowsAffected.Tables[0].Rows[0][0].ToString());
                            elemento.ValorError = int.Parse(rowsAffected.Tables[0].Rows[0][1].ToString());
                        }

                        return elemento;

                        #endregion

                    }
                    catch (Exception)
                    {
                        throw;
                    }
                }
        
                public RespuestaEntidad MaterialesParedesExternasInternasEliminar(String conexion, String conexionBitacora, MaterialesExternosInternosEntidad materialExternoInterno, BitacorasEntidad _bitacora)
                {
                    RespuestaEntidad elemento = null;
                    DataSet rowsAffected;

                    #region PARAMETROS

                    SqlParameter[] paramTransaccion = new SqlParameter[]
                    {
                        new SqlParameter("@piId_Material_Externo_Interno", materialExternoInterno.IdMaterialExternoInterno)
                    };

                    #endregion

                    #region KeyValuePair LIST

                    List<KeyValuePair<string, string>> itemConsulta = new List<KeyValuePair<string, string>>();
                    itemConsulta.Add(helper.CrearKeyValuePairItem("@piId_Material_Externo_Interno", materialExternoInterno.IdMaterialExternoInterno.ToString()));

                    #endregion

                    try
                    {

                        #region ELIMINAR

                        rowsAffected = transaccionDA.TransaccionEliminar(conexion, conexionBitacora, "Materiales_Externos_Internos_Elimina", paramTransaccion, EnumTipoBitacora.ELIMINAR, itemConsulta, "Materiales_Externos_Internos_Consulta_Detalle", _bitacora);
                        if (!rowsAffected.Equals(null))
                        {
                            elemento = new RespuestaEntidad();
                            elemento.ValorEstado = int.Parse(rowsAffected.Tables[0].Rows[0][0].ToString());
                            elemento.ValorError = int.Parse(rowsAffected.Tables[0].Rows[0][1].ToString());
                        }

                        return elemento;

                        #endregion

                    }
                    catch (Exception)
                    {
                        throw;
                    }
                }

                public List<MaterialesExternosInternosEntidad> MaterialesParedesExternasInternasConsultar(String conexion, ParametrosConsultaEntidad entidad)
                {
                    List<MaterialesExternosInternosEntidad> retorno = new List<MaterialesExternosInternosEntidad>();
                    MaterialesExternosInternosEntidad elemento;
                    DataSet rowsAffected;

                    #region PARAMETROS

                    SqlParameter[] paramTransaccion = new SqlParameter[]
                    {
                       new SqlParameter("@piIndice_Inicio_Fila", entidad.IndiceInicioFila),
                       new SqlParameter("@piMaximo_Filas", entidad.MaximoFilas),
                       new SqlParameter("@psValores_Filtro", entidad.ValorFiltro),
                       new SqlParameter("@psColumnas_Filtros", entidad.ColumnaFiltro),
                       new SqlParameter("@psColumna_Ordenar", entidad.ColumnaOrdenar)
                    };

                    #endregion

                    try
                    {

                        #region CONSULTAR

                        rowsAffected = transaccionDA.TransaccionConsulta(conexion, "Materiales_Externos_Internos_Consulta", paramTransaccion);
                        if (!rowsAffected.Equals(null))
                        {
                            foreach (DataRow dr in rowsAffected.Tables[0].Rows)
                            {
                                elemento = new MaterialesExternosInternosEntidad();
                                elemento.IdMaterialExternoInterno = int.Parse(dr[0].ToString());
                                elemento.CodMaterialExternoInterno = int.Parse(dr[1].ToString());
                                elemento.DesMaterialExternoInterno = dr[2].ToString();

                                retorno.Add(elemento);
                            }
                        }

                        return retorno;

                        #endregion

                    }
                    catch (Exception)
                    {
                        throw;
                    }
                }
        
                public MaterialesExternosInternosEntidad MaterialesParedesExternasInternasConsultarDetalle(String conexion, String conexionBitacora, MaterialesExternosInternosEntidad materialExternoInterno, BitacorasEntidad _bitacora)
                {
                    MaterialesExternosInternosEntidad retorno = new MaterialesExternosInternosEntidad();
                    DataSet rowsAffected;

                    #region PARAMETROS

                    SqlParameter[] paramTransaccion = new SqlParameter[]
                    {
                        new SqlParameter("@piId_Material_Externo_Interno", materialExternoInterno.IdMaterialExternoInterno)
                    };

                    #endregion

                    #region KeyValuePair LIST

                    List<KeyValuePair<string, string>> itemConsulta = new List<KeyValuePair<string, string>>();
                    itemConsulta.Add(helper.CrearKeyValuePairItem("@piId_Material_Externo_Interno", materialExternoInterno.IdMaterialExternoInterno.ToString()));

                    #endregion

                    try
                    {

                        #region CONSULTAR DETALLE

                        rowsAffected = transaccionDA.TransaccionConsultaDetalle(conexion, conexionBitacora, "Materiales_Externos_Internos_Consulta_Detalle", paramTransaccion, EnumTipoBitacora.CONSULTAR, itemConsulta, "Materiales_Externos_Internos_Consulta_Detalle", _bitacora);
                        if (!rowsAffected.Equals(null))
                        {
                            retorno.IdMaterialExternoInterno = int.Parse(rowsAffected.Tables[0].Rows[0][0].ToString());
                            retorno.CodMaterialExternoInterno = int.Parse(rowsAffected.Tables[0].Rows[0][1].ToString());
                            retorno.DesMaterialExternoInterno = rowsAffected.Tables[0].Rows[0][2].ToString();
                            retorno.IndMetodoInsercion = rowsAffected.Tables[0].Rows[0][3].ToString();
                            if (rowsAffected.Tables[0].Rows[0][4].ToString().Length > 0)
                                retorno.FechaIngreso = DateTime.Parse(rowsAffected.Tables[0].Rows[0][4].ToString());
                            else
                                retorno.FechaIngreso = null;
                            retorno.CodUsuarioIngreso = rowsAffected.Tables[0].Rows[0][5].ToString();
                            if (rowsAffected.Tables[0].Rows[0][6].ToString().Length > 0)
                                retorno.FechaUltimaModificacion = DateTime.Parse(rowsAffected.Tables[0].Rows[0][6].ToString());
                            else
                                retorno.FechaUltimaModificacion = null;
                            retorno.CodUsuarioUltimaModificacion = rowsAffected.Tables[0].Rows[0][7].ToString();
                            retorno.DesUsuarioIngreso = rowsAffected.Tables[0].Rows[0][8].ToString();
                            retorno.DesUsuarioUltimaModificacion = rowsAffected.Tables[0].Rows[0][9].ToString();
                        }

                        return retorno;

                        #endregion

                    }
                    catch (Exception)
                    {
                        throw;
                    }
                }
        
                public int MaterialesParedesExternasInternasTotalFilas(String conexion, ParametrosTotalFilasEntidad entidad)
                {

                    int value;

                    #region PARAMETROS

                    SqlParameter[] paramTransaccion = new SqlParameter[]
                    {
                        new SqlParameter("@psValor_Filtro", entidad.ValorFiltro),
                        new SqlParameter("@psColumna_Filtro", entidad.ColumnaFiltro)
                    };

                    #endregion

                    try
                    {

                        #region TOTAL FILAS

                            value = transaccionDA.TransaccionRows(conexion, "Materiales_Externos_Internos_Total_Filas", paramTransaccion);

                            return value;

                        #endregion

                    }
                    catch (Exception)
                    {
                        throw;
                    }
                }

            #endregion 

            #region MATERIALES EXTERNOS TAPICHELES
        
                public RespuestaEntidad MaterialesParedesExternasTapichelesInsertar(String conexion, String conexionBitacora, MaterialesExternosTapichelesEntidad materialExternoTapichel, BitacorasEntidad _bitacora)
                {
                    RespuestaEntidad elemento = null;
                    DataSet rowsAffected;

                    #region PARAMETROS

                    SqlParameter[] paramTransaccion = new SqlParameter[]
                    {
                        new SqlParameter("@piCod_Material_Externo_Tapichel", materialExternoTapichel.CodMaterialExternoTapichel),
                        new SqlParameter("@psDes_Material_Externo_Tapichel", materialExternoTapichel.DesMaterialExternoTapichel),
                        new SqlParameter("@psInd_Metodo_Insercion", materialExternoTapichel.IndMetodoInsercion),
                        new SqlParameter("@psCod_Usuario", materialExternoTapichel.CodUsuarioIngreso)
                    };

                    #endregion

                    try
                    {

                        #region INSERTAR

                        rowsAffected = transaccionDA.TransaccionInsertar(conexion, conexionBitacora, "Materiales_Externos_Tapicheles_Inserta", paramTransaccion, EnumTipoBitacora.INSERTAR, _bitacora);
                        if (!rowsAffected.Equals(null))
                        {
                            elemento = new RespuestaEntidad();
                            elemento.ValorEstado = int.Parse(rowsAffected.Tables[0].Rows[0][0].ToString());
                            elemento.ValorError = int.Parse(rowsAffected.Tables[0].Rows[0][1].ToString());
                        }

                        return elemento;

                        #endregion

                    }
                    catch (Exception)
                    {
                        throw;
                    }
                }
        
                public RespuestaEntidad MaterialesParedesExternasTapichelesModificar(String conexion, String conexionBitacora, MaterialesExternosTapichelesEntidad materialExternoTapichel, BitacorasEntidad _bitacora)
                {
                    RespuestaEntidad elemento = null;
                    DataSet rowsAffected;

                    #region PARAMETROS

                    SqlParameter[] paramTransaccion = new SqlParameter[]
                    {
                        new SqlParameter("@piId_Material_Externo_Tapichel", materialExternoTapichel.IdMaterialExternoTapichel),
                        new SqlParameter("@piCod_Material_Externo_Tapichel", materialExternoTapichel.CodMaterialExternoTapichel),
                        new SqlParameter("@psDes_Material_Externo_Tapichel", materialExternoTapichel.DesMaterialExternoTapichel),
                        new SqlParameter("@psInd_Metodo_Insercion", materialExternoTapichel.IndMetodoInsercion),
                        new SqlParameter("@psCod_Usuario", materialExternoTapichel.CodUsuarioIngreso)
                    };

                    #endregion

                    #region KeyValuePair LIST

                    List<KeyValuePair<string, string>> itemConsulta = new List<KeyValuePair<string, string>>();
                    itemConsulta.Add(helper.CrearKeyValuePairItem("@piId_Material_Externo_Tapichel", materialExternoTapichel.IdMaterialExternoTapichel.ToString()));

                    #endregion

                    try
                    {

                        #region MODIFICAR

                        rowsAffected = transaccionDA.TransaccionModificar(conexion, conexionBitacora, "Materiales_Externos_Tapicheles_Actualiza", paramTransaccion, EnumTipoBitacora.ACTUALIZAR, itemConsulta, "Materiales_Externos_Tapicheles_Consulta_Detalle", _bitacora);
                        if (!rowsAffected.Equals(null))
                        {
                            elemento = new RespuestaEntidad();
                            elemento.ValorEstado = int.Parse(rowsAffected.Tables[0].Rows[0][0].ToString());
                            elemento.ValorError = int.Parse(rowsAffected.Tables[0].Rows[0][1].ToString());
                        }

                        return elemento;

                        #endregion

                    }
                    catch (Exception)
                    {
                        throw;
                    }
                }
        
                public RespuestaEntidad MaterialesParedesExternasTapichelesEliminar(String conexion, String conexionBitacora, MaterialesExternosTapichelesEntidad materialExternoTapichel, BitacorasEntidad _bitacora)
                {
                    RespuestaEntidad elemento = null;
                    DataSet rowsAffected;

                    #region PARAMETROS

                    SqlParameter[] paramTransaccion = new SqlParameter[]
                    {
                        new SqlParameter("@piId_Material_Externo_Tapichel", materialExternoTapichel.IdMaterialExternoTapichel)
                    };

                    #endregion

                    #region KeyValuePair LIST

                    List<KeyValuePair<string, string>> itemConsulta = new List<KeyValuePair<string, string>>();
                    itemConsulta.Add(helper.CrearKeyValuePairItem("@piId_Material_Externo_Tapichel", materialExternoTapichel.IdMaterialExternoTapichel.ToString()));

                    #endregion

                    try
                    {

                        #region ELIMINAR

                        rowsAffected = transaccionDA.TransaccionEliminar(conexion, conexionBitacora, "Materiales_Externos_Tapicheles_Elimina", paramTransaccion, EnumTipoBitacora.ELIMINAR, itemConsulta, "Materiales_Externos_Tapicheles_Consulta_Detalle", _bitacora);
                        if (!rowsAffected.Equals(null))
                        {
                            elemento = new RespuestaEntidad();
                            elemento.ValorEstado = int.Parse(rowsAffected.Tables[0].Rows[0][0].ToString());
                            elemento.ValorError = int.Parse(rowsAffected.Tables[0].Rows[0][1].ToString());
                        }

                        return elemento;

                        #endregion

                    }
                    catch (Exception)
                    {
                        throw;
                    }
                }

                public List<MaterialesExternosTapichelesEntidad> MaterialesParedesExternasTapichelesConsultar(String conexion, ParametrosConsultaEntidad entidad)
                {
                    List<MaterialesExternosTapichelesEntidad> retorno = new List<MaterialesExternosTapichelesEntidad>();
                    MaterialesExternosTapichelesEntidad elemento;
                    DataSet rowsAffected;

                    #region PARAMETROS

                    SqlParameter[] paramTransaccion = new SqlParameter[]
                    {
                        new SqlParameter("@piIndice_Inicio_Fila", entidad.IndiceInicioFila),
                        new SqlParameter("@piMaximo_Filas", entidad.MaximoFilas),
                        new SqlParameter("@psValores_Filtro", entidad.ValorFiltro),
                        new SqlParameter("@psColumnas_Filtros", entidad.ColumnaFiltro),
                        new SqlParameter("@psColumna_Ordenar", entidad.ColumnaOrdenar)
                    };

                    #endregion

                    try
                    {

                        #region CONSULTAR

                        rowsAffected = transaccionDA.TransaccionConsulta(conexion, "Materiales_Externos_Tapicheles_Consulta", paramTransaccion);
                        if (!rowsAffected.Equals(null))
                        {
                            foreach (DataRow dr in rowsAffected.Tables[0].Rows)
                            {
                                elemento = new MaterialesExternosTapichelesEntidad();
                                elemento.IdMaterialExternoTapichel = int.Parse(dr[0].ToString());
                                elemento.CodMaterialExternoTapichel = int.Parse(dr[1].ToString());
                                elemento.DesMaterialExternoTapichel = dr[2].ToString();

                                retorno.Add(elemento);
                            }
                        }

                        return retorno;

                        #endregion

                    }
                    catch (Exception)
                    {
                        throw;
                    }
                }
       
                public MaterialesExternosTapichelesEntidad MaterialesParedesExternasTapichelesConsultarDetalle(String conexion, String conexionBitacora, MaterialesExternosTapichelesEntidad materialExternoTapichel, BitacorasEntidad _bitacora)
                {
                    MaterialesExternosTapichelesEntidad retorno = new MaterialesExternosTapichelesEntidad();
                    DataSet rowsAffected;

                    #region PARAMETROS

                    SqlParameter[] paramTransaccion = new SqlParameter[]
                    {
                        new SqlParameter("@piId_Material_Externo_Tapichel", materialExternoTapichel.IdMaterialExternoTapichel)
                    };

                    #endregion

                    #region KeyValuePair LIST

                    List<KeyValuePair<string, string>> itemConsulta = new List<KeyValuePair<string, string>>();
                    itemConsulta.Add(helper.CrearKeyValuePairItem("@piId_Material_Externo_Tapichel", materialExternoTapichel.IdMaterialExternoTapichel.ToString()));

                    #endregion

                    try
                    {

                        #region CONSULTAR DETALLE

                        rowsAffected = transaccionDA.TransaccionConsultaDetalle(conexion, conexionBitacora, "Materiales_Externos_Tapicheles_Consulta_Detalle", paramTransaccion, EnumTipoBitacora.CONSULTAR, itemConsulta, "Materiales_Externos_Tapicheles_Consulta_Detalle", _bitacora);
                        if (!rowsAffected.Equals(null))
                        {
                            retorno.IdMaterialExternoTapichel = int.Parse(rowsAffected.Tables[0].Rows[0][0].ToString());
                            retorno.CodMaterialExternoTapichel = int.Parse(rowsAffected.Tables[0].Rows[0][1].ToString());
                            retorno.DesMaterialExternoTapichel = rowsAffected.Tables[0].Rows[0][2].ToString();
                            retorno.IndMetodoInsercion = rowsAffected.Tables[0].Rows[0][3].ToString();
                            if (rowsAffected.Tables[0].Rows[0][4].ToString().Length > 0)
                                retorno.FechaIngreso = DateTime.Parse(rowsAffected.Tables[0].Rows[0][4].ToString());
                            else
                                retorno.FechaIngreso = null;
                            retorno.CodUsuarioIngreso = rowsAffected.Tables[0].Rows[0][5].ToString();
                            if (rowsAffected.Tables[0].Rows[0][6].ToString().Length > 0)
                                retorno.FechaUltimaModificacion = DateTime.Parse(rowsAffected.Tables[0].Rows[0][6].ToString());
                            else
                                retorno.FechaUltimaModificacion = null;
                            retorno.CodUsuarioUltimaModificacion = rowsAffected.Tables[0].Rows[0][7].ToString();
                            retorno.DesUsuarioIngreso = rowsAffected.Tables[0].Rows[0][8].ToString();
                            retorno.DesUsuarioUltimaModificacion = rowsAffected.Tables[0].Rows[0][9].ToString();
                        }

                        return retorno;

                        #endregion

                    }
                    catch (Exception)
                    {
                        throw;
                    }
                }
        
                public int MaterialesParedesExternasTapichelesTotalFilas(String conexion, ParametrosTotalFilasEntidad entidad)
                {

                    int value;

                    #region PARAMETROS

                    SqlParameter[] paramTransaccion = new SqlParameter[]
                    {
                        new SqlParameter("@psValor_Filtro", entidad.ValorFiltro),
                        new SqlParameter("@psColumna_Filtro", entidad.ColumnaFiltro)
                    };

                    #endregion

                    try
                    {

                        #region TOTAL FILAS
                        
                            value = transaccionDA.TransaccionRows(conexion, "Materiales_Externos_Tapicheles_Total_Filas", paramTransaccion);

                            return value;

                        #endregion

                    }
                    catch (Exception)
                    {
                        throw;
                    }
                }

            #endregion 

            #region MATERIALES PISOS
        
                public RespuestaEntidad MaterialesPisosInsertar(String conexion, String conexionBitacora, MaterialesPisosEntidad materialPiso, BitacorasEntidad _bitacora)
                {
                    RespuestaEntidad elemento = null;
                    DataSet rowsAffected;

                    #region PARAMETROS

                    SqlParameter[] paramTransaccion = new SqlParameter[]
                    {
                        new SqlParameter("@piCod_Material_Piso", materialPiso.CodMaterialPiso),
                        new SqlParameter("@psDes_Material_Piso", materialPiso.DesMaterialPiso),
                        new SqlParameter("@psInd_Metodo_Insercion", materialPiso.IndMetodoInsercion),
                        new SqlParameter("@psCod_Usuario", materialPiso.CodUsuarioIngreso)                       
                    };

                    #endregion

                    try
                    {

                        #region INSERTAR

                        rowsAffected = transaccionDA.TransaccionInsertar(conexion, conexionBitacora, "Materiales_Pisos_Inserta", paramTransaccion, EnumTipoBitacora.INSERTAR, _bitacora);
                        if (!rowsAffected.Equals(null))
                        {
                            elemento = new RespuestaEntidad();
                            elemento.ValorEstado = int.Parse(rowsAffected.Tables[0].Rows[0][0].ToString());
                            elemento.ValorError = int.Parse(rowsAffected.Tables[0].Rows[0][1].ToString());
                        }

                        return elemento;

                        #endregion

                    }
                    catch (Exception)
                    {
                        throw;
                    }
                }
        
                public RespuestaEntidad MaterialesPisosModificar(String conexion, String conexionBitacora, MaterialesPisosEntidad materialPiso, BitacorasEntidad _bitacora)
                {
                    RespuestaEntidad elemento = null;
                    DataSet rowsAffected;

                    #region PARAMETROS

                    SqlParameter[] paramTransaccion = new SqlParameter[]
                    {
                        new SqlParameter("@piId_Material_Piso", materialPiso.IdMaterialPiso),
                        new SqlParameter("@piCod_Material_Piso", materialPiso.CodMaterialPiso),
                        new SqlParameter("@psDes_Material_Piso", materialPiso.DesMaterialPiso),
                        new SqlParameter("@psInd_Metodo_Insercion", materialPiso.IndMetodoInsercion),
                        new SqlParameter("@psCod_Usuario", materialPiso.CodUsuarioIngreso)   
                    };

                    #endregion

                    #region KeyValuePair LIST

                    List<KeyValuePair<string, string>> itemConsulta = new List<KeyValuePair<string, string>>();
                    itemConsulta.Add(helper.CrearKeyValuePairItem("@piId_Material_Piso", materialPiso.IdMaterialPiso.ToString()));

                    #endregion

                    try
                    {

                        #region MODIFICAR

                        rowsAffected = transaccionDA.TransaccionModificar(conexion, conexionBitacora, "Materiales_Pisos_Actualiza", paramTransaccion, EnumTipoBitacora.ACTUALIZAR, itemConsulta, "Materiales_Pisos_Consulta_Detalle", _bitacora);
                        if (!rowsAffected.Equals(null))
                        {
                            elemento = new RespuestaEntidad();
                            elemento.ValorEstado = int.Parse(rowsAffected.Tables[0].Rows[0][0].ToString());
                            elemento.ValorError = int.Parse(rowsAffected.Tables[0].Rows[0][1].ToString());
                        }

                        return elemento;

                        #endregion

                    }
                    catch (Exception)
                    {
                        throw;
                    }
                }
        
                public RespuestaEntidad MaterialesPisosEliminar(String conexion, String conexionBitacora, MaterialesPisosEntidad materialPiso, BitacorasEntidad _bitacora)
                {
                    RespuestaEntidad elemento = null;
                    DataSet rowsAffected;

                    #region PARAMETROS

                    SqlParameter[] paramTransaccion = new SqlParameter[]
                    {
                        new SqlParameter("@piId_Material_Piso", materialPiso.IdMaterialPiso)
                    };

                    #endregion

                    #region KeyValuePair LIST

                    List<KeyValuePair<string, string>> itemConsulta = new List<KeyValuePair<string, string>>();
                    itemConsulta.Add(helper.CrearKeyValuePairItem("@piId_Material_Piso", materialPiso.IdMaterialPiso.ToString()));

                    #endregion

                    try
                    {

                        #region ELIMINAR

                        rowsAffected = transaccionDA.TransaccionEliminar(conexion, conexionBitacora, "Materiales_Pisos_Elimina", paramTransaccion, EnumTipoBitacora.ELIMINAR, itemConsulta, "Materiales_Pisos_Consulta_Detalle", _bitacora);
                        if (!rowsAffected.Equals(null))
                        {
                            elemento = new RespuestaEntidad();
                            elemento.ValorEstado = int.Parse(rowsAffected.Tables[0].Rows[0][0].ToString());
                            elemento.ValorError = int.Parse(rowsAffected.Tables[0].Rows[0][1].ToString());
                        }

                        return elemento;

                        #endregion

                    }
                    catch (Exception)
                    {
                        throw;
                    }
                }

                public List<MaterialesPisosEntidad> MaterialesPisosConsultar(String conexion, ParametrosConsultaEntidad entidad)
                {
                    List<MaterialesPisosEntidad> retorno = new List<MaterialesPisosEntidad>();
                    MaterialesPisosEntidad elemento;
                    DataSet rowsAffected;

                    #region PARAMETROS

                    SqlParameter[] paramTransaccion = new SqlParameter[]
                    {
                       new SqlParameter("@piIndice_Inicio_Fila", entidad.IndiceInicioFila),
                       new SqlParameter("@piMaximo_Filas", entidad.MaximoFilas),
                       new SqlParameter("@psValores_Filtro", entidad.ValorFiltro),
                       new SqlParameter("@psColumnas_Filtros", entidad.ColumnaFiltro),
                       new SqlParameter("@psColumna_Ordenar", entidad.ColumnaOrdenar)
                    };

                    #endregion

                    try
                    {

                        #region CONSULTAR

                        rowsAffected = transaccionDA.TransaccionConsulta(conexion, "Materiales_Pisos_Consulta", paramTransaccion);
                        if (!rowsAffected.Equals(null))
                        {
                            foreach (DataRow dr in rowsAffected.Tables[0].Rows)
                            {
                                elemento = new MaterialesPisosEntidad();
                                elemento.IdMaterialPiso = int.Parse(dr[0].ToString());
                                elemento.CodMaterialPiso = int.Parse(dr[1].ToString());
                                elemento.DesMaterialPiso = dr[2].ToString();

                                retorno.Add(elemento);
                            }
                        }

                        return retorno;

                        #endregion

                    }
                    catch (Exception)
                    {
                        throw;
                    }
                }
        
                public MaterialesPisosEntidad MaterialesPisosConsultarDetalle(String conexion, String conexionBitacora, MaterialesPisosEntidad materialPiso, BitacorasEntidad _bitacora)
                {
                    MaterialesPisosEntidad retorno = new MaterialesPisosEntidad();
                    DataSet rowsAffected;

                    #region PARAMETROS

                    SqlParameter[] paramTransaccion = new SqlParameter[]
                    {
                        new SqlParameter("@piId_Material_Piso", materialPiso.IdMaterialPiso)
                    };

                    #endregion

                    #region KeyValuePair LIST

                    List<KeyValuePair<string, string>> itemConsulta = new List<KeyValuePair<string, string>>();
                    itemConsulta.Add(helper.CrearKeyValuePairItem("@piId_Material_Piso", materialPiso.IdMaterialPiso.ToString()));

                    #endregion

                    try
                    {

                        #region CONSULTAR DETALLE

                        rowsAffected = transaccionDA.TransaccionConsultaDetalle(conexion, conexionBitacora, "Materiales_Pisos_Consulta_Detalle", paramTransaccion, EnumTipoBitacora.CONSULTAR, itemConsulta, "Materiales_Pisos_Consulta_Detalle", _bitacora);
                        if (!rowsAffected.Equals(null))
                        {
                            retorno.IdMaterialPiso = int.Parse(rowsAffected.Tables[0].Rows[0][0].ToString());
                            retorno.CodMaterialPiso = int.Parse(rowsAffected.Tables[0].Rows[0][1].ToString());
                            retorno.DesMaterialPiso = rowsAffected.Tables[0].Rows[0][2].ToString();
                            retorno.IndMetodoInsercion = rowsAffected.Tables[0].Rows[0][3].ToString();
                            if (rowsAffected.Tables[0].Rows[0][4].ToString().Length > 0)
                                retorno.FechaIngreso = DateTime.Parse(rowsAffected.Tables[0].Rows[0][4].ToString());
                            else
                                retorno.FechaIngreso = null;
                            retorno.CodUsuarioIngreso = rowsAffected.Tables[0].Rows[0][5].ToString();
                            if (rowsAffected.Tables[0].Rows[0][6].ToString().Length > 0)
                                retorno.FechaUltimaModificacion = DateTime.Parse(rowsAffected.Tables[0].Rows[0][6].ToString());
                            else
                                retorno.FechaUltimaModificacion = null;
                            retorno.CodUsuarioUltimaModificacion = rowsAffected.Tables[0].Rows[0][7].ToString();
                            retorno.DesUsuarioIngreso = rowsAffected.Tables[0].Rows[0][8].ToString();
                            retorno.DesUsuarioUltimaModificacion = rowsAffected.Tables[0].Rows[0][9].ToString();
                        }

                        return retorno;

                        #endregion

                    }
                    catch (Exception)
                    {
                        throw;
                    }
                }
        
                public int MaterialesPisosTotalFilas(String conexion, ParametrosTotalFilasEntidad entidad)
                {

                    int value;                    

                    #region PARAMETROS

                    SqlParameter[] paramTransaccion = new SqlParameter[]
                    {
                        new SqlParameter("@psValor_Filtro", entidad.ValorFiltro),
                        new SqlParameter("@psColumna_Filtro", entidad.ColumnaFiltro)
                    };

                    #endregion

                    try
                    {

                        #region TOTAL FILAS

                            value = transaccionDA.TransaccionRows(conexion, "Materiales_Pisos_Total_Filas", paramTransaccion);

                            return value;

                        #endregion

                    }
                    catch (Exception)
                    {
                        throw;
                    }
                }

            #endregion 

            #region MATERIALES PUERTAS
        
                public RespuestaEntidad MaterialesPuertasInsertar(String conexion, String conexionBitacora, MaterialesPuertasEntidad materialPuerta, BitacorasEntidad _bitacora)
                {
                    RespuestaEntidad elemento = null;
                    DataSet rowsAffected;

                    #region PARAMETROS

                    SqlParameter[] paramTransaccion = new SqlParameter[]
                    {
                        new SqlParameter("@piCod_Material_Puerta", materialPuerta.CodMaterialPuerta),
                        new SqlParameter("@psDes_Material_Puerta", materialPuerta.DesMaterialPuerta),
                        new SqlParameter("@psInd_Metodo_Insercion", materialPuerta.IndMetodoInsercion),
                        new SqlParameter("@psCod_Usuario", materialPuerta.CodUsuarioIngreso)
                    };

                    #endregion

                    try
                    {

                        #region INSERTAR

                        rowsAffected = transaccionDA.TransaccionInsertar(conexion, conexionBitacora, "Materiales_Puertas_Inserta", paramTransaccion, EnumTipoBitacora.INSERTAR, _bitacora);
                        if (!rowsAffected.Equals(null))
                        {
                            elemento = new RespuestaEntidad();
                            elemento.ValorEstado = int.Parse(rowsAffected.Tables[0].Rows[0][0].ToString());
                            elemento.ValorError = int.Parse(rowsAffected.Tables[0].Rows[0][1].ToString());
                        }

                        return elemento;

                        #endregion

                    }
                    catch (Exception)
                    {
                        throw;
                    }
                }
        
                public RespuestaEntidad MaterialesPuertasModificar(String conexion, String conexionBitacora, MaterialesPuertasEntidad materialPuerta, BitacorasEntidad _bitacora)
                {
                    RespuestaEntidad elemento = null;
                    DataSet rowsAffected;

                    #region PARAMETROS

                    SqlParameter[] paramTransaccion = new SqlParameter[]
                    {
                        new SqlParameter("@piId_Material_Puerta", materialPuerta.IdMaterialPuerta),
                        new SqlParameter("@piCod_Material_Puerta", materialPuerta.CodMaterialPuerta),
                        new SqlParameter("@psDes_Material_Puerta", materialPuerta.DesMaterialPuerta),
                        new SqlParameter("@psInd_Metodo_Insercion", materialPuerta.IndMetodoInsercion),
                        new SqlParameter("@psCod_Usuario", materialPuerta.CodUsuarioIngreso)
                    };

                    #endregion

                    #region KeyValuePair LIST

                    List<KeyValuePair<string, string>> itemConsulta = new List<KeyValuePair<string, string>>();
                    itemConsulta.Add(helper.CrearKeyValuePairItem("@piId_Material_Puerta", materialPuerta.IdMaterialPuerta.ToString()));

                    #endregion

                    try
                    {

                        #region MODIFICAR

                        rowsAffected = transaccionDA.TransaccionModificar(conexion, conexionBitacora, "Materiales_Puertas_Actualiza", paramTransaccion, EnumTipoBitacora.ACTUALIZAR, itemConsulta, "Materiales_Puertas_Consulta_Detalle", _bitacora);
                        if (!rowsAffected.Equals(null))
                        {
                            elemento = new RespuestaEntidad();
                            elemento.ValorEstado = int.Parse(rowsAffected.Tables[0].Rows[0][0].ToString());
                            elemento.ValorError = int.Parse(rowsAffected.Tables[0].Rows[0][1].ToString());
                        }

                        return elemento;

                        #endregion

                    }
                    catch (Exception)
                    {
                        throw;
                    }
                }
        
                public RespuestaEntidad MaterialesPuertasEliminar(String conexion, String conexionBitacora, MaterialesPuertasEntidad materialPuerta, BitacorasEntidad _bitacora)
                {
                    RespuestaEntidad elemento = null;
                    DataSet rowsAffected;

                    #region PARAMETROS

                    SqlParameter[] paramTransaccion = new SqlParameter[]
                    {
                        new SqlParameter("@piId_Material_Puerta", materialPuerta.IdMaterialPuerta)
                    };

                    #endregion

                    #region KeyValuePair LIST

                    List<KeyValuePair<string, string>> itemConsulta = new List<KeyValuePair<string, string>>();
                    itemConsulta.Add(helper.CrearKeyValuePairItem("@piId_Material_Puerta", materialPuerta.IdMaterialPuerta.ToString()));

                    #endregion

                    try
                    {

                        #region ELIMINAR

                        rowsAffected = transaccionDA.TransaccionEliminar(conexion, conexionBitacora, "Materiales_Puertas_Elimina", paramTransaccion, EnumTipoBitacora.ELIMINAR, itemConsulta, "Materiales_Puertas_Consulta_Detalle", _bitacora);
                        if (!rowsAffected.Equals(null))
                        {
                            elemento = new RespuestaEntidad();
                            elemento.ValorEstado = int.Parse(rowsAffected.Tables[0].Rows[0][0].ToString());
                            elemento.ValorError = int.Parse(rowsAffected.Tables[0].Rows[0][1].ToString());
                        }

                        return elemento;

                        #endregion

                    }
                    catch (Exception)
                    {
                        throw;
                    }
                }

                public List<MaterialesPuertasEntidad> MaterialesPuertasConsultar(String conexion, ParametrosConsultaEntidad entidad)
                {
                    List<MaterialesPuertasEntidad> retorno = new List<MaterialesPuertasEntidad>();
                    MaterialesPuertasEntidad elemento;
                    DataSet rowsAffected;

                    #region PARAMETROS

                    SqlParameter[] paramTransaccion = new SqlParameter[]
                    {
                       new SqlParameter("@piIndice_Inicio_Fila", entidad.IndiceInicioFila),
                       new SqlParameter("@piMaximo_Filas", entidad.MaximoFilas),
                       new SqlParameter("@psValores_Filtro", entidad.ValorFiltro),
                       new SqlParameter("@psColumnas_Filtros", entidad.ColumnaFiltro),
                       new SqlParameter("@psColumna_Ordenar", entidad.ColumnaOrdenar)
                    };

                    #endregion

                    try
                    {

                        #region CONSULTAR

                        rowsAffected = transaccionDA.TransaccionConsulta(conexion, "Materiales_Puertas_Consulta", paramTransaccion);
                        if (!rowsAffected.Equals(null))
                        {
                            foreach (DataRow dr in rowsAffected.Tables[0].Rows)
                            {
                                elemento = new MaterialesPuertasEntidad();
                                elemento.IdMaterialPuerta = int.Parse(dr[0].ToString());
                                elemento.CodMaterialPuerta = int.Parse(dr[1].ToString());
                                elemento.DesMaterialPuerta = dr[2].ToString();

                                retorno.Add(elemento);
                            }
                        }

                        return retorno;

                        #endregion

                    }
                    catch (Exception)
                    {
                        throw;
                    }
                }
        
                public MaterialesPuertasEntidad MaterialesPuertasConsultarDetalle(String conexion, String conexionBitacora, MaterialesPuertasEntidad materialPuerta, BitacorasEntidad _bitacora)
                {
                    MaterialesPuertasEntidad retorno = new MaterialesPuertasEntidad();
                    DataSet rowsAffected;

                    #region PARAMETROS

                    SqlParameter[] paramTransaccion = new SqlParameter[]
                    {
                        new SqlParameter("@piId_Material_Puerta", materialPuerta.IdMaterialPuerta)
                    };

                    #endregion

                    #region KeyValuePair LIST

                    List<KeyValuePair<string, string>> itemConsulta = new List<KeyValuePair<string, string>>();
                    itemConsulta.Add(helper.CrearKeyValuePairItem("@piId_Material_Puerta", materialPuerta.IdMaterialPuerta.ToString()));

                    #endregion

                    try
                    {

                        #region CONSULTAR DETALLE

                        rowsAffected = transaccionDA.TransaccionConsultaDetalle(conexion, conexionBitacora, "Materiales_Puertas_Consulta_Detalle", paramTransaccion, EnumTipoBitacora.CONSULTAR, itemConsulta, "Materiales_Puertas_Consulta_Detalle", _bitacora);
                        if (!rowsAffected.Equals(null))
                        {
                            retorno.IdMaterialPuerta = int.Parse(rowsAffected.Tables[0].Rows[0][0].ToString());
                            retorno.CodMaterialPuerta = int.Parse(rowsAffected.Tables[0].Rows[0][1].ToString());
                            retorno.DesMaterialPuerta = rowsAffected.Tables[0].Rows[0][2].ToString();
                            retorno.IndMetodoInsercion = rowsAffected.Tables[0].Rows[0][3].ToString();
                            if (rowsAffected.Tables[0].Rows[0][4].ToString().Length > 0)
                                retorno.FechaIngreso = DateTime.Parse(rowsAffected.Tables[0].Rows[0][4].ToString());
                            else
                                retorno.FechaIngreso = null;
                            retorno.CodUsuarioIngreso = rowsAffected.Tables[0].Rows[0][5].ToString();
                            if (rowsAffected.Tables[0].Rows[0][6].ToString().Length > 0)
                                retorno.FechaUltimaModificacion = DateTime.Parse(rowsAffected.Tables[0].Rows[0][6].ToString());
                            else
                                retorno.FechaUltimaModificacion = null;
                            retorno.CodUsuarioUltimaModificacion = rowsAffected.Tables[0].Rows[0][7].ToString();
                            retorno.DesUsuarioIngreso = rowsAffected.Tables[0].Rows[0][8].ToString();
                            retorno.DesUsuarioUltimaModificacion = rowsAffected.Tables[0].Rows[0][9].ToString();
                        }

                        return retorno;

                        #endregion

                    }
                    catch (Exception)
                    {
                        throw;
                    }
                }
        
                public int MaterialesPuertasTotalFilas(String conexion, ParametrosTotalFilasEntidad entidad)
                {

                    int value;

                    #region PARAMETROS

                    SqlParameter[] paramTransaccion = new SqlParameter[]
                    {
                        new SqlParameter("@psValor_Filtro", entidad.ValorFiltro),
                        new SqlParameter("@psColumna_Filtro", entidad.ColumnaFiltro)
                    };

                    #endregion

                    try
                    {

                        #region TOTAL FILAS

                            value = transaccionDA.TransaccionRows(conexion, "Materiales_Puertas_Total_Filas", paramTransaccion);

                            return value;

                        #endregion

                    }
                    catch (Exception)
                    {
                        throw;
                    }
                }

            #endregion 

            #region MATERIALES VIAS ACCESO
        
                public RespuestaEntidad MaterialesViasAccesoInsertar(String conexion, String conexionBitacora, MaterialesViasAccesoEntidad materialViaAcceso, BitacorasEntidad _bitacora)
                {
                    RespuestaEntidad elemento = null;
                    DataSet rowsAffected;

                    #region PARAMETROS

                    SqlParameter[] paramTransaccion = new SqlParameter[]
                    {
                        new SqlParameter("@piCod_Material_Via_Acceso", materialViaAcceso.CodCalleMaterialVias),
                        new SqlParameter("@psDes_Material_Via_Acceso", materialViaAcceso.DesCalleMaterialVias),
                        new SqlParameter("@psInd_Metodo_Insercion", materialViaAcceso.IndMetodoInsercion),
                        new SqlParameter("@psCod_Usuario", materialViaAcceso.CodUsuarioIngreso)
                    };

                    #endregion

                    try
                    {

                        #region INSERTAR

                        rowsAffected = transaccionDA.TransaccionInsertar(conexion, conexionBitacora, "Materiales_Vias_Acceso_Inserta", paramTransaccion, EnumTipoBitacora.INSERTAR, _bitacora);
                        if (!rowsAffected.Equals(null))
                        {
                            elemento = new RespuestaEntidad();
                            elemento.ValorEstado = int.Parse(rowsAffected.Tables[0].Rows[0][0].ToString());
                            elemento.ValorError = int.Parse(rowsAffected.Tables[0].Rows[0][1].ToString());
                        }

                        return elemento;

                        #endregion

                    }
                    catch (Exception)
                    {
                        throw;
                    }
                }
        
                public RespuestaEntidad MaterialesViasAccesoModificar(String conexion, String conexionBitacora, MaterialesViasAccesoEntidad materialViaAcceso, BitacorasEntidad _bitacora)
                {
                    RespuestaEntidad elemento = null;
                    DataSet rowsAffected;

                    #region PARAMETROS

                    SqlParameter[] paramTransaccion = new SqlParameter[]
                    {
                        new SqlParameter("@piId_Material_Via_Acceso", materialViaAcceso.IdCalleMaterialVias),
                        new SqlParameter("@piCod_Material_Via_Acceso", materialViaAcceso.CodCalleMaterialVias),
                        new SqlParameter("@psDes_Material_Via_Acceso", materialViaAcceso.DesCalleMaterialVias),
                        new SqlParameter("@psInd_Metodo_Insercion", materialViaAcceso.IndMetodoInsercion),
                        new SqlParameter("@psCod_Usuario", materialViaAcceso.CodUsuarioIngreso)
                    };

                    #endregion

                    #region KeyValuePair LIST

                    List<KeyValuePair<string, string>> itemConsulta = new List<KeyValuePair<string, string>>();
                    itemConsulta.Add(helper.CrearKeyValuePairItem("@piId_Material_Via_Acceso", materialViaAcceso.IdCalleMaterialVias.ToString()));

                    #endregion

                    try
                    {

                        #region MODIFICAR

                        rowsAffected = transaccionDA.TransaccionModificar(conexion, conexionBitacora, "Materiales_Vias_Acceso_Actualiza", paramTransaccion, EnumTipoBitacora.ACTUALIZAR, itemConsulta, "Materiales_Vias_Acceso_Consulta_Detalle", _bitacora);
                        if (!rowsAffected.Equals(null))
                        {
                            elemento = new RespuestaEntidad();
                            elemento.ValorEstado = int.Parse(rowsAffected.Tables[0].Rows[0][0].ToString());
                            elemento.ValorError = int.Parse(rowsAffected.Tables[0].Rows[0][1].ToString());
                        }

                        return elemento;

                        #endregion

                    }
                    catch (Exception)
                    {
                        throw;
                    }
                }
        
                public RespuestaEntidad MaterialesViasAccesoEliminar(String conexion, String conexionBitacora, MaterialesViasAccesoEntidad materialViaAcceso, BitacorasEntidad _bitacora)
                {
                    RespuestaEntidad elemento = null;
                    DataSet rowsAffected;

                    #region PARAMETROS

                    SqlParameter[] paramTransaccion = new SqlParameter[]
                    {
                        new SqlParameter("@piId_Material_Via_Acceso", materialViaAcceso.IdCalleMaterialVias)
                    };

                    #endregion

                    #region KeyValuePair LIST

                    List<KeyValuePair<string, string>> itemConsulta = new List<KeyValuePair<string, string>>();
                    itemConsulta.Add(helper.CrearKeyValuePairItem("@piId_Material_Via_Acceso", materialViaAcceso.IdCalleMaterialVias.ToString()));

                    #endregion

                    try
                    {

                        #region ELIMINAR

                        rowsAffected = transaccionDA.TransaccionEliminar(conexion, conexionBitacora, "Materiales_Vias_Acceso_Elimina", paramTransaccion, EnumTipoBitacora.ELIMINAR, itemConsulta, "Materiales_Vias_Acceso_Consulta_Detalle", _bitacora);
                        if (!rowsAffected.Equals(null))
                        {
                            elemento = new RespuestaEntidad();
                            elemento.ValorEstado = int.Parse(rowsAffected.Tables[0].Rows[0][0].ToString());
                            elemento.ValorError = int.Parse(rowsAffected.Tables[0].Rows[0][1].ToString());
                        }

                        return elemento;

                        #endregion

                    }
                    catch (Exception)
                    {
                        throw;
                    }
                }

                public List<MaterialesViasAccesoEntidad> MaterialesViasAccesoConsultar(String conexion, ParametrosConsultaEntidad entidad)
                {
                    List<MaterialesViasAccesoEntidad> retorno = new List<MaterialesViasAccesoEntidad>();
                    MaterialesViasAccesoEntidad elemento;
                    DataSet rowsAffected;

                    #region PARAMETROS

                    SqlParameter[] paramTransaccion = new SqlParameter[]
                    {
                       new SqlParameter("@piIndice_Inicio_Fila", entidad.IndiceInicioFila),
                       new SqlParameter("@piMaximo_Filas", entidad.MaximoFilas),
                       new SqlParameter("@psValores_Filtro", entidad.ValorFiltro),
                       new SqlParameter("@psColumnas_Filtros", entidad.ColumnaFiltro),
                       new SqlParameter("@psColumna_Ordenar", entidad.ColumnaOrdenar)
                    };

                    #endregion

                    try
                    {

                        #region CONSULTAR

                        rowsAffected = transaccionDA.TransaccionConsulta(conexion, "Materiales_Vias_Acceso_Consulta", paramTransaccion);
                        if (!rowsAffected.Equals(null))
                        {
                            foreach (DataRow dr in rowsAffected.Tables[0].Rows)
                            {
                                elemento = new MaterialesViasAccesoEntidad();
                                elemento.IdCalleMaterialVias = int.Parse(dr[0].ToString());
                                elemento.CodCalleMaterialVias = int.Parse(dr[1].ToString());
                                elemento.DesCalleMaterialVias = dr[2].ToString();

                                retorno.Add(elemento);
                            }
                        }

                        return retorno;

                        #endregion

                    }
                    catch (Exception)
                    {
                        throw;
                    }
                }
        
                public MaterialesViasAccesoEntidad MaterialesViasAccesoConsultarDetalle(String conexion, String conexionBitacora, MaterialesViasAccesoEntidad materialViaAcceso, BitacorasEntidad _bitacora)
                {
                    MaterialesViasAccesoEntidad retorno = new MaterialesViasAccesoEntidad();
                    DataSet rowsAffected;

                    #region PARAMETROS

                    SqlParameter[] paramTransaccion = new SqlParameter[]
                    {
                        new SqlParameter("@piId_Material_Via_Acceso", materialViaAcceso.IdCalleMaterialVias)
                    };

                    #endregion

                    #region KeyValuePair LIST

                    List<KeyValuePair<string, string>> itemConsulta = new List<KeyValuePair<string, string>>();
                    itemConsulta.Add(helper.CrearKeyValuePairItem("@piId_Material_Via_Acceso", materialViaAcceso.IdCalleMaterialVias.ToString()));

                    #endregion

                    try
                    {

                        #region CONSULTAR DETALLE

                        rowsAffected = transaccionDA.TransaccionConsultaDetalle(conexion, conexionBitacora, "Materiales_Vias_Acceso_Consulta_Detalle", paramTransaccion, EnumTipoBitacora.CONSULTAR, itemConsulta, "Materiales_Vias_Acceso_Consulta_Detalle", _bitacora);
                        if (!rowsAffected.Equals(null))
                        {
                            retorno.IdCalleMaterialVias = int.Parse(rowsAffected.Tables[0].Rows[0][0].ToString());
                            retorno.CodCalleMaterialVias = int.Parse(rowsAffected.Tables[0].Rows[0][1].ToString());
                            retorno.DesCalleMaterialVias = rowsAffected.Tables[0].Rows[0][2].ToString();
                            retorno.IndMetodoInsercion = rowsAffected.Tables[0].Rows[0][3].ToString();
                            if (rowsAffected.Tables[0].Rows[0][4].ToString().Length > 0)
                                retorno.FechaIngreso = DateTime.Parse(rowsAffected.Tables[0].Rows[0][4].ToString());
                            else
                                retorno.FechaIngreso = null;
                            retorno.CodUsuarioIngreso = rowsAffected.Tables[0].Rows[0][5].ToString();
                            if (rowsAffected.Tables[0].Rows[0][6].ToString().Length > 0)
                                retorno.FechaUltimaModificacion = DateTime.Parse(rowsAffected.Tables[0].Rows[0][6].ToString());
                            else
                                retorno.FechaUltimaModificacion = null;
                            retorno.CodUsuarioUltimaModificacion = rowsAffected.Tables[0].Rows[0][7].ToString();
                            retorno.DesUsuarioIngreso = rowsAffected.Tables[0].Rows[0][8].ToString();
                            retorno.DesUsuarioUltimaModificacion = rowsAffected.Tables[0].Rows[0][9].ToString();
                        }

                        return retorno;

                        #endregion

                    }
                    catch (Exception)
                    {
                        throw;
                    }
                }
        
                public int MaterialesViasAccesoTotalFilas(String conexion, ParametrosTotalFilasEntidad entidad)
                {

                    int value;

                    #region PARAMETROS

                    SqlParameter[] paramTransaccion = new SqlParameter[]
                    {
                        new SqlParameter("@psValor_Filtro", entidad.ValorFiltro),
                        new SqlParameter("@psColumna_Filtro", entidad.ColumnaFiltro)
                    };

                    #endregion

                    try
                    {

                        #region TOTAL FILAS

                            value = transaccionDA.TransaccionRows(conexion, "Materiales_Vias_Acceso_Total_Filas", paramTransaccion);

                            return value;

                        #endregion

                    }
                    catch (Exception)
                    {
                        throw;
                    }
                }

            #endregion 

            #region MONEDAS
        
                public RespuestaEntidad MonedasInsertar(String conexion, String conexionBitacora, MonedasEntidad moneda, BitacorasEntidad _bitacora)
                {
                    RespuestaEntidad elemento = null;
                    DataSet rowsAffected;

                    #region PARAMETROS

                    SqlParameter[] paramTransaccion = new SqlParameter[]
                    {
                        new SqlParameter("@piCod_Moneda", moneda.CodMoneda),
                        new SqlParameter("@psDes_Moneda", moneda.DesMoneda),
                        new SqlParameter("@psInd_Metodo_Insercion", moneda.IndMetodoInsercion),
                        new SqlParameter("@psCod_Usuario", moneda.CodUsuarioIngreso)
                    };

                    #endregion

                    try
                    {

                        #region INSERTAR

                        rowsAffected = transaccionDA.TransaccionInsertar(conexion, conexionBitacora, "Monedas_Inserta", paramTransaccion, EnumTipoBitacora.INSERTAR, _bitacora);
                        if (!rowsAffected.Equals(null))
                        {
                            elemento = new RespuestaEntidad();
                            elemento.ValorEstado = int.Parse(rowsAffected.Tables[0].Rows[0][0].ToString());
                            elemento.ValorError = int.Parse(rowsAffected.Tables[0].Rows[0][1].ToString());
                        }

                        return elemento;

                        #endregion

                    }
                    catch (Exception)
                    {
                        throw;
                    }
                }
        
                public RespuestaEntidad MonedasModificar(String conexion, String conexionBitacora, MonedasEntidad moneda, BitacorasEntidad _bitacora)
                {
                    RespuestaEntidad elemento = null;
                    DataSet rowsAffected;

                    #region PARAMETROS

                    SqlParameter[] paramTransaccion = new SqlParameter[]
                    {
                        new SqlParameter("@piId_Moneda", moneda.IdMoneda),
                        new SqlParameter("@piCod_Moneda", moneda.CodMoneda),
                        new SqlParameter("@psDes_Moneda", moneda.DesMoneda),
                        new SqlParameter("@psInd_Metodo_Insercion", moneda.IndMetodoInsercion),
                        new SqlParameter("@psCod_Usuario", moneda.CodUsuarioIngreso)
                    };

                    #endregion

                    #region KeyValuePair LIST

                    List<KeyValuePair<string, string>> itemConsulta = new List<KeyValuePair<string, string>>();
                    itemConsulta.Add(helper.CrearKeyValuePairItem("@piId_Moneda", moneda.IdMoneda.ToString()));

                    #endregion

                    try
                    {

                        #region MODIFICAR

                        rowsAffected = transaccionDA.TransaccionModificar(conexion, conexionBitacora, "Monedas_Actualiza", paramTransaccion, EnumTipoBitacora.ACTUALIZAR, itemConsulta, "Monedas_Consulta_Detalle", _bitacora);
                        if (!rowsAffected.Equals(null))
                        {
                            elemento = new RespuestaEntidad();
                            elemento.ValorEstado = int.Parse(rowsAffected.Tables[0].Rows[0][0].ToString());
                            elemento.ValorError = int.Parse(rowsAffected.Tables[0].Rows[0][1].ToString());
                        }

                        return elemento;

                        #endregion

                    }
                    catch (Exception)
                    {
                        throw;
                    }
                }
        
                public RespuestaEntidad MonedasEliminar(String conexion, String conexionBitacora, MonedasEntidad moneda, BitacorasEntidad _bitacora)
                {
                    RespuestaEntidad elemento = null;
                    DataSet rowsAffected;

                    #region PARAMETROS

                    SqlParameter[] paramTransaccion = new SqlParameter[]
                    {
                        new SqlParameter("@piId_Moneda", moneda.IdMoneda)
                    };

                    #endregion

                    #region KeyValuePair LIST

                    List<KeyValuePair<string, string>> itemConsulta = new List<KeyValuePair<string, string>>();
                    itemConsulta.Add(helper.CrearKeyValuePairItem("@piId_Moneda", moneda.IdMoneda.ToString()));

                    #endregion

                    try
                    {

                        #region ELIMINAR

                        rowsAffected = transaccionDA.TransaccionModificar(conexion, conexionBitacora, "Monedas_Elimina", paramTransaccion, EnumTipoBitacora.ACTUALIZAR, itemConsulta, "Monedas_Consulta_Detalle", _bitacora);
                        if (!rowsAffected.Equals(null))
                        {
                            elemento = new RespuestaEntidad();
                            elemento.ValorEstado = int.Parse(rowsAffected.Tables[0].Rows[0][0].ToString());
                            elemento.ValorError = int.Parse(rowsAffected.Tables[0].Rows[0][1].ToString());
                        }

                        return elemento;

                        #endregion

                    }
                    catch (Exception)
                    {
                        throw;
                    }
                }

                public List<MonedasEntidad> MonedasConsultar(String conexion, ParametrosConsultaEntidad entidad)
                {
                    List<MonedasEntidad> retorno = new List<MonedasEntidad>();
                    MonedasEntidad elemento;
                    DataSet rowsAffected;

                    #region PARAMETROS

                    SqlParameter[] paramTransaccion = new SqlParameter[]
                    {
                        new SqlParameter("@piIndice_Inicio_Fila", entidad.IndiceInicioFila),
                        new SqlParameter("@piMaximo_Filas", entidad.MaximoFilas),
                        new SqlParameter("@psValores_Filtro", entidad.ValorFiltro),
                        new SqlParameter("@psColumnas_Filtros", entidad.ColumnaFiltro),
                        new SqlParameter("@psColumna_Ordenar", entidad.ColumnaOrdenar)
                    };

                    #endregion

                    try
                    {

                        #region CONSULTAR

                        rowsAffected = transaccionDA.TransaccionConsulta(conexion, "Monedas_Consulta", paramTransaccion);
                        if (!rowsAffected.Equals(null))
                        {
                            foreach (DataRow dr in rowsAffected.Tables[0].Rows)
                            {
                                elemento = new MonedasEntidad();
                                elemento.IdMoneda = int.Parse(dr[0].ToString());
                                elemento.CodMoneda = int.Parse(dr[1].ToString());
                                elemento.DesMoneda = dr[2].ToString();

                                retorno.Add(elemento);
                            }
                        }

                        return retorno;

                        #endregion

                    }
                    catch (Exception)
                    {
                        throw;
                    }
                }
        
                public MonedasEntidad MonedasConsultarDetalle(String conexion, String conexionBitacora, MonedasEntidad moneda, BitacorasEntidad _bitacora)
                {
                    MonedasEntidad retorno = new MonedasEntidad();
                    DataSet rowsAffected;

                    #region PARAMETROS

                    SqlParameter[] paramTransaccion = new SqlParameter[]
                    {
                        new SqlParameter("@piId_Moneda", moneda.IdMoneda)
                    };

                    #endregion

                    #region KeyValuePair LIST

                    List<KeyValuePair<string, string>> itemConsulta = new List<KeyValuePair<string, string>>();
                    itemConsulta.Add(helper.CrearKeyValuePairItem("@piId_Moneda", moneda.IdMoneda.ToString()));

                    #endregion

                    try
                    {

                        #region CONSULTAR DETALLE

                        rowsAffected = transaccionDA.TransaccionConsultaDetalle(conexion, conexionBitacora, "Monedas_Consulta_Detalle", paramTransaccion, EnumTipoBitacora.CONSULTAR, itemConsulta, "Monedas_Consulta_Detalle", _bitacora);
                        if (!rowsAffected.Equals(null))
                        {
                            retorno.IdMoneda = int.Parse(rowsAffected.Tables[0].Rows[0][0].ToString());
                            retorno.CodMoneda = int.Parse(rowsAffected.Tables[0].Rows[0][1].ToString());
                            retorno.DesMoneda = rowsAffected.Tables[0].Rows[0][2].ToString();
                            retorno.IndMetodoInsercion = rowsAffected.Tables[0].Rows[0][3].ToString();
                            if (rowsAffected.Tables[0].Rows[0][4].ToString().Length > 0)
                                retorno.FechaIngreso = DateTime.Parse(rowsAffected.Tables[0].Rows[0][4].ToString());
                            else
                                retorno.FechaIngreso = null;
                            retorno.CodUsuarioIngreso = rowsAffected.Tables[0].Rows[0][5].ToString();
                            if (rowsAffected.Tables[0].Rows[0][6].ToString().Length > 0)
                                retorno.FechaUltimaModificacion = DateTime.Parse(rowsAffected.Tables[0].Rows[0][6].ToString());
                            else
                                retorno.FechaUltimaModificacion = null;
                            retorno.CodUsuarioUltimaModificacion = rowsAffected.Tables[0].Rows[0][7].ToString();
                            retorno.DesUsuarioIngreso = rowsAffected.Tables[0].Rows[0][8].ToString();
                            retorno.DesUsuarioUltimaModificacion = rowsAffected.Tables[0].Rows[0][9].ToString();
                        }

                        return retorno;

                        #endregion

                    }
                    catch (Exception)
                    {
                        throw;
                    }
                }
        
                public int MonedasTotalFilas(String conexion, ParametrosTotalFilasEntidad entidad)
                {

                    int value;

                    #region PARAMETROS

                    SqlParameter[] paramTransaccion = new SqlParameter[]
                    {
                        new SqlParameter("@psValor_Filtro", entidad.ValorFiltro),
                        new SqlParameter("@psColumna_Filtro", entidad.ColumnaFiltro)
                    };

                    #endregion

                    try
                    {

                        #region TOTAL FILAS

                            value = transaccionDA.TransaccionRows(conexion, "Monedas_Total_Filas", paramTransaccion);

                            return value;

                        #endregion

                    }
                    catch (Exception)
                    {
                        throw;
                    }
                }
        
                public List<ListaEntidad> MonedasLista(String conexion, String filtro)
                {
                    List<ListaEntidad> retorno = new List<ListaEntidad>();
                    ListaEntidad elemento;
                    DataSet rowsAffected;

                    #region PARAMETROS

                    SqlParameter[] paramTransaccion = new SqlParameter[]
                    {
                        new SqlParameter("@psFiltro", filtro)
                    };

                    #endregion

                    #region KeyValuePair LIST

                    List<KeyValuePair<string, string>> itemConsulta = new List<KeyValuePair<string, string>>();
                    itemConsulta.Add(helper.CrearKeyValuePairItem("@psFiltro", filtro));

                    #endregion

                    try
                    {

                        #region LISTA

                        rowsAffected = transaccionDA.TransaccionConsulta(conexion, "Monedas_Lista", paramTransaccion);
                        if (!rowsAffected.Equals(null))
                        {
                            foreach (DataRow dr in rowsAffected.Tables[0].Rows)
                            {
                                elemento = new ListaEntidad();
                                elemento.Valor = dr[0].ToString();
                                elemento.Texto = dr[1].ToString();

                                retorno.Add(elemento);
                            }
                        }

                        return retorno;

                        #endregion

                    }
                    catch (Exception)
                    {
                        throw;
                    }
                }
        
            #endregion 

            #region NIVELES SOCIOECONOMICOS
        
                public RespuestaEntidad NivelesSocioeconomicosInsertar(String conexion, String conexionBitacora, NivelesSocioeconomicosEntidad nivelSocioeconomico, BitacorasEntidad _bitacora)
                {
                    RespuestaEntidad elemento = null;
                    DataSet rowsAffected;

                    #region PARAMETROS

                    SqlParameter[] paramTransaccion = new SqlParameter[]
                    {
                        new SqlParameter("@piCod_Nivel_Socioeconomico", nivelSocioeconomico.CodNivelSocioeconomico),
                        new SqlParameter("@psDes_Nivel_Socioeconomico", nivelSocioeconomico.DesNivelSocioeconomico),
                        new SqlParameter("@psInd_Metodo_Insercion", nivelSocioeconomico.IndMetodoInsercion),
                        new SqlParameter("@psCod_Usuario", nivelSocioeconomico.CodUsuarioIngreso)
                    };

                    #endregion

                    try
                    {

                        #region INSERTAR

                        rowsAffected = transaccionDA.TransaccionInsertar(conexion, conexionBitacora, "Niveles_Socioeconomicos_Inserta", paramTransaccion, EnumTipoBitacora.INSERTAR, _bitacora);
                        if (!rowsAffected.Equals(null))
                        {
                            elemento = new RespuestaEntidad();
                            elemento.ValorEstado = int.Parse(rowsAffected.Tables[0].Rows[0][0].ToString());
                            elemento.ValorError = int.Parse(rowsAffected.Tables[0].Rows[0][1].ToString());
                        }

                        return elemento;

                        #endregion

                    }
                    catch (Exception)
                    {
                        throw;
                    }
                }
        
                public RespuestaEntidad NivelesSocioeconomicosModificar(String conexion, String conexionBitacora, NivelesSocioeconomicosEntidad nivelSocioeconomico, BitacorasEntidad _bitacora)
                {
                    RespuestaEntidad elemento = null;
                    DataSet rowsAffected;

                    #region PARAMETROS

                    SqlParameter[] paramTransaccion = new SqlParameter[]
                    {
                        new SqlParameter("@piId_Nivel_Socioeconomico", nivelSocioeconomico.IdNivelSocioeconomico),
                        new SqlParameter("@piCod_Nivel_Socioeconomico", nivelSocioeconomico.CodNivelSocioeconomico),
                        new SqlParameter("@psDes_Nivel_Socioeconomico", nivelSocioeconomico.DesNivelSocioeconomico),
                        new SqlParameter("@psInd_Metodo_Insercion", nivelSocioeconomico.IndMetodoInsercion),
                        new SqlParameter("@psCod_Usuario", nivelSocioeconomico.CodUsuarioIngreso)
                    };

                    #endregion

                    #region KeyValuePair LIST

                    List<KeyValuePair<string, string>> itemConsulta = new List<KeyValuePair<string, string>>();
                    itemConsulta.Add(helper.CrearKeyValuePairItem("@piId_Nivel_Socioeconomico", nivelSocioeconomico.IdNivelSocioeconomico.ToString()));

                    #endregion

                    try
                    {

                        #region MODIFICAR

                        rowsAffected = transaccionDA.TransaccionModificar(conexion, conexionBitacora, "Niveles_Socioeconomicos_Actualiza", paramTransaccion, EnumTipoBitacora.ACTUALIZAR, itemConsulta, "Niveles_Socioeconomicos_Consulta_Detalle", _bitacora);
                        if (!rowsAffected.Equals(null))
                        {
                            elemento = new RespuestaEntidad();
                            elemento.ValorEstado = int.Parse(rowsAffected.Tables[0].Rows[0][0].ToString());
                            elemento.ValorError = int.Parse(rowsAffected.Tables[0].Rows[0][1].ToString());
                        }

                        return elemento;


                        #endregion

                    }
                    catch (Exception)
                    {
                        throw;
                    }
                }
        
                public RespuestaEntidad NivelesSocioeconomicosEliminar(String conexion, String conexionBitacora, NivelesSocioeconomicosEntidad nivelSocioeconomico, BitacorasEntidad _bitacora)
                {
                    RespuestaEntidad elemento = null;
                    DataSet rowsAffected;

                    #region PARAMETROS

                    SqlParameter[] paramTransaccion = new SqlParameter[]
                    {
                        new SqlParameter("@piId_Nivel_Socioeconomico", nivelSocioeconomico.IdNivelSocioeconomico)
                    };

                    #endregion

                    #region KeyValuePair LIST

                    List<KeyValuePair<string, string>> itemConsulta = new List<KeyValuePair<string, string>>();
                    itemConsulta.Add(helper.CrearKeyValuePairItem("@piId_Nivel_Socioeconomico", nivelSocioeconomico.IdNivelSocioeconomico.ToString()));

                    #endregion

                    try
                    {

                        #region ELIMINAR

                        rowsAffected = transaccionDA.TransaccionEliminar(conexion, conexionBitacora, "Niveles_Socioeconomicos_Elimina", paramTransaccion, EnumTipoBitacora.ELIMINAR, itemConsulta, "Niveles_Socioeconomicos_Consulta_Detalle", _bitacora);
                        if (!rowsAffected.Equals(null))
                        {
                            elemento = new RespuestaEntidad();
                            elemento.ValorEstado = int.Parse(rowsAffected.Tables[0].Rows[0][0].ToString());
                            elemento.ValorError = int.Parse(rowsAffected.Tables[0].Rows[0][1].ToString());
                        }

                        return elemento;

                        #endregion

                    }
                    catch (Exception)
                    {
                        throw;
                    }
                }

                public List<NivelesSocioeconomicosEntidad> NivelesSocioeconomicosConsultar(String conexion, ParametrosConsultaEntidad entidad)
                {
                    List<NivelesSocioeconomicosEntidad> retorno = new List<NivelesSocioeconomicosEntidad>();
                    NivelesSocioeconomicosEntidad elemento;
                    DataSet rowsAffected;

                    #region PARAMETROS

                    SqlParameter[] paramTransaccion = new SqlParameter[]
                    {
                       new SqlParameter("@piIndice_Inicio_Fila", entidad.IndiceInicioFila),
                       new SqlParameter("@piMaximo_Filas", entidad.MaximoFilas),
                       new SqlParameter("@psValores_Filtro", entidad.ValorFiltro),
                       new SqlParameter("@psColumnas_Filtros", entidad.ColumnaFiltro),
                       new SqlParameter("@psColumna_Ordenar", entidad.ColumnaOrdenar)
                    };

                    #endregion

                    try
                    {

                        #region CONSULTAR

                        rowsAffected = transaccionDA.TransaccionConsulta(conexion, "Niveles_Socioeconomicos_Consulta", paramTransaccion);
                        if (!rowsAffected.Equals(null))
                        {
                            foreach (DataRow dr in rowsAffected.Tables[0].Rows)
                            {
                                elemento = new NivelesSocioeconomicosEntidad();
                                elemento.IdNivelSocioeconomico = int.Parse(dr[0].ToString());
                                elemento.CodNivelSocioeconomico = int.Parse(dr[1].ToString());
                                elemento.DesNivelSocioeconomico = dr[2].ToString();

                                retorno.Add(elemento);
                            }
                        }

                        return retorno;

                        #endregion

                    }
                    catch (Exception)
                    {
                        throw;
                    }
                }
        
                public NivelesSocioeconomicosEntidad NivelesSocioeconomicosConsultarDetalle(String conexion, String conexionBitacora, NivelesSocioeconomicosEntidad nivelSocioeconomico, BitacorasEntidad _bitacora)
                {
                    NivelesSocioeconomicosEntidad retorno = new NivelesSocioeconomicosEntidad();
                    DataSet rowsAffected;

                    #region PARAMETROS

                    SqlParameter[] paramTransaccion = new SqlParameter[]
                    {
                        new SqlParameter("@piId_Nivel_Socioeconomico", nivelSocioeconomico.IdNivelSocioeconomico)
                    };

                    #endregion

                    #region KeyValuePair LIST

                    List<KeyValuePair<string, string>> itemConsulta = new List<KeyValuePair<string, string>>();
                    itemConsulta.Add(helper.CrearKeyValuePairItem("@piId_Nivel_Socioeconomico", nivelSocioeconomico.IdNivelSocioeconomico.ToString()));

                    #endregion

                    try
                    {

                        #region CONSULTAR DETALLE

                        rowsAffected = transaccionDA.TransaccionConsultaDetalle(conexion, conexionBitacora, "Niveles_Socioeconomicos_Consulta_Detalle", paramTransaccion, EnumTipoBitacora.CONSULTAR, itemConsulta, "Niveles_Socioeconomicos_Consulta_Detalle", _bitacora);
                        if (!rowsAffected.Equals(null))
                        {
                            retorno.IdNivelSocioeconomico = int.Parse(rowsAffected.Tables[0].Rows[0][0].ToString());
                            retorno.CodNivelSocioeconomico = int.Parse(rowsAffected.Tables[0].Rows[0][1].ToString());
                            retorno.DesNivelSocioeconomico = rowsAffected.Tables[0].Rows[0][2].ToString();
                            retorno.IndMetodoInsercion = rowsAffected.Tables[0].Rows[0][3].ToString();
                            if (rowsAffected.Tables[0].Rows[0][4].ToString().Length > 0)
                                retorno.FechaIngreso = DateTime.Parse(rowsAffected.Tables[0].Rows[0][4].ToString());
                            else
                                retorno.FechaIngreso = null;
                            retorno.CodUsuarioIngreso = rowsAffected.Tables[0].Rows[0][5].ToString();
                            if (rowsAffected.Tables[0].Rows[0][6].ToString().Length > 0)
                                retorno.FechaUltimaModificacion = DateTime.Parse(rowsAffected.Tables[0].Rows[0][6].ToString());
                            else
                                retorno.FechaUltimaModificacion = null;
                            retorno.CodUsuarioUltimaModificacion = rowsAffected.Tables[0].Rows[0][7].ToString();
                            retorno.DesUsuarioIngreso = rowsAffected.Tables[0].Rows[0][8].ToString();
                            retorno.DesUsuarioUltimaModificacion = rowsAffected.Tables[0].Rows[0][9].ToString();
                        }

                        return retorno;

                        #endregion

                    }
                    catch (Exception)
                    {
                        throw;
                    }
                }
        
                public int NivelesSocioeconomicosTotalFilas(String conexion, ParametrosTotalFilasEntidad entidad)
                {

                    int value;

                    #region PARAMETROS

                    SqlParameter[] paramTransaccion = new SqlParameter[]
                    {
                        new SqlParameter("@psValor_Filtro", entidad.ValorFiltro),
                        new SqlParameter("@psColumna_Filtro", entidad.ColumnaFiltro)
                    };

                    #endregion

                    try
                    {

                        #region TOTAL FILAS

                            value = transaccionDA.TransaccionRows(conexion, "Niveles_Socioeconomicos_Total_Filas", paramTransaccion);

                            return value;

                        #endregion

                    }
                    catch (Exception)
                    {
                        throw;
                    }
                }

            #endregion 

            #region NIVELES TERRENOS
        
                public RespuestaEntidad NivelesTerrenosInsertar(String conexion, String conexionBitacora, NivelesTerrenoEntidad nivelTerreno, BitacorasEntidad _bitacora)
                {
                    RespuestaEntidad elemento = null;
                    DataSet rowsAffected;

                    #region PARAMETROS

                    SqlParameter[] paramTransaccion = new SqlParameter[]
                    {
                        new SqlParameter("@piCod_Nivel_Terreno", nivelTerreno.CodNivelTerreno),
                        new SqlParameter("@psDes_Nivel_Terreno", nivelTerreno.DesNivelTerreno),
                        new SqlParameter("@psInd_Metodo_Insercion", nivelTerreno.IndMetodoInsercion),
                        new SqlParameter("@psCod_Usuario", nivelTerreno.CodUsuarioIngreso)
                    };

                    #endregion

                    try
                    {

                        #region INSERTAR

                        rowsAffected = transaccionDA.TransaccionInsertar(conexion, conexionBitacora, "Niveles_Terreno_Inserta", paramTransaccion, EnumTipoBitacora.INSERTAR, _bitacora);
                        if (!rowsAffected.Equals(null))
                        {
                            elemento = new RespuestaEntidad();
                            elemento.ValorEstado = int.Parse(rowsAffected.Tables[0].Rows[0][0].ToString());
                            elemento.ValorError = int.Parse(rowsAffected.Tables[0].Rows[0][1].ToString());
                        }

                        return elemento;

                        #endregion

                    }
                    catch (Exception)
                    {
                        throw;
                    }
                }
        
                public RespuestaEntidad NivelesTerrenosModificar(String conexion, String conexionBitacora, NivelesTerrenoEntidad nivelTerreno, BitacorasEntidad _bitacora)
                {
                    RespuestaEntidad elemento = null;
                    DataSet rowsAffected;

                    #region PARAMETROS

                    SqlParameter[] paramTransaccion = new SqlParameter[]
                    {
                        new SqlParameter("@piId_Nivel_Terreno", nivelTerreno.IdNivelTerreno),
                        new SqlParameter("@piCod_Nivel_Terreno", nivelTerreno.CodNivelTerreno),
                        new SqlParameter("@psDes_Nivel_Terreno", nivelTerreno.DesNivelTerreno),
                        new SqlParameter("@psInd_Metodo_Insercion", nivelTerreno.IndMetodoInsercion),
                        new SqlParameter("@psCod_Usuario", nivelTerreno.CodUsuarioIngreso)
                    };

                    #endregion

                    #region KeyValuePair LIST

                    List<KeyValuePair<string, string>> itemConsulta = new List<KeyValuePair<string, string>>();
                    itemConsulta.Add(helper.CrearKeyValuePairItem("@piId_Nivel_Terreno", nivelTerreno.IdNivelTerreno.ToString()));

                    #endregion

                    try
                    {

                        #region MODIFICAR

                        rowsAffected = transaccionDA.TransaccionModificar(conexion, conexionBitacora, "Niveles_Terreno_Actualiza", paramTransaccion, EnumTipoBitacora.ACTUALIZAR, itemConsulta, "Niveles_Terreno_Consulta_Detalle", _bitacora);
                        if (!rowsAffected.Equals(null))
                        {
                            elemento = new RespuestaEntidad();
                            elemento.ValorEstado = int.Parse(rowsAffected.Tables[0].Rows[0][0].ToString());
                            elemento.ValorError = int.Parse(rowsAffected.Tables[0].Rows[0][1].ToString());
                        }

                        return elemento;

                        #endregion

                    }
                    catch (Exception)
                    {
                        throw;
                    }
                }
        
                public RespuestaEntidad NivelesTerrenosEliminar(String conexion, String conexionBitacora, NivelesTerrenoEntidad nivelTerreno, BitacorasEntidad _bitacora)
                {
                    RespuestaEntidad elemento = null;
                    DataSet rowsAffected;

                    #region PARAMETROS

                    SqlParameter[] paramTransaccion = new SqlParameter[]
                    {
                        new SqlParameter("@piId_Nivel_Terreno", nivelTerreno.IdNivelTerreno)
                    };

                    #endregion

                    #region KeyValuePair LIST

                    List<KeyValuePair<string, string>> itemConsulta = new List<KeyValuePair<string, string>>();
                    itemConsulta.Add(helper.CrearKeyValuePairItem("@piId_Nivel_Terreno", nivelTerreno.IdNivelTerreno.ToString()));

                    #endregion

                    try
                    {

                        #region ELIMINAR

                        rowsAffected = transaccionDA.TransaccionEliminar(conexion, conexionBitacora, "Niveles_Terreno_Elimina", paramTransaccion, EnumTipoBitacora.ELIMINAR, itemConsulta, "Niveles_Terreno_Consulta_Detalle", _bitacora);
                        if (!rowsAffected.Equals(null))
                        {
                            elemento = new RespuestaEntidad();
                            elemento.ValorEstado = int.Parse(rowsAffected.Tables[0].Rows[0][0].ToString());
                            elemento.ValorError = int.Parse(rowsAffected.Tables[0].Rows[0][1].ToString());
                        }

                        return elemento;

                        #endregion

                    }
                    catch (Exception)
                    {
                        throw;
                    }
                }

                public List<NivelesTerrenoEntidad> NivelesTerrenosConsultar(String conexion, ParametrosConsultaEntidad entidad)
                {
                    List<NivelesTerrenoEntidad> retorno = new List<NivelesTerrenoEntidad>();
                    NivelesTerrenoEntidad elemento;
                    DataSet rowsAffected;

                    #region PARAMETROS

                    SqlParameter[] paramTransaccion = new SqlParameter[]
                    {
                       new SqlParameter("@piIndice_Inicio_Fila", entidad.IndiceInicioFila),
                       new SqlParameter("@piMaximo_Filas", entidad.MaximoFilas),
                       new SqlParameter("@psValores_Filtro", entidad.ValorFiltro),
                       new SqlParameter("@psColumnas_Filtros", entidad.ColumnaFiltro),
                       new SqlParameter("@psColumna_Ordenar", entidad.ColumnaOrdenar)
                    };

                    #endregion

                    try
                    {

                        #region CONSULTAR

                        rowsAffected = transaccionDA.TransaccionConsulta(conexion, "Niveles_Terreno_Consulta", paramTransaccion);
                        if (!rowsAffected.Equals(null))
                        {
                            foreach (DataRow dr in rowsAffected.Tables[0].Rows)
                            {
                                elemento = new NivelesTerrenoEntidad();
                                elemento.IdNivelTerreno = int.Parse(dr[0].ToString());
                                elemento.CodNivelTerreno = int.Parse(dr[1].ToString());
                                elemento.DesNivelTerreno = dr[2].ToString();

                                retorno.Add(elemento);
                            }
                        }

                        return retorno;

                        #endregion

                    }
                    catch (Exception)
                    {
                        throw;
                    }
                }
        
                public NivelesTerrenoEntidad NivelesTerrenosConsultarDetalle(String conexion, String conexionBitacora, NivelesTerrenoEntidad nivelTerreno, BitacorasEntidad _bitacora)
                {
                    NivelesTerrenoEntidad retorno = new NivelesTerrenoEntidad();
                    DataSet rowsAffected;

                    #region PARAMETROS

                    SqlParameter[] paramTransaccion = new SqlParameter[]
                    {
                        new SqlParameter("@piId_Nivel_Terreno", nivelTerreno.IdNivelTerreno)
                    };

                    #endregion

                    #region KeyValuePair LIST

                    List<KeyValuePair<string, string>> itemConsulta = new List<KeyValuePair<string, string>>();
                    itemConsulta.Add(helper.CrearKeyValuePairItem("@piId_Nivel_Terreno", nivelTerreno.IdNivelTerreno.ToString()));

                    #endregion

                    try
                    {

                        #region CONSULTAR DETALLE

                        rowsAffected = transaccionDA.TransaccionConsultaDetalle(conexion, conexionBitacora, "Niveles_Terreno_Consulta_Detalle", paramTransaccion, EnumTipoBitacora.CONSULTAR, itemConsulta, "Niveles_Terreno_Consulta_Detalle", _bitacora);
                        if (!rowsAffected.Equals(null))
                        {
                            retorno.IdNivelTerreno = int.Parse(rowsAffected.Tables[0].Rows[0][0].ToString());
                            retorno.CodNivelTerreno = int.Parse(rowsAffected.Tables[0].Rows[0][1].ToString());
                            retorno.DesNivelTerreno = rowsAffected.Tables[0].Rows[0][2].ToString();
                            retorno.IndMetodoInsercion = rowsAffected.Tables[0].Rows[0][3].ToString();
                            if (rowsAffected.Tables[0].Rows[0][4].ToString().Length > 0)
                                retorno.FechaIngreso = DateTime.Parse(rowsAffected.Tables[0].Rows[0][4].ToString());
                            else
                                retorno.FechaIngreso = null;
                            retorno.CodUsuarioIngreso = rowsAffected.Tables[0].Rows[0][5].ToString();
                            if (rowsAffected.Tables[0].Rows[0][6].ToString().Length > 0)
                                retorno.FechaUltimaModificacion = DateTime.Parse(rowsAffected.Tables[0].Rows[0][6].ToString());
                            else
                                retorno.FechaUltimaModificacion = null;
                            retorno.CodUsuarioUltimaModificacion = rowsAffected.Tables[0].Rows[0][7].ToString();
                            retorno.DesUsuarioIngreso = rowsAffected.Tables[0].Rows[0][8].ToString();
                            retorno.DesUsuarioUltimaModificacion = rowsAffected.Tables[0].Rows[0][9].ToString();
                        }

                        return retorno;

                        #endregion

                    }
                    catch (Exception)
                    {
                        throw;
                    }
                }
        
                public int NivelesTerrenosTotalFilas(String conexion, ParametrosTotalFilasEntidad entidad)
                {

                    int value;

                    #region PARAMETROS

                    SqlParameter[] paramTransaccion = new SqlParameter[]
                    {
                        new SqlParameter("@psValor_Filtro", entidad.ValorFiltro),
                        new SqlParameter("@psColumna_Filtro", entidad.ColumnaFiltro)
                    };

                    #endregion

                    try
                    {

                        #region TOTAL FILAS

                            value = transaccionDA.TransaccionRows(conexion, "Niveles_Terreno_Total_Filas", paramTransaccion);

                            return value;

                        #endregion

                    }
                    catch (Exception)
                    {
                        throw;
                    }
                }

            #endregion 

            //REQUERIMIENTO: 1-24105296
            #region NOTARIOS
        
                public RespuestaEntidad NotariosInsertar(String conexion, String conexionBitacora, NotariosEntidad notario, BitacorasEntidad _bitacora)
                {
                    RespuestaEntidad elemento = null;
                    DataSet rowsAffected;

                    #region PARAMETROS

                    SqlParameter[] paramTransaccion = new SqlParameter[]
                    {
                        new SqlParameter("@piId_Tipo_Persona", notario.IdTipoPersona),
                        new SqlParameter("@psCod_Notario", notario.CodNotario),
                        new SqlParameter("@psDes_Notario", notario.DesNotario),
                        new SqlParameter("@psCod_Tipo_Notario", notario.CodTipoNotario),
                        new SqlParameter("@psInd_Metodo_Insercion", notario.IndMetodoInsercion),
                        new SqlParameter("@psCod_Usuario", notario.CodUsuarioIngreso)
                    };

                    #endregion

                    try
                    {

                        #region INSERTAR

                        rowsAffected = transaccionDA.TransaccionInsertar(conexion, conexionBitacora, "Notarios_Inserta", paramTransaccion, EnumTipoBitacora.INSERTAR, _bitacora);
                        if (!rowsAffected.Equals(null))
                        {
                            elemento = new RespuestaEntidad();
                            elemento.ValorEstado = int.Parse(rowsAffected.Tables[0].Rows[0][0].ToString());
                            elemento.ValorError = int.Parse(rowsAffected.Tables[0].Rows[0][1].ToString());
                        }

                        return elemento;

                        #endregion

                    }
                    catch (Exception)
                    {
                        throw;
                    }
                }
        
                public RespuestaEntidad NotariosModificar(String conexion, String conexionBitacora, NotariosEntidad notario, BitacorasEntidad _bitacora)
                {
                    RespuestaEntidad elemento = null;
                    DataSet rowsAffected;

                    #region PARAMETROS

                    SqlParameter[] paramTransaccion = new SqlParameter[]
                    {
                        new SqlParameter("@piId_Notario", notario.IdNotario),
                        new SqlParameter("@piId_Tipo_Persona", notario.IdTipoPersona),
                        new SqlParameter("@psCod_Notario", notario.CodNotario),
                        new SqlParameter("@psDes_Notario", notario.DesNotario),
                        new SqlParameter("@psCod_Tipo_Notario", notario.CodTipoNotario),
                        new SqlParameter("@psInd_Metodo_Insercion", notario.IndMetodoInsercion),
                        new SqlParameter("@psCod_Usuario", notario.CodUsuarioIngreso)
                    };

                    #endregion

                    #region KeyValuePair LIST

                    List<KeyValuePair<string, string>> itemConsulta = new List<KeyValuePair<string, string>>();
                    itemConsulta.Add(helper.CrearKeyValuePairItem("@piId_Notario", notario.IdNotario.ToString()));

                    #endregion

                    try
                    {

                        #region MODIFICAR

                        rowsAffected = transaccionDA.TransaccionModificar(conexion, conexionBitacora, "Notarios_Actualiza", paramTransaccion, EnumTipoBitacora.ACTUALIZAR, itemConsulta, "Notarios_Consulta_Detalle", _bitacora);
                        if (!rowsAffected.Equals(null))
                        {
                            elemento = new RespuestaEntidad();
                            elemento.ValorEstado = int.Parse(rowsAffected.Tables[0].Rows[0][0].ToString());
                            elemento.ValorError = int.Parse(rowsAffected.Tables[0].Rows[0][1].ToString());
                        }

                        return elemento;

                        #endregion

                    }
                    catch (Exception)
                    {
                        throw;
                    }
                }
        
                public RespuestaEntidad NotariosEliminar(String conexion, String conexionBitacora, NotariosEntidad notario, BitacorasEntidad _bitacora)
                {
                    RespuestaEntidad elemento = null;
                    DataSet rowsAffected;

                    #region PARAMETROS

                    SqlParameter[] paramTransaccion = new SqlParameter[]
                    {
                        new SqlParameter("@piId_Notario", notario.IdNotario)
                    };

                    #endregion

                    #region KeyValuePair LIST

                    List<KeyValuePair<string, string>> itemConsulta = new List<KeyValuePair<string, string>>();
                    itemConsulta.Add(helper.CrearKeyValuePairItem("@piId_Notario", notario.IdNotario.ToString()));

                    #endregion

                    try
                    {

                        #region ELIMINAR

                        rowsAffected = transaccionDA.TransaccionEliminar(conexion, conexionBitacora, "Notarios_Elimina", paramTransaccion, EnumTipoBitacora.ELIMINAR, itemConsulta, "Notarios_Consulta_Detalle", _bitacora);
                        if (!rowsAffected.Equals(null))
                        {
                            elemento = new RespuestaEntidad();
                            elemento.ValorEstado = int.Parse(rowsAffected.Tables[0].Rows[0][0].ToString());
                            elemento.ValorError = int.Parse(rowsAffected.Tables[0].Rows[0][1].ToString());
                        }

                        return elemento;

                        #endregion

                    }
                    catch (Exception)
                    {
                        throw;
                    }
                }

                public List<NotariosEntidad> NotariosConsultar(String conexion, ParametrosConsultaEntidad entidad)
                {
                    List<NotariosEntidad> retorno = new List<NotariosEntidad>();
                    NotariosEntidad elemento;
                    DataSet rowsAffected;

                    #region PARAMETROS

                    SqlParameter[] paramTransaccion = new SqlParameter[]
                    {
                       new SqlParameter("@piIndice_Inicio_Fila", entidad.IndiceInicioFila),
                       new SqlParameter("@piMaximo_Filas", entidad.MaximoFilas),
                       new SqlParameter("@psValores_Filtro", entidad.ValorFiltro),
                       new SqlParameter("@psColumnas_Filtros", entidad.ColumnaFiltro),
                       new SqlParameter("@psColumna_Ordenar", entidad.ColumnaOrdenar)
                    };

                    #endregion

                    try
                    {

                        #region CONSULTAR

                        rowsAffected = transaccionDA.TransaccionConsulta(conexion, "Notarios_Consulta", paramTransaccion);
                        if (!rowsAffected.Equals(null))
                        {
                            foreach (DataRow dr in rowsAffected.Tables[0].Rows)
                            {
                                elemento = new NotariosEntidad();
                                elemento.IdNotario = int.Parse(dr[0].ToString());
                                elemento.IdTipoPersona = int.Parse(dr[1].ToString());
                                elemento.CodTipoPersona = int.Parse(dr[2].ToString());
                                elemento.DesTipoPersona = dr[3].ToString();
                                elemento.CodNotario = dr[4].ToString();
                                elemento.DesNotario = dr[5].ToString();
                                elemento.CodTipoNotario = dr[6].ToString();
                                elemento.DesTipoNotario = dr[7].ToString();

                                retorno.Add(elemento);                                                      
                            }
                        }

                        return retorno;

                        #endregion

                    }
                    catch (Exception)
                    {
                        throw;
                    }
                }
        
                public NotariosEntidad NotariosConsultarDetalle(String conexion, String conexionBitacora, NotariosEntidad notario, BitacorasEntidad _bitacora)
                {
                    NotariosEntidad retorno = new NotariosEntidad();
                    DataSet rowsAffected;

                    #region PARAMETROS

                    SqlParameter[] paramTransaccion = new SqlParameter[]
                    {
                        new SqlParameter("@piId_Notario", notario.IdNotario)
                    };

                    #endregion

                    #region KeyValuePair LIST

                    List<KeyValuePair<string, string>> itemConsulta = new List<KeyValuePair<string, string>>();
                    itemConsulta.Add(helper.CrearKeyValuePairItem("@piId_Notario", notario.IdNotario.ToString()));

                    #endregion

                    try
                    {

                        #region CONSULTAR DETALLE

                        rowsAffected = transaccionDA.TransaccionConsultaDetalle(conexion, conexionBitacora, "Notarios_Consulta_Detalle", paramTransaccion, EnumTipoBitacora.CONSULTAR, itemConsulta, "Notarios_Consulta_Detalle", _bitacora);
                        if (!rowsAffected.Equals(null))
                        {
                            retorno.IdNotario = int.Parse(rowsAffected.Tables[0].Rows[0][0].ToString());
                            retorno.IdTipoPersona = int.Parse(rowsAffected.Tables[0].Rows[0][1].ToString());
                            retorno.CodTipoPersona = int.Parse(rowsAffected.Tables[0].Rows[0][2].ToString());
                            retorno.DesTipoPersona = rowsAffected.Tables[0].Rows[0][3].ToString();
                            retorno.CodNotario = rowsAffected.Tables[0].Rows[0][4].ToString();
                            retorno.DesNotario = rowsAffected.Tables[0].Rows[0][5].ToString();
                            retorno.CodTipoNotario = rowsAffected.Tables[0].Rows[0][6].ToString();

                            retorno.IndMetodoInsercion = rowsAffected.Tables[0].Rows[0][7].ToString();
                            if (rowsAffected.Tables[0].Rows[0][8].ToString().Length > 0)
                                retorno.FechaIngreso = DateTime.Parse(rowsAffected.Tables[0].Rows[0][8].ToString());
                            else
                                retorno.FechaIngreso = null;
                            retorno.CodUsuarioIngreso = rowsAffected.Tables[0].Rows[0][9].ToString();
                            if (rowsAffected.Tables[0].Rows[0][10].ToString().Length > 0)
                                retorno.FechaUltimaModificacion = DateTime.Parse(rowsAffected.Tables[0].Rows[0][10].ToString());
                            else
                                retorno.FechaUltimaModificacion = null;
                            retorno.CodUsuarioUltimaModificacion = rowsAffected.Tables[0].Rows[0][11].ToString();
                            retorno.DesUsuarioIngreso = rowsAffected.Tables[0].Rows[0][12].ToString();
                            retorno.DesUsuarioUltimaModificacion = rowsAffected.Tables[0].Rows[0][13].ToString();
                        }

                        return retorno;

                        #endregion

                    }
                    catch (Exception)
                    {
                        throw;
                    }
                }
        
                public int NotariosTotalFilas(String conexion, ParametrosTotalFilasEntidad entidad)
                {

                    int value;

                    #region PARAMETROS

                    SqlParameter[] paramTransaccion = new SqlParameter[]
                    {
                        new SqlParameter("@psValor_Filtro", entidad.ValorFiltro),
                        new SqlParameter("@psColumna_Filtro", entidad.ColumnaFiltro)
                    };

                    #endregion

                    try
                    {

                        #region TOTAL FILAS

                        value = transaccionDA.TransaccionRows(conexion, "Notarios_Total_Filas", paramTransaccion);

                        return value;

                        #endregion

                    }
                    catch (Exception)
                    {
                        throw;
                    }
                }

                public List<NotariosEntidad> NotariosConsultarIdentificacion(String conexion, NotariosEntidad notario)
                {
                    List<NotariosEntidad> retorno = new List<NotariosEntidad>();
                    NotariosEntidad elemento;
                    DataSet rowsAffected;

                    #region PARAMETROS

                    SqlParameter[] paramTransaccion = new SqlParameter[]
                    {
                        new SqlParameter("@psCod_Notario", notario.CodNotario)
                    };

                    #endregion

                    try
                    {

                        #region CONSULTAR IDENTIFICACION NOTARIO

                        rowsAffected = transaccionDA.TransaccionConsulta(conexion, "Notarios_Consulta_Identificacion", paramTransaccion);
                        if (!rowsAffected.Equals(null))
                        {
                            foreach (DataRow dr in rowsAffected.Tables[0].Rows)
                            {
                                elemento = new NotariosEntidad();

                                elemento.IdNotario = int.Parse(dr[0].ToString());
                                elemento.DesTipoPersona = dr[1].ToString();
                                elemento.CodNotario = dr[2].ToString();
                                elemento.DesNotario = dr[3].ToString();

                                retorno.Add(elemento);
                            }
                        }

                        return retorno;

                        #endregion

                    }
                    catch (Exception)
                    {
                        throw;
                    }
                }
        
            #endregion 

            #region NUMERO LINEAS
        
                public RespuestaEntidad NumerosLineasInsertar(String conexion, String conexionBitacora, NumerosLineasEntidad numeroLinea, BitacorasEntidad _bitacora)
                {
                    RespuestaEntidad elemento = null;
                    DataSet rowsAffected;

                    #region PARAMETROS

                    SqlParameter[] paramTransaccion = new SqlParameter[]
                    {
                        new SqlParameter("@piNumero_Linea", numeroLinea.NumeroLinea),
                        new SqlParameter("@psInd_Metodo_Insercion", numeroLinea.IndMetodoInsercion),
                        new SqlParameter("@psCod_Usuario", numeroLinea.CodUsuarioIngreso)
                    };

                    #endregion

                    try
                    {

                        #region INSERTAR

                        rowsAffected = transaccionDA.TransaccionInsertar(conexion, conexionBitacora, "Numeros_Lineas_Inserta", paramTransaccion, EnumTipoBitacora.INSERTAR, _bitacora);
                        if (!rowsAffected.Equals(null))
                        {
                            elemento = new RespuestaEntidad();
                            elemento.ValorEstado = int.Parse(rowsAffected.Tables[0].Rows[0][0].ToString());
                            elemento.ValorError = int.Parse(rowsAffected.Tables[0].Rows[0][1].ToString());
                        }

                        return elemento;

                        #endregion

                    }
                    catch (Exception)
                    {
                        throw;
                    }
                }
        
                public RespuestaEntidad NumerosLineasModificar(String conexion, String conexionBitacora, NumerosLineasEntidad numeroLinea, BitacorasEntidad _bitacora)
                {
                    RespuestaEntidad elemento = null;
                    DataSet rowsAffected;

                    #region PARAMETROS

                    SqlParameter[] paramTransaccion = new SqlParameter[]
                    {
                        new SqlParameter("@piId_Numero_Linea", numeroLinea.IdNumeroLinea),
                        new SqlParameter("@piNumero_Linea", numeroLinea.NumeroLinea),
                        new SqlParameter("@psInd_Metodo_Insercion", numeroLinea.IndMetodoInsercion),
                        new SqlParameter("@psCod_Usuario", numeroLinea.CodUsuarioIngreso)
                    };

                    #endregion

                    #region KeyValuePair LIST

                    List<KeyValuePair<string, string>> itemConsulta = new List<KeyValuePair<string, string>>();
                    itemConsulta.Add(helper.CrearKeyValuePairItem("@piId_Numero_Linea", numeroLinea.IdNumeroLinea.ToString()));

                    #endregion

                    try
                    {

                        #region MODIFICAR

                        rowsAffected = transaccionDA.TransaccionModificar(conexion, conexionBitacora, "Numeros_Lineas_Actualiza", paramTransaccion, EnumTipoBitacora.ACTUALIZAR, itemConsulta, "Numeros_Lineas_Consulta_Detalle", _bitacora);
                        if (!rowsAffected.Equals(null))
                        {
                            elemento = new RespuestaEntidad();
                            elemento.ValorEstado = int.Parse(rowsAffected.Tables[0].Rows[0][0].ToString());
                            elemento.ValorError = int.Parse(rowsAffected.Tables[0].Rows[0][1].ToString());
                        }

                        return elemento;

                        #endregion

                    }
                    catch (Exception)
                    {
                        throw;
                    }
                }
        
                public RespuestaEntidad NumerosLineasEliminar(String conexion, String conexionBitacora, NumerosLineasEntidad numeroLinea, BitacorasEntidad _bitacora)
                {
                    RespuestaEntidad elemento = null;
                    DataSet rowsAffected;

                    #region PARAMETROS

                    SqlParameter[] paramTransaccion = new SqlParameter[]
                    {
                        new SqlParameter("@piId_Numero_Linea", numeroLinea.IdNumeroLinea)
                    };

                    #endregion

                    #region KeyValuePair LIST

                    List<KeyValuePair<string, string>> itemConsulta = new List<KeyValuePair<string, string>>();
                    itemConsulta.Add(helper.CrearKeyValuePairItem("@piId_Numero_Linea", numeroLinea.IdNumeroLinea.ToString()));

                    #endregion

                    try
                    {

                        #region ELIMINAR

                        rowsAffected = transaccionDA.TransaccionEliminar(conexion, conexionBitacora, "Numeros_Lineas_Elimina", paramTransaccion, EnumTipoBitacora.ELIMINAR, itemConsulta, "Numeros_Lineas_Consulta_Detalle", _bitacora);
                        if (!rowsAffected.Equals(null))
                        {
                            elemento = new RespuestaEntidad();
                            elemento.ValorEstado = int.Parse(rowsAffected.Tables[0].Rows[0][0].ToString());
                            elemento.ValorError = int.Parse(rowsAffected.Tables[0].Rows[0][1].ToString());
                        }

                        return elemento;

                        #endregion

                    }
                    catch (Exception)
                    {
                        throw;
                    }
                }

                public List<NumerosLineasEntidad> NumerosLineasConsultar(String conexion, ParametrosConsultaEntidad entidad)
                {
                    List<NumerosLineasEntidad> retorno = new List<NumerosLineasEntidad>();
                    NumerosLineasEntidad elemento;
                    DataSet rowsAffected;

                    #region PARAMETROS

                    SqlParameter[] paramTransaccion = new SqlParameter[]
                    {
                       new SqlParameter("@piIndice_Inicio_Fila", entidad.IndiceInicioFila),
                       new SqlParameter("@piMaximo_Filas", entidad.MaximoFilas),
                       new SqlParameter("@psValores_Filtro", entidad.ValorFiltro),
                       new SqlParameter("@psColumnas_Filtros", entidad.ColumnaFiltro),
                       new SqlParameter("@psColumna_Ordenar", entidad.ColumnaOrdenar)
                    };

                    #endregion

                    try
                    {

                        #region CONSULTAR

                        rowsAffected = transaccionDA.TransaccionConsulta(conexion, "Numeros_Lineas_Consulta", paramTransaccion);
                        if (!rowsAffected.Equals(null))
                        {
                            foreach (DataRow dr in rowsAffected.Tables[0].Rows)
                            {
                                elemento = new NumerosLineasEntidad();
                                elemento.IdNumeroLinea = int.Parse(dr[0].ToString());
                                elemento.NumeroLinea = int.Parse(dr[1].ToString());

                                retorno.Add(elemento);
                            }
                        }

                        return retorno;

                        #endregion

                    }
                    catch (Exception)
                    {
                        throw;
                    }
                }
        
                public NumerosLineasEntidad NumerosLineasConsultarDetalle(String conexion, String conexionBitacora, NumerosLineasEntidad numeroLinea, BitacorasEntidad _bitacora)
                {
                    NumerosLineasEntidad retorno = new NumerosLineasEntidad();
                    DataSet rowsAffected;

                    #region PARAMETROS

                    SqlParameter[] paramTransaccion = new SqlParameter[]
                    {
                        new SqlParameter("@piId_Numero_Linea", numeroLinea.IdNumeroLinea)
                    };

                    #endregion

                    try
                    {

                        #region CONSULTAR DETALLE

                        rowsAffected = transaccionDA.TransaccionConsulta(conexion, "Numeros_Lineas_Consulta_Detalle", paramTransaccion);
                        if (!rowsAffected.Equals(null))
                        {
                            retorno.IdNumeroLinea = int.Parse(rowsAffected.Tables[0].Rows[0][0].ToString());
                            retorno.NumeroLinea = int.Parse(rowsAffected.Tables[0].Rows[0][1].ToString());
                            retorno.IndMetodoInsercion = rowsAffected.Tables[0].Rows[0][2].ToString();
                            if (rowsAffected.Tables[0].Rows[0][3].ToString().Length > 0)
                                retorno.FechaIngreso = DateTime.Parse(rowsAffected.Tables[0].Rows[0][3].ToString());
                            else
                                retorno.FechaIngreso = null;
                            retorno.CodUsuarioIngreso = rowsAffected.Tables[0].Rows[0][4].ToString();
                            if (rowsAffected.Tables[0].Rows[0][5].ToString().Length > 0)
                                retorno.FechaUltimaModificacion = DateTime.Parse(rowsAffected.Tables[0].Rows[0][5].ToString());
                            else
                                retorno.FechaUltimaModificacion = null;
                            retorno.CodUsuarioUltimaModificacion = rowsAffected.Tables[0].Rows[0][6].ToString();
                            retorno.DesUsuarioIngreso = rowsAffected.Tables[0].Rows[0][7].ToString();
                            retorno.DesUsuarioUltimaModificacion = rowsAffected.Tables[0].Rows[0][8].ToString();
                        }

                        return retorno;

                        #endregion

                    }
                    catch (Exception)
                    {
                        throw;
                    }
                }
        
                public int NumerosLineasTotalFilas(String conexion, ParametrosTotalFilasEntidad entidad)
                {

                    int value;                    

                    #region PARAMETROS

                    SqlParameter[] paramTransaccion = new SqlParameter[]
                    {
                        new SqlParameter("@psValor_Filtro", entidad.ValorFiltro),
                        new SqlParameter("@psColumna_Filtro", entidad.ColumnaFiltro)
                    };

                    #endregion

                    try
                    {

                        #region TOTAL FILAS

                            value = transaccionDA.TransaccionRows(conexion, "Numeros_Lineas_Total_Filas", paramTransaccion);

                            return value;

                        #endregion

                    }
                    catch (Exception)
                    {
                        throw;
                    }
                }

            #endregion 

            #region ORIENTACIONES
        
                public RespuestaEntidad OrientacionesInsertar(String conexion, String conexionBitacora, OrientacionesEntidad orientacion, BitacorasEntidad _bitacora)
                {
                    RespuestaEntidad elemento = null;
                    DataSet rowsAffected;

                    #region PARAMETROS

                    SqlParameter[] paramTransaccion = new SqlParameter[]
                    {
                        new SqlParameter("@psCod_Orientacion", orientacion.CodOrientacion),
                        new SqlParameter("@psDes_Orientacion", orientacion.DesOrientacion),
                        new SqlParameter("@psInd_Metodo_Insercion", orientacion.IndMetodoInsercion),
                        new SqlParameter("@psCod_Usuario", orientacion.CodUsuarioIngreso)
                    };

                    #endregion

                    try
                    {

                        #region INSERTAR

                        rowsAffected = transaccionDA.TransaccionInsertar(conexion, conexionBitacora, "Orientaciones_Inserta", paramTransaccion, EnumTipoBitacora.INSERTAR, _bitacora);
                        if (!rowsAffected.Equals(null))
                        {
                            elemento = new RespuestaEntidad();
                            elemento.ValorEstado = int.Parse(rowsAffected.Tables[0].Rows[0][0].ToString());
                            elemento.ValorError = int.Parse(rowsAffected.Tables[0].Rows[0][1].ToString());
                        }

                        return elemento;

                        #endregion

                    }
                    catch (Exception)
                    {
                        throw;
                    }
                }
       
                public RespuestaEntidad OrientacionesModificar(String conexion, String conexionBitacora, OrientacionesEntidad orientacion, BitacorasEntidad _bitacora)
                {
                    RespuestaEntidad elemento = null;
                    DataSet rowsAffected;

                    #region PARAMETROS

                    SqlParameter[] paramTransaccion = new SqlParameter[]
                    {
                        new SqlParameter("@piId_Orientacion", orientacion.IdOrientacion),
                        new SqlParameter("@psCod_Orientacion", orientacion.CodOrientacion),
                        new SqlParameter("@psDes_Orientacion", orientacion.DesOrientacion),
                        new SqlParameter("@psInd_Metodo_Insercion", orientacion.IndMetodoInsercion),
                        new SqlParameter("@psCod_Usuario", orientacion.CodUsuarioIngreso)
                    };

                    #endregion

                    #region KeyValuePair LIST

                    List<KeyValuePair<string, string>> itemConsulta = new List<KeyValuePair<string, string>>();
                    itemConsulta.Add(helper.CrearKeyValuePairItem("@piId_Orientacion", orientacion.IdOrientacion.ToString()));

                    #endregion

                    try
                    {

                        #region MODIFICAR

                        rowsAffected = transaccionDA.TransaccionModificar(conexion, conexionBitacora, "Orientaciones_Actualiza", paramTransaccion, EnumTipoBitacora.ACTUALIZAR, itemConsulta, "Orientaciones_Consulta_Detalle", _bitacora);
                        if (!rowsAffected.Equals(null))
                        {
                            elemento = new RespuestaEntidad();
                            elemento.ValorEstado = int.Parse(rowsAffected.Tables[0].Rows[0][0].ToString());
                            elemento.ValorError = int.Parse(rowsAffected.Tables[0].Rows[0][1].ToString());
                        }

                return elemento;

                        #endregion

                    }
                    catch (Exception)
                    {
                        throw;
                    }
                }
        
                public RespuestaEntidad OrientacionesEliminar(String conexion, String conexionBitacora, OrientacionesEntidad orientacion, BitacorasEntidad _bitacora)
                {
                    RespuestaEntidad elemento = null;
                    DataSet rowsAffected;                 

                    #region PARAMETROS

                    SqlParameter[] paramTransaccion = new SqlParameter[]
                    {
                        new SqlParameter("@piId_Orientacion", orientacion.IdOrientacion)
                    };

                    #endregion

                    #region KeyValuePair LIST

                    List<KeyValuePair<string, string>> itemConsulta = new List<KeyValuePair<string, string>>();
                    itemConsulta.Add(helper.CrearKeyValuePairItem("@piId_Orientacion", orientacion.IdOrientacion.ToString()));

                    #endregion

                    try
                    {

                        #region ELIMINAR

                        rowsAffected = transaccionDA.TransaccionEliminar(conexion, conexionBitacora, "Orientaciones_Elimina", paramTransaccion, EnumTipoBitacora.ELIMINAR, itemConsulta, "Orientaciones_Consulta_Detalle", _bitacora);
                        if (!rowsAffected.Equals(null))
                        {
                            elemento = new RespuestaEntidad();
                            elemento.ValorEstado = int.Parse(rowsAffected.Tables[0].Rows[0][0].ToString());
                            elemento.ValorError = int.Parse(rowsAffected.Tables[0].Rows[0][1].ToString());
                        }

                        return elemento;

                        #endregion

                    }
                    catch (Exception)
                    {
                        throw;
                    }
                }

                public List<OrientacionesEntidad> OrientacionesConsultar(String conexion, ParametrosConsultaEntidad entidad)
                {
                    List<OrientacionesEntidad> retorno = new List<OrientacionesEntidad>();
                    OrientacionesEntidad elemento;
                    DataSet rowsAffected;                    

                    #region PARAMETROS

                    SqlParameter[] paramTransaccion = new SqlParameter[]
                    {
                       new SqlParameter("@piIndice_Inicio_Fila", entidad.IndiceInicioFila),
                       new SqlParameter("@piMaximo_Filas", entidad.MaximoFilas),
                       new SqlParameter("@psValores_Filtro", entidad.ValorFiltro),
                       new SqlParameter("@psColumnas_Filtros", entidad.ColumnaFiltro),
                       new SqlParameter("@psColumna_Ordenar", entidad.ColumnaOrdenar)
                    };

                    #endregion

                    try
                    {

                        #region CONSULTAR
                        
                            rowsAffected = transaccionDA.TransaccionConsulta(conexion, "Orientaciones_Consulta", paramTransaccion);
                            if (!rowsAffected.Equals(null))
                            {
                                foreach (DataRow dr in rowsAffected.Tables[0].Rows)
                                {
                                    elemento = new OrientacionesEntidad();
                                    elemento.IdOrientacion = int.Parse(dr[0].ToString());
                                    elemento.CodOrientacion = dr[1].ToString();
                                    elemento.DesOrientacion = dr[2].ToString();

                                    retorno.Add(elemento);
                                }
                            }

                            return retorno;

                        #endregion

                    }
                    catch (Exception)
                    {
                        throw;
                    }
                }
        
                public OrientacionesEntidad OrientacionesConsultarDetalle(String conexion, String conexionBitacora, OrientacionesEntidad orientacion, BitacorasEntidad _bitacora)
                {
                    OrientacionesEntidad retorno = new OrientacionesEntidad();
                    DataSet rowsAffected;

                    #region PARAMETROS

                    SqlParameter[] paramTransaccion = new SqlParameter[]
                    {
                        new SqlParameter("@piId_Orientacion", orientacion.IdOrientacion)
                    };

                    #endregion

                    #region KeyValuePair LIST

                    List<KeyValuePair<string, string>> itemConsulta = new List<KeyValuePair<string, string>>();
                    itemConsulta.Add(helper.CrearKeyValuePairItem("@piId_Orientacion", orientacion.IdOrientacion.ToString()));

                    #endregion

                    try
                    {

                        #region CONSULTAR DETALLE

                        rowsAffected = transaccionDA.TransaccionConsultaDetalle(conexion, conexionBitacora, "Orientaciones_Consulta_Detalle", paramTransaccion, EnumTipoBitacora.CONSULTAR, itemConsulta, "Orientaciones_Consulta_Detalle", _bitacora);
                        if (!rowsAffected.Equals(null))
                        {
                            retorno.IdOrientacion = int.Parse(rowsAffected.Tables[0].Rows[0][0].ToString());
                            retorno.CodOrientacion = rowsAffected.Tables[0].Rows[0][1].ToString();
                            retorno.DesOrientacion = rowsAffected.Tables[0].Rows[0][2].ToString();
                            retorno.IndMetodoInsercion = rowsAffected.Tables[0].Rows[0][3].ToString();
                            if (rowsAffected.Tables[0].Rows[0][4].ToString().Length > 0)
                                retorno.FechaIngreso = DateTime.Parse(rowsAffected.Tables[0].Rows[0][4].ToString());
                            else
                                retorno.FechaIngreso = null;
                            retorno.CodUsuarioIngreso = rowsAffected.Tables[0].Rows[0][5].ToString();
                            if (rowsAffected.Tables[0].Rows[0][6].ToString().Length > 0)
                                retorno.FechaUltimaModificacion = DateTime.Parse(rowsAffected.Tables[0].Rows[0][6].ToString());
                            else
                                retorno.FechaUltimaModificacion = null;
                            retorno.CodUsuarioUltimaModificacion = rowsAffected.Tables[0].Rows[0][7].ToString();
                            retorno.DesUsuarioIngreso = rowsAffected.Tables[0].Rows[0][8].ToString();
                            retorno.DesUsuarioUltimaModificacion = rowsAffected.Tables[0].Rows[0][9].ToString();
                        }

                        return retorno;

                        #endregion

                    }
                    catch (Exception)
                    {
                        throw;
                    }
                }
        
                public int OrientacionesTotalFilas(String conexion, ParametrosTotalFilasEntidad entidad)
                {

                    int value;                    
                    
                    #region PARAMETROS

                    SqlParameter[] paramTransaccion = new SqlParameter[]
                    {
                        new SqlParameter("@psValor_Filtro", entidad.ValorFiltro),
                        new SqlParameter("@psColumna_Filtro", entidad.ColumnaFiltro)
                    };

                    #endregion

                    try
                    {

                        #region TOTAL FILAS
                        
                            value = transaccionDA.TransaccionRows(conexion, "Orientaciones_Total_Filas", paramTransaccion);

                            return value;

                        #endregion

                    }
                    catch (Exception)
                    {
                        throw;
                    }
                }

            #endregion 

            #region PENDIENTES
        
                public RespuestaEntidad PendientesInsertar(String conexion, String conexionBitacora, PendientesEntidad pendiente, BitacorasEntidad _bitacora)
                {
                    RespuestaEntidad elemento = null;
                    DataSet rowsAffected;

                    #region PARAMETROS

                    SqlParameter[] paramTransaccion = new SqlParameter[]
                    {
                        new SqlParameter("@piCod_Pendiente", pendiente.CodPendiente),
                        new SqlParameter("@psDes_Pendiente", pendiente.DesPendiente),
                        new SqlParameter("@psInd_Metodo_Insercion", pendiente.IndMetodoInsercion),
                        new SqlParameter("@psCod_Usuario", pendiente.CodUsuarioIngreso)
                    };

                    #endregion

                    try
                    {

                        #region INSERTAR

                        rowsAffected = transaccionDA.TransaccionInsertar(conexion, conexionBitacora, "Pendientes_Inserta", paramTransaccion, EnumTipoBitacora.INSERTAR, _bitacora);
                        if (!rowsAffected.Equals(null))
                        {
                            elemento = new RespuestaEntidad();
                            elemento.ValorEstado = int.Parse(rowsAffected.Tables[0].Rows[0][0].ToString());
                            elemento.ValorError = int.Parse(rowsAffected.Tables[0].Rows[0][1].ToString());
                        }

                        return elemento;

                        #endregion

                    }
                    catch (Exception)
                    {
                        throw;
                    }
                }
        
                public RespuestaEntidad PendientesModificar(String conexion, String conexionBitacora, PendientesEntidad pendiente, BitacorasEntidad _bitacora)
                {
                    RespuestaEntidad elemento = null;
                    DataSet rowsAffected;

                    #region PARAMETROS

                    SqlParameter[] paramTransaccion = new SqlParameter[]
                    {
                        new SqlParameter("@piId_Pendiente", pendiente.IdPendiente),
                        new SqlParameter("@piCod_Pendiente", pendiente.CodPendiente),
                        new SqlParameter("@psDes_Pendiente", pendiente.DesPendiente),
                        new SqlParameter("@psInd_Metodo_Insercion", pendiente.IndMetodoInsercion),
                        new SqlParameter("@psCod_Usuario", pendiente.CodUsuarioIngreso)
                    };

                    #endregion

                    #region KeyValuePair LIST

                    List<KeyValuePair<string, string>> itemConsulta = new List<KeyValuePair<string, string>>();
                    itemConsulta.Add(helper.CrearKeyValuePairItem("@piId_Pendiente", pendiente.IdPendiente.ToString()));

                    #endregion


                    try
                    {

                        #region MODIFICAR

                        rowsAffected = transaccionDA.TransaccionModificar(conexion, conexionBitacora, "Pendientes_Actualiza", paramTransaccion, EnumTipoBitacora.ACTUALIZAR, itemConsulta, "Pendientes_Consulta_Detalle", _bitacora);
                        if (!rowsAffected.Equals(null))
                        {
                            elemento = new RespuestaEntidad();
                            elemento.ValorEstado = int.Parse(rowsAffected.Tables[0].Rows[0][0].ToString());
                            elemento.ValorError = int.Parse(rowsAffected.Tables[0].Rows[0][1].ToString());
                        }

                        return elemento;

                        #endregion

                    }
                    catch (Exception)
                    {
                        throw;
                    }
                }
        
                public RespuestaEntidad PendientesEliminar(String conexion, String conexionBitacora, PendientesEntidad pendiente, BitacorasEntidad _bitacora)
                {
                    RespuestaEntidad elemento = null;
                    DataSet rowsAffected;

                    #region PARAMETROS

                    SqlParameter[] paramTransaccion = new SqlParameter[]
                    {
                        new SqlParameter("@piId_Pendiente", pendiente.IdPendiente)
                    };

                    #endregion

                    #region KeyValuePair LIST

                    List<KeyValuePair<string, string>> itemConsulta = new List<KeyValuePair<string, string>>();
                    itemConsulta.Add(helper.CrearKeyValuePairItem("@piId_Pendiente", pendiente.IdPendiente.ToString()));

                    #endregion

                    try
                    {

                        #region ELIMINAR

                        rowsAffected = transaccionDA.TransaccionEliminar(conexion, conexionBitacora, "Pendientes_Elimina", paramTransaccion, EnumTipoBitacora.ELIMINAR, itemConsulta, "Pendientes_Consulta_Detalle", _bitacora);
                        if (!rowsAffected.Equals(null))
                        {
                            elemento = new RespuestaEntidad();
                            elemento.ValorEstado = int.Parse(rowsAffected.Tables[0].Rows[0][0].ToString());
                            elemento.ValorError = int.Parse(rowsAffected.Tables[0].Rows[0][1].ToString());
                        }

                        return elemento;

                        #endregion

                    }
                    catch (Exception)
                    {
                        throw;
                    }
                }

                public List<PendientesEntidad> PendientesConsultar(String conexion, ParametrosConsultaEntidad entidad)
                {
                    List<PendientesEntidad> retorno = new List<PendientesEntidad>();
                    PendientesEntidad elemento;
                    DataSet rowsAffected;

                    #region PARAMETROS

                    SqlParameter[] paramTransaccion = new SqlParameter[]
                    {
                       new SqlParameter("@piIndice_Inicio_Fila", entidad.IndiceInicioFila),
                       new SqlParameter("@piMaximo_Filas", entidad.MaximoFilas),
                       new SqlParameter("@psValores_Filtro", entidad.ValorFiltro),
                       new SqlParameter("@psColumnas_Filtros", entidad.ColumnaFiltro),
                       new SqlParameter("@psColumna_Ordenar", entidad.ColumnaOrdenar)
                    };

                    #endregion
                                        
                    try
                    {

                        #region CONSULTAR

                            rowsAffected = transaccionDA.TransaccionConsulta(conexion, "Pendientes_Consulta", paramTransaccion);
                            if (!rowsAffected.Equals(null))
                            {
                                foreach (DataRow dr in rowsAffected.Tables[0].Rows)
                                {
                                    elemento = new PendientesEntidad();
                                    elemento.IdPendiente = int.Parse(dr[0].ToString());
                                    elemento.CodPendiente = int.Parse(dr[1].ToString());
                                    elemento.DesPendiente = dr[2].ToString();

                                    retorno.Add(elemento);
                                }
                            }

                            return retorno;

                        #endregion

                    }
                    catch (Exception)
                    {
                        throw;
                    }
                }
        
                public PendientesEntidad PendientesConsultarDetalle(String conexion, String conexionBitacora, PendientesEntidad pendiente, BitacorasEntidad _bitacora)
                {
                    PendientesEntidad retorno = new PendientesEntidad();
                    DataSet rowsAffected;

                    #region PARAMETROS

                    SqlParameter[] paramTransaccion = new SqlParameter[]
                    {
                        new SqlParameter("@piId_Pendiente", pendiente.IdPendiente)
                    };

                    #endregion

                    #region KeyValuePair LIST

                    List<KeyValuePair<string, string>> itemConsulta = new List<KeyValuePair<string, string>>();
                    itemConsulta.Add(helper.CrearKeyValuePairItem("@piId_Pendiente", pendiente.IdPendiente.ToString()));

                    #endregion

                    try
                    {

                        #region CONSULTAR DETALLE

                        rowsAffected = transaccionDA.TransaccionConsultaDetalle(conexion, conexionBitacora, "Pendientes_Consulta_Detalle", paramTransaccion, EnumTipoBitacora.CONSULTAR, itemConsulta, "Pendientes_Consulta_Detalle", _bitacora);
                        if (!rowsAffected.Equals(null))
                        {
                            retorno.IdPendiente = int.Parse(rowsAffected.Tables[0].Rows[0][0].ToString());
                            retorno.CodPendiente = int.Parse(rowsAffected.Tables[0].Rows[0][1].ToString());
                            retorno.DesPendiente = rowsAffected.Tables[0].Rows[0][2].ToString(); 
                            retorno.IndMetodoInsercion = rowsAffected.Tables[0].Rows[0][3].ToString();
                            if (rowsAffected.Tables[0].Rows[0][4].ToString().Length > 0)
                                retorno.FechaIngreso = DateTime.Parse(rowsAffected.Tables[0].Rows[0][4].ToString());
                            else
                                retorno.FechaIngreso = null;
                            retorno.CodUsuarioIngreso = rowsAffected.Tables[0].Rows[0][5].ToString();
                            if (rowsAffected.Tables[0].Rows[0][6].ToString().Length > 0)
                                retorno.FechaUltimaModificacion = DateTime.Parse(rowsAffected.Tables[0].Rows[0][6].ToString());
                            else
                                retorno.FechaUltimaModificacion = null;
                            retorno.CodUsuarioUltimaModificacion = rowsAffected.Tables[0].Rows[0][7].ToString();
                            retorno.DesUsuarioIngreso = rowsAffected.Tables[0].Rows[0][8].ToString();
                            retorno.DesUsuarioUltimaModificacion = rowsAffected.Tables[0].Rows[0][9].ToString();
                        }

                        return retorno;

                        #endregion

                    }
                    catch (Exception)
                    {
                        throw;
                    }
                }
        
                public int PendientesTotalFilas(String conexion, ParametrosTotalFilasEntidad entidad)
                {

                    int value;

                    #region PARAMETROS

                    SqlParameter[] paramTransaccion = new SqlParameter[]
                    {
                        new SqlParameter("@psValor_Filtro", entidad.ValorFiltro),
                        new SqlParameter("@psColumna_Filtro", entidad.ColumnaFiltro)
                    };

                    #endregion

                    try
                    {

                        #region TOTAL FILAS

                            value = transaccionDA.TransaccionRows(conexion, "Pendientes_Total_Filas", paramTransaccion);

                            return value;

                        #endregion

                    }
                    catch (Exception)
                    {
                        throw;
                    }
                }

            #endregion 

            #region PINTURAS
        
                public RespuestaEntidad PinturasInsertar(String conexion, String conexionBitacora, PinturasEntidad pintura, BitacorasEntidad _bitacora)
                {
                    RespuestaEntidad elemento = null;
                    DataSet rowsAffected;

                    #region PARAMETROS

                    SqlParameter[] paramTransaccion = new SqlParameter[]
                    {
                        new SqlParameter("@piCod_Pintura", pintura.CodPintura),
                        new SqlParameter("@psDes_Pintura", pintura.DesPintura),
                        new SqlParameter("@psInd_Metodo_Insercion", pintura.IndMetodoInsercion),
                        new SqlParameter("@psCod_Usuario", pintura.CodUsuarioIngreso)
                    };

                    #endregion

                    try
                    {

                        #region INSERTAR

                        rowsAffected = transaccionDA.TransaccionInsertar(conexion, conexionBitacora, "Pinturas_Inserta", paramTransaccion, EnumTipoBitacora.INSERTAR, _bitacora);
                        if (!rowsAffected.Equals(null))
                        {
                            elemento = new RespuestaEntidad();
                            elemento.ValorEstado = int.Parse(rowsAffected.Tables[0].Rows[0][0].ToString());
                            elemento.ValorError = int.Parse(rowsAffected.Tables[0].Rows[0][1].ToString());
                        }

                        return elemento;

                        #endregion

                    }
                    catch (Exception)
                    {
                        throw;
                    }
                }
        
                public RespuestaEntidad PinturasModificar(String conexion, String conexionBitacora, PinturasEntidad pintura, BitacorasEntidad _bitacora)
                {
                    RespuestaEntidad elemento = null;
                    DataSet rowsAffected;

                    #region PARAMETROS

                    SqlParameter[] paramTransaccion = new SqlParameter[]
                    {
                        new SqlParameter("@piId_Pintura", pintura.IdPintura),
                        new SqlParameter("@piCod_Pintura", pintura.CodPintura),
                        new SqlParameter("@psDes_Pintura", pintura.DesPintura),
                        new SqlParameter("@psInd_Metodo_Insercion", pintura.IndMetodoInsercion),
                        new SqlParameter("@psCod_Usuario", pintura.CodUsuarioIngreso)
                    };

                    #endregion

                    #region KeyValuePair LIST

                    List<KeyValuePair<string, string>> itemConsulta = new List<KeyValuePair<string, string>>();
                    itemConsulta.Add(helper.CrearKeyValuePairItem("@piId_Pintura", pintura.IdPintura.ToString()));

                    #endregion

                    try
                    {

                        #region MODIFICAR

                        rowsAffected = transaccionDA.TransaccionModificar(conexion, conexionBitacora, "Pinturas_Actualiza", paramTransaccion, EnumTipoBitacora.ACTUALIZAR, itemConsulta, "Pinturas_Consulta_Detalle", _bitacora);
                        if (!rowsAffected.Equals(null))
                        {
                            elemento = new RespuestaEntidad();
                            elemento.ValorEstado = int.Parse(rowsAffected.Tables[0].Rows[0][0].ToString());
                            elemento.ValorError = int.Parse(rowsAffected.Tables[0].Rows[0][1].ToString());
                        }

                        return elemento;

                        #endregion

                    }
                    catch (Exception)
                    {
                        throw;
                    }
                }
        
                public RespuestaEntidad PinturasEliminar(String conexion, String conexionBitacora, PinturasEntidad pintura, BitacorasEntidad _bitacora)
                {
                    RespuestaEntidad elemento = null;
                    DataSet rowsAffected;

                    #region PARAMETROS

                    SqlParameter[] paramTransaccion = new SqlParameter[]
                    {
                        new SqlParameter("@piId_Pintura", pintura.IdPintura)
                    };

                    #endregion

                    #region KeyValuePair LIST

                    List<KeyValuePair<string, string>> itemConsulta = new List<KeyValuePair<string, string>>();
                    itemConsulta.Add(helper.CrearKeyValuePairItem("@piId_Pintura", pintura.IdPintura.ToString()));

                    #endregion

                    try
                    {

                        #region ELIMINAR

                        rowsAffected = transaccionDA.TransaccionEliminar(conexion, conexionBitacora, "Pinturas_Elimina", paramTransaccion, EnumTipoBitacora.ELIMINAR, itemConsulta, "Pinturas_Consulta_Detalle", _bitacora);
                        if (!rowsAffected.Equals(null))
                        {
                            elemento = new RespuestaEntidad();
                            elemento.ValorEstado = int.Parse(rowsAffected.Tables[0].Rows[0][0].ToString());
                            elemento.ValorError = int.Parse(rowsAffected.Tables[0].Rows[0][1].ToString());
                        }

                        return elemento;

                        #endregion

                    }
                    catch (Exception)
                    {
                        throw;
                    }
                }

                public List<PinturasEntidad> PinturasConsultar(String conexion, ParametrosConsultaEntidad entidad)
                {
                    List<PinturasEntidad> retorno = new List<PinturasEntidad>();
                    PinturasEntidad elemento;
                    DataSet rowsAffected;

                    #region PARAMETROS

                    SqlParameter[] paramTransaccion = new SqlParameter[]
                    {
                       new SqlParameter("@piIndice_Inicio_Fila", entidad.IndiceInicioFila),
                       new SqlParameter("@piMaximo_Filas", entidad.MaximoFilas),
                       new SqlParameter("@psValores_Filtro", entidad.ValorFiltro),
                       new SqlParameter("@psColumnas_Filtros", entidad.ColumnaFiltro),
                       new SqlParameter("@psColumna_Ordenar", entidad.ColumnaOrdenar)
                    };

                    #endregion

                    try
                    {

                        #region CONSULTAR
                        
                            rowsAffected = transaccionDA.TransaccionConsulta(conexion, "Pinturas_Consulta", paramTransaccion);
                            if (!rowsAffected.Equals(null))
                            {
                                foreach (DataRow dr in rowsAffected.Tables[0].Rows)
                                {
                                    elemento = new PinturasEntidad();
                                    elemento.IdPintura = int.Parse(dr[0].ToString());
                                    elemento.CodPintura = int.Parse(dr[1].ToString());
                                    elemento.DesPintura = dr[2].ToString();

                                    retorno.Add(elemento);
                                }
                            }

                            return retorno;

                        #endregion

                    }
                    catch (Exception)
                    {
                        throw;
                    }
                }
        
                public PinturasEntidad PinturasConsultarDetalle(String conexion, String conexionBitacora, PinturasEntidad pintura, BitacorasEntidad _bitacora)
                {
                    PinturasEntidad retorno = new PinturasEntidad();
                    DataSet rowsAffected;

                    #region PARAMETROS

                    SqlParameter[] paramTransaccion = new SqlParameter[]
                    {
                        new SqlParameter("@piId_Pintura", pintura.IdPintura)
                    };

                    #endregion

                    #region KeyValuePair LIST

                    List<KeyValuePair<string, string>> itemConsulta = new List<KeyValuePair<string, string>>();
                    itemConsulta.Add(helper.CrearKeyValuePairItem("@piId_Pintura", pintura.IdPintura.ToString()));

                    #endregion

                    try
                    {

                        #region CONSULTAR DETALLE

                        rowsAffected = transaccionDA.TransaccionConsultaDetalle(conexion, conexionBitacora, "Pinturas_Consulta_Detalle", paramTransaccion, EnumTipoBitacora.CONSULTAR, itemConsulta, "Pinturas_Consulta_Detalle", _bitacora);
                        if (!rowsAffected.Equals(null))
                        {
                            retorno.IdPintura = int.Parse(rowsAffected.Tables[0].Rows[0][0].ToString());
                            retorno.CodPintura = int.Parse(rowsAffected.Tables[0].Rows[0][1].ToString());
                            retorno.DesPintura = rowsAffected.Tables[0].Rows[0][2].ToString();
                            retorno.IndMetodoInsercion = rowsAffected.Tables[0].Rows[0][3].ToString();
                            if (rowsAffected.Tables[0].Rows[0][4].ToString().Length > 0)
                                retorno.FechaIngreso = DateTime.Parse(rowsAffected.Tables[0].Rows[0][4].ToString());
                            else
                                retorno.FechaIngreso = null;
                            retorno.CodUsuarioIngreso = rowsAffected.Tables[0].Rows[0][5].ToString();
                            if (rowsAffected.Tables[0].Rows[0][6].ToString().Length > 0)
                                retorno.FechaUltimaModificacion = DateTime.Parse(rowsAffected.Tables[0].Rows[0][6].ToString());
                            else
                                retorno.FechaUltimaModificacion = null;
                            retorno.CodUsuarioUltimaModificacion = rowsAffected.Tables[0].Rows[0][7].ToString();
                            retorno.DesUsuarioIngreso = rowsAffected.Tables[0].Rows[0][8].ToString();
                            retorno.DesUsuarioUltimaModificacion = rowsAffected.Tables[0].Rows[0][9].ToString();
                        }

                        return retorno;

                        #endregion

                    }
                    catch (Exception)
                    {
                        throw;
                    }
                }
        
                public int PinturasTotalFilas(String conexion, ParametrosTotalFilasEntidad entidad)
                {

                    int value;

                    #region PARAMETROS

                    SqlParameter[] paramTransaccion = new SqlParameter[]
                    {
                        new SqlParameter("@psValor_Filtro", entidad.ValorFiltro),
                        new SqlParameter("@psColumna_Filtro", entidad.ColumnaFiltro)
                    };

                    #endregion

                    try
                    {

                        #region TOTAL FILAS

                            value = transaccionDA.TransaccionRows(conexion, "Pinturas_Total_Filas", paramTransaccion);

                            return value;

                        #endregion

                    }
                    catch (Exception)
                    {
                        throw;
                    }
                }

            #endregion 

            #region PLANES INVERSIONES
        
                public RespuestaEntidad PlanesInversionesInsertar(String conexion, String conexionBitacora, PlanesInversionesEntidad planInversion, BitacorasEntidad _bitacora)
                {
                    RespuestaEntidad elemento = null;
                    DataSet rowsAffected;

                    #region PARAMETROS

                    SqlParameter[] paramTransaccion = new SqlParameter[]
                    {
                        new SqlParameter("@piCod_Plan_Inversion", planInversion.CodPlanInversion),
                        new SqlParameter("@psDes_Plan_Inversion", planInversion.DesPlanInversion),
                        new SqlParameter("@psInd_Metodo_Insercion", planInversion.IndMetodoInsercion),
                        new SqlParameter("@psCod_Usuario", planInversion.CodUsuarioIngreso)
                    };

                    #endregion

                    try
                    {

                        #region INSERTAR

                        rowsAffected = transaccionDA.TransaccionInsertar(conexion, conexionBitacora, "Planes_Inversiones_Inserta", paramTransaccion, EnumTipoBitacora.INSERTAR, _bitacora);
                        if (!rowsAffected.Equals(null))
                        {
                            elemento = new RespuestaEntidad();
                            elemento.ValorEstado = int.Parse(rowsAffected.Tables[0].Rows[0][0].ToString());
                            elemento.ValorError = int.Parse(rowsAffected.Tables[0].Rows[0][1].ToString());
                        }

                        return elemento;

                        #endregion

                    }
                    catch (Exception)
                    {
                        throw;
                    }
                }
        
                public RespuestaEntidad PlanesInversionesModificar(String conexion, String conexionBitacora, PlanesInversionesEntidad planInversion, BitacorasEntidad _bitacora)
                {
                    RespuestaEntidad elemento = null;
                    DataSet rowsAffected;

                    #region PARAMETROS

                    SqlParameter[] paramTransaccion = new SqlParameter[]
                    {
                        new SqlParameter("@piId_Plan_Inversion", planInversion.IdPlanInversion),
                        new SqlParameter("@piCod_Plan_Inversion", planInversion.CodPlanInversion),
                        new SqlParameter("@psDes_Plan_Inversion", planInversion.DesPlanInversion),
                        new SqlParameter("@psInd_Metodo_Insercion", planInversion.IndMetodoInsercion),
                        new SqlParameter("@psCod_Usuario", planInversion.CodUsuarioIngreso)
                    };

                    #endregion

                    #region KeyValuePair LIST

                    List<KeyValuePair<string, string>> itemConsulta = new List<KeyValuePair<string, string>>();
                    itemConsulta.Add(helper.CrearKeyValuePairItem("@piId_Plan_Inversion", planInversion.IdPlanInversion.ToString()));

                    #endregion

                    try
                    {

                        #region MODIFICAR

                        rowsAffected = transaccionDA.TransaccionModificar(conexion, conexionBitacora, "Planes_Inversiones_Actualiza", paramTransaccion, EnumTipoBitacora.ACTUALIZAR, itemConsulta, "Planes_Inversiones_Consulta_Detalle", _bitacora);
                        if (!rowsAffected.Equals(null))
                        {
                            elemento = new RespuestaEntidad();
                            elemento.ValorEstado = int.Parse(rowsAffected.Tables[0].Rows[0][0].ToString());
                            elemento.ValorError = int.Parse(rowsAffected.Tables[0].Rows[0][1].ToString());
                        }

                        return elemento;

                        #endregion

                    }
                    catch (Exception)
                    {
                        throw;
                    }
                }
        
                public RespuestaEntidad PlanesInversionesEliminar(String conexion, String conexionBitacora, PlanesInversionesEntidad planInversion, BitacorasEntidad _bitacora)
                {
                    RespuestaEntidad elemento = null;
                    DataSet rowsAffected;

                    #region PARAMETROS

                    SqlParameter[] paramTransaccion = new SqlParameter[]
                    {
                        new SqlParameter("@piId_Plan_Inversion", planInversion.IdPlanInversion)
                    };

                    #endregion

                    #region KeyValuePair LIST

                    List<KeyValuePair<string, string>> itemConsulta = new List<KeyValuePair<string, string>>();
                    itemConsulta.Add(helper.CrearKeyValuePairItem("@piId_Plan_Inversion", planInversion.IdPlanInversion.ToString()));

                    #endregion

                    try
                    {

                        #region ELIMINAR

                        rowsAffected = transaccionDA.TransaccionEliminar(conexion, conexionBitacora, "Planes_Inversiones_Elimina", paramTransaccion, EnumTipoBitacora.ELIMINAR, itemConsulta, "Planes_Inversiones_Consulta_Detalle", _bitacora);
                        if (!rowsAffected.Equals(null))
                        {
                            elemento = new RespuestaEntidad();
                            elemento.ValorEstado = int.Parse(rowsAffected.Tables[0].Rows[0][0].ToString());
                            elemento.ValorError = int.Parse(rowsAffected.Tables[0].Rows[0][1].ToString());
                        }

                        return elemento;

                        #endregion

                    }
                    catch (Exception)
                    {
                        throw;
                    }
                }

                public List<PlanesInversionesEntidad> PlanesInversionesConsultar(String conexion, ParametrosConsultaEntidad entidad)
                {
                    List<PlanesInversionesEntidad> retorno = new List<PlanesInversionesEntidad>();
                    PlanesInversionesEntidad elemento;
                    DataSet rowsAffected;

                    #region PARAMETROS

                    SqlParameter[] paramTransaccion = new SqlParameter[]
                    {
                       new SqlParameter("@piIndice_Inicio_Fila", entidad.IndiceInicioFila),
                       new SqlParameter("@piMaximo_Filas", entidad.MaximoFilas),
                       new SqlParameter("@psValores_Filtro", entidad.ValorFiltro),
                       new SqlParameter("@psColumnas_Filtros", entidad.ColumnaFiltro),
                       new SqlParameter("@psColumna_Ordenar", entidad.ColumnaOrdenar)
                    };

                    #endregion

                    try
                    {

                        #region CONSULTAR

                            rowsAffected = transaccionDA.TransaccionConsulta(conexion, "Planes_Inversiones_Consulta", paramTransaccion);
                            if (!rowsAffected.Equals(null))
                            {
                                foreach (DataRow dr in rowsAffected.Tables[0].Rows)
                                {
                                    elemento = new PlanesInversionesEntidad();
                                    elemento.IdPlanInversion = int.Parse(dr[0].ToString());
                                    elemento.CodPlanInversion = int.Parse(dr[1].ToString());
                                    elemento.DesPlanInversion = dr[2].ToString();

                                    retorno.Add(elemento);
                                }
                            }

                            return retorno;

                        #endregion

                    }
                    catch (Exception)
                    {
                        throw;
                    }
                }
        
                public PlanesInversionesEntidad PlanesInversionesConsultarDetalle(String conexion, String conexionBitacora, PlanesInversionesEntidad planInversion, BitacorasEntidad _bitacora)
                {
                    PlanesInversionesEntidad retorno = new PlanesInversionesEntidad();
                    DataSet rowsAffected;

                    #region PARAMETROS

                    SqlParameter[] paramTransaccion = new SqlParameter[]
                    {
                        new SqlParameter("@piId_Plan_Inversion", planInversion.IdPlanInversion)
                    };

                    #endregion

                    #region KeyValuePair LIST

                    List<KeyValuePair<string, string>> itemConsulta = new List<KeyValuePair<string, string>>();
                    itemConsulta.Add(helper.CrearKeyValuePairItem("@piId_Plan_Inversion", planInversion.IdPlanInversion.ToString()));

                    #endregion

                    try
                    {

                        #region CONSULTAR DETALLE

                        rowsAffected = transaccionDA.TransaccionConsultaDetalle(conexion, conexionBitacora, "Planes_Inversiones_Consulta_Detalle", paramTransaccion, EnumTipoBitacora.CONSULTAR, itemConsulta, "Planes_Inversiones_Consulta_Detalle", _bitacora);
                        if (!rowsAffected.Equals(null))
                        {
                            retorno.IdPlanInversion = int.Parse(rowsAffected.Tables[0].Rows[0][0].ToString());
                            retorno.CodPlanInversion = int.Parse(rowsAffected.Tables[0].Rows[0][1].ToString());
                            retorno.DesPlanInversion = rowsAffected.Tables[0].Rows[0][2].ToString();
                            retorno.IndMetodoInsercion = rowsAffected.Tables[0].Rows[0][3].ToString();
                            if (rowsAffected.Tables[0].Rows[0][4].ToString().Length > 0)
                                retorno.FechaIngreso = DateTime.Parse(rowsAffected.Tables[0].Rows[0][4].ToString());
                            else
                                retorno.FechaIngreso = null;
                            retorno.CodUsuarioIngreso = rowsAffected.Tables[0].Rows[0][5].ToString();
                            if (rowsAffected.Tables[0].Rows[0][6].ToString().Length > 0)
                                retorno.FechaUltimaModificacion = DateTime.Parse(rowsAffected.Tables[0].Rows[0][6].ToString());
                            else
                                retorno.FechaUltimaModificacion = null;
                            retorno.CodUsuarioUltimaModificacion = rowsAffected.Tables[0].Rows[0][7].ToString();
                            retorno.DesUsuarioIngreso = rowsAffected.Tables[0].Rows[0][8].ToString();
                            retorno.DesUsuarioUltimaModificacion = rowsAffected.Tables[0].Rows[0][9].ToString();
                        }

                        return retorno;

                        #endregion

                    }
                    catch (Exception)
                    {
                        throw;
                    }
                }
        
                public int PlanesInversionesTotalFilas(String conexion, ParametrosTotalFilasEntidad entidad)
                {

                    int value;

                    #region PARAMETROS

                    SqlParameter[] paramTransaccion = new SqlParameter[]
                    {
                        new SqlParameter("@psValor_Filtro", entidad.ValorFiltro),
                        new SqlParameter("@psColumna_Filtro", entidad.ColumnaFiltro)
                    };

                    #endregion

                    try
                    {

                        #region TOTAL FILAS

                            value = transaccionDA.TransaccionRows(conexion, "Planes_Inversiones_Total_Filas", paramTransaccion);

                            return value;

                        #endregion

                    }
                    catch (Exception)
                    {
                        throw;
                    }
                }

            #endregion 
            
            //REQUERIMIENTO: 1-24105296
            #region PLAZOS CALIFICACIONES
        
                public RespuestaEntidad PlazosCalificacionesInsertar(String conexion, String conexionBitacora, PlazosCalificacionesEntidad entidad, BitacorasEntidad _bitacora)
                {
                    RespuestaEntidad elemento = null;
                    DataSet rowsAffected;

                    #region PARAMETROS

                    SqlParameter[] paramTransaccion = new SqlParameter[]
                    {
                        new SqlParameter("@psCod_Plazo_Calificacion", entidad.CodPlazoCalificacion),
                        new SqlParameter("@psDes_Plazo_Calificacion", entidad.DesPlazoCalificacion),
                        new SqlParameter("@psInd_Metodo_Insercion", entidad.IndMetodoInsercion),
                        new SqlParameter("@psCod_Usuario", entidad.CodUsuarioIngreso)
                    };

                    #endregion

                    try
                    {

                        #region INSERTAR


                        rowsAffected = transaccionDA.TransaccionInsertar(conexion, conexionBitacora, "Plazos_Calificaciones_Inserta", paramTransaccion, EnumTipoBitacora.INSERTAR, _bitacora);
                        if (!rowsAffected.Equals(null))
                        {
                            elemento = new RespuestaEntidad();
                            elemento.ValorEstado = int.Parse(rowsAffected.Tables[0].Rows[0][0].ToString());
                            elemento.ValorError = int.Parse(rowsAffected.Tables[0].Rows[0][1].ToString());
                        }

                        return elemento;

                        #endregion

                    }
                    catch (Exception)
                    {
                        throw;
                    }
                }
        
                public RespuestaEntidad PlazosCalificacionesModificar(String conexion, String conexionBitacora, PlazosCalificacionesEntidad entidad, BitacorasEntidad _bitacora)
                {
                    RespuestaEntidad elemento = null;
                    DataSet rowsAffected;

                    #region PARAMETROS

                    SqlParameter[] paramTransaccion = new SqlParameter[]
                    {
                        new SqlParameter("@piId_Plazo_Calificacion", entidad.IdPlazoCalificacion),
                        new SqlParameter("@psCod_Plazo_Calificacion", entidad.CodPlazoCalificacion),
                        new SqlParameter("@psDes_Plazo_Calificacion", entidad.DesPlazoCalificacion),
                        new SqlParameter("@psInd_Metodo_Insercion", entidad.IndMetodoInsercion),
                        new SqlParameter("@psCod_Usuario", entidad.CodUsuarioIngreso)
                    };

                    #endregion

                    #region KeyValuePair LIST

                    List<KeyValuePair<string, string>> itemConsulta = new List<KeyValuePair<string, string>>();
                    itemConsulta.Add(helper.CrearKeyValuePairItem("@piId_Plazo_Calificacion", entidad.IdPlazoCalificacion.ToString()));

                    #endregion

                    try
                    {

                        #region MODIFICAR

                        rowsAffected = transaccionDA.TransaccionModificar(conexion, conexionBitacora, "Plazos_Calificaciones_Actualiza", paramTransaccion, EnumTipoBitacora.ACTUALIZAR, itemConsulta, "Plazos_Calificaciones_Consulta_Detalle", _bitacora);
                        if (!rowsAffected.Equals(null))
                        {
                            elemento = new RespuestaEntidad();
                            elemento.ValorEstado = int.Parse(rowsAffected.Tables[0].Rows[0][0].ToString());
                            elemento.ValorError = int.Parse(rowsAffected.Tables[0].Rows[0][1].ToString());
                        }

                        return elemento;

                        #endregion

                    }
                    catch (Exception)
                    {
                        throw;
                    }
                }
        
                public RespuestaEntidad PlazosCalificacionesEliminar(String conexion, String conexionBitacora, PlazosCalificacionesEntidad entidad, BitacorasEntidad _bitacora)
                {
                    RespuestaEntidad elemento = null;
                    DataSet rowsAffected;

                    #region PARAMETROS

                    SqlParameter[] paramTransaccion = new SqlParameter[]
                    {
                        new SqlParameter("@piId_Plazo_Calificacion", entidad.IdPlazoCalificacion)
                    };

                    #endregion

                    #region KeyValuePair LIST

                    List<KeyValuePair<string, string>> itemConsulta = new List<KeyValuePair<string, string>>();
                    itemConsulta.Add(helper.CrearKeyValuePairItem("@piId_Plazo_Calificacion", entidad.IdPlazoCalificacion.ToString()));

                    #endregion

                    try
                    {

                        #region ELIMINAR

                        rowsAffected = transaccionDA.TransaccionEliminar(conexion, conexionBitacora, "Plazos_Calificaciones_Elimina", paramTransaccion, EnumTipoBitacora.ELIMINAR, itemConsulta, "Plazos_Calificaciones_Consulta_Detalle", _bitacora);
                        if (!rowsAffected.Equals(null))
                        {
                            elemento = new RespuestaEntidad();
                            elemento.ValorEstado = int.Parse(rowsAffected.Tables[0].Rows[0][0].ToString());
                            elemento.ValorError = int.Parse(rowsAffected.Tables[0].Rows[0][1].ToString());
                        }

                        return elemento;

                        #endregion

                    }
                    catch (Exception)
                    {
                        throw;
                    }
                }

                public List<PlazosCalificacionesEntidad> PlazosCalificacionesConsultar(String conexion, ParametrosConsultaEntidad entidad)
                {
                    List<PlazosCalificacionesEntidad> retorno = new List<PlazosCalificacionesEntidad>();
                    PlazosCalificacionesEntidad elemento;
                    DataSet rowsAffected;

                    #region PARAMETROS

                    SqlParameter[] paramTransaccion = new SqlParameter[]
                    {
                       new SqlParameter("@piIndice_Inicio_Fila", entidad.IndiceInicioFila),
                       new SqlParameter("@piMaximo_Filas", entidad.MaximoFilas),
                       new SqlParameter("@psValores_Filtro", entidad.ValorFiltro),
                       new SqlParameter("@psColumnas_Filtros", entidad.ColumnaFiltro),
                       new SqlParameter("@psColumna_Ordenar", entidad.ColumnaOrdenar)
                    };

                    #endregion

                    try
                    {

                        #region CONSULTAR

                        rowsAffected = transaccionDA.TransaccionConsulta(conexion, "Plazos_Calificaciones_Consulta", paramTransaccion);
                        if (!rowsAffected.Equals(null))
                        {
                            foreach (DataRow dr in rowsAffected.Tables[0].Rows)
                            {
                                elemento = new PlazosCalificacionesEntidad();
                                elemento.IdPlazoCalificacion = int.Parse(dr[0].ToString());
                                elemento.CodPlazoCalificacion = dr[1].ToString();
                                elemento.DesPlazoCalificacion = dr[2].ToString();

                                retorno.Add(elemento);
                            }
                        }

                        return retorno;

                        #endregion

                    }
                    catch (Exception)
                    {
                        throw;
                    }
                }
        
                public PlazosCalificacionesEntidad PlazosCalificacionesConsultarDetalle(String conexion, String conexionBitacora, PlazosCalificacionesEntidad entidad, BitacorasEntidad _bitacora)
                {
                    PlazosCalificacionesEntidad retorno = new PlazosCalificacionesEntidad();
                    DataSet rowsAffected;

                    #region PARAMETROS

                    SqlParameter[] paramTransaccion = new SqlParameter[]
                        {
                            new SqlParameter("@piId_Plazo_Calificacion", entidad.IdPlazoCalificacion)
                        };

                    #endregion

                    #region KeyValuePair LIST

                    List<KeyValuePair<string, string>> itemConsulta = new List<KeyValuePair<string, string>>();
                    itemConsulta.Add(helper.CrearKeyValuePairItem("@piId_Plazo_Calificacion", entidad.IdPlazoCalificacion.ToString()));

                    #endregion

                    try
                    {

                        #region CONSULTAR DETALLE

                        rowsAffected = transaccionDA.TransaccionConsultaDetalle(conexion, conexionBitacora, "Plazos_Calificaciones_Consulta_Detalle", paramTransaccion, EnumTipoBitacora.CONSULTAR, itemConsulta, "Plazos_Calificaciones_Consulta_Detalle", _bitacora);
                        if (!rowsAffected.Equals(null))
                        {
                            retorno.IdPlazoCalificacion = int.Parse(rowsAffected.Tables[0].Rows[0][0].ToString());
                            retorno.CodPlazoCalificacion = rowsAffected.Tables[0].Rows[0][1].ToString();
                            retorno.DesPlazoCalificacion = rowsAffected.Tables[0].Rows[0][2].ToString();
                            retorno.IndMetodoInsercion = rowsAffected.Tables[0].Rows[0][3].ToString();
                            if (rowsAffected.Tables[0].Rows[0][4].ToString().Length > 0)
                                retorno.FechaIngreso = DateTime.Parse(rowsAffected.Tables[0].Rows[0][4].ToString());
                            else
                                retorno.FechaIngreso = null;
                            retorno.CodUsuarioIngreso = rowsAffected.Tables[0].Rows[0][5].ToString();
                            if (rowsAffected.Tables[0].Rows[0][6].ToString().Length > 0)
                                retorno.FechaUltimaModificacion = DateTime.Parse(rowsAffected.Tables[0].Rows[0][6].ToString());
                            else
                                retorno.FechaUltimaModificacion = null;
                            retorno.CodUsuarioUltimaModificacion = rowsAffected.Tables[0].Rows[0][7].ToString();
                            retorno.DesUsuarioIngreso = rowsAffected.Tables[0].Rows[0][8].ToString();
                            retorno.DesUsuarioUltimaModificacion = rowsAffected.Tables[0].Rows[0][9].ToString();
                        }

                        return retorno;

                        #endregion

                    }
                    catch (Exception)
                    {
                        throw;
                    }
                }
        
                public int PlazosCalificacionesTotalFilas(String conexion, ParametrosTotalFilasEntidad entidad)
                {
                    int value;

                    #region PARAMETROS

                    SqlParameter[] paramTransaccion = new SqlParameter[]
                    {
                        new SqlParameter("@psValor_Filtro", entidad.ValorFiltro),
                        new SqlParameter("@psColumna_Filtro", entidad.ColumnaFiltro)
                    };

                    #endregion

                    try
                    {

                        #region TOTAL FILAS

                        value = transaccionDA.TransaccionRows(conexion, "Plazos_Calificaciones_Total_Filas", paramTransaccion);

                        return value;

                        #endregion

                    }
                    catch (Exception)
                    {
                        throw;
                    }
                }

                public DataSet PlazosCalificacionesLista(String conexion, String filtro)
                {

                    DataSet rowsAffected;

                    #region PARAMETROS

                    SqlParameter[] paramTransaccion = new SqlParameter[]
                    {
                        new SqlParameter("@psFiltro", filtro)
                    };

                    #endregion

                    try
                    {

                        #region LISTA

                        rowsAffected = transaccionDA.TransaccionConsulta(conexion, "Plazos_Calificaciones_Lista", paramTransaccion);

                        return rowsAffected;

                        #endregion


                    }
                    catch (Exception)
                    {
                        throw;
                    }
                }

                public List<ListaEntidad> PlazosCalificacionesListas(String conexion, String filtro)
                {
                    List<ListaEntidad> retorno = new List<ListaEntidad>();
                    ListaEntidad elemento;
                    DataSet rowsAffected;

                    #region PARAMETROS

                    SqlParameter[] paramTransaccion = new SqlParameter[]
                    {
                        new SqlParameter("@psFiltro", filtro)
                    };

                    #endregion

                    try
                    {

                        #region LISTA

                        rowsAffected = transaccionDA.TransaccionConsulta(conexion, "Plazos_Calificaciones_Lista", paramTransaccion);
                        if (!rowsAffected.Equals(null))
                        {
                            foreach (DataRow dr in rowsAffected.Tables[0].Rows)
                            {
                                elemento = new ListaEntidad();
                                elemento.Valor = dr[0].ToString();
                                elemento.Texto = dr[1].ToString();

                                retorno.Add(elemento);
                            }
                        }
                        return retorno;

                        #endregion

                    }
                    catch (Exception)
                    {
                        throw;
                    }
                }

            #endregion 

            #region POLIZAS TIPOS

                public List<ListaEntidad> PolizasTiposLista(String conexion, String filtro)
                {
                    List<ListaEntidad> retorno = new List<ListaEntidad>();
                    ListaEntidad elemento;
                    DataSet rowsAffected;

                    #region PARAMETROS

                    SqlParameter[] paramTransaccion = new SqlParameter[]
                    {
                        new SqlParameter("@psFiltro", filtro)
                    };

                    #endregion

                    #region KeyValuePair LIST

                    List<KeyValuePair<string, string>> itemConsulta = new List<KeyValuePair<string, string>>();
                    itemConsulta.Add(helper.CrearKeyValuePairItem("@psFiltro", filtro));

                    #endregion

                    try
                    {

                        #region CONSULTAR DETALLE

                        rowsAffected = transaccionDA.TransaccionConsulta(conexion, "Polizas_Tipos_Lista", paramTransaccion);
                        if (!rowsAffected.Equals(null))
                        {
                            foreach (DataRow dr in rowsAffected.Tables[0].Rows)
                            {
                                elemento = new ListaEntidad();
                                elemento.Valor = dr[0].ToString();
                                elemento.Texto = dr[1].ToString();

                                retorno.Add(elemento);

                            }
                        }

                        return retorno;

                        #endregion

                    }
                    catch (Exception)
                    {
                        throw;
                    }
                }

            #endregion

            #region PROVINCIAS
        
                public RespuestaEntidad ProvinciasInsertar(String conexion, String conexionBitacora, ProvinciasEntidad provincia, BitacorasEntidad _bitacora)
                {
                    RespuestaEntidad elemento = null;
                    DataSet rowsAffected;

                    #region PARAMETROS

                    SqlParameter[] paramTransaccion = new SqlParameter[]
                        {
                            new SqlParameter("@piCod_Provincia", provincia.CodProvincia),
                            new SqlParameter("@psDes_Provincia", provincia.DesProvincia),
                            new SqlParameter("@psInd_Metodo_Insercion", provincia.IndMetodoInsercion),
                            new SqlParameter("@psCod_Usuario", provincia.CodUsuarioIngreso)
                        };

                    #endregion

                    try
                    {

                        #region INSERTAR

                        rowsAffected = transaccionDA.TransaccionInsertar(conexion, conexionBitacora, "Provincias_Inserta", paramTransaccion, EnumTipoBitacora.INSERTAR, _bitacora);
                        if (!rowsAffected.Equals(null))
                        {
                            elemento = new RespuestaEntidad();
                            elemento.ValorEstado = int.Parse(rowsAffected.Tables[0].Rows[0][0].ToString());
                            elemento.ValorError = int.Parse(rowsAffected.Tables[0].Rows[0][1].ToString());
                        }

                        return elemento;

                        #endregion

                    }
                    catch (Exception)
                    {
                        throw;
                    }
                }
        
                public RespuestaEntidad ProvinciasModificar(String conexion, String conexionBitacora, ProvinciasEntidad provincia, BitacorasEntidad _bitacora)
                {
                    RespuestaEntidad elemento = null;
                    DataSet rowsAffected;

                    #region PARAMETROS

                    SqlParameter[] paramTransaccion = new SqlParameter[]
                        {
                            new SqlParameter("@piId_Provincia", provincia.IdProvincia),
                            new SqlParameter("@piCod_Provincia", provincia.CodProvincia),
                            new SqlParameter("@psDes_Provincia", provincia.DesProvincia),
                            new SqlParameter("@psInd_Metodo_Insercion", provincia.IndMetodoInsercion),
                            new SqlParameter("@psCod_Usuario", provincia.CodUsuarioIngreso)
                        };

                    #endregion

                    #region KeyValuePair LIST

                    List<KeyValuePair<string, string>> itemConsulta = new List<KeyValuePair<string, string>>();
                    itemConsulta.Add(helper.CrearKeyValuePairItem("@piId_Provincia", provincia.IdProvincia.ToString()));

                    #endregion

                    try
                    {

                        #region MODIFICAR

                        rowsAffected = transaccionDA.TransaccionModificar(conexion, conexionBitacora, "Provincias_Actualiza", paramTransaccion, EnumTipoBitacora.ACTUALIZAR, itemConsulta, "Provincias_Consulta_Detalle", _bitacora);
                        if (!rowsAffected.Equals(null))
                        {
                            elemento = new RespuestaEntidad();
                            elemento.ValorEstado = int.Parse(rowsAffected.Tables[0].Rows[0][0].ToString());
                            elemento.ValorError = int.Parse(rowsAffected.Tables[0].Rows[0][1].ToString());
                        }

                        return elemento;

                        #endregion

                    }
                    catch (Exception)
                    {
                        throw;
                    }
                }
        
                public RespuestaEntidad ProvinciasEliminar(String conexion, String conexionBitacora, ProvinciasEntidad provincia, BitacorasEntidad _bitacora)
                {
                    RespuestaEntidad elemento = null;
                    DataSet rowsAffected;

                    #region PARAMETROS

                    SqlParameter[] paramTransaccion = new SqlParameter[]
                        {
                            new SqlParameter("@piId_Provincia", provincia.IdProvincia)
                        };

                    #endregion

                    #region KeyValuePair LIST

                    List<KeyValuePair<string, string>> itemConsulta = new List<KeyValuePair<string, string>>();
                    itemConsulta.Add(helper.CrearKeyValuePairItem("@piId_Provincia", provincia.IdProvincia.ToString()));

                    #endregion

                    try
                    {

                        #region ELIMINAR

                        rowsAffected = transaccionDA.TransaccionEliminar(conexion, conexionBitacora, "Provincias_Elimina", paramTransaccion, EnumTipoBitacora.ELIMINAR, itemConsulta, "Provincias_Consulta_Detalle", _bitacora);
                        if (!rowsAffected.Equals(null))
                        {
                            elemento = new RespuestaEntidad();
                            elemento.ValorEstado = int.Parse(rowsAffected.Tables[0].Rows[0][0].ToString());
                            elemento.ValorError = int.Parse(rowsAffected.Tables[0].Rows[0][1].ToString());
                        }

                        return elemento;

                        #endregion

                    }
                    catch (Exception)
                    {
                        throw;
                    }
                }

                public List<ProvinciasEntidad> ProvinciasConsultar(String conexion, ParametrosConsultaEntidad entidad)
                {
                    List<ProvinciasEntidad> retorno = new List<ProvinciasEntidad>();
                    ProvinciasEntidad elemento;
                    DataSet rowsAffected;

                    #region PARAMETROS

                    SqlParameter[] paramTransaccion = new SqlParameter[]
                    {
                       new SqlParameter("@piIndice_Inicio_Fila", entidad.IndiceInicioFila),
                       new SqlParameter("@piMaximo_Filas", entidad.MaximoFilas),
                       new SqlParameter("@psValores_Filtro", entidad.ValorFiltro),
                       new SqlParameter("@psColumnas_Filtros", entidad.ColumnaFiltro),
                       new SqlParameter("@psColumna_Ordenar", entidad.ColumnaOrdenar)
                    };

                    #endregion

                    try
                    {

                        #region CONSULTAR

                            rowsAffected = transaccionDA.TransaccionConsulta(conexion, "Provincias_Consulta", paramTransaccion);
                            if (!rowsAffected.Equals(null))
                            {
                                foreach (DataRow dr in rowsAffected.Tables[0].Rows)
                                {
                                    elemento = new ProvinciasEntidad();
                                    elemento.IdProvincia = int.Parse(dr[0].ToString());
                                    elemento.CodProvincia = int.Parse(dr[1].ToString());
                                    elemento.DesProvincia = dr[2].ToString();

                                    retorno.Add(elemento);
                                }
                            }

                            return retorno;

                        #endregion

                    }
                    catch (Exception)
                    {
                        throw;
                    }
                }
        
                public ProvinciasEntidad ProvinciasConsultarDetalle(String conexion, String conexionBitacora, ProvinciasEntidad provincia, BitacorasEntidad _bitacora)
                {
                    ProvinciasEntidad retorno = new ProvinciasEntidad();
                    DataSet rowsAffected;

                    #region PARAMETROS

                    SqlParameter[] paramTransaccion = new SqlParameter[]
                        {
                            new SqlParameter("@piId_Provincia", provincia.IdProvincia)
                        };

                    #endregion

                    #region KeyValuePair LIST

                    List<KeyValuePair<string, string>> itemConsulta = new List<KeyValuePair<string, string>>();
                    itemConsulta.Add(helper.CrearKeyValuePairItem("@piId_Provincia", provincia.IdProvincia.ToString()));

                    #endregion

                    try
                    {

                        #region CONSULTAR DETALLE

                        rowsAffected = transaccionDA.TransaccionConsultaDetalle(conexion, conexionBitacora, "Provincias_Consulta_Detalle", paramTransaccion, EnumTipoBitacora.CONSULTAR, itemConsulta, "Provincias_Consulta_Detalle", _bitacora);
                        if (!rowsAffected.Equals(null))
                        {
                            retorno.IdProvincia = int.Parse(rowsAffected.Tables[0].Rows[0][0].ToString());
                            retorno.CodProvincia = int.Parse(rowsAffected.Tables[0].Rows[0][1].ToString());
                            retorno.DesProvincia = rowsAffected.Tables[0].Rows[0][2].ToString();
                            retorno.IndMetodoInsercion = rowsAffected.Tables[0].Rows[0][3].ToString();
                            if (rowsAffected.Tables[0].Rows[0][4].ToString().Length > 0)
                                retorno.FechaIngreso = DateTime.Parse(rowsAffected.Tables[0].Rows[0][4].ToString());
                            else
                                retorno.FechaIngreso = null;
                            retorno.CodUsuarioIngreso = rowsAffected.Tables[0].Rows[0][5].ToString();
                            if (rowsAffected.Tables[0].Rows[0][6].ToString().Length > 0)
                                retorno.FechaUltimaModificacion = DateTime.Parse(rowsAffected.Tables[0].Rows[0][6].ToString());
                            else
                                retorno.FechaUltimaModificacion = null;
                            retorno.CodUsuarioUltimaModificacion = rowsAffected.Tables[0].Rows[0][7].ToString();
                            retorno.DesUsuarioIngreso = rowsAffected.Tables[0].Rows[0][8].ToString();
                            retorno.DesUsuarioUltimaModificacion = rowsAffected.Tables[0].Rows[0][9].ToString();
                        }

                        return retorno;

                        #endregion

                    }
                    catch (Exception)
                    {
                        throw;
                    }
                }
        
                public int ProvinciasTotalFilas(String conexion, ParametrosTotalFilasEntidad entidad)
                {

                    int value;

                    #region PARAMETROS

                    SqlParameter[] paramTransaccion = new SqlParameter[]
                        {
                            new SqlParameter("@psValor_Filtro", entidad.ValorFiltro),
                            new SqlParameter("@psColumna_Filtro", entidad.ColumnaFiltro)
                        };

                    #endregion

                    try
                    {

                        #region TOTAL FILAS

                            value = transaccionDA.TransaccionRows(conexion, "Provincias_Total_Filas", paramTransaccion);

                            return value;

                        #endregion

                    }
                    catch (Exception)
                    {
                        throw;
                    }
                }
        
                public List<ListaEntidad> ProvinciasLista(String conexion, String filtro)
                {
                    List<ListaEntidad> retorno = new List<ListaEntidad>();
                    ListaEntidad elemento;
                    DataSet rowsAffected;

                    #region PARAMETROS

                    SqlParameter[] paramTransaccion = new SqlParameter[]
                    {
                        new SqlParameter("@psFiltro", filtro)
                    };

                    #endregion

                    #region KeyValuePair LIST

                    List<KeyValuePair<string, string>> itemConsulta = new List<KeyValuePair<string, string>>();
                    itemConsulta.Add(helper.CrearKeyValuePairItem("@psFiltro", filtro));

                    #endregion

                    try
                    {

                        #region CONSULTAR DETALLE

                        rowsAffected = transaccionDA.TransaccionConsulta(conexion, "Provincias_Lista", paramTransaccion);
                        if (!rowsAffected.Equals(null))
                        {
                            foreach (DataRow dr in rowsAffected.Tables[0].Rows)
                            {
                                elemento = new ListaEntidad();
                                elemento.Valor = dr[0].ToString();
                                elemento.Texto = dr[1].ToString();
          
                                retorno.Add(elemento);
          
                            }
                        }

                        return retorno;

                        #endregion

                    }
                    catch (Exception)
                    {
                        throw;
                    }
                }
        
            #endregion

            #region PUNTOS REFERENCIAS
        
                public RespuestaEntidad PuntosReferenciasInsertar(String conexion, String conexionBitacora, PuntosReferenciasEntidad puntoReferencia, BitacorasEntidad _bitacora)
                {
                    RespuestaEntidad elemento = null;
                    DataSet rowsAffected;

                    #region PARAMETROS

                    SqlParameter[] paramTransaccion = new SqlParameter[]
                    {
                        new SqlParameter("@piCod_Punto_Referencia", puntoReferencia.CodPuntoReferencia),
                        new SqlParameter("@psDes_Punto_Referencia", puntoReferencia.DesPuntoReferencia),
                        new SqlParameter("@psInd_Metodo_Insercion", puntoReferencia.IndMetodoInsercion),
                        new SqlParameter("@psCod_Usuario", puntoReferencia.CodUsuarioIngreso)
                    };

                    #endregion

                    try
                    {

                        #region INSERTAR

                        rowsAffected = transaccionDA.TransaccionInsertar(conexion, conexionBitacora, "Puntos_Referencias_Inserta", paramTransaccion, EnumTipoBitacora.INSERTAR, _bitacora);
                        if (!rowsAffected.Equals(null))
                        {
                            elemento = new RespuestaEntidad();
                            elemento.ValorEstado = int.Parse(rowsAffected.Tables[0].Rows[0][0].ToString());
                            elemento.ValorError = int.Parse(rowsAffected.Tables[0].Rows[0][1].ToString());
                        }

                        return elemento;

                        #endregion

                    }
                    catch (Exception)
                    {
                        throw;
                    }
                }
        
                public RespuestaEntidad PuntosReferenciasModificar(String conexion, String conexionBitacora, PuntosReferenciasEntidad puntoReferencia, BitacorasEntidad _bitacora)
                {
                    RespuestaEntidad elemento = null;
                    DataSet rowsAffected;

                    #region PARAMETROS

                    SqlParameter[] paramTransaccion = new SqlParameter[]
                    {
                        new SqlParameter("@piId_Punto_Referencia", puntoReferencia.IdPuntoReferencia),
                        new SqlParameter("@piCod_Punto_Referencia", puntoReferencia.CodPuntoReferencia),
                        new SqlParameter("@psDes_Punto_Referencia", puntoReferencia.DesPuntoReferencia),
                        new SqlParameter("@psInd_Metodo_Insercion", puntoReferencia.IndMetodoInsercion),
                        new SqlParameter("@psCod_Usuario", puntoReferencia.CodUsuarioIngreso)
                    };

                    #endregion

                    #region KeyValuePair LIST

                    List<KeyValuePair<string, string>> itemConsulta = new List<KeyValuePair<string, string>>();
                    itemConsulta.Add(helper.CrearKeyValuePairItem("@piId_Punto_Referencia", puntoReferencia.IdPuntoReferencia.ToString()));

                    #endregion

                    try
                    {

                        #region MODIFICAR

                        rowsAffected = transaccionDA.TransaccionModificar(conexion, conexionBitacora, "Puntos_Referencias_Actualiza", paramTransaccion, EnumTipoBitacora.ACTUALIZAR, itemConsulta, "Puntos_Referencias_Consulta_Detalle", _bitacora);
                        if (!rowsAffected.Equals(null))
                        {
                            elemento = new RespuestaEntidad();
                            elemento.ValorEstado = int.Parse(rowsAffected.Tables[0].Rows[0][0].ToString());
                            elemento.ValorError = int.Parse(rowsAffected.Tables[0].Rows[0][1].ToString());
                        }

                        return elemento;

                        #endregion

                    }
                    catch (Exception)
                    {
                        throw;
                    }
                }
        
                public RespuestaEntidad PuntosReferenciasEliminar(String conexion, String conexionBitacora, PuntosReferenciasEntidad puntoReferencia, BitacorasEntidad _bitacora)
                {
                    RespuestaEntidad elemento = null;
                    DataSet rowsAffected;

                    #region PARAMETROS

                    SqlParameter[] paramTransaccion = new SqlParameter[]
                    {
                        new SqlParameter("@piId_Punto_Referencia", puntoReferencia.IdPuntoReferencia)
                    };

                    #endregion

                    #region KeyValuePair LIST

                    List<KeyValuePair<string, string>> itemConsulta = new List<KeyValuePair<string, string>>();
                    itemConsulta.Add(helper.CrearKeyValuePairItem("@piId_Punto_Referencia", puntoReferencia.IdPuntoReferencia.ToString()));

                    #endregion

                    try
                    {

                        #region ELIMINAR

                        rowsAffected = transaccionDA.TransaccionEliminar(conexion, conexionBitacora, "Puntos_Referencias_Elimina", paramTransaccion, EnumTipoBitacora.ELIMINAR, itemConsulta, "Puntos_Referencias_Consulta_Detalle", _bitacora);
                        if (!rowsAffected.Equals(null))
                        {
                            elemento = new RespuestaEntidad();
                            elemento.ValorEstado = int.Parse(rowsAffected.Tables[0].Rows[0][0].ToString());
                            elemento.ValorError = int.Parse(rowsAffected.Tables[0].Rows[0][1].ToString());
                        }

                        return elemento;

                        #endregion

                    }
                    catch (Exception)
                    {
                        throw;
                    }
                }

                public List<PuntosReferenciasEntidad> PuntosReferenciasConsultar(String conexion, ParametrosConsultaEntidad entidad)
                {
                    List<PuntosReferenciasEntidad> retorno = new List<PuntosReferenciasEntidad>();
                    PuntosReferenciasEntidad elemento;
                    DataSet rowsAffected;

                    #region PARAMETROS

                    SqlParameter[] paramTransaccion = new SqlParameter[]
                    {
                       new SqlParameter("@piIndice_Inicio_Fila", entidad.IndiceInicioFila),
                       new SqlParameter("@piMaximo_Filas", entidad.MaximoFilas),
                       new SqlParameter("@psValores_Filtro", entidad.ValorFiltro),
                       new SqlParameter("@psColumnas_Filtros", entidad.ColumnaFiltro),
                       new SqlParameter("@psColumna_Ordenar", entidad.ColumnaOrdenar)
                    };

                    #endregion

                    try
                    {

                        #region CONSULTAR

                            rowsAffected = transaccionDA.TransaccionConsulta(conexion, "Puntos_Referencias_Consulta", paramTransaccion);
                            if (!rowsAffected.Equals(null))
                            {
                                foreach (DataRow dr in rowsAffected.Tables[0].Rows)
                                {
                                    elemento = new PuntosReferenciasEntidad();
                                    elemento.IdPuntoReferencia = int.Parse(dr[0].ToString());
                                    elemento.CodPuntoReferencia = int.Parse(dr[1].ToString());
                                    elemento.DesPuntoReferencia = dr[2].ToString();

                                    retorno.Add(elemento);
                                }
                            }

                            return retorno;

                        #endregion

                    }
                    catch (Exception)
                    {
                        throw;
                    }
                }
        
                public PuntosReferenciasEntidad PuntosReferenciasConsultarDetalle(String conexion, String conexionBitacora, PuntosReferenciasEntidad puntoReferencia, BitacorasEntidad _bitacora)
                {
                    PuntosReferenciasEntidad retorno = new PuntosReferenciasEntidad();
                    DataSet rowsAffected;

                    #region PARAMETROS

                    SqlParameter[] paramTransaccion = new SqlParameter[]
                    {
                        new SqlParameter("@piId_Punto_Referencia", puntoReferencia.IdPuntoReferencia)
                    };

                    #endregion

                    #region KeyValuePair LIST

                    List<KeyValuePair<string, string>> itemConsulta = new List<KeyValuePair<string, string>>();
                    itemConsulta.Add(helper.CrearKeyValuePairItem("@piId_Punto_Referencia", puntoReferencia.IdPuntoReferencia.ToString()));

                    #endregion

                    try
                    {

                        #region CONSULTAR DETALLE

                        rowsAffected = transaccionDA.TransaccionConsultaDetalle(conexion, conexionBitacora, "Puntos_Referencias_Consulta_Detalle", paramTransaccion, EnumTipoBitacora.CONSULTAR, itemConsulta, "Puntos_Referencias_Consulta_Detalle", _bitacora);
                        if (!rowsAffected.Equals(null))
                        {
                            retorno.IdPuntoReferencia = int.Parse(rowsAffected.Tables[0].Rows[0][0].ToString());
                            retorno.CodPuntoReferencia = int.Parse(rowsAffected.Tables[0].Rows[0][1].ToString());
                            retorno.DesPuntoReferencia = rowsAffected.Tables[0].Rows[0][2].ToString();
                            retorno.IndMetodoInsercion = rowsAffected.Tables[0].Rows[0][3].ToString();
                            if (rowsAffected.Tables[0].Rows[0][4].ToString().Length > 0)
                                retorno.FechaIngreso = DateTime.Parse(rowsAffected.Tables[0].Rows[0][4].ToString());
                            else
                                retorno.FechaIngreso = null;
                            retorno.CodUsuarioIngreso = rowsAffected.Tables[0].Rows[0][5].ToString();
                            if (rowsAffected.Tables[0].Rows[0][6].ToString().Length > 0)
                                retorno.FechaUltimaModificacion = DateTime.Parse(rowsAffected.Tables[0].Rows[0][6].ToString());
                            else
                                retorno.FechaUltimaModificacion = null;
                            retorno.CodUsuarioUltimaModificacion = rowsAffected.Tables[0].Rows[0][7].ToString();
                            retorno.DesUsuarioIngreso = rowsAffected.Tables[0].Rows[0][8].ToString();
                            retorno.DesUsuarioUltimaModificacion = rowsAffected.Tables[0].Rows[0][9].ToString();
                        }

                        return retorno;

                        #endregion

                    }
                    catch (Exception)
                    {
                        throw;
                    }
                }
        
                public int PuntosReferenciasTotalFilas(String conexion, ParametrosTotalFilasEntidad entidad)
                {

                    int value;

                    #region PARAMETROS

                    SqlParameter[] paramTransaccion = new SqlParameter[]
                    {
                        new SqlParameter("@psValor_Filtro", entidad.ValorFiltro),
                        new SqlParameter("@psColumna_Filtro", entidad.ColumnaFiltro)
                    };

                    #endregion

                    try
                    {

                        #region TOTAL FILAS

                            value = transaccionDA.TransaccionRows(conexion, "Puntos_Referencias_Total_Filas", paramTransaccion);

                            return value;

                        #endregion

                    }
                    catch (Exception)
                    {
                        throw;
                    }
                }

            #endregion 
        
            #region REGIMENES FISCALIZACIONES
        
                public RespuestaEntidad RegimenesFiscalizacionesInsertar(String conexion, String conexionBitacora, RegimenesFiscalizacionesEntidad regimenFiscalizacion, BitacorasEntidad _bitacora)
                {
                    RespuestaEntidad elemento = null;
                    DataSet rowsAffected;

                    #region PARAMETROS

                    SqlParameter[] paramTransaccion = new SqlParameter[]
                    {
                        new SqlParameter("@piCod_Regimen_Fiscalizacion", regimenFiscalizacion.CodRegimenFiscalizacion),
                        new SqlParameter("@psDes_Regimen_Fiscalizacion", regimenFiscalizacion.DesRegimenFiscalizacion),
                        new SqlParameter("@psInd_Metodo_Insercion", regimenFiscalizacion.IndMetodoInsercion),
                        new SqlParameter("@psCod_Usuario", regimenFiscalizacion.CodUsuarioIngreso)
                    };

                    #endregion

                    try
                    {

                        #region INSERTAR

                        rowsAffected = transaccionDA.TransaccionInsertar(conexion, conexionBitacora, "Regimenes_Fiscalizaciones_Inserta", paramTransaccion, EnumTipoBitacora.INSERTAR, _bitacora);
                        if (!rowsAffected.Equals(null))
                        {
                            elemento = new RespuestaEntidad();
                            elemento.ValorEstado = int.Parse(rowsAffected.Tables[0].Rows[0][0].ToString());
                            elemento.ValorError = int.Parse(rowsAffected.Tables[0].Rows[0][1].ToString());
                        }

                        return elemento;

                        #endregion

                    }
                    catch (Exception)
                    {
                        throw;
                    }
                }
        
                public RespuestaEntidad RegimenesFiscalizacionesModificar(String conexion, String conexionBitacora, RegimenesFiscalizacionesEntidad regimenFiscalizacion, BitacorasEntidad _bitacora)
                {
                    RespuestaEntidad elemento = null;
                    DataSet rowsAffected;

                    #region PARAMETROS

                    SqlParameter[] paramTransaccion = new SqlParameter[]
                    {
                        new SqlParameter("@piId_Regimen_Fiscalizacion", regimenFiscalizacion.IdRegimenFiscalizacion),
                        new SqlParameter("@piCod_Regimen_Fiscalizacion", regimenFiscalizacion.CodRegimenFiscalizacion),
                        new SqlParameter("@psDes_Regimen_Fiscalizacion", regimenFiscalizacion.DesRegimenFiscalizacion),
                        new SqlParameter("@psInd_Metodo_Insercion", regimenFiscalizacion.IndMetodoInsercion),
                        new SqlParameter("@psCod_Usuario", regimenFiscalizacion.CodUsuarioIngreso)
                    };

                    #endregion

                    #region KeyValuePair LIST

                    List<KeyValuePair<string, string>> itemConsulta = new List<KeyValuePair<string, string>>();
                    itemConsulta.Add(helper.CrearKeyValuePairItem("@piId_Regimen_Fiscalizacion", regimenFiscalizacion.IdRegimenFiscalizacion.ToString()));

                    #endregion

                    try
                    {

                        #region MODIFICAR

                        rowsAffected = transaccionDA.TransaccionModificar(conexion, conexionBitacora, "Regimenes_Fiscalizaciones_Actualiza", paramTransaccion, EnumTipoBitacora.ACTUALIZAR, itemConsulta, "Regimenes_Fiscalizaciones_Consulta_Detalle", _bitacora);
                        if (!rowsAffected.Equals(null))
                        {
                            elemento = new RespuestaEntidad();
                            elemento.ValorEstado = int.Parse(rowsAffected.Tables[0].Rows[0][0].ToString());
                            elemento.ValorError = int.Parse(rowsAffected.Tables[0].Rows[0][1].ToString());
                        }

                        return elemento;

                        #endregion

                    }
                    catch (Exception)
                    {
                        throw;
                    }
                }
        
                public RespuestaEntidad RegimenesFiscalizacionesEliminar(String conexion, String conexionBitacora, RegimenesFiscalizacionesEntidad regimenFiscalizacion, BitacorasEntidad _bitacora)
                {
                    RespuestaEntidad elemento = null;
                    DataSet rowsAffected;

                    #region PARAMETROS

                    SqlParameter[] paramTransaccion = new SqlParameter[]
                    {
                        new SqlParameter("@piId_Regimen_Fiscalizacion", regimenFiscalizacion.IdRegimenFiscalizacion)
                    };

                    #endregion

                    #region KeyValuePair LIST

                    List<KeyValuePair<string, string>> itemConsulta = new List<KeyValuePair<string, string>>();
                    itemConsulta.Add(helper.CrearKeyValuePairItem("@piId_Regimen_Fiscalizacion", regimenFiscalizacion.IdRegimenFiscalizacion.ToString()));

                    #endregion

                    try
                    {

                        #region ELIMINAR

                        rowsAffected = transaccionDA.TransaccionEliminar(conexion, conexionBitacora, "Regimenes_Fiscalizaciones_Elimina", paramTransaccion, EnumTipoBitacora.ELIMINAR, itemConsulta, "Regimenes_Fiscalizaciones_Consulta_Detalle", _bitacora);
                        if (!rowsAffected.Equals(null))
                        {
                            elemento = new RespuestaEntidad();
                            elemento.ValorEstado = int.Parse(rowsAffected.Tables[0].Rows[0][0].ToString());
                            elemento.ValorError = int.Parse(rowsAffected.Tables[0].Rows[0][1].ToString());
                        }

                        return elemento;

                        #endregion

                    }
                    catch (Exception)
                    {
                        throw;
                    }
                }

                public List<RegimenesFiscalizacionesEntidad> RegimenesFiscalizacionesConsultar(String conexion, ParametrosConsultaEntidad entidad)
                {
                    List<RegimenesFiscalizacionesEntidad> retorno = new List<RegimenesFiscalizacionesEntidad>();
                    RegimenesFiscalizacionesEntidad elemento;
                    DataSet rowsAffected;

                    #region PARAMETROS

                    SqlParameter[] paramTransaccion = new SqlParameter[]
                    {
                       new SqlParameter("@piIndice_Inicio_Fila", entidad.IndiceInicioFila),
                       new SqlParameter("@piMaximo_Filas", entidad.MaximoFilas),
                       new SqlParameter("@psValores_Filtro", entidad.ValorFiltro),
                       new SqlParameter("@psColumnas_Filtros", entidad.ColumnaFiltro),
                       new SqlParameter("@psColumna_Ordenar", entidad.ColumnaOrdenar)
                    };

                    #endregion

                    try
                    {

                        #region CONSULTAR

                            rowsAffected = transaccionDA.TransaccionConsulta(conexion, "Regimenes_Fiscalizaciones_Consulta", paramTransaccion);
                            if (!rowsAffected.Equals(null))
                            {
                                foreach (DataRow dr in rowsAffected.Tables[0].Rows)
                                {
                                    elemento = new RegimenesFiscalizacionesEntidad();
                                    elemento.IdRegimenFiscalizacion = int.Parse(dr[0].ToString());
                                    elemento.CodRegimenFiscalizacion = int.Parse(dr[1].ToString());
                                    elemento.DesRegimenFiscalizacion = dr[2].ToString();

                                    retorno.Add(elemento);
                                }
                            }

                            return retorno;

                        #endregion

                    }
                    catch (Exception)
                    {
                        throw;
                    }
                }
        
                public RegimenesFiscalizacionesEntidad RegimenesFiscalizacionesConsultarDetalle(String conexion, String conexionBitacora, RegimenesFiscalizacionesEntidad regimenFiscalizacion, BitacorasEntidad _bitacora)
                {
                    RegimenesFiscalizacionesEntidad retorno = new RegimenesFiscalizacionesEntidad();
                    DataSet rowsAffected;

                    #region PARAMETROS

                    SqlParameter[] paramTransaccion = new SqlParameter[]
                    {
                        new SqlParameter("@piId_Regimen_Fiscalizacion", regimenFiscalizacion.IdRegimenFiscalizacion)
                    };

                    #endregion

                    #region KeyValuePair LIST

                    List<KeyValuePair<string, string>> itemConsulta = new List<KeyValuePair<string, string>>();
                    itemConsulta.Add(helper.CrearKeyValuePairItem("@piId_Regimen_Fiscalizacion", regimenFiscalizacion.IdRegimenFiscalizacion.ToString()));

                    #endregion

                    try
                    {

                        #region CONSULTAR DETALLE

                        rowsAffected = transaccionDA.TransaccionConsultaDetalle(conexion, conexionBitacora, "Regimenes_Fiscalizaciones_Consulta_Detalle", paramTransaccion, EnumTipoBitacora.CONSULTAR, itemConsulta, "Regimenes_Fiscalizaciones_Consulta_Detalle", _bitacora);
                        if (!rowsAffected.Equals(null))
                        {
                            retorno.IdRegimenFiscalizacion = int.Parse(rowsAffected.Tables[0].Rows[0][0].ToString());
                            retorno.CodRegimenFiscalizacion = int.Parse(rowsAffected.Tables[0].Rows[0][1].ToString());
                            retorno.DesRegimenFiscalizacion = rowsAffected.Tables[0].Rows[0][2].ToString();
                            retorno.IndMetodoInsercion = rowsAffected.Tables[0].Rows[0][3].ToString();
                            if (rowsAffected.Tables[0].Rows[0][4].ToString().Length > 0)
                                retorno.FechaIngreso = DateTime.Parse(rowsAffected.Tables[0].Rows[0][4].ToString());
                            else
                                retorno.FechaIngreso = null;
                            retorno.CodUsuarioIngreso = rowsAffected.Tables[0].Rows[0][5].ToString();
                            if (rowsAffected.Tables[0].Rows[0][6].ToString().Length > 0)
                                retorno.FechaUltimaModificacion = DateTime.Parse(rowsAffected.Tables[0].Rows[0][6].ToString());
                            else
                                retorno.FechaUltimaModificacion = null;
                            retorno.CodUsuarioUltimaModificacion = rowsAffected.Tables[0].Rows[0][7].ToString();
                            retorno.DesUsuarioIngreso = rowsAffected.Tables[0].Rows[0][8].ToString();
                            retorno.DesUsuarioUltimaModificacion = rowsAffected.Tables[0].Rows[0][9].ToString();
                        }

                        return retorno;

                        #endregion

                    }
                    catch (Exception)
                    {
                        throw;
                    }
                }
        
                public int RegimenesFiscalizacionesTotalFilas(String conexion, ParametrosTotalFilasEntidad entidad)
                {

                    int value;

                    #region PARAMETROS

                    SqlParameter[] paramTransaccion = new SqlParameter[]
                    {
                        new SqlParameter("@psValor_Filtro", entidad.ValorFiltro),
                        new SqlParameter("@psColumna_Filtro", entidad.ColumnaFiltro)
                    };

                    #endregion

                    try
                    {

                        #region TOTAL FILAS

                            value = transaccionDA.TransaccionRows(conexion, "Regimenes_Fiscalizaciones_Total_Filas", paramTransaccion);

                            return value;

                        #endregion

                    }
                    catch (Exception)
                    {
                        throw;
                    }
                }
        
                public List<ListaEntidad> RegimenesFiscalizacionesLista(String conexion, String filtro)
                {
                    List<ListaEntidad> retorno = new List<ListaEntidad>();
                    ListaEntidad elemento;
                    DataSet rowsAffected;

                    #region PARAMETROS

                    SqlParameter[] paramTransaccion = new SqlParameter[]
                    {
                        new SqlParameter("@psFiltro", filtro)
                    };

                    #endregion

                    try
                    {

                        #region LISTA

                        rowsAffected = transaccionDA.TransaccionConsulta(conexion, "Regimenes_Fiscalizaciones_Lista", paramTransaccion);
                        if (!rowsAffected.Equals(null))
                        {
                            foreach (DataRow dr in rowsAffected.Tables[0].Rows)
                            {
                                elemento = new ListaEntidad();
                                elemento.Valor = dr[0].ToString();
                                elemento.Texto = dr[1].ToString();

                                retorno.Add(elemento);
                            }
                        }

                        return retorno;

                        #endregion


                    }
                    catch (Exception)
                    {
                        throw;
                    }
                }
        
            #endregion 
        
            //REQUERIMIENTO: 1-24105296
            #region REPORTES ROLES
        
                public RespuestaEntidad ReportesRolesInsertar(String conexion, String conexionBitacora, ReportesRolesEntidad ReporteRoles, BitacorasEntidad _bitacora)
                {
                    RespuestaEntidad elemento = null;
                    DataSet rowsAffected;

                    #region PARAMETROS

                    SqlParameter[] paramTransaccion = new SqlParameter[]
                    {
                        new SqlParameter("@psCod_Reporte_Rol", ReporteRoles.CodReporteRol),
                        new SqlParameter("@psDes_Reporte_Rol", ReporteRoles.DesReporteRol),
                        new SqlParameter("@psInd_Metodo_Insercion", ReporteRoles.IndMetodoInsercion),
                        new SqlParameter("@psCod_Usuario", ReporteRoles.CodUsuarioIngreso)
                    };

                    #endregion

                    try
                    {

                        #region INSERTAR


                        rowsAffected = transaccionDA.TransaccionInsertar(conexion, conexionBitacora, "Reportes_Roles_Inserta", paramTransaccion, EnumTipoBitacora.INSERTAR, _bitacora);
                        if (!rowsAffected.Equals(null))
                        {
                            elemento = new RespuestaEntidad();
                            elemento.ValorEstado = int.Parse(rowsAffected.Tables[0].Rows[0][0].ToString());
                            elemento.ValorError = int.Parse(rowsAffected.Tables[0].Rows[0][1].ToString());
                        }

                        return elemento;

                        #endregion

                    }
                    catch (Exception)
                    {
                        throw;
                    }
                }
        
                public RespuestaEntidad ReportesRolesModificar(String conexion, String conexionBitacora, ReportesRolesEntidad ReporteRoles, BitacorasEntidad _bitacora)
                {
                    RespuestaEntidad elemento = null;
                    DataSet rowsAffected;

                    #region PARAMETROS

                    SqlParameter[] paramTransaccion = new SqlParameter[]
                    {
                        new SqlParameter("@piId_Reporte_Rol", ReporteRoles.IdReporteRol),
                        new SqlParameter("@psCod_Reporte_Rol", ReporteRoles.CodReporteRol),
                        new SqlParameter("@psDes_Reporte_Rol", ReporteRoles.DesReporteRol),
                        new SqlParameter("@psInd_Metodo_Insercion", ReporteRoles.IndMetodoInsercion),
                        new SqlParameter("@psCod_Usuario", ReporteRoles.CodUsuarioIngreso)
                    };

                    #endregion

                    #region KeyValuePair LIST

                    List<KeyValuePair<string, string>> itemConsulta = new List<KeyValuePair<string, string>>();
                    itemConsulta.Add(helper.CrearKeyValuePairItem("@piId_Reporte_Rol", ReporteRoles.IdReporteRol.ToString()));

                    #endregion

                    try
                    {

                        #region MODIFICAR

                        rowsAffected = transaccionDA.TransaccionModificar(conexion, conexionBitacora, "Reportes_Roles_Actualiza", paramTransaccion, EnumTipoBitacora.ACTUALIZAR, itemConsulta, "Reportes_Roles_Consulta_Detalle", _bitacora);
                        if (!rowsAffected.Equals(null))
                        {
                            elemento = new RespuestaEntidad();
                            elemento.ValorEstado = int.Parse(rowsAffected.Tables[0].Rows[0][0].ToString());
                            elemento.ValorError = int.Parse(rowsAffected.Tables[0].Rows[0][1].ToString());
                        }

                        return elemento; 

                        #endregion

                    }
                    catch (Exception)
                    {
                        throw;
                    }
                }
        
                public RespuestaEntidad ReportesRolesEliminar(String conexion, String conexionBitacora, ReportesRolesEntidad ReporteRoles, BitacorasEntidad _bitacora)
                {
                    RespuestaEntidad elemento = null;
                    DataSet rowsAffected;

                    #region PARAMETROS

                    SqlParameter[] paramTransaccion = new SqlParameter[]
                    {
                        new SqlParameter("@piId_Reporte_Rol", ReporteRoles.IdReporteRol)
                    };

                    #endregion

                    #region KeyValuePair LIST

                    List<KeyValuePair<string, string>> itemConsulta = new List<KeyValuePair<string, string>>();
                    itemConsulta.Add(helper.CrearKeyValuePairItem("@piId_Reporte_Rol", ReporteRoles.IdReporteRol.ToString()));

                    #endregion

                    try
                    {

                        #region ELIMINAR

                        rowsAffected = transaccionDA.TransaccionEliminar(conexion, conexionBitacora, "Reportes_Roles_Elimina", paramTransaccion, EnumTipoBitacora.ELIMINAR, itemConsulta, "Reportes_Roles_Consulta_Detalle", _bitacora);
                        if (!rowsAffected.Equals(null))
                        {
                            elemento = new RespuestaEntidad();
                            elemento.ValorEstado = int.Parse(rowsAffected.Tables[0].Rows[0][0].ToString());
                            elemento.ValorError = int.Parse(rowsAffected.Tables[0].Rows[0][1].ToString());
                        }

                        return elemento;

                        #endregion

                    }
                    catch (Exception)
                    {
                        throw;
                    }
                }

                public List<ReportesRolesEntidad> ReportesRolesConsultar(String conexion, ParametrosConsultaEntidad entidad)
                {
                    List<ReportesRolesEntidad> retorno = new List<ReportesRolesEntidad>();
                    ReportesRolesEntidad elemento;
                    DataSet rowsAffected;

                    #region PARAMETROS

                    SqlParameter[] paramTransaccion = new SqlParameter[]
                    {
                       new SqlParameter("@piIndice_Inicio_Fila", entidad.IndiceInicioFila),
                       new SqlParameter("@piMaximo_Filas", entidad.MaximoFilas),
                       new SqlParameter("@psValores_Filtro", entidad.ValorFiltro),
                       new SqlParameter("@psColumnas_Filtros", entidad.ColumnaFiltro),
                       new SqlParameter("@psColumna_Ordenar", entidad.ColumnaOrdenar)
                    };

                    #endregion

                    try
                    {

                        #region CONSULTAR

                        rowsAffected = transaccionDA.TransaccionConsulta(conexion, "Reportes_Roles_Consulta", paramTransaccion);
                        if (!rowsAffected.Equals(null))
                        {
                            foreach (DataRow dr in rowsAffected.Tables[0].Rows)
                            {
                                elemento = new ReportesRolesEntidad();
                                elemento.IdReporteRol = int.Parse(dr[0].ToString());
                                elemento.CodReporteRol = dr[1].ToString();
                                elemento.DesReporteRol = dr[2].ToString();

                                retorno.Add(elemento);
                            }
                        }

                        return retorno;

                        #endregion

                    }
                    catch (Exception)
                    {
                        throw;
                    }
                }
        
                public ReportesRolesEntidad ReportesRolesConsultarDetalle(String conexion, String conexionBitacora, ReportesRolesEntidad ReporteRoles, BitacorasEntidad _bitacora)
                {
                    ReportesRolesEntidad retorno = new ReportesRolesEntidad();
                    DataSet rowsAffected;

                    #region PARAMETROS

                    SqlParameter[] paramTransaccion = new SqlParameter[]
                        {
                            new SqlParameter("@piId_Reporte_Rol", ReporteRoles.IdReporteRol)
                        };

                    #endregion

                    #region KeyValuePair LIST

                    List<KeyValuePair<string, string>> itemConsulta = new List<KeyValuePair<string, string>>();
                    itemConsulta.Add(helper.CrearKeyValuePairItem("@piId_Reporte_Rol", ReporteRoles.IdReporteRol.ToString()));

                    #endregion

                    try
                    {

                        #region CONSULTAR DETALLE

                        rowsAffected = transaccionDA.TransaccionConsultaDetalle(conexion, conexionBitacora, "Reportes_Roles_Consulta_Detalle", paramTransaccion, EnumTipoBitacora.CONSULTAR, itemConsulta, "Reportes_Roles_Consulta_Detalle", _bitacora);
                        if (!rowsAffected.Equals(null))
                        {
                            retorno.IdReporteRol = int.Parse(rowsAffected.Tables[0].Rows[0][0].ToString());
                            retorno.CodReporteRol = rowsAffected.Tables[0].Rows[0][1].ToString();
                            retorno.DesReporteRol = rowsAffected.Tables[0].Rows[0][2].ToString();
                            retorno.IndMetodoInsercion = rowsAffected.Tables[0].Rows[0][3].ToString();
                            if (rowsAffected.Tables[0].Rows[0][4].ToString().Length > 0)
                                retorno.FechaIngreso = DateTime.Parse(rowsAffected.Tables[0].Rows[0][4].ToString());
                            else
                                retorno.FechaIngreso = null;
                            retorno.CodUsuarioIngreso = rowsAffected.Tables[0].Rows[0][5].ToString();
                            if (rowsAffected.Tables[0].Rows[0][6].ToString().Length > 0)
                                retorno.FechaUltimaModificacion = DateTime.Parse(rowsAffected.Tables[0].Rows[0][6].ToString());
                            else
                                retorno.FechaUltimaModificacion = null;
                            retorno.CodUsuarioUltimaModificacion = rowsAffected.Tables[0].Rows[0][7].ToString();
                            retorno.DesUsuarioIngreso = rowsAffected.Tables[0].Rows[0][8].ToString();
                            retorno.DesUsuarioUltimaModificacion = rowsAffected.Tables[0].Rows[0][9].ToString();
                        }

                        return retorno;

                        #endregion

                    }
                    catch (Exception)
                    {
                        throw;
                    }
                }
        
                public int ReportesRolesTotalFilas(String conexion, ParametrosTotalFilasEntidad entidad)
                {
                    int value;

                    #region PARAMETROS

                    SqlParameter[] paramTransaccion = new SqlParameter[]
                    {
                        new SqlParameter("@psValor_Filtro", entidad.ValorFiltro),
                        new SqlParameter("@psColumna_Filtro", entidad.ColumnaFiltro)
                    };

                    #endregion

                    try
                    {

                        #region TOTAL FILAS

                        value = transaccionDA.TransaccionRows(conexion, "Reportes_Roles_Total_Filas", paramTransaccion);

                        return value;

                        #endregion

                    }
                    catch (Exception)
                    {
                        throw;
                    }
                }

            #endregion 

            //REQUERIMIENTO: 1-24105296
            #region REPORTES SEGUI
        
                public RespuestaEntidad ReportesSeguiInsertar(String conexion, String conexionBitacora, ReportesSeguiEntidad ReporteSegui, BitacorasEntidad _bitacora)
                {
                    RespuestaEntidad elemento = null;
                    DataSet rowsAffected;

                    #region PARAMETROS

                    SqlParameter[] paramTransaccion = new SqlParameter[]
                    {
                        new SqlParameter("@psCod_Reporte_SEGUI", ReporteSegui.CodReporteSegui),
                        new SqlParameter("@psDes_Reporte_SEGUI", ReporteSegui.DesReporteSegui),
                        new SqlParameter("@psInd_Metodo_Insercion", ReporteSegui.IndMetodoInsercion),
                        new SqlParameter("@psCod_Usuario", ReporteSegui.CodUsuarioIngreso)
                    };

                    #endregion

                    try
                    {

                        #region INSERTAR


                        rowsAffected = transaccionDA.TransaccionInsertar(conexion, conexionBitacora, "Reportes_SEGUI_Inserta", paramTransaccion, EnumTipoBitacora.INSERTAR, _bitacora);
                        if (!rowsAffected.Equals(null))
                        {
                            elemento = new RespuestaEntidad();
                            elemento.ValorEstado = int.Parse(rowsAffected.Tables[0].Rows[0][0].ToString());
                            elemento.ValorError = int.Parse(rowsAffected.Tables[0].Rows[0][1].ToString());
                        }

                        return elemento;

                        #endregion

                    }
                    catch (Exception)
                    {
                        throw;
                    }
                }
        
                public RespuestaEntidad ReportesSeguiModificar(String conexion, String conexionBitacora, ReportesSeguiEntidad ReporteSegui, BitacorasEntidad _bitacora)
                {
                    RespuestaEntidad elemento = null;
                    DataSet rowsAffected;

                    #region PARAMETROS

                    SqlParameter[] paramTransaccion = new SqlParameter[]
                    {
                        new SqlParameter("@piId_Reporte_SEGUI", ReporteSegui.IdReporteSegui),
                        new SqlParameter("@psCod_Reporte_SEGUI", ReporteSegui.CodReporteSegui),
                        new SqlParameter("@psDes_Reporte_SEGUI", ReporteSegui.DesReporteSegui),
                        new SqlParameter("@psInd_Metodo_Insercion", ReporteSegui.IndMetodoInsercion),
                        new SqlParameter("@psCod_Usuario", ReporteSegui.CodUsuarioIngreso)
                    };

                    #endregion

                    #region KeyValuePair LIST

                    List<KeyValuePair<string, string>> itemConsulta = new List<KeyValuePair<string, string>>();
                    itemConsulta.Add(helper.CrearKeyValuePairItem("@piId_Reporte_SEGUI", ReporteSegui.IdReporteSegui.ToString()));

                    #endregion

                    try
                    {

                        #region MODIFICAR

                        rowsAffected = transaccionDA.TransaccionModificar(conexion, conexionBitacora, "Reportes_SEGUI_Actualiza", paramTransaccion, EnumTipoBitacora.ACTUALIZAR, itemConsulta, "Reportes_SEGUI_Consulta_Detalle", _bitacora);
                        if (!rowsAffected.Equals(null))
                        {
                            elemento = new RespuestaEntidad();
                            elemento.ValorEstado = int.Parse(rowsAffected.Tables[0].Rows[0][0].ToString());
                            elemento.ValorError = int.Parse(rowsAffected.Tables[0].Rows[0][1].ToString());
                        }

                        return elemento;

                        #endregion

                    }
                    catch (Exception)
                    {
                        throw;
                    }
                }
        
                public RespuestaEntidad ReportesSeguiEliminar(String conexion, String conexionBitacora, ReportesSeguiEntidad ReporteSegui, BitacorasEntidad _bitacora)
                {
                    RespuestaEntidad elemento = null;
                    DataSet rowsAffected;

                    #region PARAMETROS

                    SqlParameter[] paramTransaccion = new SqlParameter[]
                    {
                        new SqlParameter("@piId_Reporte_SEGUI", ReporteSegui.IdReporteSegui)
                    };

                    #endregion

                    #region KeyValuePair LIST

                    List<KeyValuePair<string, string>> itemConsulta = new List<KeyValuePair<string, string>>();
                    itemConsulta.Add(helper.CrearKeyValuePairItem("@piId_Reporte_SEGUI", ReporteSegui.IdReporteSegui.ToString()));

                    #endregion

                    try
                    {

                        #region ELIMINAR

                        rowsAffected = transaccionDA.TransaccionEliminar(conexion, conexionBitacora, "Reportes_SEGUI_Elimina", paramTransaccion, EnumTipoBitacora.ELIMINAR, itemConsulta, "Reportes_SEGUI_Consulta_Detalle", _bitacora);
                        if (!rowsAffected.Equals(null))
                        {
                            elemento = new RespuestaEntidad();
                            elemento.ValorEstado = int.Parse(rowsAffected.Tables[0].Rows[0][0].ToString());
                            elemento.ValorError = int.Parse(rowsAffected.Tables[0].Rows[0][1].ToString());
                        }

                        return elemento;

                        #endregion

                    }
                    catch (Exception)
                    {
                        throw;
                    }
                }

                public List<ReportesSeguiEntidad> ReportesSeguiConsultar(String conexion, ParametrosConsultaEntidad entidad)
                {
                    List<ReportesSeguiEntidad> retorno = new List<ReportesSeguiEntidad>();
                    ReportesSeguiEntidad elemento;
                    DataSet rowsAffected;

                    #region PARAMETROS

                    SqlParameter[] paramTransaccion = new SqlParameter[]
                    {
                       new SqlParameter("@piIndice_Inicio_Fila", entidad.IndiceInicioFila),
                       new SqlParameter("@piMaximo_Filas", entidad.MaximoFilas),
                       new SqlParameter("@psValores_Filtro", entidad.ValorFiltro),
                       new SqlParameter("@psColumnas_Filtros", entidad.ColumnaFiltro),
                       new SqlParameter("@psColumna_Ordenar", entidad.ColumnaOrdenar)
                    };

                    #endregion

                    try
                    {

                        #region CONSULTAR

                        rowsAffected = transaccionDA.TransaccionConsulta(conexion, "Reportes_SEGUI_Consulta", paramTransaccion);
                        if (!rowsAffected.Equals(null))
                        {
                            foreach (DataRow dr in rowsAffected.Tables[0].Rows)
                            {
                                elemento = new ReportesSeguiEntidad();
                                elemento.IdReporteSegui = int.Parse(dr[0].ToString());
                                elemento.CodReporteSegui = dr[1].ToString();
                                elemento.DesReporteSegui = dr[2].ToString();

                                retorno.Add(elemento);
                            }
                        }

                        return retorno;

                        #endregion

                    }
                    catch (Exception)
                    {
                        throw;
                    }
                }
        
                public ReportesSeguiEntidad ReportesSeguiConsultarDetalle(String conexion, String conexionBitacora, ReportesSeguiEntidad ReporteSegui, BitacorasEntidad _bitacora)
                {
                    ReportesSeguiEntidad retorno = new ReportesSeguiEntidad();
                    DataSet rowsAffected;

                    #region PARAMETROS

                    SqlParameter[] paramTransaccion = new SqlParameter[]
                        {
                            new SqlParameter("@piId_Reporte_SEGUI", ReporteSegui.IdReporteSegui)
                        };

                    #endregion

                    #region KeyValuePair LIST

                    List<KeyValuePair<string, string>> itemConsulta = new List<KeyValuePair<string, string>>();
                    itemConsulta.Add(helper.CrearKeyValuePairItem("@piId_Reporte_SEGUI", ReporteSegui.IdReporteSegui.ToString()));

                    #endregion

                    try
                    {

                        #region CONSULTAR DETALLE

                        rowsAffected = transaccionDA.TransaccionConsultaDetalle(conexion, conexionBitacora, "Reportes_SEGUI_Consulta_Detalle", paramTransaccion, EnumTipoBitacora.CONSULTAR, itemConsulta, "Reportes_SEGUI_Consulta_Detalle", _bitacora);
                        if (!rowsAffected.Equals(null))
                        {
                            retorno.IdReporteSegui = int.Parse(rowsAffected.Tables[0].Rows[0][0].ToString());
                            retorno.CodReporteSegui = rowsAffected.Tables[0].Rows[0][1].ToString();
                            retorno.DesReporteSegui = rowsAffected.Tables[0].Rows[0][2].ToString();
                            retorno.IndMetodoInsercion = rowsAffected.Tables[0].Rows[0][3].ToString();
                            if (rowsAffected.Tables[0].Rows[0][4].ToString().Length > 0)
                                retorno.FechaIngreso = DateTime.Parse(rowsAffected.Tables[0].Rows[0][4].ToString());
                            else
                                retorno.FechaIngreso = null;
                            retorno.CodUsuarioIngreso = rowsAffected.Tables[0].Rows[0][5].ToString();
                            if (rowsAffected.Tables[0].Rows[0][6].ToString().Length > 0)
                                retorno.FechaUltimaModificacion = DateTime.Parse(rowsAffected.Tables[0].Rows[0][6].ToString());
                            else
                                retorno.FechaUltimaModificacion = null;
                            retorno.CodUsuarioUltimaModificacion = rowsAffected.Tables[0].Rows[0][7].ToString();
                            retorno.DesUsuarioIngreso = rowsAffected.Tables[0].Rows[0][8].ToString();
                            retorno.DesUsuarioUltimaModificacion = rowsAffected.Tables[0].Rows[0][9].ToString();
                        }

                        return retorno;

                        #endregion

                    }
                    catch (Exception)
                    {
                        throw;
                    }
                }
        
                public int ReportesSeguiTotalFilas(String conexion, ParametrosTotalFilasEntidad entidad)
                {
                    int value;

                    #region PARAMETROS

                    SqlParameter[] paramTransaccion = new SqlParameter[]
                    {
                        new SqlParameter("@psValor_Filtro", entidad.ValorFiltro),
                        new SqlParameter("@psColumna_Filtro", entidad.ColumnaFiltro)
                    };

                    #endregion

                    try
                    {

                        #region TOTAL FILAS

                        value = transaccionDA.TransaccionRows(conexion, "Reportes_SEGUI_Total_Filas", paramTransaccion);

                        return value;

                        #endregion

                    }
                    catch (Exception)
                    {
                        throw;
                    }
                }

            #endregion 

            #region SECCIONES
        
                public RespuestaEntidad SeccionesInsertar(String conexion, String conexionBitacora, SeccionesEntidad seccion, BitacorasEntidad _bitacora)
                {
                    RespuestaEntidad elemento = null;
                    DataSet rowsAffected;

                    #region PARAMETROS

                    SqlParameter[] paramTransaccion = new SqlParameter[]
                    {
                        new SqlParameter("@piCantidad_Seccion", seccion.CantidadSeccion),
                        new SqlParameter("@psInd_Metodo_Insercion", seccion.IndMetodoInsercion),
                        new SqlParameter("@psCod_Usuario", seccion.CodUsuarioIngreso)
                    };

                    #endregion

                    try
                    {

                        #region INSERTAR

                        rowsAffected = transaccionDA.TransaccionInsertar(conexion, conexionBitacora, "Secciones_Inserta", paramTransaccion, EnumTipoBitacora.INSERTAR, _bitacora);
                        if (!rowsAffected.Equals(null))
                        {
                            elemento = new RespuestaEntidad();
                            elemento.ValorEstado = int.Parse(rowsAffected.Tables[0].Rows[0][0].ToString());
                            elemento.ValorError = int.Parse(rowsAffected.Tables[0].Rows[0][1].ToString());
                        }

                        return elemento;

                        #endregion

                    }
                    catch (Exception)
                    {
                        throw;
                    }
                }
        
                public RespuestaEntidad SeccionesModificar(String conexion, String conexionBitacora, SeccionesEntidad seccion, BitacorasEntidad _bitacora)
                {
                    RespuestaEntidad elemento = null;
                    DataSet rowsAffected;

                    #region PARAMETROS

                    SqlParameter[] paramTransaccion = new SqlParameter[]
                    {
                        new SqlParameter("@piId_Seccion", seccion.IdSeccion),
                        new SqlParameter("@piCantidad_Seccion", seccion.CantidadSeccion),
                        new SqlParameter("@psInd_Metodo_Insercion", seccion.IndMetodoInsercion),
                        new SqlParameter("@psCod_Usuario", seccion.CodUsuarioIngreso)
                    };

                    #endregion

                    #region KeyValuePair LIST

                    List<KeyValuePair<string, string>> itemConsulta = new List<KeyValuePair<string, string>>();
                    itemConsulta.Add(helper.CrearKeyValuePairItem("@piId_Seccion", seccion.IdSeccion.ToString()));

                    #endregion

                    try
                    {

                        #region MODIFICAR

                        rowsAffected = transaccionDA.TransaccionModificar(conexion, conexionBitacora, "Secciones_Actualiza", paramTransaccion, EnumTipoBitacora.ACTUALIZAR, itemConsulta, "Secciones_Consulta_Detalle", _bitacora);
                        if (!rowsAffected.Equals(null))
                        {
                            elemento = new RespuestaEntidad();
                            elemento.ValorEstado = int.Parse(rowsAffected.Tables[0].Rows[0][0].ToString());
                            elemento.ValorError = int.Parse(rowsAffected.Tables[0].Rows[0][1].ToString());
                        }

                        return elemento;

                        #endregion

                    }
                    catch (Exception)
                    {
                        throw;
                    }
                }
        
                public RespuestaEntidad SeccionesEliminar(String conexion, String conexionBitacora, SeccionesEntidad seccion, BitacorasEntidad _bitacora)
                {
                    RespuestaEntidad elemento = null;
                    DataSet rowsAffected;

                    #region PARAMETROS

                    SqlParameter[] paramTransaccion = new SqlParameter[]
                    {
                        new SqlParameter("@piId_Seccion", seccion.IdSeccion)
                    };

                    #endregion

                    #region KeyValuePair LIST

                    List<KeyValuePair<string, string>> itemConsulta = new List<KeyValuePair<string, string>>();
                    itemConsulta.Add(helper.CrearKeyValuePairItem("@piId_Seccion", seccion.IdSeccion.ToString()));

                    #endregion

                    try
                    {

                        #region ELIMINAR

                        rowsAffected = transaccionDA.TransaccionEliminar(conexion, conexionBitacora, "Secciones_Elimina", paramTransaccion, EnumTipoBitacora.ELIMINAR, itemConsulta, "Secciones_Consulta_Detalle", _bitacora);
                        if (!rowsAffected.Equals(null))
                        {
                            elemento = new RespuestaEntidad();
                            elemento.ValorEstado = int.Parse(rowsAffected.Tables[0].Rows[0][0].ToString());
                            elemento.ValorError = int.Parse(rowsAffected.Tables[0].Rows[0][1].ToString());
                        }

                        return elemento;

                        #endregion

                    }
                    catch (Exception)
                    {
                        throw;
                    }
                }

                public List<SeccionesEntidad> SeccionesConsultar(String conexion, ParametrosConsultaEntidad entidad)
                {
                    List<SeccionesEntidad> retorno = new List<SeccionesEntidad>();
                    SeccionesEntidad elemento;
                    DataSet rowsAffected;

                    #region PARAMETROS

                    SqlParameter[] paramTransaccion = new SqlParameter[]
                    {
                       new SqlParameter("@piIndice_Inicio_Fila", entidad.IndiceInicioFila),
                       new SqlParameter("@piMaximo_Filas", entidad.MaximoFilas),
                       new SqlParameter("@psValores_Filtro", entidad.ValorFiltro),
                       new SqlParameter("@psColumnas_Filtros", entidad.ColumnaFiltro),
                       new SqlParameter("@psColumna_Ordenar", entidad.ColumnaOrdenar)
                    };

                    #endregion

                    try
                    {

                        #region CONSULTAR
                        
                            rowsAffected = transaccionDA.TransaccionConsulta(conexion, "Secciones_Consulta", paramTransaccion);
                            if (!rowsAffected.Equals(null))
                            {
                                foreach (DataRow dr in rowsAffected.Tables[0].Rows)
                                {
                                    elemento = new SeccionesEntidad();
                                    elemento.IdSeccion = int.Parse(dr[0].ToString());
                                    elemento.CantidadSeccion = int.Parse(dr[1].ToString());

                                    retorno.Add(elemento);
                                }
                            }

                            return retorno;

                        #endregion

                    }
                    catch (Exception)
                    {
                        throw;
                    }
                }
        
                public SeccionesEntidad SeccionesConsultarDetalle(String conexion, String conexionBitacora, SeccionesEntidad seccion, BitacorasEntidad _bitacora)
                {
                    SeccionesEntidad retorno = new SeccionesEntidad();
                    DataSet rowsAffected;

                    #region PARAMETROS

                    SqlParameter[] paramTransaccion = new SqlParameter[]
                    {
                        new SqlParameter("@piId_Seccion", seccion.IdSeccion)
                    };

                    #region KeyValuePair LIST

                    List<KeyValuePair<string, string>> itemConsulta = new List<KeyValuePair<string, string>>();
                    itemConsulta.Add(helper.CrearKeyValuePairItem("@piId_Seccion", seccion.IdSeccion.ToString()));

                    #endregion

                    #endregion

                    try
                    {

                        #region CONSULTAR DETALLE

                        rowsAffected = transaccionDA.TransaccionConsultaDetalle(conexion, conexionBitacora, "Secciones_Consulta_Detalle", paramTransaccion, EnumTipoBitacora.CONSULTAR, itemConsulta, "Secciones_Consulta_Detalle", _bitacora);
                        if (!rowsAffected.Equals(null))
                        {
                            retorno.IdSeccion = int.Parse(rowsAffected.Tables[0].Rows[0][0].ToString());
                            retorno.CantidadSeccion = int.Parse(rowsAffected.Tables[0].Rows[0][1].ToString());
                            retorno.IndMetodoInsercion = rowsAffected.Tables[0].Rows[0][2].ToString();
                            if (rowsAffected.Tables[0].Rows[0][3].ToString().Length > 0)
                                retorno.FechaIngreso = DateTime.Parse(rowsAffected.Tables[0].Rows[0][3].ToString());
                            else
                                retorno.FechaIngreso = null;
                            retorno.CodUsuarioIngreso = rowsAffected.Tables[0].Rows[0][4].ToString();
                            if (rowsAffected.Tables[0].Rows[0][5].ToString().Length > 0)
                                retorno.FechaUltimaModificacion = DateTime.Parse(rowsAffected.Tables[0].Rows[0][5].ToString());
                            else
                                retorno.FechaUltimaModificacion = null;
                            retorno.CodUsuarioUltimaModificacion = rowsAffected.Tables[0].Rows[0][6].ToString();
                            retorno.DesUsuarioIngreso = rowsAffected.Tables[0].Rows[0][7].ToString();
                            retorno.DesUsuarioUltimaModificacion = rowsAffected.Tables[0].Rows[0][8].ToString();
                        }

                        return retorno;

                        #endregion

                    }
                    catch (Exception)
                    {
                        throw;
                    }
                }
        
                public int SeccionesTotalFilas(String conexion, ParametrosTotalFilasEntidad entidad)
                {

                    int value;

                    #region PARAMETROS

                    SqlParameter[] paramTransaccion = new SqlParameter[]
                    {
                        new SqlParameter("@psValor_Filtro", entidad.ValorFiltro),
                        new SqlParameter("@psColumna_Filtro", entidad.ColumnaFiltro)
                    };

                    #endregion

                    try
                    {

                        #region TOTAL FILAS

                            value = transaccionDA.TransaccionRows(conexion, "Secciones_Total_Filas", paramTransaccion);

                            return value;

                        #endregion

                    }
                    catch (Exception)
                    {
                        throw;
                    }
                }

            #endregion 
        
            #region SISTEMAS CONSTRUCTIVOS
        
                public RespuestaEntidad SistemasConstructivosInsertar(String conexion, String conexionBitacora, SistemasConstructivosEntidad sistemaConstructivo, BitacorasEntidad _bitacora)
                {
                    RespuestaEntidad elemento = null;
                    DataSet rowsAffected;

                    #region PARAMETROS

                    SqlParameter[] paramTransaccion = new SqlParameter[]
                    {
                        new SqlParameter("@piCod_Sistema_Constructivo", sistemaConstructivo.CodSistemaConstructivo),
                        new SqlParameter("@psDes_Sistema_Constructivo", sistemaConstructivo.DesSistemaConstructivo),
                        new SqlParameter("@psInd_Metodo_Insercion", sistemaConstructivo.IndMetodoInsercion),
                        new SqlParameter("@psCod_Usuario", sistemaConstructivo.CodUsuarioIngreso)
                    };

                    #endregion

                    try
                    {

                        #region INSERTAR

                        rowsAffected = transaccionDA.TransaccionInsertar(conexion, conexionBitacora, "Sistemas_Constructivos_Inserta", paramTransaccion, EnumTipoBitacora.INSERTAR, _bitacora);
                        if (!rowsAffected.Equals(null))
                        {
                            elemento = new RespuestaEntidad();
                            elemento.ValorEstado = int.Parse(rowsAffected.Tables[0].Rows[0][0].ToString());
                            elemento.ValorError = int.Parse(rowsAffected.Tables[0].Rows[0][1].ToString());
                        }

                        return elemento;

                        #endregion

                    }
                    catch (Exception)
                    {
                        throw;
                    }
                }
        
                public RespuestaEntidad SistemasConstructivosModificar(String conexion, String conexionBitacora, SistemasConstructivosEntidad sistemaConstructivo, BitacorasEntidad _bitacora)
                {
                    RespuestaEntidad elemento = null;
                    DataSet rowsAffected;

                    #region PARAMETROS

                    SqlParameter[] paramTransaccion = new SqlParameter[]
                    {
                        new SqlParameter("@piId_Sistema_Constructivo", sistemaConstructivo.IdSistemaConstructivo),
                        new SqlParameter("@piCod_Sistema_Constructivo", sistemaConstructivo.CodSistemaConstructivo),
                        new SqlParameter("@psDes_Sistema_Constructivo", sistemaConstructivo.DesSistemaConstructivo),
                        new SqlParameter("@psInd_Metodo_Insercion", sistemaConstructivo.IndMetodoInsercion),
                        new SqlParameter("@psCod_Usuario", sistemaConstructivo.CodUsuarioIngreso)
                    };

                    #endregion

                    #region KeyValuePair LIST

                    List<KeyValuePair<string, string>> itemConsulta = new List<KeyValuePair<string, string>>();
                    itemConsulta.Add(helper.CrearKeyValuePairItem("@piId_Sistema_Constructivo", sistemaConstructivo.IdSistemaConstructivo.ToString()));

                    #endregion

                    try
                    {

                        #region MODIFICAR

                        rowsAffected = transaccionDA.TransaccionModificar(conexion, conexionBitacora, "Sistemas_Constructivos_Actualiza", paramTransaccion, EnumTipoBitacora.ACTUALIZAR, itemConsulta, "Sistemas_Constructivos_Consulta_Detalle", _bitacora);
                        if (!rowsAffected.Equals(null))
                        {
                            elemento = new RespuestaEntidad();
                            elemento.ValorEstado = int.Parse(rowsAffected.Tables[0].Rows[0][0].ToString());
                            elemento.ValorError = int.Parse(rowsAffected.Tables[0].Rows[0][1].ToString());
                        }

                        return elemento;

                        #endregion

                    }
                    catch (Exception)
                    {
                        throw;
                    }
                }
        
                public RespuestaEntidad SistemasConstructivosEliminar(String conexion, String conexionBitacora, SistemasConstructivosEntidad sistemaConstructivo, BitacorasEntidad _bitacora)
                {
                    RespuestaEntidad elemento = null;
                    DataSet rowsAffected;

                    #region PARAMETROS

                    SqlParameter[] paramTransaccion = new SqlParameter[]
                    {
                        new SqlParameter("@piId_Sistema_Constructivo", sistemaConstructivo.IdSistemaConstructivo)
                    };

                    #endregion

                    #region KeyValuePair LIST

                    List<KeyValuePair<string, string>> itemConsulta = new List<KeyValuePair<string, string>>();
                    itemConsulta.Add(helper.CrearKeyValuePairItem("@piId_Sistema_Constructivo", sistemaConstructivo.IdSistemaConstructivo.ToString()));

                    #endregion

                    try
                    {

                        #region ELIMINAR

                        rowsAffected = transaccionDA.TransaccionEliminar(conexion, conexionBitacora, "Sistemas_Constructivos_Elimina", paramTransaccion, EnumTipoBitacora.ELIMINAR, itemConsulta, "Sistemas_Constructivos_Consulta_Detalle", _bitacora);
                        if (!rowsAffected.Equals(null))
                        {
                            elemento = new RespuestaEntidad();
                            elemento.ValorEstado = int.Parse(rowsAffected.Tables[0].Rows[0][0].ToString());
                            elemento.ValorError = int.Parse(rowsAffected.Tables[0].Rows[0][1].ToString());
                        }

                        return elemento;

                        #endregion

                    }
                    catch (Exception)
                    {
                        throw;
                    }
                }

                public List<SistemasConstructivosEntidad> SistemasConstructivosConsultar(String conexion, ParametrosConsultaEntidad entidad)
                {
                    List<SistemasConstructivosEntidad> retorno = new List<SistemasConstructivosEntidad>();
                    SistemasConstructivosEntidad elemento;
                    DataSet rowsAffected;

                    #region PARAMETROS

                    SqlParameter[] paramTransaccion = new SqlParameter[]
                    {
                       new SqlParameter("@piIndice_Inicio_Fila", entidad.IndiceInicioFila),
                       new SqlParameter("@piMaximo_Filas", entidad.MaximoFilas),
                       new SqlParameter("@psValores_Filtro", entidad.ValorFiltro),
                       new SqlParameter("@psColumnas_Filtros", entidad.ColumnaFiltro),
                       new SqlParameter("@psColumna_Ordenar", entidad.ColumnaOrdenar)
                    };

                    #endregion

                    try
                    {

                        #region CONSULTAR

                            rowsAffected = transaccionDA.TransaccionConsulta(conexion, "Sistemas_Constructivos_Consulta", paramTransaccion);
                            if (!rowsAffected.Equals(null))
                            {
                                foreach (DataRow dr in rowsAffected.Tables[0].Rows)
                                {
                                    elemento = new SistemasConstructivosEntidad();
                                    elemento.IdSistemaConstructivo = int.Parse(dr[0].ToString());
                                    elemento.CodSistemaConstructivo = int.Parse(dr[1].ToString());
                                    elemento.DesSistemaConstructivo = dr[2].ToString();

                                    retorno.Add(elemento);
                                }
                            }

                            return retorno;

                        #endregion

                    }
                    catch (Exception)
                    {
                        throw;
                    }
                }
        
                public SistemasConstructivosEntidad SistemasConstructivosConsultarDetalle(String conexion, String conexionBitacora, SistemasConstructivosEntidad sistemaConstructivo, BitacorasEntidad _bitacora)
                {
                    SistemasConstructivosEntidad retorno = new SistemasConstructivosEntidad();
                    DataSet rowsAffected;

                    #region PARAMETROS

                    SqlParameter[] paramTransaccion = new SqlParameter[]
                    {
                        new SqlParameter("@piId_Sistema_Constructivo", sistemaConstructivo.IdSistemaConstructivo)
                    };

                    #endregion

                    #region KeyValuePair LIST

                    List<KeyValuePair<string, string>> itemConsulta = new List<KeyValuePair<string, string>>();
                    itemConsulta.Add(helper.CrearKeyValuePairItem("@piId_Sistema_Constructivo", sistemaConstructivo.IdSistemaConstructivo.ToString()));

                    #endregion

                    try
                    {

                        #region CONSULTAR DETALLE

                        rowsAffected = transaccionDA.TransaccionConsultaDetalle(conexion, conexionBitacora, "Sistemas_Constructivos_Consulta_Detalle", paramTransaccion, EnumTipoBitacora.CONSULTAR, itemConsulta, "Sistemas_Constructivos_Consulta_Detalle", _bitacora);
                        if (!rowsAffected.Equals(null))
                        {
                            retorno.IdSistemaConstructivo = int.Parse(rowsAffected.Tables[0].Rows[0][0].ToString());
                            retorno.CodSistemaConstructivo = int.Parse(rowsAffected.Tables[0].Rows[0][1].ToString());
                            retorno.DesSistemaConstructivo = rowsAffected.Tables[0].Rows[0][2].ToString();
                            retorno.IndMetodoInsercion = rowsAffected.Tables[0].Rows[0][3].ToString();
                            if (rowsAffected.Tables[0].Rows[0][4].ToString().Length > 0)
                                retorno.FechaIngreso = DateTime.Parse(rowsAffected.Tables[0].Rows[0][4].ToString());
                            else
                                retorno.FechaIngreso = null;
                            retorno.CodUsuarioIngreso = rowsAffected.Tables[0].Rows[0][5].ToString();
                            if (rowsAffected.Tables[0].Rows[0][6].ToString().Length > 0)
                                retorno.FechaUltimaModificacion = DateTime.Parse(rowsAffected.Tables[0].Rows[0][6].ToString());
                            else
                                retorno.FechaUltimaModificacion = null;
                            retorno.CodUsuarioUltimaModificacion = rowsAffected.Tables[0].Rows[0][7].ToString();
                            retorno.DesUsuarioIngreso = rowsAffected.Tables[0].Rows[0][8].ToString();
                            retorno.DesUsuarioUltimaModificacion = rowsAffected.Tables[0].Rows[0][9].ToString();
                        }

                        return retorno;

                        #endregion

                    }
                    catch (Exception)
                    {
                        throw;
                    }
                }
        
                public int SistemasConstructivosTotalFilas(String conexion, ParametrosTotalFilasEntidad entidad)
                {

                    int value;

                    #region PARAMETROS

                    SqlParameter[] paramTransaccion = new SqlParameter[]
                    {
                        new SqlParameter("@psValor_Filtro", entidad.ValorFiltro),
                        new SqlParameter("@psColumna_Filtro", entidad.ColumnaFiltro)
                    };

                    #endregion

                    try
                    {

                        #region TOTAL FILAS

                            value = transaccionDA.TransaccionRows(conexion, "Sistemas_Constructivos_Total_Filas", paramTransaccion);

                            return value;

                        #endregion

                    }
                    catch (Exception)
                    {
                        throw;
                    }
                }

            #endregion 

            #region SITUACIONES
        
                public RespuestaEntidad SituacionesInsertar(String conexion, String conexionBitacora, SituacionesEntidad situacion, BitacorasEntidad _bitacora)
                {
                    RespuestaEntidad elemento = null;
                    DataSet rowsAffected;

                    #region PARAMETROS

                    SqlParameter[] paramTransaccion = new SqlParameter[]
                    {
                        new SqlParameter("@piCod_Situacion", situacion.CodSituacion),
                        new SqlParameter("@psDes_Situacion", situacion.DesSituacion),
                        new SqlParameter("@psInd_Metodo_Insercion", situacion.IndMetodoInsercion),
                        new SqlParameter("@psCod_Usuario", situacion.CodUsuarioIngreso)
                    };

                    #endregion

                    try
                    {

                        #region INSERTAR

                        rowsAffected = transaccionDA.TransaccionInsertar(conexion, conexionBitacora, "Situaciones_Inserta", paramTransaccion, EnumTipoBitacora.INSERTAR, _bitacora);
                        if (!rowsAffected.Equals(null))
                        {
                            elemento = new RespuestaEntidad();
                            elemento.ValorEstado = int.Parse(rowsAffected.Tables[0].Rows[0][0].ToString());
                            elemento.ValorError = int.Parse(rowsAffected.Tables[0].Rows[0][1].ToString());
                        }

                        return elemento;

                        #endregion

                    }
                    catch (Exception)
                    {
                        throw;
                    }
                }
        
                public RespuestaEntidad SituacionesModificar(String conexion, String conexionBitacora, SituacionesEntidad situacion, BitacorasEntidad _bitacora)
                {
                    RespuestaEntidad elemento = null;
                    DataSet rowsAffected;

                    #region PARAMETROS

                    SqlParameter[] paramTransaccion = new SqlParameter[]
                    {
                        new SqlParameter("@piId_Situacion", situacion.IdSituacion),
                        new SqlParameter("@piCod_Situacion", situacion.CodSituacion),
                        new SqlParameter("@psDes_Situacion", situacion.DesSituacion),
                        new SqlParameter("@psInd_Metodo_Insercion", situacion.IndMetodoInsercion),
                        new SqlParameter("@psCod_Usuario", situacion.CodUsuarioIngreso)
                    };

                    #endregion

                    #region KeyValuePair LIST

                    List<KeyValuePair<string, string>> itemConsulta = new List<KeyValuePair<string, string>>();
                    itemConsulta.Add(helper.CrearKeyValuePairItem("@piId_Situacion", situacion.IdSituacion.ToString()));

                    #endregion

                    try
                    {

                        #region MODIFICAR

                        rowsAffected = transaccionDA.TransaccionModificar(conexion, conexionBitacora, "Situaciones_Actualiza", paramTransaccion, EnumTipoBitacora.ACTUALIZAR, itemConsulta, "Situaciones_Consulta_Detalle", _bitacora);
                        if (!rowsAffected.Equals(null))
                        {
                            elemento = new RespuestaEntidad();
                            elemento.ValorEstado = int.Parse(rowsAffected.Tables[0].Rows[0][0].ToString());
                            elemento.ValorError = int.Parse(rowsAffected.Tables[0].Rows[0][1].ToString());
                        }

                        return elemento;

                        #endregion

                    }
                    catch (Exception)
                    {
                        throw;
                    }
                }
        
                public RespuestaEntidad SituacionesEliminar(String conexion, String conexionBitacora, SituacionesEntidad situacion, BitacorasEntidad _bitacora)
                {
                    RespuestaEntidad elemento = null;
                    DataSet rowsAffected;

                    #region PARAMETROS

                    SqlParameter[] paramTransaccion = new SqlParameter[]
                    {
                        new SqlParameter("@piId_Situacion", situacion.IdSituacion)
                    };

                    #endregion

                    #region KeyValuePair LIST

                    List<KeyValuePair<string, string>> itemConsulta = new List<KeyValuePair<string, string>>();
                    itemConsulta.Add(helper.CrearKeyValuePairItem("@piId_Situacion", situacion.IdSituacion.ToString()));

                    #endregion

                    try
                    {

                        #region ELIMINAR

                        rowsAffected = transaccionDA.TransaccionEliminar(conexion, conexionBitacora, "Situaciones_Elimina", paramTransaccion, EnumTipoBitacora.ELIMINAR, itemConsulta, "Situaciones_Consulta_Detalle", _bitacora);
                        if (!rowsAffected.Equals(null))
                        {
                            elemento = new RespuestaEntidad();
                            elemento.ValorEstado = int.Parse(rowsAffected.Tables[0].Rows[0][0].ToString());
                            elemento.ValorError = int.Parse(rowsAffected.Tables[0].Rows[0][1].ToString());
                        }

                        return elemento;

                        #endregion

                    }
                    catch (Exception)
                    {
                        throw;
                    }
                }

                public List<SituacionesEntidad> SituacionesConsultar(String conexion, ParametrosConsultaEntidad entidad)
                {
                    List<SituacionesEntidad> retorno = new List<SituacionesEntidad>();
                    SituacionesEntidad elemento;
                    DataSet rowsAffected;

                    #region PARAMETROS


                    SqlParameter[] paramTransaccion = new SqlParameter[]
                    {
                       new SqlParameter("@piIndice_Inicio_Fila", entidad.IndiceInicioFila),
                       new SqlParameter("@piMaximo_Filas", entidad.MaximoFilas),
                       new SqlParameter("@psValores_Filtro", entidad.ValorFiltro),
                       new SqlParameter("@psColumnas_Filtros", entidad.ColumnaFiltro),
                       new SqlParameter("@psColumna_Ordenar", entidad.ColumnaOrdenar)
                    };

                    #endregion

                    try
                    {

                        #region CONSULTAR

                            rowsAffected = transaccionDA.TransaccionConsulta(conexion, "Situaciones_Consulta", paramTransaccion);
                            if (!rowsAffected.Equals(null))
                            {
                                foreach (DataRow dr in rowsAffected.Tables[0].Rows)
                                {
                                    elemento = new SituacionesEntidad();
                                    elemento.IdSituacion = int.Parse(dr[0].ToString());
                                    elemento.CodSituacion = int.Parse(dr[1].ToString());
                                    elemento.DesSituacion = dr[2].ToString();

                                    retorno.Add(elemento);
                                }
                            }

                            return retorno;

                        #endregion

                    }
                    catch (Exception)
                    {
                        throw;
                    }
                }
        
                public SituacionesEntidad SituacionesConsultarDetalle(String conexion, String conexionBitacora, SituacionesEntidad situacion, BitacorasEntidad _bitacora)
                {
                    SituacionesEntidad retorno = new SituacionesEntidad();
                    DataSet rowsAffected;

                    #region PARAMETROS

                    SqlParameter[] paramTransaccion = new SqlParameter[]
                    {
                        new SqlParameter("@piId_Situacion", situacion.IdSituacion)
                    };

                    #endregion

                    try
                    {

                        #region KeyValuePair LIST

                        List<KeyValuePair<string, string>> itemConsulta = new List<KeyValuePair<string, string>>();
                        itemConsulta.Add(helper.CrearKeyValuePairItem("@piId_Situacion", situacion.IdSituacion.ToString()));

                        #endregion

                        #region CONSULTAR DETALLE

                        rowsAffected = transaccionDA.TransaccionConsultaDetalle(conexion, conexionBitacora, "Situaciones_Consulta_Detalle", paramTransaccion, EnumTipoBitacora.CONSULTAR, itemConsulta, "Situaciones_Consulta_Detalle", _bitacora);
                        if (!rowsAffected.Equals(null))
                        {
                            retorno.IdSituacion = int.Parse(rowsAffected.Tables[0].Rows[0][0].ToString());
                            retorno.CodSituacion = int.Parse(rowsAffected.Tables[0].Rows[0][1].ToString());
                            retorno.DesSituacion = rowsAffected.Tables[0].Rows[0][2].ToString();
                            retorno.IndMetodoInsercion = rowsAffected.Tables[0].Rows[0][3].ToString();
                            if (rowsAffected.Tables[0].Rows[0][4].ToString().Length > 0)
                                retorno.FechaIngreso = DateTime.Parse(rowsAffected.Tables[0].Rows[0][4].ToString());
                            else
                                retorno.FechaIngreso = null;
                            retorno.CodUsuarioIngreso = rowsAffected.Tables[0].Rows[0][5].ToString();
                            if (rowsAffected.Tables[0].Rows[0][6].ToString().Length > 0)
                                retorno.FechaUltimaModificacion = DateTime.Parse(rowsAffected.Tables[0].Rows[0][6].ToString());
                            else
                                retorno.FechaUltimaModificacion = null;
                            retorno.CodUsuarioUltimaModificacion = rowsAffected.Tables[0].Rows[0][7].ToString();
                            retorno.DesUsuarioIngreso = rowsAffected.Tables[0].Rows[0][8].ToString();
                            retorno.DesUsuarioUltimaModificacion = rowsAffected.Tables[0].Rows[0][9].ToString();
                        }

                        return retorno;

                        #endregion

                    }
                    catch (Exception)
                    {
                        throw;
                    }
                }
        
                public int SituacionesTotalFilas(String conexion, ParametrosTotalFilasEntidad entidad)
                {

                    int value;

                    #region PARAMETROS

                    SqlParameter[] paramTransaccion = new SqlParameter[]
                    {
                        new SqlParameter("@psValor_Filtro", entidad.ValorFiltro),
                        new SqlParameter("@psColumna_Filtro", entidad.ColumnaFiltro)
                    };

                    #endregion

                    try
                    {

                        #region TOTAL FILAS

                            value = transaccionDA.TransaccionRows(conexion, "Situaciones_Total_Filas", paramTransaccion);

                            return value;

                        #endregion

                    }
                    catch (Exception)
                    {
                        throw;
                    }
                }

            #endregion 

            #region SOLICITANTES
        
                public RespuestaEntidad SolicitantesInsertar(String conexion, String conexionBitacora, SolicitantesEntidad solicitante, BitacorasEntidad _bitacora)
                {
                    RespuestaEntidad elemento = null;
                    DataSet rowsAffected;

                    #region PARAMETROS

                    SqlParameter[] paramTransaccion = new SqlParameter[]
                    {
                        new SqlParameter("@piCod_Solicitante", solicitante.CodSolicitante),
                        new SqlParameter("@psDes_Solicitante", solicitante.DesSolicitante),
                        new SqlParameter("@psInd_Metodo_Insercion", solicitante.IndMetodoInsercion),
                        new SqlParameter("@psCod_Usuario", solicitante.CodUsuarioIngreso)
                    };

                    #endregion

                    try
                    {

                        #region INSERTAR

                        rowsAffected = transaccionDA.TransaccionInsertar(conexion, conexionBitacora, "Solicitantes_Inserta", paramTransaccion, EnumTipoBitacora.INSERTAR, _bitacora);
                        if (!rowsAffected.Equals(null))
                        {
                            elemento = new RespuestaEntidad();
                            elemento.ValorEstado = int.Parse(rowsAffected.Tables[0].Rows[0][0].ToString());
                            elemento.ValorError = int.Parse(rowsAffected.Tables[0].Rows[0][1].ToString());
                        }
                        return elemento;

                        #endregion

                    }
                    catch (Exception)
                    {
                        throw;
                    }
                }
        
                public RespuestaEntidad SolicitantesModificar(String conexion, String conexionBitacora, SolicitantesEntidad solicitante, BitacorasEntidad _bitacora)
                {
                    RespuestaEntidad elemento = null;
                    DataSet rowsAffected;

                    #region PARAMETROS

                    SqlParameter[] paramTransaccion = new SqlParameter[]
                    {
                        new SqlParameter("@piId_Solicitante", solicitante.IdSolicitante),
                        new SqlParameter("@piCod_Solicitante", solicitante.CodSolicitante),
                        new SqlParameter("@psDes_Solicitante", solicitante.DesSolicitante),
                        new SqlParameter("@psInd_Metodo_Insercion", solicitante.IndMetodoInsercion),
                        new SqlParameter("@psCod_Usuario", solicitante.CodUsuarioIngreso)
                    };

                    #endregion

                    #region KeyValuePair LIST

                    List<KeyValuePair<string, string>> itemConsulta = new List<KeyValuePair<string, string>>();
                    itemConsulta.Add(helper.CrearKeyValuePairItem("@piId_Solicitante", solicitante.IdSolicitante.ToString()));

                    #endregion

                    try
                    {

                        #region MODIFICAR

                        rowsAffected = transaccionDA.TransaccionModificar(conexion, conexionBitacora, "Solicitantes_Actualiza", paramTransaccion, EnumTipoBitacora.CONSULTAR, itemConsulta, "Solicitantes_Consulta_Detalle", _bitacora);
                        
                        if (!rowsAffected.Equals(null))
                        {
                            elemento = new RespuestaEntidad();
                            elemento.ValorEstado = int.Parse(rowsAffected.Tables[0].Rows[0][0].ToString());
                            elemento.ValorError = int.Parse(rowsAffected.Tables[0].Rows[0][1].ToString());
                        }

                        return elemento;

                        #endregion

                    }
                    catch (Exception)
                    {
                        throw;
                    }
                }
        
                public RespuestaEntidad SolicitantesEliminar(String conexion, String conexionBitacora, SolicitantesEntidad solicitante, BitacorasEntidad _bitacora)
                {
                    RespuestaEntidad elemento = null;
                    DataSet rowsAffected;

                    #region PARAMETROS

                    SqlParameter[] paramTransaccion = new SqlParameter[]
                    {
                        new SqlParameter("@piId_Solicitante", solicitante.IdSolicitante)
                    };

                    #endregion

                    #region KeyValuePair LIST

                    List<KeyValuePair<string, string>> itemConsulta = new List<KeyValuePair<string, string>>();
                    itemConsulta.Add(helper.CrearKeyValuePairItem("@piId_Solicitante", solicitante.IdSolicitante.ToString()));

                    #endregion

                    try
                    {

                        #region ELIMINAR

                        rowsAffected = transaccionDA.TransaccionEliminar(conexion, conexionBitacora, "Solicitantes_Elimina", paramTransaccion, EnumTipoBitacora.ELIMINAR, itemConsulta, "Solicitantes_Consulta_Detalle", _bitacora);
                        if (!rowsAffected.Equals(null))
                        {
                            elemento = new RespuestaEntidad();
                            elemento.ValorEstado = int.Parse(rowsAffected.Tables[0].Rows[0][0].ToString());
                            elemento.ValorError = int.Parse(rowsAffected.Tables[0].Rows[0][1].ToString());
                        }

                        return elemento;

                        #endregion

                    }
                    catch (Exception)
                    {
                        throw;
                    }
                }

                public List<SolicitantesEntidad> SolicitantesConsultar(String conexion, ParametrosConsultaEntidad entidad)
                {
                    List<SolicitantesEntidad> retorno = new List<SolicitantesEntidad>();
                    SolicitantesEntidad elemento;
                    DataSet rowsAffected;

                    #region PARAMETROS

                    SqlParameter[] paramTransaccion = new SqlParameter[]
                    {
                       new SqlParameter("@piIndice_Inicio_Fila", entidad.IndiceInicioFila),
                       new SqlParameter("@piMaximo_Filas", entidad.MaximoFilas),
                       new SqlParameter("@psValores_Filtro", entidad.ValorFiltro),
                       new SqlParameter("@psColumnas_Filtros", entidad.ColumnaFiltro),
                       new SqlParameter("@psColumna_Ordenar", entidad.ColumnaOrdenar)
                    };

                    #endregion

                    try
                    {

                        #region CONSULTAR

                            rowsAffected = transaccionDA.TransaccionConsulta(conexion, "Solicitantes_Consulta", paramTransaccion);
                            if (!rowsAffected.Equals(null))
                            {
                                foreach (DataRow dr in rowsAffected.Tables[0].Rows)
                                {
                                    elemento = new SolicitantesEntidad();
                                    elemento.IdSolicitante = int.Parse(dr[0].ToString());
                                    elemento.CodSolicitante = int.Parse(dr[1].ToString());
                                    elemento.DesSolicitante = dr[2].ToString();

                                    retorno.Add(elemento);
                                }
                            }

                            return retorno;

                        #endregion

                    }
                    catch (Exception)
                    {
                        throw;
                    }
                }
        
                public SolicitantesEntidad SolicitantesConsultarDetalle(String conexion, String conexionBitacora, SolicitantesEntidad solicitante, BitacorasEntidad _bitacora)
                {
                    SolicitantesEntidad retorno = new SolicitantesEntidad();
                    DataSet rowsAffected;

                    #region PARAMETROS

                    SqlParameter[] paramTransaccion = new SqlParameter[]
                    {
                        new SqlParameter("@piId_Solicitante", solicitante.IdSolicitante)
                    };

                    #endregion

                    #region KeyValuePair LIST

                    List<KeyValuePair<string, string>> itemConsulta = new List<KeyValuePair<string, string>>();
                    itemConsulta.Add(helper.CrearKeyValuePairItem("@piId_Solicitante", solicitante.IdSolicitante.ToString()));

                    #endregion

                    try
                    {

                        #region CONSULTAR DETALLE

                        rowsAffected = transaccionDA.TransaccionConsultaDetalle(conexion, conexionBitacora, "Solicitantes_Consulta_Detalle", paramTransaccion, EnumTipoBitacora.CONSULTAR, itemConsulta, "Solicitantes_Consulta_Detalle", _bitacora);
                        if (!rowsAffected.Equals(null))
                        {
                            retorno.IdSolicitante = int.Parse(rowsAffected.Tables[0].Rows[0][0].ToString());
                            retorno.CodSolicitante = int.Parse(rowsAffected.Tables[0].Rows[0][1].ToString());
                            retorno.DesSolicitante = rowsAffected.Tables[0].Rows[0][2].ToString();
                            retorno.IndMetodoInsercion = rowsAffected.Tables[0].Rows[0][3].ToString();
                            if (rowsAffected.Tables[0].Rows[0][4].ToString().Length > 0)
                                retorno.FechaIngreso = DateTime.Parse(rowsAffected.Tables[0].Rows[0][4].ToString());
                            else
                                retorno.FechaIngreso = null;
                            retorno.CodUsuarioIngreso = rowsAffected.Tables[0].Rows[0][5].ToString();
                            if (rowsAffected.Tables[0].Rows[0][6].ToString().Length > 0)
                                retorno.FechaUltimaModificacion = DateTime.Parse(rowsAffected.Tables[0].Rows[0][6].ToString());
                            else
                                retorno.FechaUltimaModificacion = null;
                            retorno.CodUsuarioUltimaModificacion = rowsAffected.Tables[0].Rows[0][7].ToString();
                            retorno.DesUsuarioIngreso = rowsAffected.Tables[0].Rows[0][8].ToString();
                            retorno.DesUsuarioUltimaModificacion = rowsAffected.Tables[0].Rows[0][9].ToString();
                        }

                        return retorno;

                        #endregion

                    }
                    catch (Exception)
                    {
                        throw;
                    }
                }
        
                public int SolicitantesTotalFilas(String conexion, ParametrosTotalFilasEntidad entidad)
                {

                    int value;

                    #region PARAMETROS

                    SqlParameter[] paramTransaccion = new SqlParameter[]
                    {
                        new SqlParameter("@psValor_Filtro", entidad.ValorFiltro),
                        new SqlParameter("@psColumna_Filtro", entidad.ColumnaFiltro)
                    };

                    #endregion

                    try
                    {

                        #region TOTAL FILAS

                            value = transaccionDA.TransaccionRows(conexion, "Solicitantes_Total_Filas", paramTransaccion);

                            return value;

                        #endregion

                    }
                    catch (Exception)
                    {
                        throw;
                    }
                }

            #endregion 

            //REQUERIMIENTO: 1-24105296
            #region TASADORES
        
                public RespuestaEntidad TasadoresInsertar(String conexion, String conexionBitacora, TasadoresEntidad tasador, BitacorasEntidad _bitacora)
                {
                    RespuestaEntidad elemento = null;
                    DataSet rowsAffected;

                    #region PARAMETROS

                    SqlParameter[] paramTransaccion = new SqlParameter[]
                    {
                        new SqlParameter("@piId_Tipo_Persona", tasador.IdTipoPersona),
                        new SqlParameter("@psCod_Tasador", tasador.CodTasador),
                        new SqlParameter("@psNombre_Tasador", tasador.DesNombreTasador),
                        new SqlParameter("@psCod_Tipo_Tasador", tasador.CodTipoTasador),
                        new SqlParameter("@psOrigen_Tasador", tasador.OrigenTasador),
                        new SqlParameter("@psInd_Metodo_Insercion", tasador.IndMetodoInsercion),
                        new SqlParameter("@psCod_Usuario", tasador.CodUsuarioIngreso)
                    };

                    #endregion

                    try
                    {

                        #region INSERTAR

                        rowsAffected = transaccionDA.TransaccionInsertar(conexion, conexionBitacora, "Tasadores_Inserta", paramTransaccion, EnumTipoBitacora.INSERTAR, _bitacora);

                        if (!rowsAffected.Equals(null))
                        {
                            elemento = new RespuestaEntidad();
                            elemento.ValorEstado = int.Parse(rowsAffected.Tables[0].Rows[0][0].ToString());
                            elemento.ValorError = int.Parse(rowsAffected.Tables[0].Rows[0][1].ToString());
                        }

                        return elemento;

                        #endregion

                    }
                    catch (Exception)
                    {
                        throw;
                    }
                }
        
                public RespuestaEntidad TasadoresModificar(String conexion, String conexionBitacora, TasadoresEntidad tasador, BitacorasEntidad _bitacora)
                {
                    RespuestaEntidad elemento = null;
                    DataSet rowsAffected;

                    #region PARAMETROS

                    SqlParameter[] paramTransaccion = new SqlParameter[]
                    {
                        new SqlParameter("@piId_Tasador", tasador.IdTasador),
                        new SqlParameter("@piId_Tipo_Persona", tasador.IdTipoPersona),
                        new SqlParameter("@psCod_Tasador", tasador.CodTasador),
                        new SqlParameter("@psNombre_Tasador", tasador.DesNombreTasador),
                        new SqlParameter("@psCod_Tipo_Tasador", tasador.CodTipoTasador),
                        new SqlParameter("@psOrigen_Tasador", tasador.OrigenTasador),
                        new SqlParameter("@psInd_Metodo_Insercion", tasador.IndMetodoInsercion),
                        new SqlParameter("@psCod_Usuario", tasador.CodUsuarioIngreso)
                    };

                    #endregion

                    #region KeyValuePair LIST

                    List<KeyValuePair<string, string>> itemConsulta = new List<KeyValuePair<string, string>>();
                    itemConsulta.Add(helper.CrearKeyValuePairItem("@piId_Tasador", tasador.IdTasador.ToString()));

                    #endregion

                    try
                    {

                        #region MODIFICAR

                        rowsAffected = transaccionDA.TransaccionModificar(conexion, conexionBitacora, "Tasadores_Actualiza", paramTransaccion, EnumTipoBitacora.ACTUALIZAR, itemConsulta, "Tasadores_Consulta_Detalle", _bitacora);
                        if (!rowsAffected.Equals(null))
                        {
                            elemento = new RespuestaEntidad();
                            elemento.ValorEstado = int.Parse(rowsAffected.Tables[0].Rows[0][0].ToString());
                            elemento.ValorError = int.Parse(rowsAffected.Tables[0].Rows[0][1].ToString());
                        }

                        return elemento;

                        #endregion

                    }
                    catch (Exception)
                    {
                        throw;
                    }
                }
        
                public RespuestaEntidad TasadoresEliminar(String conexion, String conexionBitacora, TasadoresEntidad tasador, BitacorasEntidad _bitacora)
                {
                    RespuestaEntidad elemento = null;
                    DataSet rowsAffected;

                    #region PARAMETROS

                    SqlParameter[] paramTransaccion = new SqlParameter[]
                    {
                        new SqlParameter("@piId_Tasador", tasador.IdTasador)
                    };

                    #endregion

                    #region KeyValuePair LIST

                    List<KeyValuePair<string, string>> itemConsulta = new List<KeyValuePair<string, string>>();
                    itemConsulta.Add(helper.CrearKeyValuePairItem("@piId_Tasador", tasador.IdTasador.ToString()));

                    #endregion

                    try
                    {

                        #region ELIMINAR

                        rowsAffected = transaccionDA.TransaccionEliminar(conexion, conexionBitacora, "Tasadores_Elimina", paramTransaccion, EnumTipoBitacora.ELIMINAR, itemConsulta, "Tasadores_Consulta_Detalle", _bitacora);
                        if (!rowsAffected.Equals(null))
                        {
                            elemento = new RespuestaEntidad();
                            elemento.ValorEstado = int.Parse(rowsAffected.Tables[0].Rows[0][0].ToString());
                            elemento.ValorError = int.Parse(rowsAffected.Tables[0].Rows[0][1].ToString());
                        }

                        return elemento;

                        #endregion

                    }
                    catch (Exception)
                    {
                        throw;
                    }
                }

                public List<TasadoresEntidad> TasadoresConsultar(String conexion, ParametrosConsultaEntidad entidad)
                {
                    List<TasadoresEntidad> retorno = new List<TasadoresEntidad>();
                    TasadoresEntidad elemento;
                    DataSet rowsAffected;

                    #region PARAMETROS

                    SqlParameter[] paramTransaccion = new SqlParameter[]
                    {
                       new SqlParameter("@piIndice_Inicio_Fila", entidad.IndiceInicioFila),
                       new SqlParameter("@piMaximo_Filas", entidad.MaximoFilas),
                       new SqlParameter("@psValores_Filtro", entidad.ValorFiltro),
                       new SqlParameter("@psColumnas_Filtros", entidad.ColumnaFiltro),
                       new SqlParameter("@psColumna_Ordenar", entidad.ColumnaOrdenar)
                    };

                    #endregion

                    try
                    {

                        #region CONSULTAR

                        rowsAffected = transaccionDA.TransaccionConsulta(conexion, "Tasadores_Consulta", paramTransaccion);
                        if (!rowsAffected.Equals(null))
                        {
                            foreach (DataRow dr in rowsAffected.Tables[0].Rows)
                            {
                                elemento = new TasadoresEntidad();
                                elemento.IdTasador = int.Parse(dr[0].ToString());
                                elemento.IdTipoPersona = int.Parse(dr[1].ToString());
                                elemento.CodTipoPersona = int.Parse(dr[2].ToString());
                                elemento.DesTipoPersona = dr[3].ToString();
                                elemento.CodTasador = dr[4].ToString();
                                elemento.DesNombreTasador = dr[5].ToString();
                                elemento.CodTipoTasador = dr[6].ToString();
                                elemento.DesTipoTasador = dr[7].ToString();

                                retorno.Add(elemento);
                            }
                        }

                        return retorno;

                        #endregion

                    }
                    catch (Exception)
                    {
                        throw;
                    }
                }

                public List<TasadoresEntidad> TasadoresConsultarInterno(String conexion, ParametrosConsultaEntidad entidad)
                {
                    List<TasadoresEntidad> retorno = new List<TasadoresEntidad>();
                    TasadoresEntidad elemento;
                    DataSet rowsAffected;

                    #region PARAMETROS

                    SqlParameter[] paramTransaccion = new SqlParameter[]
                    {
                       new SqlParameter("@piIndice_Inicio_Fila", entidad.IndiceInicioFila),
                       new SqlParameter("@piMaximo_Filas", entidad.MaximoFilas),
                       new SqlParameter("@psValores_Filtro", entidad.ValorFiltro),
                       new SqlParameter("@psColumnas_Filtros", entidad.ColumnaFiltro),
                       new SqlParameter("@psColumna_Ordenar", entidad.ColumnaOrdenar)
                    };

                    #endregion

                    try
                    {

                        #region CONSULTAR

                        rowsAffected = transaccionDA.TransaccionConsulta(conexion, "Tasadores_Consulta_Interno", paramTransaccion);
                        if (!rowsAffected.Equals(null))
                        {
                            foreach (DataRow dr in rowsAffected.Tables[0].Rows)
                            {
                                elemento = new TasadoresEntidad();
                                elemento.IdTasador = int.Parse(dr[0].ToString());
                                elemento.IdTipoPersona = int.Parse(dr[1].ToString());
                                elemento.CodTipoPersona = int.Parse(dr[2].ToString());
                                elemento.DesTipoPersona = dr[3].ToString();
                                elemento.CodTasador = dr[4].ToString();
                                elemento.DesNombreTasador = dr[5].ToString();
                                elemento.CodTipoTasador = dr[6].ToString();
                                elemento.DesTipoTasador = dr[7].ToString();

                                retorno.Add(elemento);
                            }
                        }

                        return retorno;

                        #endregion

                    }
                    catch (Exception)
                    {
                        throw;
                    }
                }
        
                public TasadoresEntidad TasadoresConsultarDetalle(String conexion, String conexionBitacora, TasadoresEntidad tasador, BitacorasEntidad _bitacora)
                {
                    TasadoresEntidad retorno = new TasadoresEntidad();
                    DataSet rowsAffected;

                    #region PARAMETROS

                    SqlParameter[] paramTransaccion = new SqlParameter[]
                        {
                            new SqlParameter("@piId_Tasador", tasador.IdTasador)
                        };

                    #endregion

                    #region KeyValuePair LIST

                    List<KeyValuePair<string, string>> itemConsulta = new List<KeyValuePair<string, string>>();
                    itemConsulta.Add(helper.CrearKeyValuePairItem("@piId_Tasador", tasador.IdTasador.ToString()));

                    #endregion

                    try
                    {

                        #region CONSULTAR DETALLE

                        rowsAffected = transaccionDA.TransaccionConsultaDetalle(conexion, conexionBitacora, "Tasadores_Consulta_Detalle", paramTransaccion, EnumTipoBitacora.CONSULTAR, itemConsulta, "Tasadores_Consulta_Detalle", _bitacora);
                        if (!rowsAffected.Equals(null))
                        {
                            retorno.IdTasador = int.Parse(rowsAffected.Tables[0].Rows[0][0].ToString());
                            retorno.IdTipoPersona = int.Parse(rowsAffected.Tables[0].Rows[0][1].ToString());
                            retorno.CodTipoPersona = int.Parse(rowsAffected.Tables[0].Rows[0][2].ToString());
                            retorno.DesTipoPersona = rowsAffected.Tables[0].Rows[0][3].ToString();
                            retorno.CodTasador = rowsAffected.Tables[0].Rows[0][4].ToString();
                            retorno.DesNombreTasador = rowsAffected.Tables[0].Rows[0][5].ToString();
                            retorno.CodTipoTasador = rowsAffected.Tables[0].Rows[0][6].ToString(); 
                            
                            retorno.IndMetodoInsercion = rowsAffected.Tables[0].Rows[0][7].ToString();
                            if (rowsAffected.Tables[0].Rows[0][8].ToString().Length > 0)
                                retorno.FechaIngreso = DateTime.Parse(rowsAffected.Tables[0].Rows[0][8].ToString());
                            else
                                retorno.FechaIngreso = null;
                            retorno.CodUsuarioIngreso = rowsAffected.Tables[0].Rows[0][9].ToString();
                            if (rowsAffected.Tables[0].Rows[0][10].ToString().Length > 0)
                                retorno.FechaUltimaModificacion = DateTime.Parse(rowsAffected.Tables[0].Rows[0][10].ToString());
                            else
                                retorno.FechaUltimaModificacion = null;
                            retorno.CodUsuarioUltimaModificacion = rowsAffected.Tables[0].Rows[0][11].ToString();
                            retorno.DesUsuarioIngreso = rowsAffected.Tables[0].Rows[0][12].ToString();
                            retorno.DesUsuarioUltimaModificacion = rowsAffected.Tables[0].Rows[0][13].ToString();
                        }

                        return retorno;

                        #endregion

                    }
                    catch (Exception)
                    {
                        throw;
                    }
                }
        
                public int TasadoresTotalFilas(String conexion, ParametrosTotalFilasEntidad entidad)
                {
                    int value;

                    #region PARAMETROS

                    SqlParameter[] paramTransaccion = new SqlParameter[]
                    {
                        new SqlParameter("@psValor_Filtro", entidad.ValorFiltro),
                        new SqlParameter("@psColumna_Filtro", entidad.ColumnaFiltro)
                    };

                    #endregion

                    try
                    {

                        #region TOTAL FILAS

                        value = transaccionDA.TransaccionRows(conexion, "Tasadores_Total_Filas", paramTransaccion);

                        return value;

                        #endregion

                    }
                    catch (Exception)
                    {
                        throw;
                    }
                }

                public int TasadoresTotalFilasInterno(String conexion, ParametrosTotalFilasEntidad entidad)
                {
                    int value;

                    #region PARAMETROS

                    SqlParameter[] paramTransaccion = new SqlParameter[]
                    {
                        new SqlParameter("@psValor_Filtro", entidad.ValorFiltro),
                        new SqlParameter("@psColumna_Filtro", entidad.ColumnaFiltro)
                    };

                    #endregion

                    try
                    {

                        #region TOTAL FILAS

                        value = transaccionDA.TransaccionRows(conexion, "Tasadores_Total_Filas_Interno", paramTransaccion);

                        return value;

                        #endregion

                    }
                    catch (Exception)
                    {
                        throw;
                    }
                }

            #endregion 

            #region TENENCIAS PRT15
        
                public RespuestaEntidad TenenciasPRT15Insertar(String conexion, String conexionBitacora, TenenciasPrt15Entidad TenenciaPrt15, BitacorasEntidad _bitacora)
                {
                    RespuestaEntidad elemento = null;
                    DataSet rowsAffected;

                    #region PARAMETROS

                    SqlParameter[] paramTransaccion = new SqlParameter[]
                    {
                        new SqlParameter("@piCod_Tenencia_PRT_15", TenenciaPrt15.CodTenenciaPrt15),
                        new SqlParameter("@psDes_Tenencia_PRT_15", TenenciaPrt15.DesTenenciaPrt15),
                        new SqlParameter("@psInd_Metodo_Insercion", TenenciaPrt15.IndMetodoInsercion),
                        new SqlParameter("@psCod_Usuario", TenenciaPrt15.CodUsuarioIngreso)
                    };

                    #endregion

                    try
                    {

                        #region INSERTAR

                        rowsAffected = transaccionDA.TransaccionInsertar(conexion, conexionBitacora, "Tenencias_Prt_15_Inserta", paramTransaccion, EnumTipoBitacora.INSERTAR, _bitacora);
                        if (!rowsAffected.Equals(null))
                        {
                            elemento = new RespuestaEntidad();
                            elemento.ValorEstado = int.Parse(rowsAffected.Tables[0].Rows[0][0].ToString());
                            elemento.ValorError = int.Parse(rowsAffected.Tables[0].Rows[0][1].ToString());
                        }

                        return elemento;

                        #endregion

                    }
                    catch (Exception)
                    {
                        throw;
                    }
                }
        
                public RespuestaEntidad TenenciasPRT15Modificar(String conexion, String conexionBitacora, TenenciasPrt15Entidad TenenciaPrt15, BitacorasEntidad _bitacora)
                {
                    RespuestaEntidad elemento = null;
                    DataSet rowsAffected;

                    #region PARAMETROS

                    SqlParameter[] paramTransaccion = new SqlParameter[]
                    {
                        new SqlParameter("@piId_Tenencia_PRT_15", TenenciaPrt15.IdTenenciaPrt15),
                        new SqlParameter("@piCod_Tenencia_PRT_15", TenenciaPrt15.CodTenenciaPrt15),
                        new SqlParameter("@psDes_Tenencia_PRT_15", TenenciaPrt15.DesTenenciaPrt15),
                        new SqlParameter("@psInd_Metodo_Insercion", TenenciaPrt15.IndMetodoInsercion),
                        new SqlParameter("@psCod_Usuario", TenenciaPrt15.CodUsuarioIngreso)
                    };

                    #endregion

                    #region KeyValuePair LIST

                    List<KeyValuePair<string, string>> itemConsulta = new List<KeyValuePair<string, string>>();
                    itemConsulta.Add(helper.CrearKeyValuePairItem("@piId_Tenencia_PRT_15", TenenciaPrt15.IdTenenciaPrt15.ToString()));

                    #endregion

                    try
                    {

                        #region MODIFICAR

                        rowsAffected = transaccionDA.TransaccionModificar(conexion, conexionBitacora, "Tenencias_Prt_15_Actualiza", paramTransaccion, EnumTipoBitacora.ACTUALIZAR, itemConsulta, "Tenencias_Prt_15_Consulta_Detalle", _bitacora);
                        if (!rowsAffected.Equals(null))
                        {
                            elemento = new RespuestaEntidad();
                            elemento.ValorEstado = int.Parse(rowsAffected.Tables[0].Rows[0][0].ToString());
                            elemento.ValorError = int.Parse(rowsAffected.Tables[0].Rows[0][1].ToString());
                        }

                        return elemento;

                        #endregion

                    }
                    catch (Exception)
                    {
                        throw;
                    }
                }
        
                public RespuestaEntidad TenenciasPRT15Eliminar(String conexion, String conexionBitacora, TenenciasPrt15Entidad TenenciaPrt15, BitacorasEntidad _bitacora)
                {
                    RespuestaEntidad elemento = null;
                    DataSet rowsAffected;

                    #region PARAMETROS

                    SqlParameter[] paramTransaccion = new SqlParameter[]
                    {
                        new SqlParameter("@piId_Tenencia_PRT_15", TenenciaPrt15.IdTenenciaPrt15)

                    };

                    #endregion

                    #region KeyValuePair LIST

                    List<KeyValuePair<string, string>> itemConsulta = new List<KeyValuePair<string, string>>();
                    itemConsulta.Add(helper.CrearKeyValuePairItem("@piId_Tenencia_PRT_15", TenenciaPrt15.IdTenenciaPrt15.ToString()));

                    #endregion

                    try
                    {

                        #region ELIMINAR

                        rowsAffected = transaccionDA.TransaccionEliminar(conexion, conexionBitacora, "Tenencias_Prt_15_Elimina", paramTransaccion, EnumTipoBitacora.ELIMINAR, itemConsulta, "Tenencias_Prt_15_Consulta_Detalle", _bitacora);
                        if (!rowsAffected.Equals(null))
                        {
                            elemento = new RespuestaEntidad();
                            elemento.ValorEstado = int.Parse(rowsAffected.Tables[0].Rows[0][0].ToString());
                            elemento.ValorError = int.Parse(rowsAffected.Tables[0].Rows[0][1].ToString());
                        }

                        return elemento;

                        #endregion

                    }
                    catch (Exception)
                    {
                        throw;
                    }
                }

                public List<TenenciasPrt15Entidad> TenenciasPRT15Consultar(String conexion, ParametrosConsultaEntidad entidad)
                {
                    List<TenenciasPrt15Entidad> retorno = new List<TenenciasPrt15Entidad>();
                    TenenciasPrt15Entidad elemento;
                    DataSet rowsAffected;

                    #region PARAMETROS

                    SqlParameter[] paramTransaccion = new SqlParameter[]
                    {
                       new SqlParameter("@piIndice_Inicio_Fila", entidad.IndiceInicioFila),
                       new SqlParameter("@piMaximo_Filas", entidad.MaximoFilas),
                       new SqlParameter("@psValores_Filtro", entidad.ValorFiltro),
                       new SqlParameter("@psColumnas_Filtros", entidad.ColumnaFiltro),
                       new SqlParameter("@psColumna_Ordenar", entidad.ColumnaOrdenar)
                    };

                    #endregion

                    try
                    {

                        #region CONSULTAR
                        
                            rowsAffected = transaccionDA.TransaccionConsulta(conexion, "Tenencias_Prt_15_Consulta", paramTransaccion);
                            if (!rowsAffected.Equals(null))
                            {
                                foreach (DataRow dr in rowsAffected.Tables[0].Rows)
                                {
                                    elemento = new TenenciasPrt15Entidad();
                                    elemento.IdTenenciaPrt15 = int.Parse(dr[0].ToString());
                                    elemento.CodTenenciaPrt15 = int.Parse(dr[1].ToString());
                                    elemento.DesTenenciaPrt15 = dr[2].ToString();

                                    retorno.Add(elemento);
                                }
                            }

                            return retorno;

                        #endregion

                    }
                    catch (Exception)
                    {
                        throw;
                    }
                }
        
                public TenenciasPrt15Entidad TenenciasPRT15ConsultarDetalle(String conexion, String conexionBitacora, TenenciasPrt15Entidad TenenciaPrt15, BitacorasEntidad _bitacora)
                {
                    TenenciasPrt15Entidad retorno = new TenenciasPrt15Entidad();
                    DataSet rowsAffected;

                    #region PARAMETROS

                    SqlParameter[] paramTransaccion = new SqlParameter[]
                    {
                        new SqlParameter("@piId_Tenencia_PRT_15", TenenciaPrt15.IdTenenciaPrt15)
                    };

                    #endregion

                    #region KeyValuePair LIST

                    List<KeyValuePair<string, string>> itemConsulta = new List<KeyValuePair<string, string>>();
                    itemConsulta.Add(helper.CrearKeyValuePairItem("@piId_Tenencia_PRT_15", TenenciaPrt15.IdTenenciaPrt15.ToString()));

                    #endregion

                    try
                    {

                        #region CONSULTAR DETALLE

                        rowsAffected = transaccionDA.TransaccionConsultaDetalle(conexion, conexionBitacora, "Tenencias_Prt_15_Consulta_Detalle", paramTransaccion, EnumTipoBitacora.CONSULTAR, itemConsulta, "Tenencias_Prt_15_Consulta_Detalle", _bitacora);
                        if (!rowsAffected.Equals(null))
                        {
                            retorno.IdTenenciaPrt15 = int.Parse(rowsAffected.Tables[0].Rows[0][0].ToString());
                            retorno.CodTenenciaPrt15 = int.Parse(rowsAffected.Tables[0].Rows[0][1].ToString());
                            retorno.DesTenenciaPrt15 = rowsAffected.Tables[0].Rows[0][2].ToString();
                            retorno.IndMetodoInsercion = rowsAffected.Tables[0].Rows[0][3].ToString();
                            if (rowsAffected.Tables[0].Rows[0][4].ToString().Length > 0)
                                retorno.FechaIngreso = DateTime.Parse(rowsAffected.Tables[0].Rows[0][4].ToString());
                            else
                                retorno.FechaIngreso = null;
                            retorno.CodUsuarioIngreso = rowsAffected.Tables[0].Rows[0][5].ToString();
                            if (rowsAffected.Tables[0].Rows[0][6].ToString().Length > 0)
                                retorno.FechaUltimaModificacion = DateTime.Parse(rowsAffected.Tables[0].Rows[0][6].ToString());
                            else
                                retorno.FechaUltimaModificacion = null;
                            retorno.CodUsuarioUltimaModificacion = rowsAffected.Tables[0].Rows[0][7].ToString();
                            retorno.DesUsuarioIngreso = rowsAffected.Tables[0].Rows[0][8].ToString();
                            retorno.DesUsuarioUltimaModificacion = rowsAffected.Tables[0].Rows[0][9].ToString();
                        }

                        return retorno;

                        #endregion

                    }
                    catch (Exception)
                    {
                        throw;
                    }
                }
        
                public int TenenciasPRT15TotalFilas(String conexion, ParametrosTotalFilasEntidad entidad)
                {

                    int value;

                    #region PARAMETROS

                    SqlParameter[] paramTransaccion = new SqlParameter[]
                    {                        
                        new SqlParameter("@psValor_Filtro", entidad.ValorFiltro),
                        new SqlParameter("@psColumna_Filtro", entidad.ColumnaFiltro)
                    };

                    #endregion

                    try
                    {

                        #region TOTAL FILAS
                        
                            value = transaccionDA.TransaccionRows(conexion, "Tenencias_Prt_15_Total_Filas", paramTransaccion);

                            return value;

                        #endregion

                    }
                    catch (Exception)
                    {
                        throw;
                    }
                }
                //REQUERIMIENTO: 1-24493227
                public List<ListaEntidad> TenenciasPRT15Lista(String conexion, String filtro)
                {
                    List<ListaEntidad> retorno = new List<ListaEntidad>();
                    ListaEntidad elemento;
                    DataSet rowsAffected;

                    #region PARAMETROS

                    SqlParameter[] paramTransaccion = new SqlParameter[]
                    {
                        new SqlParameter("@psFiltro", filtro)
                    };

                    #endregion

                    try
                    {

                        #region LISTA

                        rowsAffected = transaccionDA.TransaccionConsulta(conexion, "Tenencias_Prt_15_Lista", paramTransaccion);
                        if (!rowsAffected.Equals(null))
                        {
                            foreach (DataRow dr in rowsAffected.Tables[0].Rows)
                            {
                                elemento = new ListaEntidad();
                                elemento.Valor = dr[0].ToString();
                                elemento.Texto = dr[1].ToString();

                                retorno.Add(elemento);
                            }
                        }
                        return retorno;

                        #endregion

                    }
                    catch (Exception)
                    {
                        throw;
                    }
                }        

            #endregion 

            #region TENENCIAS PRT17
        
                public RespuestaEntidad TenenciasPRT17Insertar(String conexion, String conexionBitacora, TenenciasPrt17Entidad TenenciaPrt17, BitacorasEntidad _bitacora)
                {
                    RespuestaEntidad elemento = null;
                    DataSet rowsAffected;

                    #region PARAMETROS

                    SqlParameter[] paramTransaccion = new SqlParameter[]
                        {
                            new SqlParameter("@piCod_Tenencia_PRT_17", TenenciaPrt17.CodTenenciaPrt17),
                            new SqlParameter("@psDes_Tenencia_PRT_17", TenenciaPrt17.DesTenenciaPrt17),
                            new SqlParameter("@psInd_Metodo_Insercion", TenenciaPrt17.IndMetodoInsercion),
                            new SqlParameter("@psCod_Usuario", TenenciaPrt17.CodUsuarioIngreso)
                        };

                    #endregion

                    try
                    {

                        #region INSERTAR

                        rowsAffected = transaccionDA.TransaccionInsertar(conexion, conexionBitacora, "Tenencias_Prt_17_Inserta", paramTransaccion, EnumTipoBitacora.INSERTAR, _bitacora);
                        if (!rowsAffected.Equals(null))
                        {
                            elemento = new RespuestaEntidad();
                            elemento.ValorEstado = int.Parse(rowsAffected.Tables[0].Rows[0][0].ToString());
                            elemento.ValorError = int.Parse(rowsAffected.Tables[0].Rows[0][1].ToString());
                        }

                        return elemento;

                        #endregion

                    }
                    catch (Exception)
                    {
                        throw;
                    }
                }
        
                public RespuestaEntidad TenenciasPRT17Modificar(String conexion, String conexionBitacora, TenenciasPrt17Entidad TenenciaPrt17, BitacorasEntidad _bitacora)
                {
                    RespuestaEntidad elemento = null;
                    DataSet rowsAffected;

                    #region PARAMETROS

                    SqlParameter[] paramTransaccion = new SqlParameter[]
                        {
                            new SqlParameter("@piId_Tenencia_PRT_17", TenenciaPrt17.IdTenenciaPrt17),
                            new SqlParameter("@piCod_Tenencia_PRT_17", TenenciaPrt17.CodTenenciaPrt17),
                            new SqlParameter("@psDes_Tenencia_PRT_17", TenenciaPrt17.DesTenenciaPrt17),
                            new SqlParameter("@psInd_Metodo_Insercion", TenenciaPrt17.IndMetodoInsercion),
                            new SqlParameter("@psCod_Usuario", TenenciaPrt17.CodUsuarioIngreso)
                        };

                    #endregion

                    #region KeyValuePair LIST

                    List<KeyValuePair<string, string>> itemConsulta = new List<KeyValuePair<string, string>>();
                    itemConsulta.Add(helper.CrearKeyValuePairItem("@piId_Tenencia_PRT_17", TenenciaPrt17.IdTenenciaPrt17.ToString()));

                    #endregion

                    try
                    {

                        #region MODIFICAR

                        rowsAffected = transaccionDA.TransaccionModificar(conexion, conexionBitacora, "Tenencias_Prt_17_Actualiza", paramTransaccion, EnumTipoBitacora.ACTUALIZAR, itemConsulta, "Tenencias_Prt_17_Consulta_Detalle", _bitacora);
                        if (!rowsAffected.Equals(null))
                        {
                            elemento = new RespuestaEntidad();
                            elemento.ValorEstado = int.Parse(rowsAffected.Tables[0].Rows[0][0].ToString());
                            elemento.ValorError = int.Parse(rowsAffected.Tables[0].Rows[0][1].ToString());
                        }

                        return elemento;

                        #endregion

                    }
                    catch (Exception)
                    {
                        throw;
                    }
                }
        
                public RespuestaEntidad TenenciasPRT17Eliminar(String conexion, String conexionBitacora, TenenciasPrt17Entidad TenenciaPrt17, BitacorasEntidad _bitacora)
                {
                    RespuestaEntidad elemento = null;
                    DataSet rowsAffected;

                    #region PARAMETROS

                    SqlParameter[] paramTransaccion = new SqlParameter[]
                        {
                            new SqlParameter("@piId_Tenencia_PRT_17", TenenciaPrt17.IdTenenciaPrt17)
                        };

                    #endregion

                    #region KeyValuePair LIST

                    List<KeyValuePair<string, string>> itemConsulta = new List<KeyValuePair<string, string>>();
                    itemConsulta.Add(helper.CrearKeyValuePairItem("@piId_Tenencia_PRT_17", TenenciaPrt17.IdTenenciaPrt17.ToString()));

                    #endregion

                    try
                    {

                        #region ELIMINAR

                        rowsAffected = transaccionDA.TransaccionEliminar(conexion, conexionBitacora, "Tenencias_Prt_17_Elimina", paramTransaccion, EnumTipoBitacora.ELIMINAR, itemConsulta, "Tenencias_Prt_17_Consulta_Detalle", _bitacora);
                        if (!rowsAffected.Equals(null))
                        {
                            elemento = new RespuestaEntidad();
                            elemento.ValorEstado = int.Parse(rowsAffected.Tables[0].Rows[0][0].ToString());
                            elemento.ValorError = int.Parse(rowsAffected.Tables[0].Rows[0][1].ToString());
                        }

                        return elemento;

                        #endregion

                    }
                    catch (Exception)
                    {
                        throw;
                    }
                }

                public List<TenenciasPrt17Entidad> TenenciasPRT17Consultar(String conexion, ParametrosConsultaEntidad entidad)
                {
                    List<TenenciasPrt17Entidad> retorno = new List<TenenciasPrt17Entidad>();
                    TenenciasPrt17Entidad elemento;
                    DataSet rowsAffected;

                    #region PARAMETROS


                    SqlParameter[] paramTransaccion = new SqlParameter[]
                    {
                       new SqlParameter("@piIndice_Inicio_Fila", entidad.IndiceInicioFila),
                       new SqlParameter("@piMaximo_Filas", entidad.MaximoFilas),
                       new SqlParameter("@psValores_Filtro", entidad.ValorFiltro),
                       new SqlParameter("@psColumnas_Filtros", entidad.ColumnaFiltro),
                       new SqlParameter("@psColumna_Ordenar", entidad.ColumnaOrdenar)
                    };

                    #endregion

                    try
                    {

                        #region CONSULTAR

                            rowsAffected = transaccionDA.TransaccionConsulta(conexion, "Tenencias_Prt_17_Consulta", paramTransaccion);
                            if (!rowsAffected.Equals(null))
                            {
                                foreach (DataRow dr in rowsAffected.Tables[0].Rows)
                                {
                                    elemento = new TenenciasPrt17Entidad();
                                    elemento.IdTenenciaPrt17 = int.Parse(dr[0].ToString());
                                    elemento.CodTenenciaPrt17 = int.Parse(dr[1].ToString());
                                    elemento.DesTenenciaPrt17 = dr[2].ToString();

                                    retorno.Add(elemento);
                                }
                            }

                            return retorno;

                        #endregion

                    }
                    catch (Exception)
                    {
                        throw;
                    }
                }
        
                public TenenciasPrt17Entidad TenenciasPRT17ConsultarDetalle(String conexion, String conexionBitacora, TenenciasPrt17Entidad TenenciaPrt17, BitacorasEntidad _bitacora)
                {
                    TenenciasPrt17Entidad retorno = new TenenciasPrt17Entidad();
                    DataSet rowsAffected;

                    #region PARAMETROS

                    SqlParameter[] paramTransaccion = new SqlParameter[]
                        {
                            new SqlParameter("@piId_Tenencia_PRT_17", TenenciaPrt17.IdTenenciaPrt17)
                        };

                    #endregion

                    #region KeyValuePair LIST

                    List<KeyValuePair<string, string>> itemConsulta = new List<KeyValuePair<string, string>>();
                    itemConsulta.Add(helper.CrearKeyValuePairItem("@piId_Tenencia_PRT_17", TenenciaPrt17.IdTenenciaPrt17.ToString()));

                    #endregion

                    try
                    {

                        #region CONSULTAR DETALLE

                        rowsAffected = transaccionDA.TransaccionConsultaDetalle(conexion, conexionBitacora, "Tenencias_Prt_17_Consulta_Detalle", paramTransaccion, EnumTipoBitacora.CONSULTAR, itemConsulta, "Tenencias_Prt_17_Consulta_Detalle", _bitacora);
                        if (!rowsAffected.Equals(null))
                        {
                            retorno.IdTenenciaPrt17 = int.Parse(rowsAffected.Tables[0].Rows[0][0].ToString());
                            retorno.CodTenenciaPrt17 = int.Parse(rowsAffected.Tables[0].Rows[0][1].ToString());
                            retorno.DesTenenciaPrt17 = rowsAffected.Tables[0].Rows[0][2].ToString();
                            retorno.IndMetodoInsercion = rowsAffected.Tables[0].Rows[0][3].ToString();
                            if (rowsAffected.Tables[0].Rows[0][4].ToString().Length > 0)
                                retorno.FechaIngreso = DateTime.Parse(rowsAffected.Tables[0].Rows[0][4].ToString());
                            else
                                retorno.FechaIngreso = null;
                            retorno.CodUsuarioIngreso = rowsAffected.Tables[0].Rows[0][5].ToString();
                            if (rowsAffected.Tables[0].Rows[0][6].ToString().Length > 0)
                                retorno.FechaUltimaModificacion = DateTime.Parse(rowsAffected.Tables[0].Rows[0][6].ToString());
                            else
                                retorno.FechaUltimaModificacion = null;
                            retorno.CodUsuarioUltimaModificacion = rowsAffected.Tables[0].Rows[0][7].ToString();
                            retorno.DesUsuarioIngreso = rowsAffected.Tables[0].Rows[0][8].ToString();
                            retorno.DesUsuarioUltimaModificacion = rowsAffected.Tables[0].Rows[0][9].ToString();
                        }

                        return retorno;

                        #endregion

                    }
                    catch (Exception)
                    {
                        throw;
                    }
                }
        
                public int TenenciasPRT17TotalFilas(String conexion, ParametrosTotalFilasEntidad entidad)
                {

                    int value;

                    #region PARAMETROS

                    SqlParameter[] paramTransaccion = new SqlParameter[]
                    {
                        new SqlParameter("@psValor_Filtro", entidad.ValorFiltro),
                        new SqlParameter("@psColumna_Filtro", entidad.ColumnaFiltro)
                    };

                    #endregion

                    try
                    {

                        #region TOTAL FILAS

                            value = transaccionDA.TransaccionRows(conexion, "Tenencias_Prt_17_Total_Filas", paramTransaccion);

                            return value;

                        #endregion

                    }
                    catch (Exception)
                    {
                        throw;
                    }
                }
                //REQUERIMIENTO: 1-24493227
                public List<ListaEntidad> TenenciasPRT17Lista(String conexion, String filtro)
                {
                    List<ListaEntidad> retorno = new List<ListaEntidad>();
                    ListaEntidad elemento;
                    DataSet rowsAffected;

                    #region PARAMETROS

                    SqlParameter[] paramTransaccion = new SqlParameter[]
                    {
                        new SqlParameter("@psFiltro", filtro)
                    };

                    #endregion

                    try
                    {

                        #region LISTA

                        rowsAffected = transaccionDA.TransaccionConsulta(conexion, "Tenencias_Prt_17_Lista", paramTransaccion);
                        if (!rowsAffected.Equals(null))
                        {
                            foreach (DataRow dr in rowsAffected.Tables[0].Rows)
                            {
                                elemento = new ListaEntidad();
                                elemento.Valor = dr[0].ToString();
                                elemento.Texto = dr[1].ToString();

                                retorno.Add(elemento);
                            }
                        }
                        return retorno;

                        #endregion

                    }
                    catch (Exception)
                    {
                        throw;
                    }
                }        
            #endregion 

            #region TIPOS ADJUDICACIONES BIENES
        
                public RespuestaEntidad TiposAdjudicacionesBienesInsertar(String conexion, String conexionBitacora, TiposAdjudicacionesBienesEntidad tipoAdjudicacionBien, BitacorasEntidad _bitacora)
                {
                    RespuestaEntidad elemento = null;
                    DataSet rowsAffected;

                    #region PARAMETROS

                    SqlParameter[] paramTransaccion = new SqlParameter[]
                    {
                        new SqlParameter("@piCod_Tipo_Adjudicacion_Bien", tipoAdjudicacionBien.CodTipoAdjudicacionBien),
                        new SqlParameter("@psDes_Tipo_Adjudicacion_Bien", tipoAdjudicacionBien.DesTipoAdjudicacionBien),
                        new SqlParameter("@psInd_Metodo_Insercion", tipoAdjudicacionBien.IndMetodoInsercion),
                        new SqlParameter("@psCod_Usuario", tipoAdjudicacionBien.CodUsuarioIngreso)
                    };

                    #endregion

                    try
                    {

                        #region INSERTAR

                        rowsAffected = transaccionDA.TransaccionInsertar(conexion, conexionBitacora, "Tipos_Adjudicaciones_Bienes_Inserta", paramTransaccion, EnumTipoBitacora.INSERTAR, _bitacora);
                        if (!rowsAffected.Equals(null))
                        {
                            elemento = new RespuestaEntidad();
                            elemento.ValorEstado = int.Parse(rowsAffected.Tables[0].Rows[0][0].ToString());
                            elemento.ValorError = int.Parse(rowsAffected.Tables[0].Rows[0][1].ToString());
                        }

                        return elemento; ;

                        #endregion

                    }
                    catch (Exception)
                    {
                        throw;
                    }
                }
        
                public RespuestaEntidad TiposAdjudicacionesBienesModificar(String conexion, String conexionBitacora, TiposAdjudicacionesBienesEntidad tipoAdjudicacionBien, BitacorasEntidad _bitacora)
                {
                    RespuestaEntidad elemento = null;
                    DataSet rowsAffected;

                    #region PARAMETROS

                    SqlParameter[] paramTransaccion = new SqlParameter[]
                    {
                        new SqlParameter("@piId_Tipo_Adjudicacion_Bien", tipoAdjudicacionBien.IdTipoAdjudicacionBien),
                        new SqlParameter("@piCod_Tipo_Adjudicacion_Bien", tipoAdjudicacionBien.CodTipoAdjudicacionBien),
                        new SqlParameter("@psDes_Tipo_Adjudicacion_Bien", tipoAdjudicacionBien.DesTipoAdjudicacionBien),
                        new SqlParameter("@psInd_Metodo_Insercion", tipoAdjudicacionBien.IndMetodoInsercion),
                        new SqlParameter("@psCod_Usuario", tipoAdjudicacionBien.CodUsuarioIngreso)
                    };

                    #endregion

                    #region KeyValuePair LIST

                    List<KeyValuePair<string, string>> itemConsulta = new List<KeyValuePair<string, string>>();
                    itemConsulta.Add(helper.CrearKeyValuePairItem("@piId_Tipo_Adjudicacion_Bien", tipoAdjudicacionBien.IdTipoAdjudicacionBien.ToString()));

                    #endregion

                    try
                    {

                        #region MODIFICAR

                        rowsAffected = transaccionDA.TransaccionModificar(conexion, conexionBitacora, "Tipos_Adjudicaciones_Bienes_Actualiza", paramTransaccion, EnumTipoBitacora.ACTUALIZAR, itemConsulta, "Tipos_Adjudicaciones_Bienes_Consulta_Detalle", _bitacora);
                        if (!rowsAffected.Equals(null))
                        {
                            elemento = new RespuestaEntidad();
                            elemento.ValorEstado = int.Parse(rowsAffected.Tables[0].Rows[0][0].ToString());
                            elemento.ValorError = int.Parse(rowsAffected.Tables[0].Rows[0][1].ToString());
                        }

                        return elemento;

                        #endregion

                    }
                    catch (Exception)
                    {
                        throw;
                    }
                }
        
                public RespuestaEntidad TiposAdjudicacionesBienesEliminar(String conexion, String conexionBitacora, TiposAdjudicacionesBienesEntidad tipoAdjudicacionBien, BitacorasEntidad _bitacora)
                {
                    RespuestaEntidad elemento = null;
                    DataSet rowsAffected;

                    #region PARAMETROS

                    SqlParameter[] paramTransaccion = new SqlParameter[]
                    {
                        new SqlParameter("@piId_Tipo_Adjudicacion_Bien", tipoAdjudicacionBien.IdTipoAdjudicacionBien)
                    };

                    #endregion

                    #region KeyValuePair LIST

                    List<KeyValuePair<string, string>> itemConsulta = new List<KeyValuePair<string, string>>();
                    itemConsulta.Add(helper.CrearKeyValuePairItem("@piId_Tipo_Adjudicacion_Bien", tipoAdjudicacionBien.IdTipoAdjudicacionBien.ToString()));

                    #endregion

                    try
                    {

                        #region ELIMINAR

                        rowsAffected = transaccionDA.TransaccionEliminar(conexion, conexionBitacora, "Tipos_Adjudicaciones_Bienes_Elimina", paramTransaccion, EnumTipoBitacora.ELIMINAR, itemConsulta, "Tipos_Adjudicaciones_Bienes_Consulta_Detalle", _bitacora);
                        if (!rowsAffected.Equals(null))
                        {
                            elemento = new RespuestaEntidad();
                            elemento.ValorEstado = int.Parse(rowsAffected.Tables[0].Rows[0][0].ToString());
                            elemento.ValorError = int.Parse(rowsAffected.Tables[0].Rows[0][1].ToString());
                        }

                        return elemento;

                        #endregion

                    }
                    catch (Exception)
                    {
                        throw;
                    }
                }

                public List<TiposAdjudicacionesBienesEntidad> TiposAdjudicacionesBienesConsultar(String conexion, ParametrosConsultaEntidad entidad)
                {
                    List<TiposAdjudicacionesBienesEntidad> retorno = new List<TiposAdjudicacionesBienesEntidad>();
                    TiposAdjudicacionesBienesEntidad elemento;
                    DataSet rowsAffected;
                    
                    #region PARAMETROS

                    SqlParameter[] paramTransaccion = new SqlParameter[]
                    {
                       new SqlParameter("@piIndice_Inicio_Fila", entidad.IndiceInicioFila),
                       new SqlParameter("@piMaximo_Filas", entidad.MaximoFilas),
                       new SqlParameter("@psValores_Filtro", entidad.ValorFiltro),
                       new SqlParameter("@psColumnas_Filtros", entidad.ColumnaFiltro),
                       new SqlParameter("@psColumna_Ordenar", entidad.ColumnaOrdenar)
                    };

                    #endregion

                    try
                    {

                        #region CONSULTAR

                            rowsAffected = transaccionDA.TransaccionConsulta(conexion, "Tipos_Adjudicaciones_Bienes_Consulta", paramTransaccion);
                            if (!rowsAffected.Equals(null))
                            {
                                foreach (DataRow dr in rowsAffected.Tables[0].Rows)
                                {
                                    elemento = new TiposAdjudicacionesBienesEntidad();
                                    elemento.IdTipoAdjudicacionBien = int.Parse(dr[0].ToString());
                                    elemento.CodTipoAdjudicacionBien = int.Parse(dr[1].ToString());
                                    elemento.DesTipoAdjudicacionBien = dr[2].ToString();

                                    retorno.Add(elemento);
                                }
                            }

                            return retorno;

                        #endregion

                    }
                    catch (Exception)
                    {
                        throw;
                    }
                }
        
                public TiposAdjudicacionesBienesEntidad TiposAdjudicacionesBienesConsultarDetalle(String conexion, String conexionBitacora, TiposAdjudicacionesBienesEntidad tipoAdjudicacionBien, BitacorasEntidad _bitacora)
                {
                    TiposAdjudicacionesBienesEntidad retorno = new TiposAdjudicacionesBienesEntidad();
                    DataSet rowsAffected;

                    #region PARAMETROS

                    SqlParameter[] paramTransaccion = new SqlParameter[]
                    {
                        new SqlParameter("@piId_Tipo_Adjudicacion_Bien", tipoAdjudicacionBien.IdTipoAdjudicacionBien)
                    };

                    #endregion

                    #region KeyValuePair LIST

                    List<KeyValuePair<string, string>> itemConsulta = new List<KeyValuePair<string, string>>();
                    itemConsulta.Add(helper.CrearKeyValuePairItem("@piId_Tipo_Adjudicacion_Bien", tipoAdjudicacionBien.IdTipoAdjudicacionBien.ToString()));

                    #endregion

                    try
                    {

                        #region CONSULTAR DETALLE

                        rowsAffected = transaccionDA.TransaccionConsultaDetalle(conexion, conexionBitacora, "Tipos_Adjudicaciones_Bienes_Consulta_Detalle", paramTransaccion, EnumTipoBitacora.CONSULTAR, itemConsulta, "Tipos_Adjudicaciones_Bienes_Consulta_Detalle", _bitacora);
                        if (!rowsAffected.Equals(null))
                        {
                            retorno.IdTipoAdjudicacionBien = int.Parse(rowsAffected.Tables[0].Rows[0][0].ToString());
                            retorno.CodTipoAdjudicacionBien = int.Parse(rowsAffected.Tables[0].Rows[0][1].ToString());
                            retorno.DesTipoAdjudicacionBien = rowsAffected.Tables[0].Rows[0][2].ToString();
                            retorno.IndMetodoInsercion = rowsAffected.Tables[0].Rows[0][3].ToString();
                            if (rowsAffected.Tables[0].Rows[0][4].ToString().Length > 0)
                                retorno.FechaIngreso = DateTime.Parse(rowsAffected.Tables[0].Rows[0][4].ToString());
                            else
                                retorno.FechaIngreso = null;
                            retorno.CodUsuarioIngreso = rowsAffected.Tables[0].Rows[0][5].ToString();
                            if (rowsAffected.Tables[0].Rows[0][6].ToString().Length > 0)
                                retorno.FechaUltimaModificacion = DateTime.Parse(rowsAffected.Tables[0].Rows[0][6].ToString());
                            else
                                retorno.FechaUltimaModificacion = null;
                            retorno.CodUsuarioUltimaModificacion = rowsAffected.Tables[0].Rows[0][7].ToString();
                            retorno.DesUsuarioIngreso = rowsAffected.Tables[0].Rows[0][8].ToString();
                            retorno.DesUsuarioUltimaModificacion = rowsAffected.Tables[0].Rows[0][9].ToString();
                        }

                        return retorno;

                        #endregion

                    }
                    catch (Exception)
                    {
                        throw;
                    }
                }
        
                public int TiposAdjudicacionesBienesTotalFilas(String conexion, ParametrosTotalFilasEntidad entidad)
                {

                    int value;

                    #region PARAMETROS

                    SqlParameter[] paramTransaccion = new SqlParameter[]
                    {
                        new SqlParameter("@psValor_Filtro", entidad.ValorFiltro),
                        new SqlParameter("@psColumna_Filtro", entidad.ColumnaFiltro)
                    };

                    #endregion

                    try
                    {

                        #region TOTAL FILAS

                            value = transaccionDA.TransaccionRows(conexion, "Tipos_Adjudicaciones_Bienes_Total_Filas", paramTransaccion);

                            return value;

                        #endregion

                    }
                    catch (Exception)
                    {
                        throw;
                    }
                }

            #endregion 
        
            #region TIPOS ALMACENES

                public List<ListaEntidad> TiposAlmacenesLista(String conexion, String filtro)
                {
                    List<ListaEntidad> retorno = new List<ListaEntidad>();
                    ListaEntidad elemento;
                    DataSet rowsAffected;

                    #region PARAMETROS

                    SqlParameter[] paramTransaccion = new SqlParameter[]
                    {
                        new SqlParameter("@psFiltro", filtro)
                    };

                    #endregion

                    try
                    {

                        #region LISTA

                        rowsAffected = transaccionDA.TransaccionConsulta(conexion, "Tipos_Almacenes_Lista", paramTransaccion);
                        if (!rowsAffected.Equals(null))
                        {
                            foreach (DataRow dr in rowsAffected.Tables[0].Rows)
                            {
                                elemento = new ListaEntidad();
                                elemento.Valor = dr[0].ToString();
                                elemento.Texto = dr[1].ToString();

                                retorno.Add(elemento);
                            }
                        }
                        return retorno;

                        #endregion

                    }
                    catch (Exception)
                    {
                        throw;
                    }
                }

            #endregion

            #region TIPOS ASIGNACIONES CALIFICACIONES

                public RespuestaEntidad TiposAsignacionesCalificacionesInsertar(String conexion, String conexionBitacora, TiposAsignacionesCalificacionesEntidad tipoAsignacionCalificacion, BitacorasEntidad _bitacora)
                {
                    RespuestaEntidad elemento = null;
                    DataSet rowsAffected;

                    #region PARAMETROS

                    SqlParameter[] paramTransaccion = new SqlParameter[]
                    {
                        new SqlParameter("@piCod_Tipo_Asignacion_Calificacion", tipoAsignacionCalificacion.CodTipoAsignacionCalificacion),
                        new SqlParameter("@psDes_Tipo_Asignacion_Calificacion", tipoAsignacionCalificacion.DesTipoAsignacionCalificacion),
                        new SqlParameter("@psInd_Metodo_Insercion", tipoAsignacionCalificacion.IndMetodoInsercion),
                        new SqlParameter("@psCod_Usuario", tipoAsignacionCalificacion.CodUsuarioIngreso)
                    };

                    #endregion

                    try
                    {

                        #region INSERTAR

                        rowsAffected = transaccionDA.TransaccionInsertar(conexion, conexionBitacora, "Tipos_Asignaciones_Calificaciones_Inserta", paramTransaccion, EnumTipoBitacora.INSERTAR, _bitacora);
                        if (!rowsAffected.Equals(null))
                        {
                            elemento = new RespuestaEntidad();
                            elemento.ValorEstado = int.Parse(rowsAffected.Tables[0].Rows[0][0].ToString());
                            elemento.ValorError = int.Parse(rowsAffected.Tables[0].Rows[0][1].ToString());
                        }

                        return elemento;

                        #endregion

                    }
                    catch (Exception)
                    {
                        throw;
                    }
                }
        
                public RespuestaEntidad TiposAsignacionesCalificacionesModificar(String conexion, String conexionBitacora, TiposAsignacionesCalificacionesEntidad tipoAsignacionCalificacion, BitacorasEntidad _bitacora)
                {
                    RespuestaEntidad elemento = null;
                    DataSet rowsAffected;

                    #region PARAMETROS

                    SqlParameter[] paramTransaccion = new SqlParameter[]
                    {
                        new SqlParameter("@piId_Tipo_Asignacion_Calificacion", tipoAsignacionCalificacion.IdTipoAsignacionCalificacion),
                        new SqlParameter("@piCod_Tipo_Asignacion_Calificacion", tipoAsignacionCalificacion.CodTipoAsignacionCalificacion),
                        new SqlParameter("@psDes_Tipo_Asignacion_Calificacion", tipoAsignacionCalificacion.DesTipoAsignacionCalificacion),
                        new SqlParameter("@psInd_Metodo_Insercion", tipoAsignacionCalificacion.IndMetodoInsercion),
                        new SqlParameter("@psCod_Usuario", tipoAsignacionCalificacion.CodUsuarioIngreso)
                    };

                    #endregion

                    #region KeyValuePair LIST

                    List<KeyValuePair<string, string>> itemConsulta = new List<KeyValuePair<string, string>>();
                    itemConsulta.Add(helper.CrearKeyValuePairItem("@piId_Tipo_Asignacion_Calificacion", tipoAsignacionCalificacion.IdTipoAsignacionCalificacion.ToString()));

                    #endregion

                    try
                    {

                        #region MODIFICAR

                        rowsAffected = transaccionDA.TransaccionModificar(conexion, conexionBitacora, "Tipos_Asignaciones_Calificaciones_Actualiza", paramTransaccion, EnumTipoBitacora.ACTUALIZAR, itemConsulta, "Tipos_Asignaciones_Calificaciones_Consulta_Detalle", _bitacora);
                        if (!rowsAffected.Equals(null))
                        {
                            elemento = new RespuestaEntidad();
                            elemento.ValorEstado = int.Parse(rowsAffected.Tables[0].Rows[0][0].ToString());
                            elemento.ValorError = int.Parse(rowsAffected.Tables[0].Rows[0][1].ToString());
                        }

                        return elemento;

                        #endregion

                    }
                    catch (Exception)
                    {
                        throw;
                    }
                }
        
                public RespuestaEntidad TiposAsignacionesCalificacionesEliminar(String conexion, String conexionBitacora, TiposAsignacionesCalificacionesEntidad tipoAsignacionCalificacion, BitacorasEntidad _bitacora)
                {
                    RespuestaEntidad elemento = null;
                    DataSet rowsAffected; 

                    #region PARAMETROS

                    SqlParameter[] paramTransaccion = new SqlParameter[]
                    {
                        new SqlParameter("@piId_Tipo_Asignacion_Calificacion", tipoAsignacionCalificacion.IdTipoAsignacionCalificacion)
                    };

                    #endregion

                    #region KeyValuePair LIST

                    List<KeyValuePair<string, string>> itemConsulta = new List<KeyValuePair<string, string>>();
                    itemConsulta.Add(helper.CrearKeyValuePairItem("@piId_Tipo_Asignacion_Calificacion", tipoAsignacionCalificacion.IdTipoAsignacionCalificacion.ToString()));

                    #endregion

                    try
                    {

                        #region ELIMINAR

                        rowsAffected = transaccionDA.TransaccionEliminar(conexion, conexionBitacora, "Tipos_Asignaciones_Calificaciones_Elimina", paramTransaccion, EnumTipoBitacora.ELIMINAR, itemConsulta, "Tipos_Asignaciones_Calificaciones_Consulta_Detalle", _bitacora);
                        if (!rowsAffected.Equals(null))
                        {
                            elemento = new RespuestaEntidad();
                            elemento.ValorEstado = int.Parse(rowsAffected.Tables[0].Rows[0][0].ToString());
                            elemento.ValorError = int.Parse(rowsAffected.Tables[0].Rows[0][1].ToString());
                        }

                        return elemento;

                        #endregion

                    }
                    catch (Exception)
                    {
                        throw;
                    }
                }

                public List<TiposAsignacionesCalificacionesEntidad> TiposAsignacionesCalificacionesConsultar(String conexion, ParametrosConsultaEntidad entidad)
                {
                    List<TiposAsignacionesCalificacionesEntidad> retorno = new List<TiposAsignacionesCalificacionesEntidad>();
                    TiposAsignacionesCalificacionesEntidad elemento;
                    DataSet rowsAffected;

                    #region PARAMETROS

                    SqlParameter[] paramTransaccion = new SqlParameter[]
                    {
                       new SqlParameter("@piIndice_Inicio_Fila", entidad.IndiceInicioFila),
                       new SqlParameter("@piMaximo_Filas", entidad.MaximoFilas),
                       new SqlParameter("@psValores_Filtro", entidad.ValorFiltro),
                       new SqlParameter("@psColumnas_Filtros", entidad.ColumnaFiltro),
                       new SqlParameter("@psColumna_Ordenar", entidad.ColumnaOrdenar)
                    };

                    #endregion

                    try
                    {

                        #region CONSULTAR

                            rowsAffected = transaccionDA.TransaccionConsulta(conexion, "Tipos_Asignaciones_Calificaciones_Consulta", paramTransaccion);
                            if (!rowsAffected.Equals(null))
                            {
                                foreach (DataRow dr in rowsAffected.Tables[0].Rows)
                                {
                                    elemento = new TiposAsignacionesCalificacionesEntidad();
                                    elemento.IdTipoAsignacionCalificacion = int.Parse(dr[0].ToString());
                                    elemento.CodTipoAsignacionCalificacion = int.Parse(dr[1].ToString());
                                    elemento.DesTipoAsignacionCalificacion = dr[2].ToString();

                                    retorno.Add(elemento);
                                }
                            }

                            return retorno;

                        #endregion

                    }
                    catch (Exception)
                    {
                        throw;
                    }
                }
        
                public TiposAsignacionesCalificacionesEntidad TiposAsignacionesCalificacionesConsultarDetalle(String conexion, String conexionBitacora, TiposAsignacionesCalificacionesEntidad tipoAsignacionCalificacion, BitacorasEntidad _bitacora)
                {
                    TiposAsignacionesCalificacionesEntidad retorno = new TiposAsignacionesCalificacionesEntidad();
                    DataSet rowsAffected;

                    #region PARAMETROS

                    SqlParameter[] paramTransaccion = new SqlParameter[]
                    {
                        new SqlParameter("@piId_Tipo_Asignacion_Calificacion", tipoAsignacionCalificacion.IdTipoAsignacionCalificacion)
                    };

                    #endregion

                    #region KeyValuePair LIST

                    List<KeyValuePair<string, string>> itemConsulta = new List<KeyValuePair<string, string>>();
                    itemConsulta.Add(helper.CrearKeyValuePairItem("@piId_Tipo_Asignacion_Calificacion", tipoAsignacionCalificacion.IdTipoAsignacionCalificacion.ToString()));

                    #endregion

                    try
                    {

                        #region CONSULTAR DETALLE

                        rowsAffected = transaccionDA.TransaccionConsultaDetalle(conexion, conexionBitacora, "Tipos_Asignaciones_Calificaciones_Consulta_Detalle", paramTransaccion, EnumTipoBitacora.CONSULTAR, itemConsulta, "Tipos_Asignaciones_Calificaciones_Consulta_Detalle", _bitacora);
                        if (!rowsAffected.Equals(null))
                        {
                            retorno.IdTipoAsignacionCalificacion = int.Parse(rowsAffected.Tables[0].Rows[0][0].ToString());
                            retorno.CodTipoAsignacionCalificacion = int.Parse(rowsAffected.Tables[0].Rows[0][1].ToString());
                            retorno.DesTipoAsignacionCalificacion = rowsAffected.Tables[0].Rows[0][2].ToString();
                            retorno.IndMetodoInsercion = rowsAffected.Tables[0].Rows[0][3].ToString();
                            if (rowsAffected.Tables[0].Rows[0][4].ToString().Length > 0)
                                retorno.FechaIngreso = DateTime.Parse(rowsAffected.Tables[0].Rows[0][4].ToString());
                            else
                                retorno.FechaIngreso = null;
                            retorno.CodUsuarioIngreso = rowsAffected.Tables[0].Rows[0][5].ToString();
                            if (rowsAffected.Tables[0].Rows[0][6].ToString().Length > 0)
                                retorno.FechaUltimaModificacion = DateTime.Parse(rowsAffected.Tables[0].Rows[0][6].ToString());
                            else
                                retorno.FechaUltimaModificacion = null;
                            retorno.CodUsuarioUltimaModificacion = rowsAffected.Tables[0].Rows[0][7].ToString();
                            retorno.DesUsuarioIngreso = rowsAffected.Tables[0].Rows[0][8].ToString();
                            retorno.DesUsuarioUltimaModificacion = rowsAffected.Tables[0].Rows[0][9].ToString();
                        }

                        return retorno;

                        #endregion

                    }
                    catch (Exception)
                    {
                        throw;
                    }
                }
        
                public int TiposAsignacionesCalificacionesTotalFilas(String conexion, ParametrosTotalFilasEntidad entidad)
                {

                    int value;

                    #region PARAMETROS

                    SqlParameter[] paramTransaccion = new SqlParameter[]
                    {
                        new SqlParameter("@psValor_Filtro", entidad.ValorFiltro),
                        new SqlParameter("@psColumna_Filtro", entidad.ColumnaFiltro)
                    };

                    #endregion

                    try
                    {

                        #region TOTAL FILAS

                            value = transaccionDA.TransaccionRows(conexion, "Tipos_Asignaciones_Calificaciones_Total_Filas", paramTransaccion);

                            return value;

                        #endregion

                    }
                    catch (Exception)
                    {
                        throw;
                    }
                }

                public List<ListaEntidad> TiposAsignacionesCalificacionesLista(String conexion, String filtro)
                {
                    List<ListaEntidad> retorno = new List<ListaEntidad>();
                    ListaEntidad elemento;
                    DataSet rowsAffected;

                    #region PARAMETROS

                    SqlParameter[] paramTransaccion = new SqlParameter[]
                    {
                        new SqlParameter("@psFiltro", filtro)
                    };

                    #endregion

                    try
                    {

                        #region LISTA

                        rowsAffected = transaccionDA.TransaccionConsulta(conexion, "Tipos_Asignaciones_Calificaciones_Lista", paramTransaccion);
                        if (!rowsAffected.Equals(null))
                        {
                            foreach (DataRow dr in rowsAffected.Tables[0].Rows)
                            {
                                elemento = new ListaEntidad();
                                elemento.Valor = dr[0].ToString();
                                elemento.Texto = dr[1].ToString();

                                retorno.Add(elemento);
                            }
                        }
                        return retorno;

                        #endregion

                    }
                    catch (Exception)
                    {
                        throw;
                    }
                }

            #endregion 
        
                //REQUERIMIENTO: 1-24105296

            #region TIPOS AVALES

                public RespuestaEntidad TipoAvalInsertar(String conexion, String conexionBitacora, TiposAvalesEntidad tipoAval, BitacorasEntidad _bitacora)
                {
                    RespuestaEntidad elemento = null;
                    DataSet rowsAffected;

                    #region PARAMETROS

                    SqlParameter[] paramTransaccion = new SqlParameter[]
                    {
                        new SqlParameter("@piCod_Tipo_Aval", tipoAval.CodTipoAval),
                        new SqlParameter("@psDes_Tipo_Aval", tipoAval.DesTipoAval),
                        new SqlParameter("@piId_Tipo_Persona", tipoAval.IdTipoPersona),
                        new SqlParameter("@psId_Avalista", tipoAval.IdAvalista),
                        new SqlParameter("@psInd_Metodo_Insercion", tipoAval.IndMetodoInsercion),
                        new SqlParameter("@psCod_Usuario", tipoAval.CodUsuarioIngreso)
                    };

                    #endregion

                    try
                    {

                        #region INSERTAR

                        rowsAffected = transaccionDA.TransaccionInsertar(conexion, conexionBitacora, "Tipos_Avales_Inserta", paramTransaccion, EnumTipoBitacora.INSERTAR, _bitacora);
                        if (!rowsAffected.Equals(null))
                        {
                            elemento = new RespuestaEntidad();
                            elemento.ValorEstado = int.Parse(rowsAffected.Tables[0].Rows[0][0].ToString());
                            elemento.ValorError = int.Parse(rowsAffected.Tables[0].Rows[0][1].ToString());
                        }

                        return elemento;

                        #endregion

                    }
                    catch (Exception)
                    {
                        throw;
                    }
                }

                public RespuestaEntidad TipoAvalModificar(String conexion, String conexionBitacora, TiposAvalesEntidad tipoAval, BitacorasEntidad _bitacora)
                {
                    RespuestaEntidad elemento = null;
                    DataSet rowsAffected;

                    #region PARAMETROS

                    SqlParameter[] paramTransaccion = new SqlParameter[]
                    {
                        new SqlParameter("@piId_Tipo_Aval", tipoAval.IdTipoAval),
                        new SqlParameter("@piCod_Tipo_Aval", tipoAval.CodTipoAval),
                        new SqlParameter("@psDes_Tipo_Aval", tipoAval.DesTipoAval),
                        new SqlParameter("@piId_Tipo_Persona", tipoAval.IdTipoPersona),
                         new SqlParameter("@psId_Avalista", tipoAval.IdAvalista),
                        new SqlParameter("@psInd_Metodo_Insercion", tipoAval.IndMetodoInsercion),
                        new SqlParameter("@psCod_Usuario", tipoAval.CodUsuarioIngreso)
                    };

                    #endregion

                    #region KeyValuePair LIST

                    List<KeyValuePair<string, string>> itemConsulta = new List<KeyValuePair<string, string>>();
                    itemConsulta.Add(helper.CrearKeyValuePairItem("@piId_Tipo_Aval", tipoAval.IdTipoAval.ToString()));

                    #endregion

                    try
                    {

                        #region MODIFICAR

                        rowsAffected = transaccionDA.TransaccionModificar(conexion, conexionBitacora, "Tipos_Avales_Actualiza", paramTransaccion, EnumTipoBitacora.ACTUALIZAR, itemConsulta, "Tipos_Avales_Consulta_Detalle", _bitacora);
                        if (!rowsAffected.Equals(null))
                        {
                            elemento = new RespuestaEntidad();
                            elemento.ValorEstado = int.Parse(rowsAffected.Tables[0].Rows[0][0].ToString());
                            elemento.ValorError = int.Parse(rowsAffected.Tables[0].Rows[0][1].ToString());
                        }

                        return elemento;


                        #endregion

                    }
                    catch (Exception)
                    {
                        throw;
                    }
                }
        
                public RespuestaEntidad TipoAvalEliminar(String conexion, String conexionBitacora, TiposAvalesEntidad tipoAval, BitacorasEntidad _bitacora)
                {
                    RespuestaEntidad elemento = null;
                    DataSet rowsAffected;

                    #region PARAMETROS

                    SqlParameter[] paramTransaccion = new SqlParameter[]
                    {
                        new SqlParameter("@piId_Tipo_Aval", tipoAval.IdTipoAval)
                    };

                    #endregion

                    #region KeyValuePair LIST

                    List<KeyValuePair<string, string>> itemConsulta = new List<KeyValuePair<string, string>>();
                    itemConsulta.Add(helper.CrearKeyValuePairItem("@piId_Tipo_Aval", tipoAval.IdTipoAval.ToString()));

                    #endregion

                    try
                    {

                        #region ELIMINAR

                        rowsAffected = transaccionDA.TransaccionEliminar(conexion, conexionBitacora, "Tipos_Avales_Elimina", paramTransaccion, EnumTipoBitacora.ELIMINAR, itemConsulta, "Tipos_Avales_Consulta_Detalle", _bitacora);
                        if (!rowsAffected.Equals(null))
                        {
                            elemento = new RespuestaEntidad();
                            elemento.ValorEstado = int.Parse(rowsAffected.Tables[0].Rows[0][0].ToString());
                            elemento.ValorError = int.Parse(rowsAffected.Tables[0].Rows[0][1].ToString());
                        }

                        return elemento;

                        #endregion

                    }
                    catch (Exception)
                    {
                        throw;
                    }
                }

                public List<TiposAvalesEntidad> TipoAvalConsultar(String conexion, ParametrosConsultaEntidad entidad)
                {
                    List<TiposAvalesEntidad> retorno = new List<TiposAvalesEntidad>();
                    TiposAvalesEntidad elemento;
                    DataSet rowsAffected;

                    #region PARAMETROS

                    SqlParameter[] paramTransaccion = new SqlParameter[]
                    {
                       new SqlParameter("@piIndice_Inicio_Fila", entidad.IndiceInicioFila),
                       new SqlParameter("@piMaximo_Filas", entidad.MaximoFilas),
                       new SqlParameter("@psValores_Filtro", entidad.ValorFiltro),
                       new SqlParameter("@psColumnas_Filtros", entidad.ColumnaFiltro),
                       new SqlParameter("@psColumna_Ordenar", entidad.ColumnaOrdenar)
                    };

                    #endregion

                    try
                    {

                        #region CONSULTAR

                        rowsAffected = transaccionDA.TransaccionConsulta(conexion, "Tipos_Avales_Consulta", paramTransaccion);
                        if (!rowsAffected.Equals(null))
                        {
                            foreach (DataRow dr in rowsAffected.Tables[0].Rows)
                            {
                                elemento = new TiposAvalesEntidad();
                                elemento.IdTipoAval = int.Parse(dr[0].ToString());
                                elemento.CodTipoAval = int.Parse(dr[1].ToString());
                                elemento.DesTipoAval = dr[2].ToString();
                                elemento.DesTipoPersona = dr[4].ToString();
                                elemento.IdAvalista = dr[5].ToString();

                                retorno.Add(elemento);
                            }
                        }

                        return retorno;

                        #endregion

                    }
                    catch (Exception)
                    {
                        throw;
                    }
                }

                public TiposAvalesEntidad TipoAvalConsultarDetalle(String conexion, String conexionBitacora, TiposAvalesEntidad tipoAval, BitacorasEntidad _bitacora)
                {
                    TiposAvalesEntidad retorno = new TiposAvalesEntidad();
                    DataSet rowsAffected;

                    #region PARAMETROS

                    SqlParameter[] paramTransaccion = new SqlParameter[]
                    {
                        new SqlParameter("@piId_Tipo_Aval", tipoAval.IdTipoAval)
                    };

                    #endregion

                    #region KeyValuePair LIST

                    List<KeyValuePair<string, string>> itemConsulta = new List<KeyValuePair<string, string>>();
                    itemConsulta.Add(helper.CrearKeyValuePairItem("@piId_Tipo_Aval", tipoAval.IdTipoAval.ToString()));

                    #endregion

                    try
                    {

                        #region CONSULTAR DETALLE

                        rowsAffected = transaccionDA.TransaccionConsultaDetalle(conexion, conexionBitacora, "Tipos_Avales_Consulta_Detalle", paramTransaccion, EnumTipoBitacora.CONSULTAR, itemConsulta, "Tipos_Avales_Consulta_Detalle", _bitacora);
                        if (!rowsAffected.Equals(null))
                        {
                            retorno.IdTipoAval = int.Parse(rowsAffected.Tables[0].Rows[0][0].ToString());
                            retorno.CodTipoAval = int.Parse(rowsAffected.Tables[0].Rows[0][1].ToString());
                            retorno.DesTipoAval = rowsAffected.Tables[0].Rows[0][2].ToString();
                            retorno.IdTipoPersona = int.Parse(rowsAffected.Tables[0].Rows[0][3].ToString());
                            retorno.IdAvalista = rowsAffected.Tables[0].Rows[0][4].ToString();

                            retorno.IndMetodoInsercion = rowsAffected.Tables[0].Rows[0][5].ToString();
                            if (rowsAffected.Tables[0].Rows[0][6].ToString().Length > 0)
                                retorno.FechaIngreso = DateTime.Parse(rowsAffected.Tables[0].Rows[0][6].ToString());
                            else
                                retorno.FechaIngreso = null;
                            retorno.CodUsuarioIngreso = rowsAffected.Tables[0].Rows[0][7].ToString();
                            if (rowsAffected.Tables[0].Rows[0][8].ToString().Length > 0)
                                retorno.FechaUltimaModificacion = DateTime.Parse(rowsAffected.Tables[0].Rows[0][8].ToString());
                            else
                                retorno.FechaUltimaModificacion = null;
                            retorno.CodUsuarioUltimaModificacion = rowsAffected.Tables[0].Rows[0][9].ToString();
                            retorno.DesUsuarioIngreso = rowsAffected.Tables[0].Rows[0][10].ToString();
                            retorno.DesUsuarioUltimaModificacion = rowsAffected.Tables[0].Rows[0][11].ToString();
                        }

                        return retorno;

                        #endregion

                    }
                    catch (Exception)
                    {
                        throw;
                    }
                }

                public int TipoAvalTotalFilas(String conexion, ParametrosTotalFilasEntidad entidad)
                {

                    int value;

                    #region PARAMETROS

                    SqlParameter[] paramTransaccion = new SqlParameter[]
                    {
                        new SqlParameter("@psValor_Filtro", entidad.ValorFiltro),
                        new SqlParameter("@psColumna_Filtro", entidad.ColumnaFiltro)
                    };

                    #endregion

                    try
                    {

                        #region TOTAL FILAS

                        value = transaccionDA.TransaccionRows(conexion, "Tipos_Avales_Total_Filas", paramTransaccion);

                        return value;

                        #endregion

                    }
                    catch (Exception)
                    {
                        throw;
                    }
                }

                public List<ListaEntidad> TipoAvalLista(String conexion, String filtro)
                {
                    List<ListaEntidad> retorno = new List<ListaEntidad>();
                    ListaEntidad elemento;
                    DataSet rowsAffected;

                    #region PARAMETROS

                    SqlParameter[] paramTransaccion = new SqlParameter[]
                    {
                        new SqlParameter("@psFiltro", filtro)
                    };

                    #endregion

                    try
                    {

                        #region LISTA

                        rowsAffected = transaccionDA.TransaccionConsulta(conexion, "Tipos_Avales_Lista", paramTransaccion);
                        if (!rowsAffected.Equals(null))
                        {
                            foreach (DataRow dr in rowsAffected.Tables[0].Rows)
                            {
                                elemento = new ListaEntidad();
                                elemento.Valor = dr[0].ToString();
                                elemento.Texto = dr[1].ToString();

                                retorno.Add(elemento);
                            }
                        }
                        return retorno;

                        #endregion

                    }
                    catch (Exception)
                    {
                        throw;
                    }
                }

            #endregion

           #region TIPOS AVALES FIANZAS

                public RespuestaEntidad TiposAvalesFianzasInsertar(String conexion, String conexionBitacora, TiposAvalesFianzasEntidad TipoAvalFianza, BitacorasEntidad _bitacora)
                {
                    RespuestaEntidad elemento = null;
                    DataSet rowsAffected;

                    #region PARAMETROS

                    SqlParameter[] paramTransaccion = new SqlParameter[]
                    {
                        new SqlParameter("@psCod_Tipo_Aval_Fianza", TipoAvalFianza.CodTipoAvalFianza),
                        new SqlParameter("@psDes_Tipo_Aval_Fianza", TipoAvalFianza.DesTipoAvalFianza),
                        new SqlParameter("@psInd_Metodo_Insercion", TipoAvalFianza.IndMetodoInsercion),
                        new SqlParameter("@psCod_Usuario", TipoAvalFianza.CodUsuarioIngreso)
                    };

                    #endregion

                    try
                    {

                        #region INSERTAR

                        rowsAffected = transaccionDA.TransaccionInsertar(conexion, conexionBitacora, "Tipos_Avales_Fianzas_Inserta", paramTransaccion, EnumTipoBitacora.INSERTAR, _bitacora);
                        if (!rowsAffected.Equals(null))
                        {
                            elemento = new RespuestaEntidad();
                            elemento.ValorEstado = int.Parse(rowsAffected.Tables[0].Rows[0][0].ToString());
                            elemento.ValorError = int.Parse(rowsAffected.Tables[0].Rows[0][1].ToString());
                        }

                        return elemento;

                        #endregion

                    }
                    catch (Exception)
                    {
                        throw;
                    }
                }
        
                public RespuestaEntidad TiposAvalesFianzasModificar(String conexion, String conexionBitacora, TiposAvalesFianzasEntidad TipoAvalFianza, BitacorasEntidad _bitacora)
                {
                    RespuestaEntidad elemento = null;
                    DataSet rowsAffected;

                    #region PARAMETROS

                    SqlParameter[] paramTransaccion = new SqlParameter[]
                    {
                        new SqlParameter("@piId_Tipo_Aval_Fianza", TipoAvalFianza.IdTipoAvalFianza),
                        new SqlParameter("@psCod_Tipo_Aval_Fianza", TipoAvalFianza.CodTipoAvalFianza),
                        new SqlParameter("@psDes_Tipo_Aval_Fianza", TipoAvalFianza.DesTipoAvalFianza),
                        new SqlParameter("@psInd_Metodo_Insercion", TipoAvalFianza.IndMetodoInsercion),
                        new SqlParameter("@psCod_Usuario", TipoAvalFianza.CodUsuarioIngreso)
                    };

                    #endregion

                    #region KeyValuePair LIST

                    List<KeyValuePair<string, string>> itemConsulta = new List<KeyValuePair<string, string>>();
                    itemConsulta.Add(helper.CrearKeyValuePairItem("@piId_Tipo_Aval_Fianza", TipoAvalFianza.IdTipoAvalFianza.ToString()));

                    #endregion

                    try
                    {

                        #region MODIFICAR

                        rowsAffected = transaccionDA.TransaccionModificar(conexion, conexionBitacora, "Tipos_Avales_Fianzas_Actualiza", paramTransaccion, EnumTipoBitacora.ACTUALIZAR, itemConsulta, "Tipos_Avales_Fianzas_Consulta_Detalle", _bitacora);
                        if (!rowsAffected.Equals(null))
                        {
                            elemento = new RespuestaEntidad();
                            elemento.ValorEstado = int.Parse(rowsAffected.Tables[0].Rows[0][0].ToString());
                            elemento.ValorError = int.Parse(rowsAffected.Tables[0].Rows[0][1].ToString());
                        }

                        return elemento;

                        #endregion

                    }
                    catch (Exception)
                    {
                        throw;
                    }
                }
        
                public RespuestaEntidad TiposAvalesFianzasEliminar(String conexion, String conexionBitacora, TiposAvalesFianzasEntidad TipoAvalFianza, BitacorasEntidad _bitacora)
                {
                    RespuestaEntidad elemento = null;
                    DataSet rowsAffected;

                    #region PARAMETROS

                    SqlParameter[] paramTransaccion = new SqlParameter[]
                    {
                        new SqlParameter("@piId_Tipo_Aval_Fianza", TipoAvalFianza.IdTipoAvalFianza)
                    };

                    #endregion

                    #region KeyValuePair LIST

                    List<KeyValuePair<string, string>> itemConsulta = new List<KeyValuePair<string, string>>();
                    itemConsulta.Add(helper.CrearKeyValuePairItem("@piId_Tipo_Aval_Fianza", TipoAvalFianza.IdTipoAvalFianza.ToString()));

                    #endregion

                    try
                    {

                        #region ELIMINAR

                        rowsAffected = transaccionDA.TransaccionEliminar(conexion, conexionBitacora, "Tipos_Avales_Fianzas_Elimina", paramTransaccion, EnumTipoBitacora.ELIMINAR, itemConsulta, "Tipos_Avales_Fianzas_Consulta_Detalle", _bitacora);
                        if (!rowsAffected.Equals(null))
                        {
                            elemento = new RespuestaEntidad();
                            elemento.ValorEstado = int.Parse(rowsAffected.Tables[0].Rows[0][0].ToString());
                            elemento.ValorError = int.Parse(rowsAffected.Tables[0].Rows[0][1].ToString());
                        }

                        return elemento;

                        #endregion

                    }
                    catch (Exception)
                    {
                        throw;
                    }
                }

                public List<TiposAvalesFianzasEntidad> TiposAvalesFianzasConsultar(String conexion, ParametrosConsultaEntidad entidad)
                {
                    List<TiposAvalesFianzasEntidad> retorno = new List<TiposAvalesFianzasEntidad>();
                    TiposAvalesFianzasEntidad elemento;
                    DataSet rowsAffected;

                    #region PARAMETROS

                    SqlParameter[] paramTransaccion = new SqlParameter[]
                    {
                       new SqlParameter("@piIndice_Inicio_Fila", entidad.IndiceInicioFila),
                       new SqlParameter("@piMaximo_Filas", entidad.MaximoFilas),
                       new SqlParameter("@psValores_Filtro", entidad.ValorFiltro),
                       new SqlParameter("@psColumnas_Filtros", entidad.ColumnaFiltro),
                       new SqlParameter("@psColumna_Ordenar", entidad.ColumnaOrdenar)
                    };

                    #endregion

                    try
                    {

                        #region CONSULTAR

                        rowsAffected = transaccionDA.TransaccionConsulta(conexion, "Tipos_Avales_Fianzas_Consulta", paramTransaccion);
                        if (!rowsAffected.Equals(null))
                        {
                            foreach (DataRow dr in rowsAffected.Tables[0].Rows)
                            {
                                elemento = new TiposAvalesFianzasEntidad();
                                elemento.IdTipoAvalFianza = int.Parse(dr[0].ToString());
                                elemento.CodTipoAvalFianza = dr[1].ToString();
                                elemento.DesTipoAvalFianza = dr[2].ToString();

                                retorno.Add(elemento);
                            }
                        }

                        return retorno;

                        #endregion

                    }
                    catch (Exception)
                    {
                        throw;
                    }
                }
        
                public TiposAvalesFianzasEntidad TiposAvalesFianzasConsultarDetalle(String conexion, String conexionBitacora, TiposAvalesFianzasEntidad TipoAvalFianza, BitacorasEntidad _bitacora)
                {
                    TiposAvalesFianzasEntidad retorno = new TiposAvalesFianzasEntidad();
                    DataSet rowsAffected;

                    #region PARAMETROS

                    SqlParameter[] paramTransaccion = new SqlParameter[]
                    {
                        new SqlParameter("@piId_Tipo_Aval_Fianza", TipoAvalFianza.IdTipoAvalFianza)
                    };

                    #endregion

                    #region KeyValuePair LIST

                    List<KeyValuePair<string, string>> itemConsulta = new List<KeyValuePair<string, string>>();
                    itemConsulta.Add(helper.CrearKeyValuePairItem("@piId_Tipo_Aval_Fianza", TipoAvalFianza.IdTipoAvalFianza.ToString()));

                    #endregion

                    try
                    {

                        #region CONSULTAR DETALLE

                        rowsAffected = transaccionDA.TransaccionConsultaDetalle(conexion, conexionBitacora, "Tipos_Avales_Fianzas_Consulta_Detalle", paramTransaccion, EnumTipoBitacora.CONSULTAR, itemConsulta, "Tipos_Avales_Fianzas_Consulta_Detalle", _bitacora);
                        if (!rowsAffected.Equals(null))
                        {
                            retorno.IdTipoAvalFianza = int.Parse(rowsAffected.Tables[0].Rows[0][0].ToString());
                            retorno.CodTipoAvalFianza = rowsAffected.Tables[0].Rows[0][1].ToString();
                            retorno.DesTipoAvalFianza = rowsAffected.Tables[0].Rows[0][2].ToString();
                            retorno.IndMetodoInsercion = rowsAffected.Tables[0].Rows[0][3].ToString();
                            if (rowsAffected.Tables[0].Rows[0][4].ToString().Length > 0)
                                retorno.FechaIngreso = DateTime.Parse(rowsAffected.Tables[0].Rows[0][4].ToString());
                            else
                                retorno.FechaIngreso = null;
                            retorno.CodUsuarioIngreso = rowsAffected.Tables[0].Rows[0][5].ToString();
                            if (rowsAffected.Tables[0].Rows[0][6].ToString().Length > 0)
                                retorno.FechaUltimaModificacion = DateTime.Parse(rowsAffected.Tables[0].Rows[0][6].ToString());
                            else
                                retorno.FechaUltimaModificacion = null;
                            retorno.CodUsuarioUltimaModificacion = rowsAffected.Tables[0].Rows[0][7].ToString();
                            retorno.DesUsuarioIngreso = rowsAffected.Tables[0].Rows[0][8].ToString();
                            retorno.DesUsuarioUltimaModificacion = rowsAffected.Tables[0].Rows[0][9].ToString();
                        }

                        return retorno;

                        #endregion

                    }
                    catch (Exception)
                    {
                        throw;
                    }
                }
        
                public int TiposAvalesFianzasTotalFilas(String conexion, ParametrosTotalFilasEntidad entidad)
                {

                    int value;

                    #region PARAMETROS

                    SqlParameter[] paramTransaccion = new SqlParameter[]
                    {
                        new SqlParameter("@psValor_Filtro", entidad.ValorFiltro),
                        new SqlParameter("@psColumna_Filtro", entidad.ColumnaFiltro)
                    };

                    #endregion

                    try
                    {

                        #region TOTAL FILAS

                        value = transaccionDA.TransaccionRows(conexion, "Tipos_Avales_Fianzas_Total_Filas", paramTransaccion);

                        return value;

                        #endregion

                    }
                    catch (Exception)
                    {
                        throw;
                    }
                }

                public List<ListaEntidad> TiposAvalesFianzasLista(String conexion, String filtro)
                {
                    List<ListaEntidad> retorno = new List<ListaEntidad>();
                    ListaEntidad elemento;
                    DataSet rowsAffected;

                    #region PARAMETROS

                    SqlParameter[] paramTransaccion = new SqlParameter[]
                    {
                        new SqlParameter("@psFiltro", filtro)
                    };

                    #endregion

                    try
                    {

                        #region LISTA

                        rowsAffected = transaccionDA.TransaccionConsulta(conexion, "Tipos_Avales_Fianzas_Lista", paramTransaccion);
                        if (!rowsAffected.Equals(null))
                        {
                            foreach (DataRow dr in rowsAffected.Tables[0].Rows)
                            {
                                elemento = new ListaEntidad();
                                elemento.Valor = dr[0].ToString();
                                elemento.Texto = dr[1].ToString();

                                retorno.Add(elemento);
                            }
                        }
                        return retorno;

                        #endregion

                    }
                    catch (Exception)
                    {
                        throw;
                    }
                }

            #endregion 

            #region TIPOS BIENES
        
                public RespuestaEntidad TiposBienesInsertar(String conexion, String conexionBitacora, TiposBienesEntidad tipoBien, BitacorasEntidad _bitacora)
                {
                    RespuestaEntidad elemento = null;
                    DataSet rowsAffected;

                    #region PARAMETROS

                    SqlParameter[] paramTransaccion = new SqlParameter[]
                    {
                        new SqlParameter("@piCod_Tipo_Bien", tipoBien.CodTipoBien),
                        new SqlParameter("@psDes_Tipo_Bien", tipoBien.DesTipoBien),
                        new SqlParameter("@psInd_Metodo_Insercion", tipoBien.IndMetodoInsercion),
                        new SqlParameter("@psCod_Usuario", tipoBien.CodUsuarioIngreso)
                    };

                    #endregion

                    try
                    {

                        #region INSERTAR

                        rowsAffected = transaccionDA.TransaccionInsertar(conexion, conexionBitacora, "Tipos_Bienes_Inserta", paramTransaccion, EnumTipoBitacora.INSERTAR, _bitacora);
                        if (!rowsAffected.Equals(null))
                        {
                            elemento = new RespuestaEntidad();
                            elemento.ValorEstado = int.Parse(rowsAffected.Tables[0].Rows[0][0].ToString());
                            elemento.ValorError = int.Parse(rowsAffected.Tables[0].Rows[0][1].ToString());
                        }

                        return elemento;

                        #endregion

                    }
                    catch (Exception)
                    {
                        throw;
                    }
                }
        
                public RespuestaEntidad TiposBienesModificar(String conexion, String conexionBitacora, TiposBienesEntidad tipoBien, BitacorasEntidad _bitacora)
                {
                    RespuestaEntidad elemento = null;
                    DataSet rowsAffected;

                    #region PARAMETROS

                    SqlParameter[] paramTransaccion = new SqlParameter[]
                    {
                        new SqlParameter("@piId_Tipo_Bien", tipoBien.IdTipoBien),
                        new SqlParameter("@piCod_Tipo_Bien", tipoBien.CodTipoBien),
                        new SqlParameter("@psDes_Tipo_Bien", tipoBien.DesTipoBien),
                        new SqlParameter("@psInd_Metodo_Insercion", tipoBien.IndMetodoInsercion),
                        new SqlParameter("@psCod_Usuario", tipoBien.CodUsuarioIngreso)
                    };

                    #endregion

                    #region KeyValuePair LIST

                    List<KeyValuePair<string, string>> itemConsulta = new List<KeyValuePair<string, string>>();
                    itemConsulta.Add(helper.CrearKeyValuePairItem("@piId_Tipo_Bien", tipoBien.IdTipoBien.ToString()));

                    #endregion

                    try
                    {

                        #region MODIFICAR

                        rowsAffected = transaccionDA.TransaccionModificar(conexion, conexionBitacora, "Tipos_Bienes_Actualiza", paramTransaccion, EnumTipoBitacora.ACTUALIZAR, itemConsulta, "Tipos_Bienes_Consulta_Detalle", _bitacora);
                        if (!rowsAffected.Equals(null))
                        {
                            elemento = new RespuestaEntidad();
                            elemento.ValorEstado = int.Parse(rowsAffected.Tables[0].Rows[0][0].ToString());
                            elemento.ValorError = int.Parse(rowsAffected.Tables[0].Rows[0][1].ToString());
                        }

                        return elemento;


                        #endregion

                    }
                    catch (Exception)
                    {
                        throw;
                    }
                }
        
                public RespuestaEntidad TiposBienesEliminar(String conexion, String conexionBitacora, TiposBienesEntidad tipoBien, BitacorasEntidad _bitacora)
                {
                    RespuestaEntidad elemento = null;
                    DataSet rowsAffected;

                    #region PARAMETROS

                    SqlParameter[] paramTransaccion = new SqlParameter[]
                    {
                        new SqlParameter("@piId_Tipo_Bien", tipoBien.IdTipoBien)
                    };

                    #endregion

                    #region KeyValuePair LIST

                    List<KeyValuePair<string, string>> itemConsulta = new List<KeyValuePair<string, string>>();
                    itemConsulta.Add(helper.CrearKeyValuePairItem("@piId_Tipo_Bien", tipoBien.IdTipoBien.ToString()));

                    #endregion

                    try
                    {

                        #region ELIMINAR

                        rowsAffected = transaccionDA.TransaccionEliminar(conexion, conexionBitacora, "Tipos_Bienes_Elimina", paramTransaccion, EnumTipoBitacora.ELIMINAR, itemConsulta, "Tipos_Bienes_Consulta_Detalle", _bitacora);
                        if (!rowsAffected.Equals(null))
                        {
                            elemento = new RespuestaEntidad();
                            elemento.ValorEstado = int.Parse(rowsAffected.Tables[0].Rows[0][0].ToString());
                            elemento.ValorError = int.Parse(rowsAffected.Tables[0].Rows[0][1].ToString());
                        }

                        return elemento;

                        #endregion

                    }
                    catch (Exception)
                    {
                        throw;
                    }
                }

                public List<TiposBienesEntidad> TiposBienesConsultar(String conexion, ParametrosConsultaEntidad entidad)
                {
                    List<TiposBienesEntidad> retorno = new List<TiposBienesEntidad>();
                    TiposBienesEntidad elemento;
                    DataSet rowsAffected;

                    #region PARAMETROS

                    SqlParameter[] paramTransaccion = new SqlParameter[]
                    {
                       new SqlParameter("@piIndice_Inicio_Fila", entidad.IndiceInicioFila),
                       new SqlParameter("@piMaximo_Filas", entidad.MaximoFilas),
                       new SqlParameter("@psValores_Filtro", entidad.ValorFiltro),
                       new SqlParameter("@psColumnas_Filtros", entidad.ColumnaFiltro),
                       new SqlParameter("@psColumna_Ordenar", entidad.ColumnaOrdenar)
                    };

                    #endregion

                    try
                    {

                        #region CONSULTAR

                            rowsAffected = transaccionDA.TransaccionConsulta(conexion, "Tipos_Bienes_Consulta", paramTransaccion);
                            if (!rowsAffected.Equals(null))
                            {
                                foreach (DataRow dr in rowsAffected.Tables[0].Rows)
                                {
                                    elemento = new TiposBienesEntidad();
                                    elemento.IdTipoBien = int.Parse(dr[0].ToString());
                                    elemento.CodTipoBien = int.Parse(dr[1].ToString());
                                    elemento.DesTipoBien = dr[2].ToString();

                                    retorno.Add(elemento);
                                }
                            }

                            return retorno;

                        #endregion

                    }
                    catch (Exception)
                    {
                        throw;
                    }
                }
        
                public TiposBienesEntidad TiposBienesConsultarDetalle(String conexion, String conexionBitacora, TiposBienesEntidad tipoBien, BitacorasEntidad _bitacora)
                {
                    TiposBienesEntidad retorno = new TiposBienesEntidad();
                    DataSet rowsAffected;

                    #region PARAMETROS

                    SqlParameter[] paramTransaccion = new SqlParameter[]
                    {
                        new SqlParameter("@piId_Tipo_Bien", tipoBien.IdTipoBien)
                    };

                    #endregion

                    #region KeyValuePair LIST

                    List<KeyValuePair<string, string>> itemConsulta = new List<KeyValuePair<string, string>>();
                    itemConsulta.Add(helper.CrearKeyValuePairItem("@piId_Tipo_Bien", tipoBien.IdTipoBien.ToString()));

                    #endregion

                    try
                    {

                        #region CONSULTAR DETALLE

                        rowsAffected = transaccionDA.TransaccionConsultaDetalle(conexion, conexionBitacora, "Tipos_Bienes_Consulta_Detalle", paramTransaccion, EnumTipoBitacora.CONSULTAR, itemConsulta, "Tipos_Bienes_Consulta_Detalle", _bitacora);
                        if (!rowsAffected.Equals(null))
                        {
                            retorno.IdTipoBien = int.Parse(rowsAffected.Tables[0].Rows[0][0].ToString());
                            retorno.CodTipoBien = int.Parse(rowsAffected.Tables[0].Rows[0][1].ToString());
                            retorno.DesTipoBien = rowsAffected.Tables[0].Rows[0][2].ToString();
                            retorno.IndMetodoInsercion = rowsAffected.Tables[0].Rows[0][3].ToString();
                            if (rowsAffected.Tables[0].Rows[0][4].ToString().Length > 0)
                                retorno.FechaIngreso = DateTime.Parse(rowsAffected.Tables[0].Rows[0][4].ToString());
                            else
                                retorno.FechaIngreso = null;
                            retorno.CodUsuarioIngreso = rowsAffected.Tables[0].Rows[0][5].ToString();
                            if (rowsAffected.Tables[0].Rows[0][6].ToString().Length > 0)
                                retorno.FechaUltimaModificacion = DateTime.Parse(rowsAffected.Tables[0].Rows[0][6].ToString());
                            else
                                retorno.FechaUltimaModificacion = null;
                            retorno.CodUsuarioUltimaModificacion = rowsAffected.Tables[0].Rows[0][7].ToString();
                            retorno.DesUsuarioIngreso = rowsAffected.Tables[0].Rows[0][8].ToString();
                            retorno.DesUsuarioUltimaModificacion = rowsAffected.Tables[0].Rows[0][9].ToString();
                        }

                        return retorno;

                        #endregion

                    }
                    catch (Exception)
                    {
                        throw;
                    }
                }
        
                public int TiposBienesTotalFilas(String conexion, ParametrosTotalFilasEntidad entidad)
                {

                    int value;

                    #region PARAMETROS

                    SqlParameter[] paramTransaccion = new SqlParameter[]
                    {
                        new SqlParameter("@psValor_Filtro", entidad.ValorFiltro),
                        new SqlParameter("@psColumna_Filtro", entidad.ColumnaFiltro)
                    };

                    #endregion

                    try
                    {

                        #region TOTAL FILAS

                            value = transaccionDA.TransaccionRows(conexion, "Tipos_Bienes_Total_Filas", paramTransaccion);

                            return value;

                        #endregion

                    }
                    catch (Exception)
                    {
                        throw;
                    }
                }

                public List<ListaEntidad> TiposBienesLista(String conexion, String filtro)
                {
                    List<ListaEntidad> retorno = new List<ListaEntidad>();
                    ListaEntidad elemento;
                    DataSet rowsAffected;

                    #region PARAMETROS

                    SqlParameter[] paramTransaccion = new SqlParameter[]
                    {
                        new SqlParameter("@psFiltro", filtro)
                    };

                    #endregion

                    try
                    {

                        #region LISTA

                        rowsAffected = transaccionDA.TransaccionConsulta(conexion, "Tipos_Bienes_Lista", paramTransaccion);
                        if (!rowsAffected.Equals(null))
                        {
                            foreach (DataRow dr in rowsAffected.Tables[0].Rows)
                            {
                                elemento = new ListaEntidad();
                                elemento.Valor = dr[0].ToString();
                                elemento.Texto = dr[1].ToString();

                                retorno.Add(elemento);
                            }
                        }
                        return retorno;

                        #endregion

                    }
                    catch (Exception)
                    {
                        throw;
                    }
                }

            #endregion 

            #region TIPOS CAPACIDADES PAGOS
        
                public RespuestaEntidad TiposCapacidadesPagosInsertar(String conexion, String conexionBitacora, TiposCapacidadesPagosEntidad tipoCapacidadPago, BitacorasEntidad _bitacora)
                {
                    RespuestaEntidad elemento = null;
                    DataSet rowsAffected;

                    #region PARAMETROS

                    SqlParameter[] paramTransaccion = new SqlParameter[]
                    {
                        new SqlParameter("@piCod_Tipo_Capacidad_Pago", tipoCapacidadPago.CodTipoCapacidadPago),
                        new SqlParameter("@psDes_Tipo_Capacidad_Pago", tipoCapacidadPago.DesTipoCapacidadPago),
                        new SqlParameter("@psInd_Metodo_Insercion", tipoCapacidadPago.IndMetodoInsercion),
                        new SqlParameter("@psCod_Usuario", tipoCapacidadPago.CodUsuarioIngreso)
                    };

                    #endregion

                    try
                    {

                        #region INSERTAR

                        rowsAffected = transaccionDA.TransaccionInsertar(conexion, conexionBitacora, "Tipos_Capacidades_Pago_Inserta", paramTransaccion, EnumTipoBitacora.INSERTAR, _bitacora);
                        if (!rowsAffected.Equals(null))
                        {
                            elemento = new RespuestaEntidad();
                            elemento.ValorEstado = int.Parse(rowsAffected.Tables[0].Rows[0][0].ToString());
                            elemento.ValorError = int.Parse(rowsAffected.Tables[0].Rows[0][1].ToString());
                        }

                        return elemento;

                        #endregion

                    }
                    catch (Exception)
                    {
                        throw;
                    }
                }
        
                public RespuestaEntidad TiposCapacidadesPagosModificar(String conexion, String conexionBitacora, TiposCapacidadesPagosEntidad tipoCapacidadPago, BitacorasEntidad _bitacora)
                {
                    RespuestaEntidad elemento = null;
                    DataSet rowsAffected;

                    #region PARAMETROS

                    SqlParameter[] paramTransaccion = new SqlParameter[]
                    {
                        new SqlParameter("@piId_Tipo_Capacidad_Pago", tipoCapacidadPago.IdTipoCapacidadPago),
                        new SqlParameter("@piCod_Tipo_Capacidad_Pago", tipoCapacidadPago.CodTipoCapacidadPago),
                        new SqlParameter("@psDes_Tipo_Capacidad_Pago", tipoCapacidadPago.DesTipoCapacidadPago),
                        new SqlParameter("@psInd_Metodo_Insercion", tipoCapacidadPago.IndMetodoInsercion),
                        new SqlParameter("@psCod_Usuario", tipoCapacidadPago.CodUsuarioIngreso)
                    };

                    #endregion

                    #region KeyValuePair LIST

                    List<KeyValuePair<string, string>> itemConsulta = new List<KeyValuePair<string, string>>();
                    itemConsulta.Add(helper.CrearKeyValuePairItem("@piId_Tipo_Capacidad_Pago", tipoCapacidadPago.IdTipoCapacidadPago.ToString()));

                    #endregion

                    try
                    {

                        #region MODIFICAR

                        rowsAffected = transaccionDA.TransaccionModificar(conexion, conexionBitacora, "Tipos_Capacidades_Pago_Actualiza", paramTransaccion, EnumTipoBitacora.ACTUALIZAR, itemConsulta, "Tipos_Capacidades_Pago_Consulta_Detalle", _bitacora);
                        if (!rowsAffected.Equals(null))
                        {
                            elemento = new RespuestaEntidad();
                            elemento.ValorEstado = int.Parse(rowsAffected.Tables[0].Rows[0][0].ToString());
                            elemento.ValorError = int.Parse(rowsAffected.Tables[0].Rows[0][1].ToString());
                        }

                        return elemento;


                        #endregion

                    }
                    catch (Exception)
                    {
                        throw;
                    }
                }
        
                public RespuestaEntidad TiposCapacidadesPagosEliminar(String conexion, String conexionBitacora, TiposCapacidadesPagosEntidad tipoCapacidadPago, BitacorasEntidad _bitacora)
                {
                    RespuestaEntidad elemento = null;
                    DataSet rowsAffected;

                    #region PARAMETROS

                    SqlParameter[] paramTransaccion = new SqlParameter[]
                    {
                        new SqlParameter("@piId_Tipo_Capacidad_Pago", tipoCapacidadPago.IdTipoCapacidadPago)
                    };

                    #endregion

                    #region KeyValuePair LIST

                    List<KeyValuePair<string, string>> itemConsulta = new List<KeyValuePair<string, string>>();
                    itemConsulta.Add(helper.CrearKeyValuePairItem("@piId_Tipo_Capacidad_Pago", tipoCapacidadPago.IdTipoCapacidadPago.ToString()));

                    #endregion

                    try
                    {

                        #region ELIMINAR

                        rowsAffected = transaccionDA.TransaccionEliminar(conexion, conexionBitacora, "Tipos_Capacidades_Pago_Elimina", paramTransaccion, EnumTipoBitacora.ELIMINAR, itemConsulta, "Tipos_Capacidades_Pago_Consulta_Detalle", _bitacora);
                        if (!rowsAffected.Equals(null))
                        {
                            elemento = new RespuestaEntidad();
                            elemento.ValorEstado = int.Parse(rowsAffected.Tables[0].Rows[0][0].ToString());
                            elemento.ValorError = int.Parse(rowsAffected.Tables[0].Rows[0][1].ToString());
                        }

                        return elemento;

                        #endregion

                    }
                    catch (Exception)
                    {
                        throw;
                    }
                }

                public List<TiposCapacidadesPagosEntidad> TiposCapacidadesPagosConsultar(String conexion, ParametrosConsultaEntidad entidad)
                {
                    List<TiposCapacidadesPagosEntidad> retorno = new List<TiposCapacidadesPagosEntidad>();
                    TiposCapacidadesPagosEntidad elemento;
                    DataSet rowsAffected;

                    #region PARAMETROS

                    SqlParameter[] paramTransaccion = new SqlParameter[]
                    {
                       new SqlParameter("@piIndice_Inicio_Fila", entidad.IndiceInicioFila),
                       new SqlParameter("@piMaximo_Filas", entidad.MaximoFilas),
                       new SqlParameter("@psValores_Filtro", entidad.ValorFiltro),
                       new SqlParameter("@psColumnas_Filtros", entidad.ColumnaFiltro),
                       new SqlParameter("@psColumna_Ordenar", entidad.ColumnaOrdenar)
                    };

                    #endregion

                    try
                    {

                        #region CONSULTAR

                            rowsAffected = transaccionDA.TransaccionConsulta(conexion, "Tipos_Capacidades_Pago_Consulta", paramTransaccion);
                            if (!rowsAffected.Equals(null))
                            {
                                foreach (DataRow dr in rowsAffected.Tables[0].Rows)
                                {
                                    elemento = new TiposCapacidadesPagosEntidad();
                                    elemento.IdTipoCapacidadPago = int.Parse(dr[0].ToString());
                                    elemento.CodTipoCapacidadPago = int.Parse(dr[1].ToString());
                                    elemento.DesTipoCapacidadPago = dr[2].ToString();

                                    retorno.Add(elemento);
                                }
                            }

                            return retorno;

                        #endregion

                    }
                    catch (Exception)
                    {
                        throw;
                    }
                }
        
                public TiposCapacidadesPagosEntidad TiposCapacidadesPagosConsultarDetalle(String conexion, String conexionBitacora, TiposCapacidadesPagosEntidad tipoCapacidadPago, BitacorasEntidad _bitacora)
                {
                    TiposCapacidadesPagosEntidad retorno = new TiposCapacidadesPagosEntidad();
                    DataSet rowsAffected;

                    #region PARAMETROS

                    SqlParameter[] paramTransaccion = new SqlParameter[]
                    {
                        new SqlParameter("@piId_Tipo_Capacidad_Pago", tipoCapacidadPago.IdTipoCapacidadPago)
                    };

                    #endregion

                    #region KeyValuePair LIST

                    List<KeyValuePair<string, string>> itemConsulta = new List<KeyValuePair<string, string>>();
                    itemConsulta.Add(helper.CrearKeyValuePairItem("@piId_Tipo_Capacidad_Pago", tipoCapacidadPago.IdTipoCapacidadPago.ToString()));

                    #endregion

                    try
                    {

                        #region CONSULTAR DETALLE

                        rowsAffected = transaccionDA.TransaccionConsultaDetalle(conexion, conexionBitacora, "Tipos_Capacidades_Pago_Consulta_Detalle", paramTransaccion, EnumTipoBitacora.CONSULTAR, itemConsulta, "Tipos_Capacidades_Pago_Consulta_Detalle", _bitacora);
                        if (!rowsAffected.Equals(null))
                        {
                            retorno.IdTipoCapacidadPago = int.Parse(rowsAffected.Tables[0].Rows[0][0].ToString());
                            retorno.CodTipoCapacidadPago = int.Parse(rowsAffected.Tables[0].Rows[0][1].ToString());
                            retorno.DesTipoCapacidadPago = rowsAffected.Tables[0].Rows[0][2].ToString();
                            retorno.IndMetodoInsercion = rowsAffected.Tables[0].Rows[0][3].ToString();
                            if (rowsAffected.Tables[0].Rows[0][4].ToString().Length > 0)
                                retorno.FechaIngreso = DateTime.Parse(rowsAffected.Tables[0].Rows[0][4].ToString());
                            else
                                retorno.FechaIngreso = null;
                            retorno.CodUsuarioIngreso = rowsAffected.Tables[0].Rows[0][5].ToString();
                            if (rowsAffected.Tables[0].Rows[0][6].ToString().Length > 0)
                                retorno.FechaUltimaModificacion = DateTime.Parse(rowsAffected.Tables[0].Rows[0][6].ToString());
                            else
                                retorno.FechaUltimaModificacion = null;
                            retorno.CodUsuarioUltimaModificacion = rowsAffected.Tables[0].Rows[0][7].ToString();
                            retorno.DesUsuarioIngreso = rowsAffected.Tables[0].Rows[0][8].ToString();
                            retorno.DesUsuarioUltimaModificacion = rowsAffected.Tables[0].Rows[0][9].ToString();
                        }

                        return retorno;

                        #endregion

                    }
                    catch (Exception)
                    {
                        throw;
                    }
                }
        
                public int TiposCapacidadesPagosTotalFilas(String conexion, ParametrosTotalFilasEntidad entidad)
                {

                    int value;

                    #region PARAMETROS

                    SqlParameter[] paramTransaccion = new SqlParameter[]
                    {
                        new SqlParameter("@psValor_Filtro", entidad.ValorFiltro),
                        new SqlParameter("@psColumna_Filtro", entidad.ColumnaFiltro)
                    };

                    #endregion

                    try
                    {

                        #region TOTAL FILAS

                            value = transaccionDA.TransaccionRows(conexion, "Tipos_Capacidades_Pago_Total_Filas", paramTransaccion);

                            return value;

                        #endregion

                    }
                    catch (Exception)
                    {
                        throw;
                    }
                }

            #endregion 

            #region TIPOS CARTERAS
        
                public RespuestaEntidad TiposCarterasInsertar(String conexion, String conexionBitacora, TiposCarterasEntidad tipoCartera, BitacorasEntidad _bitacora)
                {
                    RespuestaEntidad elemento = null;
                    DataSet rowsAffected;

                    #region PARAMETROS

                    SqlParameter[] paramTransaccion = new SqlParameter[]
                    {
                        new SqlParameter("@piCod_Tipo_Cartera", tipoCartera.CodTipoCartera),
                        new SqlParameter("@psDes_Tipo_Cartera", tipoCartera.DesTipoCartera),
                        new SqlParameter("@psInd_Metodo_Insercion", tipoCartera.IndMetodoInsercion),
                        new SqlParameter("@psCod_Usuario", tipoCartera.CodUsuarioIngreso)
                    };

                    #endregion

                    try
                    {

                        #region INSERTAR

                        rowsAffected = transaccionDA.TransaccionInsertar(conexion, conexionBitacora, "Tipos_Carteras_Inserta", paramTransaccion, EnumTipoBitacora.INSERTAR, _bitacora);
                        if (!rowsAffected.Equals(null))
                        {
                            elemento = new RespuestaEntidad();
                            elemento.ValorEstado = int.Parse(rowsAffected.Tables[0].Rows[0][0].ToString());
                            elemento.ValorError = int.Parse(rowsAffected.Tables[0].Rows[0][1].ToString());
                        }

                        return elemento;

                        #endregion

                    }
                    catch (Exception)
                    {
                        throw;
                    }
                }
        
                public RespuestaEntidad TiposCarterasModificar(String conexion, String conexionBitacora, TiposCarterasEntidad tipoCartera, BitacorasEntidad _bitacora)
                {
                    RespuestaEntidad elemento = null;
                    DataSet rowsAffected;

                    #region PARAMETROS

                    SqlParameter[] paramTransaccion = new SqlParameter[]
                    {
                        new SqlParameter("@piId_Tipo_Cartera", tipoCartera.IdTipoCartera),
                        new SqlParameter("@piCod_Tipo_Cartera", tipoCartera.CodTipoCartera),
                        new SqlParameter("@psDes_Tipo_Cartera", tipoCartera.DesTipoCartera),
                        new SqlParameter("@psInd_Metodo_Insercion", tipoCartera.IndMetodoInsercion),
                        new SqlParameter("@psCod_Usuario", tipoCartera.CodUsuarioIngreso)
                    };

                    #endregion

                    #region KeyValuePair LIST

                    List<KeyValuePair<string, string>> itemConsulta = new List<KeyValuePair<string, string>>();
                    itemConsulta.Add(helper.CrearKeyValuePairItem("@piId_Tipo_Cartera", tipoCartera.IdTipoCartera.ToString()));

                    #endregion

                    try
                    {

                        #region MODIFICAR

                        rowsAffected = transaccionDA.TransaccionModificar(conexion, conexionBitacora, "Tipos_Carteras_Actualiza", paramTransaccion, EnumTipoBitacora.ACTUALIZAR, itemConsulta, "Tipos_Carteras_Consulta_Detalle", _bitacora);
                        if (!rowsAffected.Equals(null))
                        {
                            elemento = new RespuestaEntidad();
                            elemento.ValorEstado = int.Parse(rowsAffected.Tables[0].Rows[0][0].ToString());
                            elemento.ValorError = int.Parse(rowsAffected.Tables[0].Rows[0][1].ToString());
                        }

                        return elemento;

                        #endregion

                    }
                    catch (Exception)
                    {
                        throw;
                    }
                }
        
                public RespuestaEntidad TiposCarterasEliminar(String conexion, String conexionBitacora, TiposCarterasEntidad tipoCartera, BitacorasEntidad _bitacora)
                {
                    RespuestaEntidad elemento = null;
                    DataSet rowsAffected;

                    #region PARAMETROS

                    SqlParameter[] paramTransaccion = new SqlParameter[]
                    {
                        new SqlParameter("@piId_Tipo_Cartera", tipoCartera.IdTipoCartera)
                    };

                    #endregion

                    #region KeyValuePair LIST

                    List<KeyValuePair<string, string>> itemConsulta = new List<KeyValuePair<string, string>>();
                    itemConsulta.Add(helper.CrearKeyValuePairItem("@piId_Tipo_Cartera", tipoCartera.IdTipoCartera.ToString()));

                    #endregion

                    try
                    {

                        #region ELIMINAR

                        rowsAffected = transaccionDA.TransaccionEliminar(conexion, conexionBitacora, "Tipos_Carteras_Elimina", paramTransaccion, EnumTipoBitacora.ELIMINAR, itemConsulta, "Tipos_Carteras_Consulta_Detalle", _bitacora);
                        if (!rowsAffected.Equals(null))
                        {
                            elemento = new RespuestaEntidad();
                            elemento.ValorEstado = int.Parse(rowsAffected.Tables[0].Rows[0][0].ToString());
                            elemento.ValorError = int.Parse(rowsAffected.Tables[0].Rows[0][1].ToString());
                        }

                        return elemento;

                        #endregion

                    }
                    catch (Exception)
                    {
                        throw;
                    }
                }

                public List<TiposCarterasEntidad> TiposCarterasConsultar(String conexion, ParametrosConsultaEntidad entidad)
                {
                    List<TiposCarterasEntidad> retorno = new List<TiposCarterasEntidad>();
                    TiposCarterasEntidad elemento;
                    DataSet rowsAffected;

                    #region PARAMETROS

                    SqlParameter[] paramTransaccion = new SqlParameter[]
                    {
                       new SqlParameter("@piIndice_Inicio_Fila", entidad.IndiceInicioFila),
                       new SqlParameter("@piMaximo_Filas", entidad.MaximoFilas),
                       new SqlParameter("@psValores_Filtro", entidad.ValorFiltro),
                       new SqlParameter("@psColumnas_Filtros", entidad.ColumnaFiltro),
                       new SqlParameter("@psColumna_Ordenar", entidad.ColumnaOrdenar)
                    };

                    #endregion

                    try
                    {

                        #region CONSULTAR

                            rowsAffected = transaccionDA.TransaccionConsulta(conexion, "Tipos_Carteras_Consulta", paramTransaccion);
                            if (!rowsAffected.Equals(null))
                            {
                                foreach (DataRow dr in rowsAffected.Tables[0].Rows)
                                {
                                    elemento = new TiposCarterasEntidad();
                                    elemento.IdTipoCartera = int.Parse(dr[0].ToString());
                                    elemento.CodTipoCartera = int.Parse(dr[1].ToString());
                                    elemento.DesTipoCartera = dr[2].ToString();

                                    retorno.Add(elemento);
                                }
                            }

                            return retorno;

                        #endregion

                    }
                    catch (Exception)
                    {
                        throw;
                    }
                }
        
                public TiposCarterasEntidad TiposCarterasConsultarDetalle(String conexion, String conexionBitacora, TiposCarterasEntidad tipoCartera, BitacorasEntidad _bitacora)
                {
                    TiposCarterasEntidad retorno = new TiposCarterasEntidad();
                    DataSet rowsAffected;

                    #region PARAMETROS

                    SqlParameter[] paramTransaccion = new SqlParameter[]
                    {
                        new SqlParameter("@piId_Tipo_Cartera", tipoCartera.IdTipoCartera)
                    };

                    #endregion

                    #region KeyValuePair LIST

                    List<KeyValuePair<string, string>> itemConsulta = new List<KeyValuePair<string, string>>();
                    itemConsulta.Add(helper.CrearKeyValuePairItem("@piId_Tipo_Cartera", tipoCartera.IdTipoCartera.ToString()));

                    #endregion

                    try
                    {

                        #region CONSULTAR DETALLE

                        rowsAffected = transaccionDA.TransaccionConsultaDetalle(conexion, conexionBitacora, "Tipos_Carteras_Consulta_Detalle", paramTransaccion, EnumTipoBitacora.CONSULTAR, itemConsulta, "Tipos_Carteras_Consulta_Detalle", _bitacora);
                        if (!rowsAffected.Equals(null))
                        {
                            retorno.IdTipoCartera = int.Parse(rowsAffected.Tables[0].Rows[0][0].ToString());
                            retorno.CodTipoCartera = int.Parse(rowsAffected.Tables[0].Rows[0][1].ToString());
                            retorno.DesTipoCartera = rowsAffected.Tables[0].Rows[0][2].ToString();
                            retorno.IndMetodoInsercion = rowsAffected.Tables[0].Rows[0][3].ToString();
                            if (rowsAffected.Tables[0].Rows[0][4].ToString().Length > 0)
                                retorno.FechaIngreso = DateTime.Parse(rowsAffected.Tables[0].Rows[0][4].ToString());
                            else
                                retorno.FechaIngreso = null;
                            retorno.CodUsuarioIngreso = rowsAffected.Tables[0].Rows[0][5].ToString();
                            if (rowsAffected.Tables[0].Rows[0][6].ToString().Length > 0)
                                retorno.FechaUltimaModificacion = DateTime.Parse(rowsAffected.Tables[0].Rows[0][6].ToString());
                            else
                                retorno.FechaUltimaModificacion = null;
                            retorno.CodUsuarioUltimaModificacion = rowsAffected.Tables[0].Rows[0][7].ToString();
                            retorno.DesUsuarioIngreso = rowsAffected.Tables[0].Rows[0][8].ToString();
                            retorno.DesUsuarioUltimaModificacion = rowsAffected.Tables[0].Rows[0][9].ToString();
                        }

                        return retorno;

                        #endregion

                    }
                    catch (Exception)
                    {
                        throw;
                    }
                }
        
                public int TiposCarterasTotalFilas(String conexion, ParametrosTotalFilasEntidad entidad)
                {

                    int value;

                    #region PARAMETROS

                    SqlParameter[] paramTransaccion = new SqlParameter[]
                    {
                        new SqlParameter("@psValor_Filtro", entidad.ValorFiltro),
                        new SqlParameter("@psColumna_Filtro", entidad.ColumnaFiltro)
                    };

                    #endregion

                    try
                    {

                        #region TOTAL FILAS

                            value = transaccionDA.TransaccionRows(conexion, "Tipos_Carteras_Total_Filas", paramTransaccion);

                            return value;

                        #endregion

                    }
                    catch (Exception)
                    {
                        throw;
                    }
                }

            #endregion 

            #region TIPOS CASOS
        
                public RespuestaEntidad TiposCasosInsertar(String conexion, String conexionBitacora, TiposCasosEntidad tipoCaso, BitacorasEntidad _bitacora)
                {
                    RespuestaEntidad elemento = null;
                    DataSet rowsAffected;

                    #region PARAMETROS

                    SqlParameter[] paramTransaccion = new SqlParameter[]
                    {
                        new SqlParameter("@psCod_Tipo_Caso", tipoCaso.CodTipoCaso),
                        new SqlParameter("@psDes_Tipo_Caso", tipoCaso.DesTipoCaso),
                        new SqlParameter("@psInd_Metodo_Insercion", tipoCaso.IndMetodoInsercion),
                        new SqlParameter("@psCod_Usuario", tipoCaso.CodUsuarioIngreso)
                    };

                    #endregion

                    try
                    {

                        #region INSERTAR

                        rowsAffected = transaccionDA.TransaccionInsertar(conexion, conexionBitacora, "Tipos_Casos_Inserta", paramTransaccion, EnumTipoBitacora.INSERTAR, _bitacora);
                        if (!rowsAffected.Equals(null))
                        {
                            elemento = new RespuestaEntidad();
                            elemento.ValorEstado = int.Parse(rowsAffected.Tables[0].Rows[0][0].ToString());
                            elemento.ValorError = int.Parse(rowsAffected.Tables[0].Rows[0][1].ToString());
                        }

                        return elemento;

                        #endregion

                    }
                    catch (Exception)
                    {
                        throw;
                    }
                }
        
                public RespuestaEntidad TiposCasosModificar(String conexion, String conexionBitacora, TiposCasosEntidad tipoCaso, BitacorasEntidad _bitacora)
                {
                    RespuestaEntidad elemento = null;
                    DataSet rowsAffected;

                    #region PARAMETROS

                    SqlParameter[] paramTransaccion = new SqlParameter[]
                    {
                        new SqlParameter("@piId_Tipo_Caso", tipoCaso.IdTipoCaso),
                        new SqlParameter("@psCod_Tipo_Caso", tipoCaso.CodTipoCaso),
                        new SqlParameter("@psDes_Tipo_Caso", tipoCaso.DesTipoCaso),
                        new SqlParameter("@psInd_Metodo_Insercion", tipoCaso.IndMetodoInsercion),
                        new SqlParameter("@psCod_Usuario", tipoCaso.CodUsuarioIngreso)
                    };

                    #endregion

                    #region KeyValuePair LIST

                    List<KeyValuePair<string, string>> itemConsulta = new List<KeyValuePair<string, string>>();
                    itemConsulta.Add(helper.CrearKeyValuePairItem("@piId_Tipo_Caso", tipoCaso.IdTipoCaso.ToString()));

                    #endregion

                    try
                    {

                        #region MODIFICAR

                        rowsAffected = transaccionDA.TransaccionModificar(conexion, conexionBitacora, "Tipos_Casos_Actualiza", paramTransaccion, EnumTipoBitacora.ACTUALIZAR, itemConsulta, "Tipos_Casos_Consulta_Detalle", _bitacora);
                        if (!rowsAffected.Equals(null))
                        {
                            elemento = new RespuestaEntidad();
                            elemento.ValorEstado = int.Parse(rowsAffected.Tables[0].Rows[0][0].ToString());
                            elemento.ValorError = int.Parse(rowsAffected.Tables[0].Rows[0][1].ToString());
                        }

                        return elemento;

                        #endregion

                    }
                    catch (Exception)
                    {
                        throw;
                    }
                }
        
                public RespuestaEntidad TiposCasosEliminar(String conexion, String conexionBitacora, TiposCasosEntidad tipoCaso, BitacorasEntidad _bitacora)
                {
                    RespuestaEntidad elemento = null;
                    DataSet rowsAffected;

                    #region PARAMETROS

                    SqlParameter[] paramTransaccion = new SqlParameter[]
                    {
                        new SqlParameter("@piId_Tipo_Caso", tipoCaso.IdTipoCaso)
                    };

                    #endregion

                    #region KeyValuePair LIST

                    List<KeyValuePair<string, string>> itemConsulta = new List<KeyValuePair<string, string>>();
                    itemConsulta.Add(helper.CrearKeyValuePairItem("@piId_Tipo_Caso", tipoCaso.IdTipoCaso.ToString()));

                    #endregion

                    try
                    {

                        #region ELIMINAR

                        rowsAffected = transaccionDA.TransaccionEliminar(conexion, conexionBitacora, "Tipos_Casos_Elimina", paramTransaccion, EnumTipoBitacora.ELIMINAR, itemConsulta, "Tipos_Casos_Consulta_Detalle", _bitacora);
                        if (!rowsAffected.Equals(null))
                        {
                            elemento = new RespuestaEntidad();
                            elemento.ValorEstado = int.Parse(rowsAffected.Tables[0].Rows[0][0].ToString());
                            elemento.ValorError = int.Parse(rowsAffected.Tables[0].Rows[0][1].ToString());
                        }

                        return elemento;

                        #endregion

                    }
                    catch (Exception)
                    {
                        throw;
                    }
                }

                public List<TiposCasosEntidad> TiposCasosConsultar(String conexion, ParametrosConsultaEntidad entidad)
                {
                    List<TiposCasosEntidad> retorno = new List<TiposCasosEntidad>();
                    TiposCasosEntidad elemento;
                    DataSet rowsAffected;

                    #region PARAMETROS

                    SqlParameter[] paramTransaccion = new SqlParameter[]
                    {
                       new SqlParameter("@piIndice_Inicio_Fila", entidad.IndiceInicioFila),
                       new SqlParameter("@piMaximo_Filas", entidad.MaximoFilas),
                       new SqlParameter("@psValores_Filtro", entidad.ValorFiltro),
                       new SqlParameter("@psColumnas_Filtros", entidad.ColumnaFiltro),
                       new SqlParameter("@psColumna_Ordenar", entidad.ColumnaOrdenar)
                    };

                    #endregion

                    try
                    {

                        #region CONSULTAR

                            rowsAffected = transaccionDA.TransaccionConsulta(conexion, "Tipos_Casos_Consulta", paramTransaccion);
                            if (!rowsAffected.Equals(null))
                            {
                                foreach (DataRow dr in rowsAffected.Tables[0].Rows)
                                {
                                    elemento = new TiposCasosEntidad();
                                    elemento.IdTipoCaso = int.Parse(dr[0].ToString());
                                    elemento.CodTipoCaso = dr[1].ToString();
                                    elemento.DesTipoCaso = dr[2].ToString();

                                    retorno.Add(elemento);
                                }
                            }

                            return retorno;

                        #endregion

                    }
                    catch (Exception)
                    {
                        throw;
                    }
                }
        
                public TiposCasosEntidad TiposCasosConsultarDetalle(String conexion, String conexionBitacora, TiposCasosEntidad tipoCaso, BitacorasEntidad _bitacora)
                {
                    TiposCasosEntidad retorno = new TiposCasosEntidad();
                    DataSet rowsAffected;

                    #region PARAMETROS

                    SqlParameter[] paramTransaccion = new SqlParameter[]
                    {
                        new SqlParameter("@piId_Tipo_Caso", tipoCaso.IdTipoCaso)
                    };

                    #endregion

                    #region KeyValuePair LIST

                    List<KeyValuePair<string, string>> itemConsulta = new List<KeyValuePair<string, string>>();
                    itemConsulta.Add(helper.CrearKeyValuePairItem("@piId_Tipo_Caso", tipoCaso.IdTipoCaso.ToString()));

                    #endregion

                    try
                    {

                        #region CONSULTAR DETALLE

                        rowsAffected = transaccionDA.TransaccionConsultaDetalle(conexion, conexionBitacora, "Tipos_Casos_Consulta_Detalle", paramTransaccion, EnumTipoBitacora.CONSULTAR, itemConsulta, "Tipos_Casos_Consulta_Detalle", _bitacora);
                        if (!rowsAffected.Equals(null))
                        {
                            retorno.IdTipoCaso = int.Parse(rowsAffected.Tables[0].Rows[0][0].ToString());
                            retorno.CodTipoCaso = rowsAffected.Tables[0].Rows[0][1].ToString();
                            retorno.DesTipoCaso = rowsAffected.Tables[0].Rows[0][2].ToString();
                            retorno.IndMetodoInsercion = rowsAffected.Tables[0].Rows[0][3].ToString();
                            if (rowsAffected.Tables[0].Rows[0][4].ToString().Length > 0)
                                retorno.FechaIngreso = DateTime.Parse(rowsAffected.Tables[0].Rows[0][4].ToString());
                            else
                                retorno.FechaIngreso = null;
                            retorno.CodUsuarioIngreso = rowsAffected.Tables[0].Rows[0][5].ToString();
                            if (rowsAffected.Tables[0].Rows[0][6].ToString().Length > 0)
                                retorno.FechaUltimaModificacion = DateTime.Parse(rowsAffected.Tables[0].Rows[0][6].ToString());
                            else
                                retorno.FechaUltimaModificacion = null;
                            retorno.CodUsuarioUltimaModificacion = rowsAffected.Tables[0].Rows[0][7].ToString();
                            retorno.DesUsuarioIngreso = rowsAffected.Tables[0].Rows[0][8].ToString();
                            retorno.DesUsuarioUltimaModificacion = rowsAffected.Tables[0].Rows[0][9].ToString();
                        }

                        return retorno;

                        #endregion

                    }
                    catch (Exception)
                    {
                        throw;
                    }
                }
        
                public int TiposCasosTotalFilas(String conexion, ParametrosTotalFilasEntidad entidad)
                {

                    int value;

                    #region PARAMETROS

                    SqlParameter[] paramTransaccion = new SqlParameter[]
                    {
                        new SqlParameter("@psValor_Filtro", entidad.ValorFiltro),
                        new SqlParameter("@psColumna_Filtro", entidad.ColumnaFiltro)
                    };

                    #endregion

                    try
                    {

                        #region TOTAL FILAS

                            value = transaccionDA.TransaccionRows(conexion, "Tipos_Casos_Total_Filas", paramTransaccion);

                            return value;

                        #endregion

                    }
                    catch (Exception)
                    {
                        throw;
                    }
                }

            #endregion 

            #region TIPOS CLASIFICACIONES INSTRUMENTOS
        
                public RespuestaEntidad TiposClasificacionesInstrumentosInsertar(String conexion, String conexionBitacora, TiposClasificacionesInstrumentosEntidad tipoClasificacionInstrumento, BitacorasEntidad _bitacora)
                {
                    RespuestaEntidad elemento = null;
                    DataSet rowsAffected;

                    #region PARAMETROS

                    SqlParameter[] paramTransaccion = new SqlParameter[]
                    {
                        new SqlParameter("@piCod_Tipo_Clasificacion_Instrumento", tipoClasificacionInstrumento.CodTipoClasificacionInstrumento),
                        new SqlParameter("@psDes_Tipo_Clasificacion_Instrumento", tipoClasificacionInstrumento.DesTipoClasificacionInstrumento),
                        new SqlParameter("@psInd_Metodo_Insercion", tipoClasificacionInstrumento.IndMetodoInsercion),
                        new SqlParameter("@psCod_Usuario", tipoClasificacionInstrumento.CodUsuarioIngreso)
                    };

                    #endregion

                    try
                    {

                        #region INSERTAR

                        rowsAffected = transaccionDA.TransaccionInsertar(conexion, conexionBitacora, "Tipos_Clasificaciones_Instrumentos_Inserta", paramTransaccion, EnumTipoBitacora.INSERTAR, _bitacora);
                        if (!rowsAffected.Equals(null))
                        {
                            elemento = new RespuestaEntidad();
                            elemento.ValorEstado = int.Parse(rowsAffected.Tables[0].Rows[0][0].ToString());
                            elemento.ValorError = int.Parse(rowsAffected.Tables[0].Rows[0][1].ToString());
                        }

                        return elemento;

                        #endregion

                    }
                    catch (Exception)
                    {
                        throw;
                    }
                }
        
                public RespuestaEntidad TiposClasificacionesInstrumentosModificar(String conexion, String conexionBitacora, TiposClasificacionesInstrumentosEntidad tipoClasificacionInstrumento, BitacorasEntidad _bitacora)
                {
                    RespuestaEntidad elemento = null;
                    DataSet rowsAffected;

                    #region PARAMETROS

                    SqlParameter[] paramTransaccion = new SqlParameter[]
                    {
                        new SqlParameter("@piId_Tipo_Clasificacion_Instrumento", tipoClasificacionInstrumento.IdTipoClasificacionInstrumento),
                        new SqlParameter("@piCod_Tipo_Clasificacion_Instrumento", tipoClasificacionInstrumento.CodTipoClasificacionInstrumento),
                        new SqlParameter("@psDes_Tipo_Clasificacion_Instrumento", tipoClasificacionInstrumento.DesTipoClasificacionInstrumento),
                        new SqlParameter("@psInd_Metodo_Insercion", tipoClasificacionInstrumento.IndMetodoInsercion),
                        new SqlParameter("@psCod_Usuario", tipoClasificacionInstrumento.CodUsuarioIngreso)
                    };

                    #endregion

                    #region KeyValuePair LIST

                    List<KeyValuePair<string, string>> itemConsulta = new List<KeyValuePair<string, string>>();
                    itemConsulta.Add(helper.CrearKeyValuePairItem("@piId_Tipo_Clasificacion_Instrumento", tipoClasificacionInstrumento.IdTipoClasificacionInstrumento.ToString()));

                    #endregion


                    try
                    {

                        #region MODIFICAR

                        rowsAffected = transaccionDA.TransaccionModificar(conexion, conexionBitacora, "Tipos_Clasificaciones_Instrumentos_Actualiza", paramTransaccion, EnumTipoBitacora.ACTUALIZAR, itemConsulta, "Tipos_Clasificaciones_Instrumentos_Consulta_Detalle", _bitacora);
                        if (!rowsAffected.Equals(null))
                        {
                            elemento = new RespuestaEntidad();
                            elemento.ValorEstado = int.Parse(rowsAffected.Tables[0].Rows[0][0].ToString());
                            elemento.ValorError = int.Parse(rowsAffected.Tables[0].Rows[0][1].ToString());
                        }

                        return elemento;

                        #endregion

                    }
                    catch (Exception)
                    {
                        throw;
                    }
                }
        
                public RespuestaEntidad TiposClasificacionesInstrumentosEliminar(String conexion, String conexionBitacora, TiposClasificacionesInstrumentosEntidad tipoClasificacionInstrumento, BitacorasEntidad _bitacora)
                {
                    RespuestaEntidad elemento = null;
                    DataSet rowsAffected;

                    #region PARAMETROS

                    SqlParameter[] paramTransaccion = new SqlParameter[]
                    {
                        new SqlParameter("@piId_Tipo_Clasificacion_Instrumento", tipoClasificacionInstrumento.IdTipoClasificacionInstrumento)
                    };

                    #endregion

                    #region KeyValuePair LIST

                    List<KeyValuePair<string, string>> itemConsulta = new List<KeyValuePair<string, string>>();
                    itemConsulta.Add(helper.CrearKeyValuePairItem("@piId_Tipo_Clasificacion_Instrumento", tipoClasificacionInstrumento.IdTipoClasificacionInstrumento.ToString()));

                    #endregion

                    try
                    {

                        #region ELIMINAR

                        rowsAffected = transaccionDA.TransaccionEliminar(conexion, conexionBitacora, "Tipos_Clasificaciones_Instrumentos_Elimina", paramTransaccion, EnumTipoBitacora.ELIMINAR, itemConsulta, "Tipos_Clasificaciones_Instrumentos_Consulta_Detalle", _bitacora);
                        if (!rowsAffected.Equals(null))
                        {
                            elemento = new RespuestaEntidad();
                            elemento.ValorEstado = int.Parse(rowsAffected.Tables[0].Rows[0][0].ToString());
                            elemento.ValorError = int.Parse(rowsAffected.Tables[0].Rows[0][1].ToString());
                        }

                        return elemento;

                        #endregion

                    }
                    catch (Exception)
                    {
                        throw;
                    }
                }

                public List<TiposClasificacionesInstrumentosEntidad> TiposClasificacionesInstrumentosConsultar(String conexion, ParametrosConsultaEntidad entidad)
                {
                    List<TiposClasificacionesInstrumentosEntidad> retorno = new List<TiposClasificacionesInstrumentosEntidad>();
                    TiposClasificacionesInstrumentosEntidad elemento;
                    DataSet rowsAffected;

                    #region PARAMETROS

                    SqlParameter[] paramTransaccion = new SqlParameter[]
                    {
                       new SqlParameter("@piIndice_Inicio_Fila", entidad.IndiceInicioFila),
                       new SqlParameter("@piMaximo_Filas", entidad.MaximoFilas),
                       new SqlParameter("@psValores_Filtro", entidad.ValorFiltro),
                       new SqlParameter("@psColumnas_Filtros", entidad.ColumnaFiltro),
                       new SqlParameter("@psColumna_Ordenar", entidad.ColumnaOrdenar)
                    };

                    #endregion

                    try
                    {

                        #region CONSULTAR

                            rowsAffected = transaccionDA.TransaccionConsulta(conexion, "Tipos_Clasificaciones_Instrumentos_Consulta", paramTransaccion);
                            if (!rowsAffected.Equals(null))
                            {
                                foreach (DataRow dr in rowsAffected.Tables[0].Rows)
                                {
                                    elemento = new TiposClasificacionesInstrumentosEntidad();
                                    elemento.IdTipoClasificacionInstrumento = int.Parse(dr[0].ToString());
                                    elemento.CodTipoClasificacionInstrumento = int.Parse(dr[1].ToString());
                                    elemento.DesTipoClasificacionInstrumento = dr[2].ToString();

                                    retorno.Add(elemento);
                                }
                            }

                            return retorno;

                        #endregion

                    }
                    catch (Exception)
                    {
                        throw;
                    }
                }
        
                public TiposClasificacionesInstrumentosEntidad TiposClasificacionesInstrumentosConsultarDetalle(String conexion, String conexionBitacora, TiposClasificacionesInstrumentosEntidad tipoClasificacionInstrumento, BitacorasEntidad _bitacora)
                {
                    TiposClasificacionesInstrumentosEntidad retorno = new TiposClasificacionesInstrumentosEntidad();
                    DataSet rowsAffected;

                    #region PARAMETROS

                    SqlParameter[] paramTransaccion = new SqlParameter[]
                    {
                        new SqlParameter("@piId_Tipo_Clasificacion_Instrumento", tipoClasificacionInstrumento.IdTipoClasificacionInstrumento)
                    };

                    #endregion

                    #region KeyValuePair LIST

                    List<KeyValuePair<string, string>> itemConsulta = new List<KeyValuePair<string, string>>();
                    itemConsulta.Add(helper.CrearKeyValuePairItem("@piId_Tipo_Clasificacion_Instrumento", tipoClasificacionInstrumento.IdTipoClasificacionInstrumento.ToString()));

                    #endregion

                    try
                    {

                        #region CONSULTAR DETALLE

                        rowsAffected = transaccionDA.TransaccionConsultaDetalle(conexion, conexionBitacora, "Tipos_Clasificaciones_Instrumentos_Consulta_Detalle", paramTransaccion, EnumTipoBitacora.CONSULTAR, itemConsulta, "Tipos_Clasificaciones_Instrumentos_Consulta_Detalle", _bitacora);
                        if (!rowsAffected.Equals(null))
                        {
                            retorno.IdTipoClasificacionInstrumento = int.Parse(rowsAffected.Tables[0].Rows[0][0].ToString());
                            retorno.CodTipoClasificacionInstrumento = int.Parse(rowsAffected.Tables[0].Rows[0][1].ToString());
                            retorno.DesTipoClasificacionInstrumento = rowsAffected.Tables[0].Rows[0][2].ToString();
                            retorno.IndMetodoInsercion = rowsAffected.Tables[0].Rows[0][3].ToString();
                            if (rowsAffected.Tables[0].Rows[0][4].ToString().Length > 0)
                                retorno.FechaIngreso = DateTime.Parse(rowsAffected.Tables[0].Rows[0][4].ToString());
                            else
                                retorno.FechaIngreso = null;
                            retorno.CodUsuarioIngreso = rowsAffected.Tables[0].Rows[0][5].ToString();
                            if (rowsAffected.Tables[0].Rows[0][6].ToString().Length > 0)
                                retorno.FechaUltimaModificacion = DateTime.Parse(rowsAffected.Tables[0].Rows[0][6].ToString());
                            else
                                retorno.FechaUltimaModificacion = null;
                            retorno.CodUsuarioUltimaModificacion = rowsAffected.Tables[0].Rows[0][7].ToString();
                            retorno.DesUsuarioIngreso = rowsAffected.Tables[0].Rows[0][8].ToString();
                            retorno.DesUsuarioUltimaModificacion = rowsAffected.Tables[0].Rows[0][9].ToString();
                        }

                        return retorno;

                        #endregion

                    }
                    catch (Exception)
                    {
                        throw;
                    }
                }
        
                public int TiposClasificacionesInstrumentosTotalFilas(String conexion, ParametrosTotalFilasEntidad entidad)
                {

                    int value;

                    #region PARAMETROS

                    SqlParameter[] paramTransaccion = new SqlParameter[]
                    {
                        new SqlParameter("@psValor_Filtro", entidad.ValorFiltro),
                        new SqlParameter("@psColumna_Filtro", entidad.ColumnaFiltro)
                    };

                    #endregion

                    try
                    {

                        #region TOTAL FILAS

                            value = transaccionDA.TransaccionRows(conexion, "Tipos_Clasificaciones_Instrumentos_Total_Filas", paramTransaccion);

                            return value;

                        #endregion

                    }
                    catch (Exception)
                    {
                        throw;
                    }
                }

                public List<ListaEntidad> TiposClasificacionesInstrumentosLista(String conexion, String filtro)
                {
                    List<ListaEntidad> retorno = new List<ListaEntidad>();
                    ListaEntidad elemento;
                    DataSet rowsAffected;

                    #region PARAMETROS

                    SqlParameter[] paramTransaccion = new SqlParameter[]
                    {
                        new SqlParameter("@psFiltro", filtro)
                    };

                    #endregion

                    try
                    {

                        #region LISTA

                        rowsAffected = transaccionDA.TransaccionConsulta(conexion, "Tipos_Clasificaciones_Instrumentos_Lista", paramTransaccion);
                        if (!rowsAffected.Equals(null))
                        {
                            foreach (DataRow dr in rowsAffected.Tables[0].Rows)
                            {
                                elemento = new ListaEntidad();
                                elemento.Valor = dr[0].ToString();
                                elemento.Texto = dr[1].ToString();

                                retorno.Add(elemento);
                            }
                        }
                        return retorno;

                        #endregion

                    }
                    catch (Exception)
                    {
                        throw;
                    }
                }

                public List<ListaEntidad> TiposClasificacionesInstrumentosListaEntidad(String conexion, String filtro)
                {
                    List<ListaEntidad> retorno = new List<ListaEntidad>();
                    ListaEntidad elemento;
                    DataSet rowsAffected;

                    #region PARAMETROS

                    SqlParameter[] paramTransaccion = new SqlParameter[]
                    {
                        new SqlParameter("@psFiltro", filtro)
                    };

                    #endregion

                    try
                    {

                        #region LISTA

                        rowsAffected = transaccionDA.TransaccionConsulta(conexion, "Tipos_Clasificaciones_Instrumentos_Lista", paramTransaccion);
                        if (!rowsAffected.Equals(null))
                        {
                            foreach (DataRow dr in rowsAffected.Tables[0].Rows)
                            {
                                elemento = new ListaEntidad();
                                elemento.Valor = dr[0].ToString();
                                elemento.Texto = dr[1].ToString();

                                retorno.Add(elemento);
                            }
                        }
                        return retorno;

                        #endregion

                    }
                    catch (Exception)
                    {
                        throw;
                    }
                }

            #endregion 

            #region TIPOS COMPORTAMIENTOS PAGOS
        
                public RespuestaEntidad TiposComportamientosPagosInsertar(String conexion, String conexionBitacora, TiposComportamientosPagosEntidad tipoComportamientoPago, BitacorasEntidad _bitacora)
                {
                    RespuestaEntidad elemento = null;
                    DataSet rowsAffected;

                    #region PARAMETROS

                    SqlParameter[] paramTransaccion = new SqlParameter[]
                    {
                        new SqlParameter("@piCod_Tipo_Comportamiento_Pago", tipoComportamientoPago.CodTipoComportamientoPago),
                        new SqlParameter("@psDes_Tipo_Comportamiento_Pago", tipoComportamientoPago.DesTipoComportamientoPago),
                        new SqlParameter("@psInd_Metodo_Insercion", tipoComportamientoPago.IndMetodoInsercion),
                        new SqlParameter("@psCod_Usuario", tipoComportamientoPago.CodUsuarioIngreso)
                    };

                    #endregion

                    try
                    {

                        #region INSERTAR

                        rowsAffected = transaccionDA.TransaccionInsertar(conexion, conexionBitacora, "Tipos_Comportamientos_Pagos_Inserta", paramTransaccion, EnumTipoBitacora.INSERTAR, _bitacora);
                        if (!rowsAffected.Equals(null))
                        {
                            elemento = new RespuestaEntidad();
                            elemento.ValorEstado = int.Parse(rowsAffected.Tables[0].Rows[0][0].ToString());
                            elemento.ValorError = int.Parse(rowsAffected.Tables[0].Rows[0][1].ToString());
                        }

                        return elemento;

                        #endregion

                    }
                    catch (Exception)
                    {
                        throw;
                    }
                }
        
                public RespuestaEntidad TiposComportamientosPagosModificar(String conexion, String conexionBitacora, TiposComportamientosPagosEntidad tipoComportamientoPago, BitacorasEntidad _bitacora)
                {
                    RespuestaEntidad elemento = null;
                    DataSet rowsAffected;

                    #region PARAMETROS

                    SqlParameter[] paramTransaccion = new SqlParameter[]
                    {
                        new SqlParameter("@piId_Tipo_Comportamiento_Pago", tipoComportamientoPago.IdTipoComportamientoPago),
                        new SqlParameter("@piCod_Tipo_Comportamiento_Pago", tipoComportamientoPago.CodTipoComportamientoPago),
                        new SqlParameter("@psDes_Tipo_Comportamiento_Pago", tipoComportamientoPago.DesTipoComportamientoPago),
                        new SqlParameter("@psInd_Metodo_Insercion", tipoComportamientoPago.IndMetodoInsercion),
                        new SqlParameter("@psCod_Usuario", tipoComportamientoPago.CodUsuarioIngreso)
                    };

                    #endregion

                    #region KeyValuePair LIST

                    List<KeyValuePair<string, string>> itemConsulta = new List<KeyValuePair<string, string>>();
                    itemConsulta.Add(helper.CrearKeyValuePairItem("@piId_Tipo_Comportamiento_Pago", tipoComportamientoPago.IdTipoComportamientoPago.ToString()));

                    #endregion


                    try
                    {

                        #region MODIFICAR

                        rowsAffected = transaccionDA.TransaccionModificar(conexion, conexionBitacora, "Tipos_Comportamientos_Pagos_Actualiza", paramTransaccion, EnumTipoBitacora.ACTUALIZAR, itemConsulta, "Tipos_Comportamientos_Pagos_Consulta_Detalle", _bitacora);
                        if (!rowsAffected.Equals(null))
                        {
                            elemento = new RespuestaEntidad();
                            elemento.ValorEstado = int.Parse(rowsAffected.Tables[0].Rows[0][0].ToString());
                            elemento.ValorError = int.Parse(rowsAffected.Tables[0].Rows[0][1].ToString());
                        }

                        return elemento;

                        #endregion

                    }
                    catch (Exception)
                    {
                        throw;
                    }
                }
        
                public RespuestaEntidad TiposComportamientosPagosEliminar(String conexion, String conexionBitacora, TiposComportamientosPagosEntidad tipoComportamientoPago, BitacorasEntidad _bitacora)
                {
                    RespuestaEntidad elemento = null;
                    DataSet rowsAffected;

                    #region PARAMETROS

                    SqlParameter[] paramTransaccion = new SqlParameter[]
                    {
                        new SqlParameter("@piId_Tipo_Comportamiento_Pago", tipoComportamientoPago.IdTipoComportamientoPago)
                    };

                    #endregion

                    #region KeyValuePair LIST

                    List<KeyValuePair<string, string>> itemConsulta = new List<KeyValuePair<string, string>>();
                    itemConsulta.Add(helper.CrearKeyValuePairItem("@piId_Tipo_Comportamiento_Pago", tipoComportamientoPago.IdTipoComportamientoPago.ToString()));

                    #endregion

                    try
                    {

                        #region ELIMINAR

                        rowsAffected = transaccionDA.TransaccionEliminar(conexion, conexionBitacora, "Tipos_Comportamientos_Pagos_Elimina", paramTransaccion, EnumTipoBitacora.ELIMINAR, itemConsulta, "Tipos_Comportamientos_Pagos_Consulta_Detalle", _bitacora);
                        if (!rowsAffected.Equals(null))
                        {
                            elemento = new RespuestaEntidad();
                            elemento.ValorEstado = int.Parse(rowsAffected.Tables[0].Rows[0][0].ToString());
                            elemento.ValorError = int.Parse(rowsAffected.Tables[0].Rows[0][1].ToString());
                        }

                        return elemento;

                        #endregion

                    }
                    catch (Exception)
                    {
                        throw;
                    }
                }

                public List<TiposComportamientosPagosEntidad> TiposComportamientosPagosConsultar(String conexion, ParametrosConsultaEntidad entidad)
                {
                    List<TiposComportamientosPagosEntidad> retorno = new List<TiposComportamientosPagosEntidad>();
                    TiposComportamientosPagosEntidad elemento;
                    DataSet rowsAffected;

                    #region PARAMETROS

                    SqlParameter[] paramTransaccion = new SqlParameter[]
                    {
                       new SqlParameter("@piIndice_Inicio_Fila", entidad.IndiceInicioFila),
                       new SqlParameter("@piMaximo_Filas", entidad.MaximoFilas),
                       new SqlParameter("@psValores_Filtro", entidad.ValorFiltro),
                       new SqlParameter("@psColumnas_Filtros", entidad.ColumnaFiltro),
                       new SqlParameter("@psColumna_Ordenar", entidad.ColumnaOrdenar)
                    };

                    #endregion

                    try
                    {

                        #region CONSULTAR

                            rowsAffected = transaccionDA.TransaccionConsulta(conexion, "Tipos_Comportamientos_Pagos_Consulta", paramTransaccion);
                            if (!rowsAffected.Equals(null))
                            {
                                foreach (DataRow dr in rowsAffected.Tables[0].Rows)
                                {
                                    elemento = new TiposComportamientosPagosEntidad();
                                    elemento.IdTipoComportamientoPago = int.Parse(dr[0].ToString());
                                    elemento.CodTipoComportamientoPago = int.Parse(dr[1].ToString());
                                    elemento.DesTipoComportamientoPago = dr[2].ToString();

                                    retorno.Add(elemento);
                                }
                            }

                            return retorno;

                        #endregion

                    }
                    catch (Exception)
                    {
                        throw;
                    }
                }
        
                public TiposComportamientosPagosEntidad TiposComportamientosPagosConsultarDetalle(String conexion, String conexionBitacora, TiposComportamientosPagosEntidad tipoComportamientoPago, BitacorasEntidad _bitacora)
                {
                    TiposComportamientosPagosEntidad retorno = new TiposComportamientosPagosEntidad();
                    DataSet rowsAffected;

                    #region PARAMETROS

                    SqlParameter[] paramTransaccion = new SqlParameter[]
                    {
                        new SqlParameter("@piId_Tipo_Comportamiento_Pago", tipoComportamientoPago.IdTipoComportamientoPago)
                    };

                    #endregion

                    #region KeyValuePair LIST

                    List<KeyValuePair<string, string>> itemConsulta = new List<KeyValuePair<string, string>>();
                    itemConsulta.Add(helper.CrearKeyValuePairItem("@piId_Tipo_Comportamiento_Pago", tipoComportamientoPago.IdTipoComportamientoPago.ToString()));

                    #endregion

                    try
                    {

                        #region CONSULTAR DETALLE

                        rowsAffected = transaccionDA.TransaccionConsultaDetalle(conexion, conexionBitacora, "Tipos_Comportamientos_Pagos_Consulta_Detalle", paramTransaccion, EnumTipoBitacora.CONSULTAR, itemConsulta, "Tipos_Comportamientos_Pagos_Consulta_Detalle", _bitacora);
                        if (!rowsAffected.Equals(null))
                        {
                            retorno.IdTipoComportamientoPago = int.Parse(rowsAffected.Tables[0].Rows[0][0].ToString());
                            retorno.CodTipoComportamientoPago = int.Parse(rowsAffected.Tables[0].Rows[0][1].ToString());
                            retorno.DesTipoComportamientoPago = rowsAffected.Tables[0].Rows[0][2].ToString();
                            retorno.IndMetodoInsercion = rowsAffected.Tables[0].Rows[0][3].ToString();
                            if (rowsAffected.Tables[0].Rows[0][4].ToString().Length > 0)
                                retorno.FechaIngreso = DateTime.Parse(rowsAffected.Tables[0].Rows[0][4].ToString());
                            else
                                retorno.FechaIngreso = null;
                            retorno.CodUsuarioIngreso = rowsAffected.Tables[0].Rows[0][5].ToString();
                            if (rowsAffected.Tables[0].Rows[0][6].ToString().Length > 0)
                                retorno.FechaUltimaModificacion = DateTime.Parse(rowsAffected.Tables[0].Rows[0][6].ToString());
                            else
                                retorno.FechaUltimaModificacion = null;
                            retorno.CodUsuarioUltimaModificacion = rowsAffected.Tables[0].Rows[0][7].ToString();
                            retorno.DesUsuarioIngreso = rowsAffected.Tables[0].Rows[0][8].ToString();
                            retorno.DesUsuarioUltimaModificacion = rowsAffected.Tables[0].Rows[0][9].ToString();
                        }
                        return retorno;

                        #endregion

                    }
                    catch (Exception)
                    {
                        throw;
                    }
                }
        
                public int TiposComportamientosPagosTotalFilas(String conexion, ParametrosTotalFilasEntidad entidad)
                {

                    int value;

                    #region PARAMETROS

                    SqlParameter[] paramTransaccion = new SqlParameter[]
                    {
                        new SqlParameter("@psValor_Filtro", entidad.ValorFiltro),
                        new SqlParameter("@psColumna_Filtro", entidad.ColumnaFiltro)
                    };

                    #endregion

                    try
                    {

                        #region TOTAL FILAS

                            value = transaccionDA.TransaccionRows(conexion, "Tipos_Comportamientos_Pagos_Total_Filas", paramTransaccion);

                            return value;

                        #endregion

                    }
                    catch (Exception)
                    {
                        throw;
                    }
                }

            #endregion 

            #region TIPOS CONSTRUCCIONES
        
                public RespuestaEntidad TiposConstruccionesInsertar(String conexion, String conexionBitacora, TiposConstruccionesEntidad tipoConstruccion, BitacorasEntidad _bitacora)
                {
                    RespuestaEntidad elemento = null;
                    DataSet rowsAffected;

                    #region PARAMETROS

                    SqlParameter[] paramTransaccion = new SqlParameter[]
                    {
                        new SqlParameter("@piCod_Tipo_Construccion", tipoConstruccion.CodTipoConstruccion),
                        new SqlParameter("@psDes_Tipo_Construccion", tipoConstruccion.DesTipoConstruccion),
                        new SqlParameter("@psInd_Metodo_Insercion", tipoConstruccion.IndMetodoInsercion),
                        new SqlParameter("@psCod_Usuario", tipoConstruccion.CodUsuarioIngreso)
                    };

                    #endregion

                    try
                    {

                        #region INSERTAR

                        rowsAffected = transaccionDA.TransaccionInsertar(conexion, conexionBitacora, "Tipos_Construcciones_Inserta", paramTransaccion, EnumTipoBitacora.INSERTAR, _bitacora);
                        if (!rowsAffected.Equals(null))
                        {
                            elemento = new RespuestaEntidad();
                            elemento.ValorEstado = int.Parse(rowsAffected.Tables[0].Rows[0][0].ToString());
                            elemento.ValorError = int.Parse(rowsAffected.Tables[0].Rows[0][1].ToString());
                        }

                        return elemento;

                        #endregion

                    }
                    catch (Exception)
                    {
                        throw;
                    }
                }
        
                public RespuestaEntidad TiposConstruccionesModificar(String conexion, String conexionBitacora, TiposConstruccionesEntidad tipoConstruccion, BitacorasEntidad _bitacora)
                {
                    RespuestaEntidad elemento = null;
                    DataSet rowsAffected;

                    #region PARAMETROS

                    SqlParameter[] paramTransaccion = new SqlParameter[]
                    {
                        new SqlParameter("@piId_Tipo_Construccion", tipoConstruccion.IdTipoConstruccion),
                        new SqlParameter("@piCod_Tipo_Construccion", tipoConstruccion.CodTipoConstruccion),
                        new SqlParameter("@psDes_Tipo_Construccion", tipoConstruccion.DesTipoConstruccion),
                        new SqlParameter("@psInd_Metodo_Insercion", tipoConstruccion.IndMetodoInsercion),
                        new SqlParameter("@psCod_Usuario", tipoConstruccion.CodUsuarioIngreso)
                    };

                    #endregion

                    #region KeyValuePair LIST

                    List<KeyValuePair<string, string>> itemConsulta = new List<KeyValuePair<string, string>>();
                    itemConsulta.Add(helper.CrearKeyValuePairItem("@piId_Tipo_Construccion", tipoConstruccion.IdTipoConstruccion.ToString()));

                    #endregion

                    try
                    {

                        #region MODIFICAR

                        rowsAffected = transaccionDA.TransaccionModificar(conexion, conexionBitacora, "Tipos_Construcciones_Actualiza", paramTransaccion, EnumTipoBitacora.ACTUALIZAR, itemConsulta, "Tipos_Construcciones_Consulta_Detalle", _bitacora);
                        if (!rowsAffected.Equals(null))
                        {
                            elemento = new RespuestaEntidad();
                            elemento.ValorEstado = int.Parse(rowsAffected.Tables[0].Rows[0][0].ToString());
                            elemento.ValorError = int.Parse(rowsAffected.Tables[0].Rows[0][1].ToString());
                        }

                        return elemento;

                        #endregion

                    }
                    catch (Exception)
                    {
                        throw;
                    }
                }
        
                public RespuestaEntidad TiposConstruccionesEliminar(String conexion, String conexionBitacora, TiposConstruccionesEntidad tipoConstruccion, BitacorasEntidad _bitacora)
                {
                    RespuestaEntidad elemento = null;
                    DataSet rowsAffected;

                    #region PARAMETROS

                    SqlParameter[] paramTransaccion = new SqlParameter[]
                    {
                        new SqlParameter("@piId_Tipo_Construccion", tipoConstruccion.IdTipoConstruccion)
                    };

                    #endregion

                    #region KeyValuePair LIST

                    List<KeyValuePair<string, string>> itemConsulta = new List<KeyValuePair<string, string>>();
                    itemConsulta.Add(helper.CrearKeyValuePairItem("@piId_Tipo_Construccion", tipoConstruccion.IdTipoConstruccion.ToString()));

                    #endregion

                    try
                    {

                        #region ELIMINAR

                        rowsAffected = transaccionDA.TransaccionEliminar(conexion, conexionBitacora, "Tipos_Construcciones_Elimina", paramTransaccion, EnumTipoBitacora.ELIMINAR, itemConsulta, "Tipos_Construcciones_Consulta_Detalle", _bitacora);
                        if (!rowsAffected.Equals(null))
                        {
                            elemento = new RespuestaEntidad();
                            elemento.ValorEstado = int.Parse(rowsAffected.Tables[0].Rows[0][0].ToString());
                            elemento.ValorError = int.Parse(rowsAffected.Tables[0].Rows[0][1].ToString());
                        }

                        return elemento;

                        #endregion

                    }
                    catch (Exception)
                    {
                        throw;
                    }
                }

                public List<TiposConstruccionesEntidad> TiposConstruccionesConsultar(String conexion, ParametrosConsultaEntidad entidad)
                {
                    List<TiposConstruccionesEntidad> retorno = new List<TiposConstruccionesEntidad>();
                    TiposConstruccionesEntidad elemento;
                    DataSet rowsAffected;

                    #region PARAMETROS

                    SqlParameter[] paramTransaccion = new SqlParameter[]
                    {
                       new SqlParameter("@piIndice_Inicio_Fila", entidad.IndiceInicioFila),
                       new SqlParameter("@piMaximo_Filas", entidad.MaximoFilas),
                       new SqlParameter("@psValores_Filtro", entidad.ValorFiltro),
                       new SqlParameter("@psColumnas_Filtros", entidad.ColumnaFiltro),
                       new SqlParameter("@psColumna_Ordenar", entidad.ColumnaOrdenar)
                    };

                    #endregion

                    try
                    {

                        #region CONSULTAR

                            rowsAffected = transaccionDA.TransaccionConsulta(conexion, "Tipos_Construcciones_Consulta", paramTransaccion);
                            if (!rowsAffected.Equals(null))
                            {
                                foreach (DataRow dr in rowsAffected.Tables[0].Rows)
                                {
                                    elemento = new TiposConstruccionesEntidad();
                                    elemento.IdTipoConstruccion = int.Parse(dr[0].ToString());
                                    elemento.CodTipoConstruccion = int.Parse(dr[1].ToString());
                                    elemento.DesTipoConstruccion = dr[2].ToString();

                                    retorno.Add(elemento);
                                }
                            }

                            return retorno;

                        #endregion

                    }
                    catch (Exception)
                    {
                        throw;
                    }
                }
        
                public TiposConstruccionesEntidad TiposConstruccionesConsultarDetalle(String conexion, String conexionBitacora, TiposConstruccionesEntidad tipoConstruccion, BitacorasEntidad _bitacora)
                {
                    TiposConstruccionesEntidad retorno = new TiposConstruccionesEntidad();
                    DataSet rowsAffected;

                    #region PARAMETROS

                    SqlParameter[] paramTransaccion = new SqlParameter[]
                    {
                        new SqlParameter("@piId_Tipo_Construccion", tipoConstruccion.IdTipoConstruccion)
                    };

                    #endregion

                    #region KeyValuePair LIST

                    List<KeyValuePair<string, string>> itemConsulta = new List<KeyValuePair<string, string>>();
                    itemConsulta.Add(helper.CrearKeyValuePairItem("@piId_Tipo_Construccion", tipoConstruccion.IdTipoConstruccion.ToString()));

                    #endregion

                    try
                    {

                        #region CONSULTAR DETALLE

                        rowsAffected = transaccionDA.TransaccionConsultaDetalle(conexion, conexionBitacora, "Tipos_Construcciones_Consulta_Detalle", paramTransaccion, EnumTipoBitacora.CONSULTAR, itemConsulta, "Tipos_Construcciones_Consulta_Detalle", _bitacora);
                        if (!rowsAffected.Equals(null))
                        {
                            retorno.IdTipoConstruccion = int.Parse(rowsAffected.Tables[0].Rows[0][0].ToString());
                            retorno.CodTipoConstruccion = int.Parse(rowsAffected.Tables[0].Rows[0][1].ToString());
                            retorno.DesTipoConstruccion = rowsAffected.Tables[0].Rows[0][2].ToString();
                            retorno.IndMetodoInsercion = rowsAffected.Tables[0].Rows[0][3].ToString();
                            if (rowsAffected.Tables[0].Rows[0][4].ToString().Length > 0)
                                retorno.FechaIngreso = DateTime.Parse(rowsAffected.Tables[0].Rows[0][4].ToString());
                            else
                                retorno.FechaIngreso = null;
                            retorno.CodUsuarioIngreso = rowsAffected.Tables[0].Rows[0][5].ToString();
                            if (rowsAffected.Tables[0].Rows[0][6].ToString().Length > 0)
                                retorno.FechaUltimaModificacion = DateTime.Parse(rowsAffected.Tables[0].Rows[0][6].ToString());
                            else
                                retorno.FechaUltimaModificacion = null;
                            retorno.CodUsuarioUltimaModificacion = rowsAffected.Tables[0].Rows[0][7].ToString();
                            retorno.DesUsuarioIngreso = rowsAffected.Tables[0].Rows[0][8].ToString();
                            retorno.DesUsuarioUltimaModificacion = rowsAffected.Tables[0].Rows[0][9].ToString();
                        }

                        return retorno;

                        #endregion

                    }
                    catch (Exception)
                    {
                        throw;
                    }
                }
        
                public int TiposConstruccionesTotalFilas(String conexion, ParametrosTotalFilasEntidad entidad)
                {

                    int value;

                    #region PARAMETROS

                    SqlParameter[] paramTransaccion = new SqlParameter[]
                    {
                        new SqlParameter("@psValor_Filtro", entidad.ValorFiltro),
                        new SqlParameter("@psColumna_Filtro", entidad.ColumnaFiltro)
                    };

                    #endregion

                    try
                    {

                        #region TOTAL FILAS

                            value = transaccionDA.TransaccionRows(conexion, "Tipos_Construcciones_Total_Filas", paramTransaccion);

                            return value;

                        #endregion

                    }
                    catch (Exception)
                    {
                        throw;
                    }
                }

            #endregion 

            #region TIPOS DOCUMENTOS LEGALES
        
                public RespuestaEntidad TiposDocumentosLegalesInsertar(String conexion, String conexionBitacora, TiposDocumentosLegalesEntidad tipoDocumentoLegal, BitacorasEntidad _bitacora)
                {
                    RespuestaEntidad elemento = null;
                    DataSet rowsAffected;

                    #region PARAMETROS

                    SqlParameter[] paramTransaccion = new SqlParameter[]
                    {
                        new SqlParameter("@piCod_Tipo_Documento_Legal", tipoDocumentoLegal.CodTipoDocumentoLegal),
                        new SqlParameter("@psDes_Tipo_Documento_Legal", tipoDocumentoLegal.DesTipoDocumentoLegal),
                        new SqlParameter("@psInd_Metodo_Insercion", tipoDocumentoLegal.IndMetodoInsercion),
                        new SqlParameter("@psCod_Usuario", tipoDocumentoLegal.CodUsuarioIngreso)
                    };

                    #endregion

                    try
                    {

                        #region INSERTAR

                        rowsAffected = transaccionDA.TransaccionInsertar(conexion, conexionBitacora, "Tipos_Documentos_Legales_Inserta", paramTransaccion, EnumTipoBitacora.INSERTAR, _bitacora);
                        if (!rowsAffected.Equals(null))
                        {
                            elemento = new RespuestaEntidad();
                            elemento.ValorEstado = int.Parse(rowsAffected.Tables[0].Rows[0][0].ToString());
                            elemento.ValorError = int.Parse(rowsAffected.Tables[0].Rows[0][1].ToString());
                        }

                        return elemento;

                        #endregion

                    }
                    catch (Exception)
                    {
                        throw;
                    }
                }
        
                public RespuestaEntidad TiposDocumentosLegalesModificar(String conexion, String conexionBitacora, TiposDocumentosLegalesEntidad tipoDocumentoLegal, BitacorasEntidad _bitacora)
                {
                    RespuestaEntidad elemento = null;
                    DataSet rowsAffected;

                    #region PARAMETROS

                    SqlParameter[] paramTransaccion = new SqlParameter[]
                    {
                        new SqlParameter("@piId_Tipo_Documento_Legal", tipoDocumentoLegal.IdTipoDocumentoLegal),
                        new SqlParameter("@piCod_Tipo_Documento_Legal", tipoDocumentoLegal.CodTipoDocumentoLegal),
                        new SqlParameter("@psDes_Tipo_Documento_Legal", tipoDocumentoLegal.DesTipoDocumentoLegal),
                        new SqlParameter("@psInd_Metodo_Insercion", tipoDocumentoLegal.IndMetodoInsercion),
                        new SqlParameter("@psCod_Usuario", tipoDocumentoLegal.CodUsuarioIngreso)
                    };

                    #endregion

                    #region KeyValuePair LIST

                    List<KeyValuePair<string, string>> itemConsulta = new List<KeyValuePair<string, string>>();
                    itemConsulta.Add(helper.CrearKeyValuePairItem("@piId_Tipo_Documento_Legal", tipoDocumentoLegal.IdTipoDocumentoLegal.ToString()));

                    #endregion

                    try
                    {

                        #region MODIFICAR

                        rowsAffected = transaccionDA.TransaccionModificar(conexion, conexionBitacora, "Tipos_Documentos_Legales_Actualiza", paramTransaccion, EnumTipoBitacora.ACTUALIZAR, itemConsulta, "Tipos_Documentos_Legales_Consulta_Detalle", _bitacora);
                        if (!rowsAffected.Equals(null))
                        {
                            elemento = new RespuestaEntidad();
                            elemento.ValorEstado = int.Parse(rowsAffected.Tables[0].Rows[0][0].ToString());
                            elemento.ValorError = int.Parse(rowsAffected.Tables[0].Rows[0][1].ToString());
                        }

                        return elemento;

                        #endregion

                    }
                    catch (Exception)
                    {
                        throw;
                    }
                }
        
                public RespuestaEntidad TiposDocumentosLegalesEliminar(String conexion, String conexionBitacora, TiposDocumentosLegalesEntidad tipoDocumentoLegal, BitacorasEntidad _bitacora)
                {
                    RespuestaEntidad elemento = null;
                    DataSet rowsAffected;

                    #region PARAMETROS

                    SqlParameter[] paramTransaccion = new SqlParameter[]
                    {
                        new SqlParameter("@piId_Tipo_Documento_Legal", tipoDocumentoLegal.IdTipoDocumentoLegal)
                    };

                    #endregion

                    #region KeyValuePair LIST

                    List<KeyValuePair<string, string>> itemConsulta = new List<KeyValuePair<string, string>>();
                    itemConsulta.Add(helper.CrearKeyValuePairItem("@piId_Tipo_Documento_Legal", tipoDocumentoLegal.IdTipoDocumentoLegal.ToString()));

                    #endregion

                    try
                    {

                        #region ELIMINAR

                        rowsAffected = transaccionDA.TransaccionEliminar(conexion, conexionBitacora, "Tipos_Documentos_Legales_Elimina", paramTransaccion, EnumTipoBitacora.ELIMINAR, itemConsulta, "Tipos_Documentos_Legales_Consulta_Detalle", _bitacora);
                        if (!rowsAffected.Equals(null))
                        {
                            elemento = new RespuestaEntidad();
                            elemento.ValorEstado = int.Parse(rowsAffected.Tables[0].Rows[0][0].ToString());
                            elemento.ValorError = int.Parse(rowsAffected.Tables[0].Rows[0][1].ToString());
                        }

                        return elemento;

                        #endregion

                    }
                    catch (Exception)
                    {
                        throw;
                    }
                }

                public List<TiposDocumentosLegalesEntidad> TiposDocumentosLegalesConsultar(String conexion, ParametrosConsultaEntidad entidad)
                {
                    List<TiposDocumentosLegalesEntidad> retorno = new List<TiposDocumentosLegalesEntidad>();
                    TiposDocumentosLegalesEntidad elemento;
                    DataSet rowsAffected;

                    #region PARAMETROS

                    SqlParameter[] paramTransaccion = new SqlParameter[]
                    {
                       new SqlParameter("@piIndice_Inicio_Fila", entidad.IndiceInicioFila),
                       new SqlParameter("@piMaximo_Filas", entidad.MaximoFilas),
                       new SqlParameter("@psValores_Filtro", entidad.ValorFiltro),
                       new SqlParameter("@psColumnas_Filtros", entidad.ColumnaFiltro),
                       new SqlParameter("@psColumna_Ordenar", entidad.ColumnaOrdenar)
                    };

                    #endregion

                    try
                    {

                        #region CONSULTAR

                            rowsAffected = transaccionDA.TransaccionConsulta(conexion, "Tipos_Documentos_Legales_Consulta", paramTransaccion);
                            if (!rowsAffected.Equals(null))
                            {
                                foreach (DataRow dr in rowsAffected.Tables[0].Rows)
                                {
                                    elemento = new TiposDocumentosLegalesEntidad();
                                    elemento.IdTipoDocumentoLegal = int.Parse(dr[0].ToString());
                                    elemento.CodTipoDocumentoLegal = int.Parse(dr[1].ToString());
                                    elemento.DesTipoDocumentoLegal = dr[2].ToString();

                                    retorno.Add(elemento);
                                }
                            }

                            return retorno;

                        #endregion

                    }
                    catch (Exception)
                    {
                        throw;
                    }
                }
        
                public TiposDocumentosLegalesEntidad TiposDocumentosLegalesConsultarDetalle(String conexion, String conexionBitacora, TiposDocumentosLegalesEntidad tipoDocumentoLegal, BitacorasEntidad _bitacora)
                {
                    TiposDocumentosLegalesEntidad retorno = new TiposDocumentosLegalesEntidad();
                    DataSet rowsAffected;

                    #region PARAMETROS

                    SqlParameter[] paramTransaccion = new SqlParameter[]
                    {
                        new SqlParameter("@piId_Tipo_Documento_Legal", tipoDocumentoLegal.IdTipoDocumentoLegal)
                    };

                    #endregion

                    #region KeyValuePair LIST

                    List<KeyValuePair<string, string>> itemConsulta = new List<KeyValuePair<string, string>>();
                    itemConsulta.Add(helper.CrearKeyValuePairItem("@piId_Tipo_Documento_Legal", tipoDocumentoLegal.IdTipoDocumentoLegal.ToString()));

                    #endregion

                    try
                    {

                        #region CONSULTAR DETALLE

                        rowsAffected = transaccionDA.TransaccionConsultaDetalle(conexion, conexionBitacora, "Tipos_Documentos_Legales_Consulta_Detalle", paramTransaccion, EnumTipoBitacora.CONSULTAR, itemConsulta, "Tipos_Documentos_Legales_Consulta_Detalle", _bitacora);
                        if (!rowsAffected.Equals(null))
                        {
                            retorno.IdTipoDocumentoLegal = int.Parse(rowsAffected.Tables[0].Rows[0][0].ToString());
                            retorno.CodTipoDocumentoLegal = int.Parse(rowsAffected.Tables[0].Rows[0][1].ToString());
                            retorno.DesTipoDocumentoLegal = rowsAffected.Tables[0].Rows[0][2].ToString();
                            retorno.IndMetodoInsercion = rowsAffected.Tables[0].Rows[0][3].ToString();
                            if (rowsAffected.Tables[0].Rows[0][4].ToString().Length > 0)
                                retorno.FechaIngreso = DateTime.Parse(rowsAffected.Tables[0].Rows[0][4].ToString());
                            else
                                retorno.FechaIngreso = null;
                            retorno.CodUsuarioIngreso = rowsAffected.Tables[0].Rows[0][5].ToString();
                            if (rowsAffected.Tables[0].Rows[0][6].ToString().Length > 0)
                                retorno.FechaUltimaModificacion = DateTime.Parse(rowsAffected.Tables[0].Rows[0][6].ToString());
                            else
                                retorno.FechaUltimaModificacion = null;
                            retorno.CodUsuarioUltimaModificacion = rowsAffected.Tables[0].Rows[0][7].ToString();
                            retorno.DesUsuarioIngreso = rowsAffected.Tables[0].Rows[0][8].ToString();
                            retorno.DesUsuarioUltimaModificacion = rowsAffected.Tables[0].Rows[0][9].ToString();
                        }

                        return retorno;

                        #endregion

                    }
                    catch (Exception)
                    {
                        throw;
                    }
                }
        
                public int TiposDocumentosLegalesTotalFilas(String conexion, ParametrosTotalFilasEntidad entidad)
                {

                    int value;

                    #region PARAMETROS

                    SqlParameter[] paramTransaccion = new SqlParameter[]
                    {
                        new SqlParameter("@psValor_Filtro", entidad.ValorFiltro),
                        new SqlParameter("@psColumna_Filtro", entidad.ColumnaFiltro)
                    };

                    #endregion

                    try
                    {

                        #region TOTAL FILAS

                            value = transaccionDA.TransaccionRows(conexion, "Tipos_Documentos_Legales_Total_Filas", paramTransaccion);

                            return value;

                        #endregion

                    }
                    catch (Exception)
                    {
                        throw;
                    }
                }
                //REQUERIMIENTO: 1-24493227
                public List<ListaEntidad> TiposDocumentosLegalesLista(String conexion, String filtro)
                {
                    List<ListaEntidad> retorno = new List<ListaEntidad>();
                    ListaEntidad elemento;
                    DataSet rowsAffected;

                    #region PARAMETROS

                    SqlParameter[] paramTransaccion = new SqlParameter[]
                    {
                        new SqlParameter("@psFiltro", filtro)
                    };

                    #endregion

                    try
                    {

                        #region LISTA

                        rowsAffected = transaccionDA.TransaccionConsulta(conexion, "Tipos_Documentos_Legales_Lista", paramTransaccion);
                        if (!rowsAffected.Equals(null))
                        {
                            foreach (DataRow dr in rowsAffected.Tables[0].Rows)
                            {
                                elemento = new ListaEntidad();
                                elemento.Valor = dr[0].ToString();
                                elemento.Texto = dr[1].ToString();

                                retorno.Add(elemento);
                            }
                        }
                        return retorno;

                        #endregion

                    }
                    catch (Exception)
                    {
                        throw;
                    }
                }        

            #endregion 

            #region TIPOS EMISORES
        
                public RespuestaEntidad TiposEmisoresInsertar(String conexion, String conexionBitacora, TiposEmisoresEntidad tipoEmisor, BitacorasEntidad _bitacora)
                {
                    RespuestaEntidad elemento = null;
                    DataSet rowsAffected;

                    #region PARAMETROS

                    SqlParameter[] paramTransaccion = new SqlParameter[]
                    {
                        new SqlParameter("@piCod_Tipo_Emisor", tipoEmisor.CodTipoEmisor),
                        new SqlParameter("@psDes_Tipo_Emisor", tipoEmisor.DesTipoEmisor),
                        new SqlParameter("@psInd_Metodo_Insercion", tipoEmisor.IndMetodoInsercion),
                        new SqlParameter("@psCod_Usuario", tipoEmisor.CodUsuarioIngreso)
                    };

                    #endregion

                    try
                    {

                        #region INSERTAR

                        rowsAffected = transaccionDA.TransaccionInsertar(conexion, conexionBitacora, "Tipos_Emisores_Inserta", paramTransaccion, EnumTipoBitacora.INSERTAR, _bitacora);
                        if (!rowsAffected.Equals(null))
                        {
                            elemento = new RespuestaEntidad();
                            elemento.ValorEstado = int.Parse(rowsAffected.Tables[0].Rows[0][0].ToString());
                            elemento.ValorError = int.Parse(rowsAffected.Tables[0].Rows[0][1].ToString());
                        }

                        return elemento;

                        #endregion

                    }
                    catch (Exception)
                    {
                        throw;
                    }
                }
        
                public RespuestaEntidad TiposEmisoresModificar(String conexion, String conexionBitacora, TiposEmisoresEntidad tipoEmisor, BitacorasEntidad _bitacora)
                {
                    RespuestaEntidad elemento = null;
                    DataSet rowsAffected;

                    #region PARAMETROS

                    SqlParameter[] paramTransaccion = new SqlParameter[]
                    {
                        new SqlParameter("@piId_Tipo_Emisor", tipoEmisor.IdTipoEmisor),
                        new SqlParameter("@piCod_Tipo_Emisor", tipoEmisor.CodTipoEmisor),
                        new SqlParameter("@psDes_Tipo_Emisor", tipoEmisor.DesTipoEmisor),
                        new SqlParameter("@psInd_Metodo_Insercion", tipoEmisor.IndMetodoInsercion),
                        new SqlParameter("@psCod_Usuario", tipoEmisor.CodUsuarioIngreso)
                    };

                    #endregion

                    #region KeyValuePair LIST

                    List<KeyValuePair<string, string>> itemConsulta = new List<KeyValuePair<string, string>>();
                    itemConsulta.Add(helper.CrearKeyValuePairItem("@piId_Tipo_Emisor", tipoEmisor.IdTipoEmisor.ToString()));

                    #endregion

                    try
                    {

                        #region MODIFICAR

                        rowsAffected = transaccionDA.TransaccionModificar(conexion, conexionBitacora, "Tipos_Emisores_Actualiza", paramTransaccion, EnumTipoBitacora.ACTUALIZAR, itemConsulta, "Tipos_Emisores_Consulta_Detalle", _bitacora);
                        if (!rowsAffected.Equals(null))
                        {
                            elemento = new RespuestaEntidad();
                            elemento.ValorEstado = int.Parse(rowsAffected.Tables[0].Rows[0][0].ToString());
                            elemento.ValorError = int.Parse(rowsAffected.Tables[0].Rows[0][1].ToString());
                        }

                        return elemento;

                        #endregion

                    }
                    catch (Exception)
                    {
                        throw;
                    }
                }
        
                public RespuestaEntidad TiposEmisoresEliminar(String conexion, String conexionBitacora, TiposEmisoresEntidad tipoEmisor, BitacorasEntidad _bitacora)
                {
                    RespuestaEntidad elemento = null;
                    DataSet rowsAffected;

                    #region PARAMETROS

                    SqlParameter[] paramTransaccion = new SqlParameter[]
                    {
                        new SqlParameter("@piId_Tipo_Emisor", tipoEmisor.IdTipoEmisor)
                    };

                    #endregion
                    
                    #region KeyValuePair LIST

                    List<KeyValuePair<string, string>> itemConsulta = new List<KeyValuePair<string, string>>();
                    itemConsulta.Add(helper.CrearKeyValuePairItem("@piId_Tipo_Emisor", tipoEmisor.IdTipoEmisor.ToString()));

                    #endregion

                    try
                    {

                        #region ELIMINAR

                        rowsAffected = transaccionDA.TransaccionEliminar(conexion, conexionBitacora, "Tipos_Emisores_Elimina", paramTransaccion, EnumTipoBitacora.ELIMINAR, itemConsulta, "Tipos_Emisores_Consulta_Detalle", _bitacora);
                        if (!rowsAffected.Equals(null))
                        {
                            elemento = new RespuestaEntidad();
                            elemento.ValorEstado = int.Parse(rowsAffected.Tables[0].Rows[0][0].ToString());
                            elemento.ValorError = int.Parse(rowsAffected.Tables[0].Rows[0][1].ToString());
                        }

                        return elemento;

                        #endregion

                    }
                    catch (Exception)
                    {
                        throw;
                    }
                }

                public List<TiposEmisoresEntidad> TiposEmisoresConsultar(String conexion, ParametrosConsultaEntidad entidad)
                {
                    List<TiposEmisoresEntidad> retorno = new List<TiposEmisoresEntidad>();
                    TiposEmisoresEntidad elemento;
                    DataSet rowsAffected;

                    #region PARAMETROS

                    SqlParameter[] paramTransaccion = new SqlParameter[]
                    {
                       new SqlParameter("@piIndice_Inicio_Fila", entidad.IndiceInicioFila),
                       new SqlParameter("@piMaximo_Filas", entidad.MaximoFilas),
                       new SqlParameter("@psValores_Filtro", entidad.ValorFiltro),
                       new SqlParameter("@psColumnas_Filtros", entidad.ColumnaFiltro),
                       new SqlParameter("@psColumna_Ordenar", entidad.ColumnaOrdenar)
                    };

                    #endregion

                    try
                    {

                        #region CONSULTAR

                            rowsAffected = transaccionDA.TransaccionConsulta(conexion, "Tipos_Emisores_Consulta", paramTransaccion);
                            if (!rowsAffected.Equals(null))
                            {
                                foreach (DataRow dr in rowsAffected.Tables[0].Rows)
                                {
                                    elemento = new TiposEmisoresEntidad();
                                    elemento.IdTipoEmisor = int.Parse(dr[0].ToString());
                                    elemento.CodTipoEmisor = int.Parse(dr[1].ToString());
                                    elemento.DesTipoEmisor = dr[2].ToString();

                                    retorno.Add(elemento);
                                }
                            }

                            return retorno;

                        #endregion

                    }
                    catch (Exception)
                    {
                        throw;
                    }
                }
        
                public TiposEmisoresEntidad TiposEmisoresConsultarDetalle(String conexion, String conexionBitacora, TiposEmisoresEntidad tipoEmisor, BitacorasEntidad _bitacora)
                {
                    TiposEmisoresEntidad retorno = new TiposEmisoresEntidad();
                    DataSet rowsAffected;

                    #region PARAMETROS

                    SqlParameter[] paramTransaccion = new SqlParameter[]
                    {
                        new SqlParameter("@piId_Tipo_Emisor", tipoEmisor.IdTipoEmisor)
                    };

                    #endregion

                    #region KeyValuePair LIST

                    List<KeyValuePair<string, string>> itemConsulta = new List<KeyValuePair<string, string>>();
                    itemConsulta.Add(helper.CrearKeyValuePairItem("@piId_Tipo_Emisor", tipoEmisor.IdTipoEmisor.ToString()));

                    #endregion

                    try
                    {

                        #region CONSULTAR DETALLE

                        rowsAffected = transaccionDA.TransaccionConsultaDetalle(conexion, conexionBitacora, "Tipos_Emisores_Consulta_Detalle", paramTransaccion, EnumTipoBitacora.ACTUALIZAR, itemConsulta, "Tipos_Emisores_Consulta_Detalle", _bitacora);
                        if (!rowsAffected.Equals(null))
                        {
                            retorno.IdTipoEmisor = int.Parse(rowsAffected.Tables[0].Rows[0][0].ToString());
                            retorno.CodTipoEmisor = int.Parse(rowsAffected.Tables[0].Rows[0][1].ToString());
                            retorno.DesTipoEmisor = rowsAffected.Tables[0].Rows[0][2].ToString();
                            retorno.IndMetodoInsercion = rowsAffected.Tables[0].Rows[0][3].ToString();
                            if (rowsAffected.Tables[0].Rows[0][4].ToString().Length > 0)
                                retorno.FechaIngreso = DateTime.Parse(rowsAffected.Tables[0].Rows[0][4].ToString());
                            else
                                retorno.FechaIngreso = null;
                            retorno.CodUsuarioIngreso = rowsAffected.Tables[0].Rows[0][5].ToString();
                            if (rowsAffected.Tables[0].Rows[0][6].ToString().Length > 0)
                                retorno.FechaUltimaModificacion = DateTime.Parse(rowsAffected.Tables[0].Rows[0][6].ToString());
                            else
                                retorno.FechaUltimaModificacion = null;
                            retorno.CodUsuarioUltimaModificacion = rowsAffected.Tables[0].Rows[0][7].ToString();
                            retorno.DesUsuarioIngreso = rowsAffected.Tables[0].Rows[0][8].ToString();
                            retorno.DesUsuarioUltimaModificacion = rowsAffected.Tables[0].Rows[0][9].ToString();
                        }

                        return retorno;

                        #endregion

                    }
                    catch (Exception)
                    {
                        throw;
                    }
                }
        
                public int TiposEmisoresTotalFilas(String conexion, ParametrosTotalFilasEntidad entidad)
                {

                    int value;

                    #region PARAMETROS

                    SqlParameter[] paramTransaccion = new SqlParameter[]
                    {
                        new SqlParameter("@psValor_Filtro", entidad.ValorFiltro),
                        new SqlParameter("@psColumna_Filtro", entidad.ColumnaFiltro)
                    };

                    #endregion

                    try
                    {

                        #region TOTAL FILAS

                            value = transaccionDA.TransaccionRows(conexion, "Tipos_Emisores_Total_Filas", paramTransaccion);

                            return value;

                        #endregion

                    }
                    catch (Exception)
                    {
                        throw;
                    }
                }

            #endregion 

            #region TIPOS ENTIDADES
        
                public RespuestaEntidad TiposEntidadesInsertar(String conexion, String conexionBitacora, TiposEntidadesEntidad tipoEntidad, BitacorasEntidad _bitacora)
                {
                    RespuestaEntidad elemento = null;
                    DataSet rowsAffected;

                    #region PARAMETROS

                    SqlParameter[] paramTransaccion = new SqlParameter[]
                    {
                        new SqlParameter("@piCod_Tipo_Entidad", tipoEntidad.CodTiposEntidades),
                        new SqlParameter("@psDes_Tipo_Entidad", tipoEntidad.DesTiposEntidades),
                        new SqlParameter("@psInd_Metodo_Insercion", tipoEntidad.IndMetodoInsercion),
                        new SqlParameter("@psCod_Usuario", tipoEntidad.CodUsuarioIngreso)
                    };

                    #endregion

                    try
                    {

                        #region INSERTAR

                        rowsAffected = transaccionDA.TransaccionInsertar(conexion, conexionBitacora, "Tipos_Entidades_Inserta", paramTransaccion, EnumTipoBitacora.INSERTAR, _bitacora);
                        if (!rowsAffected.Equals(null))
                        {
                            elemento = new RespuestaEntidad();
                            elemento.ValorEstado = int.Parse(rowsAffected.Tables[0].Rows[0][0].ToString());
                            elemento.ValorError = int.Parse(rowsAffected.Tables[0].Rows[0][1].ToString());
                        }

                        return elemento;

                        #endregion

                    }
                    catch (Exception)
                    {
                        throw;
                    }
                }
        
                public RespuestaEntidad TiposEntidadesModificar(String conexion, String conexionBitacora, TiposEntidadesEntidad tipoEntidad, BitacorasEntidad _bitacora)
                {
                    RespuestaEntidad elemento = null;
                    DataSet rowsAffected;

                    #region PARAMETROS

                    SqlParameter[] paramTransaccion = new SqlParameter[]
                    {
                        new SqlParameter("@piId_Tipo_Entidad", tipoEntidad.IdTiposEntidades),
                        new SqlParameter("@piCod_Tipo_Entidad", tipoEntidad.CodTiposEntidades),
                        new SqlParameter("@psDes_Tipo_Entidad", tipoEntidad.DesTiposEntidades),
                        new SqlParameter("@psInd_Metodo_Insercion", tipoEntidad.IndMetodoInsercion),
                        new SqlParameter("@psCod_Usuario", tipoEntidad.CodUsuarioIngreso)
                    };

                    #endregion

                    #region KeyValuePair LIST

                    List<KeyValuePair<string, string>> itemConsulta = new List<KeyValuePair<string, string>>();
                    itemConsulta.Add(helper.CrearKeyValuePairItem("@piId_Tipo_Entidad", tipoEntidad.IdTiposEntidades.ToString()));

                    #endregion

                    try
                    {

                        #region MODIFICAR

                        rowsAffected = transaccionDA.TransaccionModificar(conexion, conexionBitacora, "Tipos_Entidades_Actualiza", paramTransaccion, EnumTipoBitacora.ACTUALIZAR, itemConsulta, "Tipos_Entidades_Consulta_Detalle", _bitacora);
                        if (!rowsAffected.Equals(null))
                        {
                            elemento = new RespuestaEntidad();
                            elemento.ValorEstado = int.Parse(rowsAffected.Tables[0].Rows[0][0].ToString());
                            elemento.ValorError = int.Parse(rowsAffected.Tables[0].Rows[0][1].ToString());
                        }

                        return elemento;

                        #endregion

                    }
                    catch (Exception)
                    {
                        throw;
                    }
                }
        
                public RespuestaEntidad TiposEntidadesEliminar(String conexion, String conexionBitacora, TiposEntidadesEntidad tipoEntidad, BitacorasEntidad _bitacora)
                {
                    RespuestaEntidad elemento = null;
                    DataSet rowsAffected;

                    #region PARAMETROS

                    SqlParameter[] paramTransaccion = new SqlParameter[]
                    {
                        new SqlParameter("@piId_Tipo_Entidad", tipoEntidad.IdTiposEntidades)
                    };

                    #endregion

                    #region KeyValuePair LIST

                    List<KeyValuePair<string, string>> itemConsulta = new List<KeyValuePair<string, string>>();
                    itemConsulta.Add(helper.CrearKeyValuePairItem("@piId_Tipo_Entidad", tipoEntidad.IdTiposEntidades.ToString()));

                    #endregion

                    try
                    {

                        #region ELIMINAR

                        rowsAffected = transaccionDA.TransaccionEliminar(conexion, conexionBitacora, "Tipos_Entidades_Elimina", paramTransaccion, EnumTipoBitacora.ELIMINAR, itemConsulta, "Tipos_Entidades_Consulta_Detalle", _bitacora);
                        if (!rowsAffected.Equals(null))
                        {
                            elemento = new RespuestaEntidad();
                            elemento.ValorEstado = int.Parse(rowsAffected.Tables[0].Rows[0][0].ToString());
                            elemento.ValorError = int.Parse(rowsAffected.Tables[0].Rows[0][1].ToString());
                        }

                        return elemento;

                        #endregion

                    }
                    catch (Exception)
                    {
                        throw;
                    }
                }

                public List<TiposEntidadesEntidad> TiposEntidadesConsultar(String conexion, ParametrosConsultaEntidad entidad)
                {
                    List<TiposEntidadesEntidad> retorno = new List<TiposEntidadesEntidad>();
                    TiposEntidadesEntidad elemento;
                    DataSet rowsAffected;

                    #region PARAMETROS

                    SqlParameter[] paramTransaccion = new SqlParameter[]
                    {
                       new SqlParameter("@piIndice_Inicio_Fila", entidad.IndiceInicioFila),
                       new SqlParameter("@piMaximo_Filas", entidad.MaximoFilas),
                       new SqlParameter("@psValores_Filtro", entidad.ValorFiltro),
                       new SqlParameter("@psColumnas_Filtros", entidad.ColumnaFiltro),
                       new SqlParameter("@psColumna_Ordenar", entidad.ColumnaOrdenar)
                    };

                    #endregion

                    try
                    {

                        #region CONSULTAR

                            rowsAffected = transaccionDA.TransaccionConsulta(conexion, "Tipos_Entidades_Consulta", paramTransaccion);
                            if (!rowsAffected.Equals(null))
                            {
                                foreach (DataRow dr in rowsAffected.Tables[0].Rows)
                                {
                                    elemento = new TiposEntidadesEntidad();
                                    elemento.IdTiposEntidades = int.Parse(dr[0].ToString());
                                    elemento.CodTiposEntidades = int.Parse(dr[1].ToString());
                                    elemento.DesTiposEntidades = dr[2].ToString();

                                    retorno.Add(elemento);
                                }
                            }

                            return retorno;

                        #endregion

                    }
                    catch (Exception)
                    {
                        throw;
                    }
                }
        
                public TiposEntidadesEntidad TiposEntidadesConsultarDetalle(String conexion, String conexionBitacora, TiposEntidadesEntidad tipoEntidad, BitacorasEntidad _bitacora)
                {
                    TiposEntidadesEntidad retorno = new TiposEntidadesEntidad();
                    DataSet rowsAffected;

                    #region PARAMETROS

                    SqlParameter[] paramTransaccion = new SqlParameter[]
                    {
                        new SqlParameter("@piId_Tipo_Entidad", tipoEntidad.IdTiposEntidades)
                    };

                    #endregion

                    #region KeyValuePair LIST

                    List<KeyValuePair<string, string>> itemConsulta = new List<KeyValuePair<string, string>>();
                    itemConsulta.Add(helper.CrearKeyValuePairItem("@piId_Tipo_Entidad", tipoEntidad.IdTiposEntidades.ToString()));

                    #endregion

                    try
                    {

                        #region CONSULTAR DETALLE

                        rowsAffected = transaccionDA.TransaccionConsultaDetalle(conexion, conexionBitacora, "Tipos_Entidades_Consulta_Detalle", paramTransaccion, EnumTipoBitacora.CONSULTAR, itemConsulta, "Tipos_Entidades_Consulta_Detalle", _bitacora);
                        if (!rowsAffected.Equals(null))
                        {
                            retorno.IdTiposEntidades = int.Parse(rowsAffected.Tables[0].Rows[0][0].ToString());
                            retorno.CodTiposEntidades = int.Parse(rowsAffected.Tables[0].Rows[0][1].ToString());
                            retorno.DesTiposEntidades = rowsAffected.Tables[0].Rows[0][2].ToString();
                            retorno.IndMetodoInsercion = rowsAffected.Tables[0].Rows[0][3].ToString();
                            if (rowsAffected.Tables[0].Rows[0][4].ToString().Length > 0)
                                retorno.FechaIngreso = DateTime.Parse(rowsAffected.Tables[0].Rows[0][4].ToString());
                            else
                                retorno.FechaIngreso = null;
                            retorno.CodUsuarioIngreso = rowsAffected.Tables[0].Rows[0][5].ToString();
                            if (rowsAffected.Tables[0].Rows[0][6].ToString().Length > 0)
                                retorno.FechaUltimaModificacion = DateTime.Parse(rowsAffected.Tables[0].Rows[0][6].ToString());
                            else
                                retorno.FechaUltimaModificacion = null;
                            retorno.CodUsuarioUltimaModificacion = rowsAffected.Tables[0].Rows[0][7].ToString();
                            retorno.DesUsuarioIngreso = rowsAffected.Tables[0].Rows[0][8].ToString();
                            retorno.DesUsuarioUltimaModificacion = rowsAffected.Tables[0].Rows[0][9].ToString();
                        }

                        return retorno;

                        #endregion

                    }
                    catch (Exception)
                    {
                        throw;
                    }
                }
        
                public int TiposEntidadesTotalFilas(String conexion, ParametrosTotalFilasEntidad entidad)
                {

                    int value;

                    #region PARAMETROS

                    SqlParameter[] paramTransaccion = new SqlParameter[]
                    {
                        new SqlParameter("@psValor_Filtro", entidad.ValorFiltro),
                        new SqlParameter("@psColumna_Filtro", entidad.ColumnaFiltro)
                    };

                    #endregion

                    try
                    {

                        #region TOTAL FILAS

                            value = transaccionDA.TransaccionRows(conexion, "Tipos_Entidades_Total_Filas", paramTransaccion);

                            return value;
                        

                        #endregion

                    }
                    catch (Exception)
                    {
                        throw;
                    }
                }
        
                public List<ListaEntidad> TiposEntidadesLista(String conexion, String filtro)
                {
                    List<ListaEntidad> retorno = new List<ListaEntidad>();
                    ListaEntidad elemento;
                    DataSet rowsAffected;

                    #region PARAMETROS

                    SqlParameter[] paramTransaccion = new SqlParameter[]
                    {
                        new SqlParameter("@psFiltro", filtro)
                    };

                    #endregion

                    try
                    {

                        #region LISTA

                        rowsAffected = transaccionDA.TransaccionConsulta(conexion, "Tipos_Entidades_Lista", paramTransaccion);
                        if (!rowsAffected.Equals(null))
                        {
                            foreach (DataRow dr in rowsAffected.Tables[0].Rows)
                            {
                                elemento = new ListaEntidad();
                                elemento.Valor = dr[0].ToString();
                                elemento.Texto = dr[1].ToString();

                                retorno.Add(elemento);
                            }
                        }
                        return retorno;

                        #endregion


                    }
                    catch (Exception)
                    {
                        throw;
                    }
                }
        
            #endregion 

            #region TIPOS ESTADOS AVALUOS
        
                public RespuestaEntidad TiposEstadosAvaluosInsertar(String conexion, String conexionBitacora, TiposEstadosAvaluosEntidad tipoEstadoAvaluo, BitacorasEntidad _bitacora)
                {
                    RespuestaEntidad elemento = null;
                    DataSet rowsAffected;

                    #region PARAMETROS

                    SqlParameter[] paramTransaccion = new SqlParameter[]
                    {
                        new SqlParameter("@piCod_Tipo_Estado_Avaluo", tipoEstadoAvaluo.CodTipoEstadoAvaluo),
                        new SqlParameter("@psDes_Tipo_Estado_Avaluo", tipoEstadoAvaluo.DesTipoEstadoAvaluo),
                        new SqlParameter("@psInd_Metodo_Insercion", tipoEstadoAvaluo.IndMetodoInsercion),
                        new SqlParameter("@psCod_Usuario", tipoEstadoAvaluo.CodUsuarioIngreso)
                    };

                    #endregion

                    try
                    {

                        #region INSERTAR

                        rowsAffected = transaccionDA.TransaccionInsertar(conexion, conexionBitacora, "Tipos_Estados_Avaluos_Inserta", paramTransaccion, EnumTipoBitacora.INSERTAR, _bitacora);
                        if (!rowsAffected.Equals(null))
                        {
                            elemento = new RespuestaEntidad();
                            elemento.ValorEstado = int.Parse(rowsAffected.Tables[0].Rows[0][0].ToString());
                            elemento.ValorError = int.Parse(rowsAffected.Tables[0].Rows[0][1].ToString());
                        }

                        return elemento;

                        #endregion

                    }
                    catch (Exception)
                    {
                        throw;
                    }
                }
        
                public RespuestaEntidad TiposEstadosAvaluosModificar(String conexion, String conexionBitacora, TiposEstadosAvaluosEntidad tipoEstadoAvaluo, BitacorasEntidad _bitacora)
                {
                    RespuestaEntidad elemento = null;
                    DataSet rowsAffected;

                    #region PARAMETROS

                    SqlParameter[] paramTransaccion = new SqlParameter[]
                    {
                        new SqlParameter("@piId_Tipo_Estado_Avaluo", tipoEstadoAvaluo.IdTipoEstadoAvaluo),
                        new SqlParameter("@piCod_Tipo_Estado_Avaluo", tipoEstadoAvaluo.CodTipoEstadoAvaluo),
                        new SqlParameter("@psDes_Tipo_Estado_Avaluo", tipoEstadoAvaluo.DesTipoEstadoAvaluo),
                        new SqlParameter("@psInd_Metodo_Insercion", tipoEstadoAvaluo.IndMetodoInsercion),
                        new SqlParameter("@psCod_Usuario", tipoEstadoAvaluo.CodUsuarioIngreso)
                    };

                    #endregion

                    #region KeyValuePair LIST

                    List<KeyValuePair<string, string>> itemConsulta = new List<KeyValuePair<string, string>>();
                    itemConsulta.Add(helper.CrearKeyValuePairItem("@piId_Tipo_Estado_Avaluo", tipoEstadoAvaluo.IdTipoEstadoAvaluo.ToString()));

                    #endregion

                    try
                    {

                        #region MODIFICAR

                        rowsAffected = transaccionDA.TransaccionModificar(conexion, conexionBitacora, "Tipos_Estados_Avaluos_Actualiza", paramTransaccion, EnumTipoBitacora.ACTUALIZAR, itemConsulta, "Tipos_Estados_Avaluos_Consulta_Detalle", _bitacora);
                        if (!rowsAffected.Equals(null))
                        {
                            elemento = new RespuestaEntidad();
                            elemento.ValorEstado = int.Parse(rowsAffected.Tables[0].Rows[0][0].ToString());
                            elemento.ValorError = int.Parse(rowsAffected.Tables[0].Rows[0][1].ToString());
                        }

                        return elemento;

                        #endregion

                    }
                    catch (Exception)
                    {
                        throw;
                    }
                }
        
                public RespuestaEntidad TiposEstadosAvaluosEliminar(String conexion, String conexionBitacora, TiposEstadosAvaluosEntidad tipoEstadoAvaluo, BitacorasEntidad _bitacora)
                {
                    RespuestaEntidad elemento = null;
                    DataSet rowsAffected;

                    #region PARAMETROS

                    SqlParameter[] paramTransaccion = new SqlParameter[]
                    {
                        new SqlParameter("@piId_Tipo_Estado_Avaluo", tipoEstadoAvaluo.IdTipoEstadoAvaluo)
                    };

                    #endregion

                    #region KeyValuePair LIST

                    List<KeyValuePair<string, string>> itemConsulta = new List<KeyValuePair<string, string>>();
                    itemConsulta.Add(helper.CrearKeyValuePairItem("@piId_Tipo_Estado_Avaluo", tipoEstadoAvaluo.IdTipoEstadoAvaluo.ToString()));

                    #endregion

                    try
                    {

                        #region ELIMINAR

                        rowsAffected = transaccionDA.TransaccionEliminar(conexion, conexionBitacora, "Tipos_Estados_Avaluos_Elimina", paramTransaccion, EnumTipoBitacora.ELIMINAR, itemConsulta, "Tipos_Estados_Avaluos_Consulta_Detalle", _bitacora);
                        if (!rowsAffected.Equals(null))
                        {
                            elemento = new RespuestaEntidad();
                            elemento.ValorEstado = int.Parse(rowsAffected.Tables[0].Rows[0][0].ToString());
                            elemento.ValorError = int.Parse(rowsAffected.Tables[0].Rows[0][1].ToString());
                        }

                        return elemento;

                        #endregion

                    }
                    catch (Exception)
                    {
                        throw;
                    }
                }

                public List<TiposEstadosAvaluosEntidad> TiposEstadosAvaluosConsultar(String conexion, ParametrosConsultaEntidad entidad)
                {
                    List<TiposEstadosAvaluosEntidad> retorno = new List<TiposEstadosAvaluosEntidad>();
                    TiposEstadosAvaluosEntidad elemento;
                    DataSet rowsAffected;

                    #region PARAMETROS

                    SqlParameter[] paramTransaccion = new SqlParameter[]
                    {
                       new SqlParameter("@piIndice_Inicio_Fila", entidad.IndiceInicioFila),
                       new SqlParameter("@piMaximo_Filas", entidad.MaximoFilas),
                       new SqlParameter("@psValores_Filtro", entidad.ValorFiltro),
                       new SqlParameter("@psColumnas_Filtros", entidad.ColumnaFiltro),
                       new SqlParameter("@psColumna_Ordenar", entidad.ColumnaOrdenar)
                    };

                    #endregion

                    try
                    {

                        #region CONSULTAR

                            rowsAffected = transaccionDA.TransaccionConsulta(conexion, "Tipos_Estados_Avaluos_Consulta", paramTransaccion);
                            if (!rowsAffected.Equals(null))
                            {
                                foreach (DataRow dr in rowsAffected.Tables[0].Rows)
                                {
                                    elemento = new TiposEstadosAvaluosEntidad();
                                    elemento.IdTipoEstadoAvaluo = int.Parse(dr[0].ToString());
                                    elemento.CodTipoEstadoAvaluo = int.Parse(dr[1].ToString());
                                    elemento.DesTipoEstadoAvaluo = dr[2].ToString();

                                    retorno.Add(elemento);
                                }
                            }

                            return retorno;

                        #endregion

                    }
                    catch (Exception)
                    {
                        throw;
                    }
                }
        
                public TiposEstadosAvaluosEntidad TiposEstadosAvaluosConsultarDetalle(String conexion, String conexionBitacora, TiposEstadosAvaluosEntidad tipoEstadoAvaluo, BitacorasEntidad _bitacora)
                {
                    TiposEstadosAvaluosEntidad retorno = new TiposEstadosAvaluosEntidad();
                    DataSet rowsAffected;

                    #region PARAMETROS

                    SqlParameter[] paramTransaccion = new SqlParameter[]
                    {
                        new SqlParameter("@piId_Tipo_Estado_Avaluo", tipoEstadoAvaluo.IdTipoEstadoAvaluo)
                    };

                    #endregion

                    #region KeyValuePair LIST

                    List<KeyValuePair<string, string>> itemConsulta = new List<KeyValuePair<string, string>>();
                    itemConsulta.Add(helper.CrearKeyValuePairItem("@piId_Tipo_Estado_Avaluo", tipoEstadoAvaluo.IdTipoEstadoAvaluo.ToString()));

                    #endregion

                    try
                    {

                        #region CONSULTAR DETALLE

                        rowsAffected = transaccionDA.TransaccionConsultaDetalle(conexion, conexionBitacora, "Tipos_Estados_Avaluos_Consulta_Detalle", paramTransaccion, EnumTipoBitacora.CONSULTAR, itemConsulta, "Tipos_Estados_Avaluos_Consulta_Detalle", _bitacora);
                        if (!rowsAffected.Equals(null))
                        {
                            retorno.IdTipoEstadoAvaluo = int.Parse(rowsAffected.Tables[0].Rows[0][0].ToString());
                            retorno.CodTipoEstadoAvaluo = int.Parse(rowsAffected.Tables[0].Rows[0][1].ToString());
                            retorno.DesTipoEstadoAvaluo = rowsAffected.Tables[0].Rows[0][2].ToString();
                            retorno.IndMetodoInsercion = rowsAffected.Tables[0].Rows[0][3].ToString();
                            if (rowsAffected.Tables[0].Rows[0][4].ToString().Length > 0)
                                retorno.FechaIngreso = DateTime.Parse(rowsAffected.Tables[0].Rows[0][4].ToString());
                            else
                                retorno.FechaIngreso = null;
                            retorno.CodUsuarioIngreso = rowsAffected.Tables[0].Rows[0][5].ToString();
                            if (rowsAffected.Tables[0].Rows[0][6].ToString().Length > 0)
                                retorno.FechaUltimaModificacion = DateTime.Parse(rowsAffected.Tables[0].Rows[0][6].ToString());
                            else
                                retorno.FechaUltimaModificacion = null;
                            retorno.CodUsuarioUltimaModificacion = rowsAffected.Tables[0].Rows[0][7].ToString();
                            retorno.DesUsuarioIngreso = rowsAffected.Tables[0].Rows[0][8].ToString();
                            retorno.DesUsuarioUltimaModificacion = rowsAffected.Tables[0].Rows[0][9].ToString();
                        }

                        return retorno;

                        #endregion

                    }
                    catch (Exception)
                    {
                        throw;
                    }
                }
        
                public int TiposEstadosAvaluosTotalFilas(String conexion, ParametrosTotalFilasEntidad entidad)
                {

                    int value;

                    #region PARAMETROS


                    SqlParameter[] paramTransaccion = new SqlParameter[]
                    {
                        new SqlParameter("@psValor_Filtro", entidad.ValorFiltro),
                        new SqlParameter("@psColumna_Filtro", entidad.ColumnaFiltro)
                    };

                    #endregion

                    try
                    {

                        #region TOTAL FILAS

                            value = transaccionDA.TransaccionRows(conexion, "Tipos_Estados_Avaluos_Total_Filas", paramTransaccion);

                            return value;

                        #endregion

                    }
                    catch (Exception)
                    {
                        throw;
                    }
                }
        
                public List<ListaEntidad> TiposEstadosAvaluosLista(String conexion, String filtro)
                {
                    List<ListaEntidad> retorno = new List<ListaEntidad>();
                    ListaEntidad elemento;
                    DataSet rowsAffected;

                    #region PARAMETROS

                    SqlParameter[] paramTransaccion = new SqlParameter[]
                    {
                        new SqlParameter("@psFiltro", filtro)
                    };

                    #endregion

                    try
                    {

                        #region LISTA

                        rowsAffected = transaccionDA.TransaccionConsulta(conexion, "Tipos_Estados_Avaluos_Lista", paramTransaccion);
                        if (!rowsAffected.Equals(null))
                        {
                            foreach (DataRow dr in rowsAffected.Tables[0].Rows)
                            {
                                elemento = new ListaEntidad();
                                elemento.Valor = dr[0].ToString();
                                elemento.Texto = dr[1].ToString();
          
                                retorno.Add(elemento);
                            }
                        }

                        return retorno;

                        #endregion


                    }
                    catch (Exception)
                    {
                        throw;
                    }
                }
        
            #endregion

            #region TIPOS GARANTIAS
        
                public RespuestaEntidad TiposGarantiasInsertar(String conexion, String conexionBitacora, TiposGarantiasEntidad tipoGarantia, BitacorasEntidad _bitacora)
                {
                    RespuestaEntidad elemento = null;
                    DataSet rowsAffected;

                    #region PARAMETROS

                    SqlParameter[] paramTransaccion = new SqlParameter[]
                    {
                        new SqlParameter("@piCod_Tipo_Garantia", tipoGarantia.CodTipoGarantia),
                        new SqlParameter("@psDes_Tipo_Garantia", tipoGarantia.DesTipoGarantia),
                        new SqlParameter("@psInd_Metodo_Insercion", tipoGarantia.IndMetodoInsercion),
                        new SqlParameter("@psCod_Usuario", tipoGarantia.CodUsuarioIngreso)
                    };

                    #endregion

                    try
                    {

                        #region INSERTAR

                        rowsAffected = transaccionDA.TransaccionInsertar(conexion, conexionBitacora, "Tipos_Garantias_Inserta", paramTransaccion, EnumTipoBitacora.INSERTAR, _bitacora);
                        if (!rowsAffected.Equals(null))
                        {
                            elemento = new RespuestaEntidad();
                            elemento.ValorEstado = int.Parse(rowsAffected.Tables[0].Rows[0][0].ToString());
                            elemento.ValorError = int.Parse(rowsAffected.Tables[0].Rows[0][1].ToString());
                        }

                        return elemento;

                        #endregion

                    }
                    catch (Exception)
                    {
                        throw;
                    }
                }
        
                public RespuestaEntidad TiposGarantiasModificar(String conexion, String conexionBitacora, TiposGarantiasEntidad tipoGarantia, BitacorasEntidad _bitacora)
                {
                    RespuestaEntidad elemento = null;
                    DataSet rowsAffected;

                    #region PARAMETROS

                    SqlParameter[] paramTransaccion = new SqlParameter[]
                    {
                        new SqlParameter("@piId_Tipo_Garantia", tipoGarantia.IdTipoGarantia),
                        new SqlParameter("@piCod_Tipo_Garantia", tipoGarantia.CodTipoGarantia),
                        new SqlParameter("@psDes_Tipo_Garantia", tipoGarantia.DesTipoGarantia),
                        new SqlParameter("@psInd_Metodo_Insercion", tipoGarantia.IndMetodoInsercion),
                        new SqlParameter("@psCod_Usuario", tipoGarantia.CodUsuarioIngreso)
                    };

                    #endregion

                    #region KeyValuePair LIST

                    List<KeyValuePair<string, string>> itemConsulta = new List<KeyValuePair<string, string>>();
                    itemConsulta.Add(helper.CrearKeyValuePairItem("@piId_Tipo_Garantia", tipoGarantia.IdTipoGarantia.ToString()));

                    #endregion

                    try
                    {

                        #region MODIFICAR

                        rowsAffected = transaccionDA.TransaccionModificar(conexion, conexionBitacora, "Tipos_Garantias_Actualiza", paramTransaccion, EnumTipoBitacora.ACTUALIZAR, itemConsulta, "Tipos_Garantias_Consulta_Detalle", _bitacora);
                        if (!rowsAffected.Equals(null))
                        {
                            elemento = new RespuestaEntidad();
                            elemento.ValorEstado = int.Parse(rowsAffected.Tables[0].Rows[0][0].ToString());
                            elemento.ValorError = int.Parse(rowsAffected.Tables[0].Rows[0][1].ToString());
                        }

                        return elemento;

                        #endregion

                    }
                    catch (Exception)
                    {
                        throw;
                    }
                }
        
                public RespuestaEntidad TiposGarantiasEliminar(String conexion, String conexionBitacora, TiposGarantiasEntidad tipoGarantia, BitacorasEntidad _bitacora)
                {
                    RespuestaEntidad elemento = null;
                    DataSet rowsAffected;

                    #region PARAMETROS

                    SqlParameter[] paramTransaccion = new SqlParameter[]
                    {
                        new SqlParameter("@piId_Tipo_Garantia", tipoGarantia.IdTipoGarantia)
                    };

                    #endregion

                    #region KeyValuePair LIST

                    List<KeyValuePair<string, string>> itemConsulta = new List<KeyValuePair<string, string>>();
                    itemConsulta.Add(helper.CrearKeyValuePairItem("@piId_Tipo_Garantia", tipoGarantia.IdTipoGarantia.ToString()));

                    #endregion

                    try
                    {

                        #region ELIMINAR

                        rowsAffected = transaccionDA.TransaccionEliminar(conexion, conexionBitacora, "Tipos_Garantias_Elimina", paramTransaccion, EnumTipoBitacora.ELIMINAR, itemConsulta, "Tipos_Garantias_Consulta_Detalle", _bitacora);
                        if (!rowsAffected.Equals(null))
                        {
                            elemento = new RespuestaEntidad();
                            elemento.ValorEstado = int.Parse(rowsAffected.Tables[0].Rows[0][0].ToString());
                            elemento.ValorError = int.Parse(rowsAffected.Tables[0].Rows[0][1].ToString());
                        }

                        return elemento;

                        #endregion

                    }
                    catch (Exception)
                    {
                        throw;
                    }
                }

                public List<TiposGarantiasEntidad> TiposGarantiasConsultar(String conexion, ParametrosConsultaEntidad entidad)
                {
                    List<TiposGarantiasEntidad> retorno = new List<TiposGarantiasEntidad>();
                    TiposGarantiasEntidad elemento;
                    DataSet rowsAffected;                    

                    #region PARAMETROS

                    SqlParameter[] paramTransaccion = new SqlParameter[]
                    {
                       new SqlParameter("@piIndice_Inicio_Fila", entidad.IndiceInicioFila),
                       new SqlParameter("@piMaximo_Filas", entidad.MaximoFilas),
                       new SqlParameter("@psValores_Filtro", entidad.ValorFiltro),
                       new SqlParameter("@psColumnas_Filtros", entidad.ColumnaFiltro),
                       new SqlParameter("@psColumna_Ordenar", entidad.ColumnaOrdenar)
                    };

                    #endregion

                    try
                    {

                        #region CONSULTAR

                            rowsAffected = transaccionDA.TransaccionConsulta(conexion, "Tipos_Garantias_Consulta", paramTransaccion);
                            if (!rowsAffected.Equals(null))
                            {
                                foreach (DataRow dr in rowsAffected.Tables[0].Rows)
                                {
                                    elemento = new TiposGarantiasEntidad();
                                    elemento.IdTipoGarantia = int.Parse(dr[0].ToString());
                                    elemento.CodTipoGarantia = int.Parse(dr[1].ToString());
                                    elemento.DesTipoGarantia = dr[2].ToString();

                                    retorno.Add(elemento);
                                }
                            }

                            return retorno;

                        #endregion

                    }
                    catch (Exception)
                    {
                        throw;
                    }
                }
        
                public TiposGarantiasEntidad TiposGarantiasConsultarDetalle(String conexion, String conexionBitacora, TiposGarantiasEntidad tipoGarantia, BitacorasEntidad _bitacora)
                {
                    TiposGarantiasEntidad retorno = new TiposGarantiasEntidad();
                    DataSet rowsAffected;

                    #region PARAMETROS

                    SqlParameter[] paramTransaccion = new SqlParameter[]
                    {
                        new SqlParameter("@piId_Tipo_Garantia", tipoGarantia.IdTipoGarantia)
                    };

                    #endregion

                    #region KeyValuePair LIST

                    List<KeyValuePair<string, string>> itemConsulta = new List<KeyValuePair<string, string>>();
                    itemConsulta.Add(helper.CrearKeyValuePairItem("@piId_Tipo_Garantia", tipoGarantia.IdTipoGarantia.ToString()));

                    #endregion

                    try
                    {

                        #region CONSULTAR DETALLE

                        rowsAffected = transaccionDA.TransaccionConsultaDetalle(conexion, conexionBitacora, "Tipos_Garantias_Consulta_Detalle", paramTransaccion, EnumTipoBitacora.CONSULTAR, itemConsulta, "Tipos_Garantias_Consulta_Detalle", _bitacora);
                        if (!rowsAffected.Equals(null))
                        {
                            retorno.IdTipoGarantia = int.Parse(rowsAffected.Tables[0].Rows[0][0].ToString());
                            retorno.CodTipoGarantia = int.Parse(rowsAffected.Tables[0].Rows[0][1].ToString());
                            retorno.DesTipoGarantia = rowsAffected.Tables[0].Rows[0][2].ToString();
                            retorno.IndMetodoInsercion = rowsAffected.Tables[0].Rows[0][3].ToString();
                            if (rowsAffected.Tables[0].Rows[0][4].ToString().Length > 0)
                                retorno.FechaIngreso = DateTime.Parse(rowsAffected.Tables[0].Rows[0][4].ToString());
                            else
                                retorno.FechaIngreso = null;
                            retorno.CodUsuarioIngreso = rowsAffected.Tables[0].Rows[0][5].ToString();
                            if (rowsAffected.Tables[0].Rows[0][6].ToString().Length > 0)
                                retorno.FechaUltimaModificacion = DateTime.Parse(rowsAffected.Tables[0].Rows[0][6].ToString());
                            else
                                retorno.FechaUltimaModificacion = null;
                            retorno.CodUsuarioUltimaModificacion = rowsAffected.Tables[0].Rows[0][7].ToString();
                            retorno.DesUsuarioIngreso = rowsAffected.Tables[0].Rows[0][8].ToString();
                            retorno.DesUsuarioUltimaModificacion = rowsAffected.Tables[0].Rows[0][9].ToString();
                        }

                        return retorno;

                        #endregion

                    }
                    catch (Exception)
                    {
                        throw;
                    }
                }
        
                public int TiposGarantiasTotalFilas(String conexion, ParametrosTotalFilasEntidad entidad)
                {

                    int value;                    

                    #region PARAMETROS

                    SqlParameter[] paramTransaccion = new SqlParameter[]
                    {
                        new SqlParameter("@psValor_Filtro", entidad.ValorFiltro),
                        new SqlParameter("@psColumna_Filtro", entidad.ColumnaFiltro)
                    };

                    #endregion

                    try
                    {

                        #region TOTAL FILAS

                            value = transaccionDA.TransaccionRows(conexion, "Tipos_Garantias_Total_Filas", paramTransaccion);

                            return value;

                        #endregion

                    }
                    catch (Exception)
                    {
                        throw;
                    }
                }
        
                public List<ListaEntidad> TiposGarantiasLista(String conexion, String filtro)
                {
                    List<ListaEntidad> retorno = new List<ListaEntidad>();
                    ListaEntidad elemento;
                    DataSet rowsAffected;

                    #region PARAMETROS

                    SqlParameter[] paramTransaccion = new SqlParameter[]
                    {
                        new SqlParameter("@psFiltro", filtro)
                    };

                    #endregion

                    #region KeyValuePair LIST

                    List<KeyValuePair<string, string>> itemConsulta = new List<KeyValuePair<string, string>>();
                    itemConsulta.Add(helper.CrearKeyValuePairItem("@psFiltro", filtro));

                    #endregion

                    try
                    {

                        #region LISTA

                        rowsAffected = transaccionDA.TransaccionConsulta(conexion, "Tipos_Garantias_Lista", paramTransaccion);
                        if (!rowsAffected.Equals(null))
                        {
                            foreach (DataRow dr in rowsAffected.Tables[0].Rows)
                            {
                                elemento = new ListaEntidad();
                                elemento.Valor = dr[0].ToString();
                                elemento.Texto = dr[1].ToString();

                                retorno.Add(elemento);
                            }
                        }

                        return retorno;

                        #endregion

                    }
                    catch (Exception)
                    {
                        throw;
                    }
                }
        
            #endregion 

            #region TIPOS GRADOS
        
                public RespuestaEntidad TiposGradosInsertar(String conexion, String conexionBitacora, TiposGradosEntidad tipoGrado, BitacorasEntidad _bitacora)
                {
                    RespuestaEntidad elemento = null;
                    DataSet rowsAffected;

                    #region PARAMETROS

                    SqlParameter[] paramTransaccion = new SqlParameter[]
                    {
                        new SqlParameter("@piCod_Tipo_Grado", tipoGrado.CodTipoGrado),
                        new SqlParameter("@psDes_Tipo_Grado", tipoGrado.DesTipoGrado),
                        new SqlParameter("@psInd_Metodo_Insercion", tipoGrado.IndMetodoInsercion),
                        new SqlParameter("@psCod_Usuario", tipoGrado.CodUsuarioIngreso)
                    };

                    #endregion

                    try
                    {

                        #region INSERTAR

                        rowsAffected = transaccionDA.TransaccionInsertar(conexion, conexionBitacora, "Tipos_Grados_Inserta", paramTransaccion, EnumTipoBitacora.INSERTAR, _bitacora);
                        if (!rowsAffected.Equals(null))
                        {
                            elemento = new RespuestaEntidad();
                            elemento.ValorEstado = int.Parse(rowsAffected.Tables[0].Rows[0][0].ToString());
                            elemento.ValorError = int.Parse(rowsAffected.Tables[0].Rows[0][1].ToString());
                        }

                        return elemento;

                        #endregion

                    }
                    catch (Exception)
                    {
                        throw;
                    }
                }
        
                public RespuestaEntidad TiposGradosModificar(String conexion, String conexionBitacora, TiposGradosEntidad tipoGrado, BitacorasEntidad _bitacora)
                {
                    RespuestaEntidad elemento = null;
                    DataSet rowsAffected;

                    #region PARAMETROS

                    SqlParameter[] paramTransaccion = new SqlParameter[]
                    {
                        new SqlParameter("@piId_Tipo_Grado", tipoGrado.IdTipoGrado),
                        new SqlParameter("@piCod_Tipo_Grado", tipoGrado.CodTipoGrado),
                        new SqlParameter("@psDes_Tipo_Grado", tipoGrado.DesTipoGrado),
                        new SqlParameter("@psInd_Metodo_Insercion", tipoGrado.IndMetodoInsercion),
                        new SqlParameter("@psCod_Usuario", tipoGrado.CodUsuarioIngreso)
                    };

                    #endregion

                    #region KeyValuePair LIST

                    List<KeyValuePair<string, string>> itemConsulta = new List<KeyValuePair<string, string>>();
                    itemConsulta.Add(helper.CrearKeyValuePairItem("@piId_Tipo_Grado", tipoGrado.IdTipoGrado.ToString()));

                    #endregion

                    try
                    {

                        #region MODIFICAR

                        rowsAffected = transaccionDA.TransaccionModificar(conexion, conexionBitacora, "Tipos_Grados_Actualiza", paramTransaccion, EnumTipoBitacora.ACTUALIZAR, itemConsulta, "Tipos_Grados_Consulta_Detalle", _bitacora);
                        if (!rowsAffected.Equals(null))
                        {
                            elemento = new RespuestaEntidad();
                            elemento.ValorEstado = int.Parse(rowsAffected.Tables[0].Rows[0][0].ToString());
                            elemento.ValorError = int.Parse(rowsAffected.Tables[0].Rows[0][1].ToString());
                        }

                        return elemento;

                        #endregion

                    }
                    catch (Exception)
                    {
                        throw;
                    }
                }
        
                public RespuestaEntidad TiposGradosEliminar(String conexion, String conexionBitacora, TiposGradosEntidad tipoGrado, BitacorasEntidad _bitacora)
                {
                    RespuestaEntidad elemento = null;
                    DataSet rowsAffected;

                    #region PARAMETROS

                    SqlParameter[] paramTransaccion = new SqlParameter[]
                    {
                        new SqlParameter("@piId_Tipo_Grado", tipoGrado.IdTipoGrado),
                    };

                    #endregion

                    #region KeyValuePair LIST

                    List<KeyValuePair<string, string>> itemConsulta = new List<KeyValuePair<string, string>>();
                    itemConsulta.Add(helper.CrearKeyValuePairItem("@piId_Tipo_Grado", tipoGrado.IdTipoGrado.ToString()));

                    #endregion

                    try
                    {

                        #region ELIMINAR

                        rowsAffected = transaccionDA.TransaccionEliminar(conexion, conexionBitacora, "Tipos_Grados_Elimina", paramTransaccion, EnumTipoBitacora.ELIMINAR, itemConsulta, "Tipos_Grados_Consulta_Detalle", _bitacora);
                        if (!rowsAffected.Equals(null))
                        {
                            elemento = new RespuestaEntidad();
                            elemento.ValorEstado = int.Parse(rowsAffected.Tables[0].Rows[0][0].ToString());
                            elemento.ValorError = int.Parse(rowsAffected.Tables[0].Rows[0][1].ToString());
                        }

                        return elemento;

                        #endregion

                    }
                    catch (Exception)
                    {
                        throw;
                    }
                }

                public List<TiposGradosEntidad> TiposGradosConsultar(String conexion, ParametrosConsultaEntidad entidad)
                {
                    List<TiposGradosEntidad> retorno = new List<TiposGradosEntidad>();
                    TiposGradosEntidad elemento;
                    DataSet rowsAffected;

                    #region PARAMETROS

                    SqlParameter[] paramTransaccion = new SqlParameter[]
                    {
                       new SqlParameter("@piIndice_Inicio_Fila", entidad.IndiceInicioFila),
                       new SqlParameter("@piMaximo_Filas", entidad.MaximoFilas),
                       new SqlParameter("@psValores_Filtro", entidad.ValorFiltro),
                       new SqlParameter("@psColumnas_Filtros", entidad.ColumnaFiltro),
                       new SqlParameter("@psColumna_Ordenar", entidad.ColumnaOrdenar)
                    };

                    #endregion

                    try
                    {

                        #region CONSULTAR

                            rowsAffected = transaccionDA.TransaccionConsulta(conexion, "Tipos_Grados_Consulta", paramTransaccion);
                            if (!rowsAffected.Equals(null))
                            {
                                foreach (DataRow dr in rowsAffected.Tables[0].Rows)
                                {
                                    elemento = new TiposGradosEntidad();
                                    elemento.IdTipoGrado = int.Parse(dr[0].ToString());
                                    elemento.CodTipoGrado = int.Parse(dr[1].ToString());
                                    elemento.DesTipoGrado = dr[2].ToString();

                                    retorno.Add(elemento);
                                }
                            }

                            return retorno;

                        #endregion

                    }
                    catch (Exception)
                    {
                        throw;
                    }
                }
        
                public TiposGradosEntidad TiposGradosConsultarDetalle(String conexion, String conexionBitacora, TiposGradosEntidad tipoGrado, BitacorasEntidad _bitacora)
                {
                    TiposGradosEntidad retorno = new TiposGradosEntidad();
                    DataSet rowsAffected;

                    #region PARAMETROS

                    SqlParameter[] paramTransaccion = new SqlParameter[]
                    {
                        new SqlParameter("@piId_Tipo_Grado", tipoGrado.IdTipoGrado)
                    };

                    #endregion

                    #region KeyValuePair LIST

                    List<KeyValuePair<string, string>> itemConsulta = new List<KeyValuePair<string, string>>();
                    itemConsulta.Add(helper.CrearKeyValuePairItem("@piId_Tipo_Grado", tipoGrado.IdTipoGrado.ToString()));

                    #endregion

                    try
                    {

                        #region CONSULTAR DETALLE

                        rowsAffected = transaccionDA.TransaccionConsultaDetalle(conexion, conexionBitacora, "Tipos_Grados_Consulta_Detalle", paramTransaccion, EnumTipoBitacora.CONSULTAR, itemConsulta, "Tipos_Grados_Consulta_Detalle", _bitacora);
                        if (!rowsAffected.Equals(null))
                        {
                            retorno.IdTipoGrado = int.Parse(rowsAffected.Tables[0].Rows[0][0].ToString());
                            retorno.CodTipoGrado = int.Parse(rowsAffected.Tables[0].Rows[0][1].ToString());
                            retorno.DesTipoGrado = rowsAffected.Tables[0].Rows[0][2].ToString();
                            retorno.IndMetodoInsercion = rowsAffected.Tables[0].Rows[0][3].ToString();
                            if (rowsAffected.Tables[0].Rows[0][4].ToString().Length > 0)
                                retorno.FechaIngreso = DateTime.Parse(rowsAffected.Tables[0].Rows[0][4].ToString());
                            else
                                retorno.FechaIngreso = null;
                            retorno.CodUsuarioIngreso = rowsAffected.Tables[0].Rows[0][5].ToString();
                            if (rowsAffected.Tables[0].Rows[0][6].ToString().Length > 0)
                                retorno.FechaUltimaModificacion = DateTime.Parse(rowsAffected.Tables[0].Rows[0][6].ToString());
                            else
                                retorno.FechaUltimaModificacion = null;
                            retorno.CodUsuarioUltimaModificacion = rowsAffected.Tables[0].Rows[0][7].ToString();
                            retorno.DesUsuarioIngreso = rowsAffected.Tables[0].Rows[0][8].ToString();
                            retorno.DesUsuarioUltimaModificacion = rowsAffected.Tables[0].Rows[0][9].ToString();
                        }

                        return retorno;

                        #endregion

                    }
                    catch (Exception)
                    {
                        throw;
                    }
                }
      
                public int TiposGradosTotalFilas(String conexion, ParametrosTotalFilasEntidad entidad)
                {

                    int value;

                    #region PARAMETROS

                    SqlParameter[] paramTransaccion = new SqlParameter[]
                    {
                        new SqlParameter("@psValor_Filtro", entidad.ValorFiltro),
                        new SqlParameter("@psColumna_Filtro", entidad.ColumnaFiltro)
                    };

                    #endregion

                    try
                    {

                        #region TOTAL FILAS

                            value = transaccionDA.TransaccionRows(conexion, "Tipos_Grados_Total_Filas", paramTransaccion);

                            return value;

                        #endregion

                    }
                    catch (Exception)
                    {
                        throw;
                    }
                }

                public List<ListaEntidad> TiposGradosLista(String conexion, String filtro)
                {
                    List<ListaEntidad> retorno = new List<ListaEntidad>();
                    ListaEntidad elemento;
                    DataSet rowsAffected;

                    #region PARAMETROS

                    SqlParameter[] paramTransaccion = new SqlParameter[]
                    {
                        new SqlParameter("@psFiltro", filtro)
                    };

                    #endregion

                    try
                    {

                        #region LISTA

                        rowsAffected = transaccionDA.TransaccionConsulta(conexion, "Tipos_Grados_Lista", paramTransaccion);
                        if (!rowsAffected.Equals(null))
                        {
                            foreach (DataRow dr in rowsAffected.Tables[0].Rows)
                            {
                                elemento = new ListaEntidad();
                                elemento.Valor = dr[0].ToString();
                                elemento.Texto = dr[1].ToString();

                                retorno.Add(elemento);
                            }
                        }

                        return retorno;

                        #endregion


                    }
                    catch (Exception)
                    {
                        throw;
                    }   
                }

            #endregion 

            #region TIPOS GRUPOS FINANCIEROS
        
                public RespuestaEntidad TiposGruposFinancierosInsertar(String conexion, String conexionBitacora, TiposGruposFinancierosEntidad tipoGrupoFinanciero, BitacorasEntidad _bitacora)
                {
                    RespuestaEntidad elemento = null;
                    DataSet rowsAffected;

                    #region PARAMETROS

                    SqlParameter[] paramTransaccion = new SqlParameter[]
                    {
                        new SqlParameter("@piCod_Tipo_Grupo_Financiero", tipoGrupoFinanciero.CodTipoGrupoFinanciero),
                        new SqlParameter("@psDes_Tipo_Grupo_Financiero", tipoGrupoFinanciero.DesTipoGrupoFinanciero),
                        new SqlParameter("@psInd_Metodo_Insercion", tipoGrupoFinanciero.IndMetodoInsercion),
                        new SqlParameter("@psCod_Usuario", tipoGrupoFinanciero.CodUsuarioIngreso)
                    };

                    #endregion

                    try
                    {

                        #region INSERTAR

                        rowsAffected = transaccionDA.TransaccionInsertar(conexion, conexionBitacora, "Tipos_Grupos_Financieros_Inserta", paramTransaccion, EnumTipoBitacora.INSERTAR, _bitacora);
                        if (!rowsAffected.Equals(null))
                        {
                            elemento = new RespuestaEntidad();
                            elemento.ValorEstado = int.Parse(rowsAffected.Tables[0].Rows[0][0].ToString());
                            elemento.ValorError = int.Parse(rowsAffected.Tables[0].Rows[0][1].ToString());
                        }

                        return elemento;

                        #endregion

                    }
                    catch (Exception)
                    {
                        throw;
                    }
                }
        
                public RespuestaEntidad TiposGruposFinancierosModificar(String conexion, String conexionBitacora, TiposGruposFinancierosEntidad tipoGrupoFinanciero, BitacorasEntidad _bitacora)
                {
                    RespuestaEntidad elemento = null;
                    DataSet rowsAffected;

                    #region PARAMETROS

                    SqlParameter[] paramTransaccion = new SqlParameter[]
                    {
                        new SqlParameter("@piId_Tipo_Grupo_Financiero", tipoGrupoFinanciero.IdTipoGrupoFinanciero),
                        new SqlParameter("@piCod_Tipo_Grupo_Financiero", tipoGrupoFinanciero.CodTipoGrupoFinanciero),
                        new SqlParameter("@psDes_Tipo_Grupo_Financiero", tipoGrupoFinanciero.DesTipoGrupoFinanciero),
                        new SqlParameter("@psInd_Metodo_Insercion", tipoGrupoFinanciero.IndMetodoInsercion),
                        new SqlParameter("@psCod_Usuario", tipoGrupoFinanciero.CodUsuarioIngreso)
                    };

                    #endregion

                    #region KeyValuePair LIST

                    List<KeyValuePair<string, string>> itemConsulta = new List<KeyValuePair<string, string>>();
                    itemConsulta.Add(helper.CrearKeyValuePairItem("@piId_Tipo_Grupo_Financiero", tipoGrupoFinanciero.IdTipoGrupoFinanciero.ToString()));

                    #endregion

                    try
                    {

                        #region MODIFICAR

                        rowsAffected = transaccionDA.TransaccionModificar(conexion, conexionBitacora, "Tipos_Grupos_Financieros_Actualiza", paramTransaccion, EnumTipoBitacora.ACTUALIZAR, itemConsulta, "Tipos_Grupos_Financieros_Consulta_Detalle", _bitacora);
                        if (!rowsAffected.Equals(null))
                        {
                            elemento = new RespuestaEntidad();
                            elemento.ValorEstado = int.Parse(rowsAffected.Tables[0].Rows[0][0].ToString());
                            elemento.ValorError = int.Parse(rowsAffected.Tables[0].Rows[0][1].ToString());
                        }

                        return elemento;

                        #endregion

                    }
                    catch (Exception)
                    {
                        throw;
                    }
                }
        
                public RespuestaEntidad TiposGruposFinancierosEliminar(String conexion, String conexionBitacora, TiposGruposFinancierosEntidad tipoGrupoFinanciero, BitacorasEntidad _bitacora)
                {
                    RespuestaEntidad elemento = null;
                    DataSet rowsAffected;

                    #region PARAMETROS

                    SqlParameter[] paramTransaccion = new SqlParameter[]
                    {
                        new SqlParameter("@piId_Tipo_Grupo_Financiero", tipoGrupoFinanciero.IdTipoGrupoFinanciero)
                    };

                    #endregion

                    #region KeyValuePair LIST

                    List<KeyValuePair<string, string>> itemConsulta = new List<KeyValuePair<string, string>>();
                    itemConsulta.Add(helper.CrearKeyValuePairItem("@piId_Tipo_Grupo_Financiero", tipoGrupoFinanciero.IdTipoGrupoFinanciero.ToString()));

                    #endregion

                    try
                    {

                        #region ELIMINAR

                        rowsAffected = transaccionDA.TransaccionEliminar(conexion, conexionBitacora, "Tipos_Grupos_Financieros_Elimina", paramTransaccion, EnumTipoBitacora.ELIMINAR, itemConsulta, "Tipos_Grupos_Financieros_Consulta_Detalle", _bitacora);
                        if (!rowsAffected.Equals(null))
                        {
                            elemento = new RespuestaEntidad();
                            elemento.ValorEstado = int.Parse(rowsAffected.Tables[0].Rows[0][0].ToString());
                            elemento.ValorError = int.Parse(rowsAffected.Tables[0].Rows[0][1].ToString());
                        }

                        return elemento;

                        #endregion

                    }
                    catch (Exception)
                    {
                        throw;
                    }
                }

                public List<TiposGruposFinancierosEntidad> TiposGruposFinancierosConsultar(String conexion, ParametrosConsultaEntidad entidad)
                {
                    List<TiposGruposFinancierosEntidad> retorno = new List<TiposGruposFinancierosEntidad>();
                    TiposGruposFinancierosEntidad elemento;
                    DataSet rowsAffected;

                    #region PARAMETROS

                    SqlParameter[] paramTransaccion = new SqlParameter[]
                    {
                       new SqlParameter("@piIndice_Inicio_Fila", entidad.IndiceInicioFila),
                       new SqlParameter("@piMaximo_Filas", entidad.MaximoFilas),
                       new SqlParameter("@psValores_Filtro", entidad.ValorFiltro),
                       new SqlParameter("@psColumnas_Filtros", entidad.ColumnaFiltro),
                       new SqlParameter("@psColumna_Ordenar", entidad.ColumnaOrdenar)
                    };

                    #endregion

                    try
                    {

                        #region CONSULTAR

                            rowsAffected = transaccionDA.TransaccionConsulta(conexion, "Tipos_Grupos_Financieros_Consulta", paramTransaccion);
                            if (!rowsAffected.Equals(null))
                            {
                                foreach (DataRow dr in rowsAffected.Tables[0].Rows)
                                {
                                    elemento = new TiposGruposFinancierosEntidad();
                                    elemento.IdTipoGrupoFinanciero = int.Parse(dr[0].ToString());
                                    elemento.CodTipoGrupoFinanciero = int.Parse(dr[1].ToString());
                                    elemento.DesTipoGrupoFinanciero = dr[2].ToString();

                                    retorno.Add(elemento);
                                }
                            }

                            return retorno;

                        #endregion

                    }
                    catch (Exception)
                    {
                        throw;
                    }
                }
        
                public TiposGruposFinancierosEntidad TiposGruposFinancierosConsultarDetalle(String conexion, String conexionBitacora, TiposGruposFinancierosEntidad tipoGrupoFinanciero, BitacorasEntidad _bitacora)
                {
                    TiposGruposFinancierosEntidad retorno = new TiposGruposFinancierosEntidad();
                    DataSet rowsAffected;

                    #region PARAMETROS

                    SqlParameter[] paramTransaccion = new SqlParameter[]
                    {
                        new SqlParameter("@piId_Tipo_Grupo_Financiero", tipoGrupoFinanciero.IdTipoGrupoFinanciero)
                    };

                    #endregion

                    #region KeyValuePair LIST

                    List<KeyValuePair<string, string>> itemConsulta = new List<KeyValuePair<string, string>>();
                    itemConsulta.Add(helper.CrearKeyValuePairItem("@piId_Tipo_Grupo_Financiero", tipoGrupoFinanciero.IdTipoGrupoFinanciero.ToString()));

                    #endregion

                    try
                    {

                        #region CONSULTAR DETALLE

                        rowsAffected = transaccionDA.TransaccionConsultaDetalle(conexion, conexionBitacora, "Tipos_Grupos_Financieros_Consulta_Detalle", paramTransaccion, EnumTipoBitacora.CONSULTAR, itemConsulta, "Tipos_Grupos_Financieros_Consulta_Detalle", _bitacora);
                        if (!rowsAffected.Equals(null))
                        {
                            retorno.IdTipoGrupoFinanciero = int.Parse(rowsAffected.Tables[0].Rows[0][0].ToString());
                            retorno.CodTipoGrupoFinanciero = int.Parse(rowsAffected.Tables[0].Rows[0][1].ToString());
                            retorno.DesTipoGrupoFinanciero = rowsAffected.Tables[0].Rows[0][2].ToString();
                            retorno.IndMetodoInsercion = rowsAffected.Tables[0].Rows[0][3].ToString();
                            if (rowsAffected.Tables[0].Rows[0][4].ToString().Length > 0)
                                retorno.FechaIngreso = DateTime.Parse(rowsAffected.Tables[0].Rows[0][4].ToString());
                            else
                                retorno.FechaIngreso = null;
                            retorno.CodUsuarioIngreso = rowsAffected.Tables[0].Rows[0][5].ToString();
                            if (rowsAffected.Tables[0].Rows[0][6].ToString().Length > 0)
                                retorno.FechaUltimaModificacion = DateTime.Parse(rowsAffected.Tables[0].Rows[0][6].ToString());
                            else
                                retorno.FechaUltimaModificacion = null;
                            retorno.CodUsuarioUltimaModificacion = rowsAffected.Tables[0].Rows[0][7].ToString();
                            retorno.DesUsuarioIngreso = rowsAffected.Tables[0].Rows[0][8].ToString();
                            retorno.DesUsuarioUltimaModificacion = rowsAffected.Tables[0].Rows[0][9].ToString();
                        }

                        return retorno;

                        #endregion

                    }
                    catch (Exception)
                    {
                        throw;
                    }
                }
        
                public int TiposGruposFinancierosTotalFilas(String conexion, ParametrosTotalFilasEntidad entidad)
                {

                    int value;

                    #region PARAMETROS

                    SqlParameter[] paramTransaccion = new SqlParameter[]
                    {
                        new SqlParameter("@psValor_Filtro", entidad.ValorFiltro),
                        new SqlParameter("@psColumna_Filtro", entidad.ColumnaFiltro)
                    };

                    #endregion

                    try
                    {

                        #region TOTAL FILAS

                            value = transaccionDA.TransaccionRows(conexion, "Tipos_Grupos_Financieros_Total_Filas", paramTransaccion);

                            return value;

                        #endregion

                    }
                    catch (Exception)
                    {
                        throw;
                    }
                }
        
                public List<ListaEntidad> TiposGruposFinancierosLista(String conexion, String filtro)
                {
                    List<ListaEntidad> retorno = new List<ListaEntidad>();
                    ListaEntidad elemento;
                    DataSet rowsAffected;

                    #region PARAMETROS

                    SqlParameter[] paramTransaccion = new SqlParameter[]
                    {
                        new SqlParameter("@psFiltro", filtro)
                    };

                    #endregion

                    try
                    {

                        #region LISTA

                        rowsAffected = transaccionDA.TransaccionConsulta(conexion, "Tipos_Grupos_Financieros_Lista", paramTransaccion);
                        if (!rowsAffected.Equals(null))
                        {
                            foreach (DataRow dr in rowsAffected.Tables[0].Rows)
                            {
                                elemento = new ListaEntidad();
                                elemento.Valor = dr[0].ToString();
                                elemento.Texto = dr[1].ToString();

                                retorno.Add(elemento);
                            }
                        }

                        return retorno;

                        #endregion


                    }
                    catch (Exception)
                    {
                        throw;
                    }
                }
        
            #endregion 
    
            //REQUERIMIENTO: 1-24105296
            #region TIPOS IDENTIFICACIONES RUC
        
                public RespuestaEntidad TiposIdentificacionesRUCInsertar(String conexion, String conexionBitacora, TiposIdentificacionesRUCEntidad tipoIdentificacionRUC, BitacorasEntidad _bitacora)
                {
                    RespuestaEntidad elemento = null;
                    DataSet rowsAffected;

                    #region PARAMETROS

                    SqlParameter[] paramTransaccion = new SqlParameter[]
                    {
                        new SqlParameter("@psCod_Tipo_Identificacion_RUC", tipoIdentificacionRUC.CodTipoIdentificacionRUC),
                        new SqlParameter("@psDes_Tipo_Identificacion_RUC", tipoIdentificacionRUC.DesTipoIdentificacionRUC),
                        new SqlParameter("@psInd_Metodo_Insercion", tipoIdentificacionRUC.IndMetodoInsercion),
                        new SqlParameter("@psCod_Usuario", tipoIdentificacionRUC.CodUsuarioIngreso)
                    };

                    #endregion

                    try
                    {

                        #region INSERTAR

                        rowsAffected = transaccionDA.TransaccionInsertar(conexion, conexionBitacora, "Tipos_Identificaciones_RUC_Inserta", paramTransaccion, EnumTipoBitacora.INSERTAR, _bitacora);
                        if (!rowsAffected.Equals(null))
                        {
                            elemento = new RespuestaEntidad();
                            elemento.ValorEstado = int.Parse(rowsAffected.Tables[0].Rows[0][0].ToString());
                            elemento.ValorError = int.Parse(rowsAffected.Tables[0].Rows[0][1].ToString());
                        }

                        return elemento;

                        #endregion

                    }
                    catch (Exception)
                    {
                        throw;
                    }
                }
        
                public RespuestaEntidad TiposIdentificacionesRUCModificar(String conexion, String conexionBitacora, TiposIdentificacionesRUCEntidad tipoIdentificacionRUC, BitacorasEntidad _bitacora)
                {
                    RespuestaEntidad elemento = null;
                    DataSet rowsAffected;

                    #region PARAMETROS

                    SqlParameter[] paramTransaccion = new SqlParameter[]
                    {
                        new SqlParameter("@piId_Tipo_Identificacion_RUC", tipoIdentificacionRUC.IdTipoIdentificacionRUC),
                        new SqlParameter("@psCod_Tipo_Identificacion_RUC", tipoIdentificacionRUC.CodTipoIdentificacionRUC),
                        new SqlParameter("@psDes_Tipo_Identificacion_RUC", tipoIdentificacionRUC.DesTipoIdentificacionRUC),
                        new SqlParameter("@psInd_Metodo_Insercion", tipoIdentificacionRUC.IndMetodoInsercion),
                        new SqlParameter("@psCod_Usuario", tipoIdentificacionRUC.CodUsuarioIngreso)
                    };

                    #endregion

                    #region KeyValuePair LIST

                    List<KeyValuePair<string, string>> itemConsulta = new List<KeyValuePair<string, string>>();
                    itemConsulta.Add(helper.CrearKeyValuePairItem("@piId_Tipo_Identificacion_RUC", tipoIdentificacionRUC.IdTipoIdentificacionRUC.ToString()));

                    #endregion

                    try
                    {

                        #region MODIFICAR

                        rowsAffected = transaccionDA.TransaccionModificar(conexion, conexionBitacora, "Tipos_Identificaciones_RUC_Actualiza", paramTransaccion, EnumTipoBitacora.ACTUALIZAR, itemConsulta, "Tipos_Identificaciones_RUC_Consulta_Detalle", _bitacora);
                        if (!rowsAffected.Equals(null))
                        {
                            elemento = new RespuestaEntidad();
                            elemento.ValorEstado = int.Parse(rowsAffected.Tables[0].Rows[0][0].ToString());
                            elemento.ValorError = int.Parse(rowsAffected.Tables[0].Rows[0][1].ToString());
                        }

                        return elemento;

                        #endregion

                    }
                    catch (Exception)
                    {
                        throw;
                    }
                }
        
                public RespuestaEntidad TiposIdentificacionesRUCEliminar(String conexion, String conexionBitacora, TiposIdentificacionesRUCEntidad tipoIdentificacionRUC, BitacorasEntidad _bitacora)
                {
                    RespuestaEntidad elemento = null;
                    DataSet rowsAffected;

                    #region PARAMETROS

                    SqlParameter[] paramTransaccion = new SqlParameter[]
                    {
                        new SqlParameter("@piId_Tipo_Identificacion_RUC", tipoIdentificacionRUC.IdTipoIdentificacionRUC)
                    };

                    #endregion

                    #region KeyValuePair LIST

                    List<KeyValuePair<string, string>> itemConsulta = new List<KeyValuePair<string, string>>();
                    itemConsulta.Add(helper.CrearKeyValuePairItem("@piId_Tipo_Identificacion_RUC", tipoIdentificacionRUC.IdTipoIdentificacionRUC.ToString()));

                    #endregion

                    try
                    {

                        #region ELIMINAR

                        rowsAffected = transaccionDA.TransaccionEliminar(conexion, conexionBitacora, "Tipos_Identificaciones_RUC_Elimina", paramTransaccion, EnumTipoBitacora.ELIMINAR, itemConsulta, "Tipos_Identificaciones_RUC_Consulta_Detalle", _bitacora);
                        if (!rowsAffected.Equals(null))
                        {
                            elemento = new RespuestaEntidad();
                            elemento.ValorEstado = int.Parse(rowsAffected.Tables[0].Rows[0][0].ToString());
                            elemento.ValorError = int.Parse(rowsAffected.Tables[0].Rows[0][1].ToString());
                        }

                        return elemento;

                        #endregion

                    }
                    catch (Exception)
                    {
                        throw;
                    }
                }

                public List<TiposIdentificacionesRUCEntidad> TiposIdentificacionesRUCConsultar(String conexion, ParametrosConsultaEntidad entidad)
                {
                    List<TiposIdentificacionesRUCEntidad> retorno = new List<TiposIdentificacionesRUCEntidad>();
                    TiposIdentificacionesRUCEntidad elemento;
                    DataSet rowsAffected;

                    #region PARAMETROS

                    SqlParameter[] paramTransaccion = new SqlParameter[]
                    {
                       new SqlParameter("@piIndice_Inicio_Fila", entidad.IndiceInicioFila),
                       new SqlParameter("@piMaximo_Filas", entidad.MaximoFilas),
                       new SqlParameter("@psValores_Filtro", entidad.ValorFiltro),
                       new SqlParameter("@psColumnas_Filtros", entidad.ColumnaFiltro),
                       new SqlParameter("@psColumna_Ordenar", entidad.ColumnaOrdenar)
                    };

                    #endregion

                    try
                    {

                        #region CONSULTAR

                        rowsAffected = transaccionDA.TransaccionConsulta(conexion, "Tipos_Identificaciones_RUC_Consulta", paramTransaccion);
                        if (!rowsAffected.Equals(null))
                        {
                            foreach (DataRow dr in rowsAffected.Tables[0].Rows)
                            {
                                elemento = new TiposIdentificacionesRUCEntidad();
                                elemento.IdTipoIdentificacionRUC = int.Parse(dr[0].ToString());
                                elemento.CodTipoIdentificacionRUC = dr[1].ToString();
                                elemento.DesTipoIdentificacionRUC = dr[2].ToString();

                                retorno.Add(elemento);
                            }
                        }

                        return retorno;

                        #endregion

                    }
                    catch (Exception)
                    {
                        throw;
                    }
                }
        
                public TiposIdentificacionesRUCEntidad TiposIdentificacionesRUCConsultarDetalle(String conexion, String conexionBitacora, TiposIdentificacionesRUCEntidad tipoIdentificacionRUC, BitacorasEntidad _bitacora)
                {
                    TiposIdentificacionesRUCEntidad retorno = new TiposIdentificacionesRUCEntidad();
                    DataSet rowsAffected;

                    #region PARAMETROS

                    SqlParameter[] paramTransaccion = new SqlParameter[]
                    {
                        new SqlParameter("@piId_Tipo_Identificacion_RUC", tipoIdentificacionRUC.IdTipoIdentificacionRUC)
                    };

                    #endregion

                    #region KeyValuePair LIST

                    List<KeyValuePair<string, string>> itemConsulta = new List<KeyValuePair<string, string>>();
                    itemConsulta.Add(helper.CrearKeyValuePairItem("@piId_Tipo_Identificacion_RUC", tipoIdentificacionRUC.IdTipoIdentificacionRUC.ToString()));

                    #endregion

                    try
                    {

                        #region CONSULTAR DETALLE

                        rowsAffected = transaccionDA.TransaccionConsultaDetalle(conexion, conexionBitacora, "Tipos_Identificaciones_RUC_Consulta_Detalle", paramTransaccion, EnumTipoBitacora.CONSULTAR, itemConsulta, "Tipos_Identificaciones_RUC_Consulta_Detalle", _bitacora);
                        if (!rowsAffected.Equals(null))
                        {
                            retorno.IdTipoIdentificacionRUC = int.Parse(rowsAffected.Tables[0].Rows[0][0].ToString());
                            retorno.CodTipoIdentificacionRUC = rowsAffected.Tables[0].Rows[0][1].ToString();
                            retorno.DesTipoIdentificacionRUC = rowsAffected.Tables[0].Rows[0][2].ToString();
                            retorno.IndMetodoInsercion = rowsAffected.Tables[0].Rows[0][3].ToString();
                            if (rowsAffected.Tables[0].Rows[0][4].ToString().Length > 0)
                                retorno.FechaIngreso = DateTime.Parse(rowsAffected.Tables[0].Rows[0][4].ToString());
                            else
                                retorno.FechaIngreso = null;
                            retorno.CodUsuarioIngreso = rowsAffected.Tables[0].Rows[0][5].ToString();
                            if (rowsAffected.Tables[0].Rows[0][6].ToString().Length > 0)
                                retorno.FechaUltimaModificacion = DateTime.Parse(rowsAffected.Tables[0].Rows[0][6].ToString());
                            else
                                retorno.FechaUltimaModificacion = null;
                            retorno.CodUsuarioUltimaModificacion = rowsAffected.Tables[0].Rows[0][7].ToString();
                            retorno.DesUsuarioIngreso = rowsAffected.Tables[0].Rows[0][8].ToString();
                            retorno.DesUsuarioUltimaModificacion = rowsAffected.Tables[0].Rows[0][9].ToString();
                        }

                        return retorno;

                        #endregion

                    }
                    catch (Exception)
                    {
                        throw;
                    }
                }
        
                public int TiposIdentificacionesRUCTotalFilas(String conexion, ParametrosTotalFilasEntidad entidad)
                {

                    int value;

                    #region PARAMETROS

                    SqlParameter[] paramTransaccion = new SqlParameter[]
                    {
                        new SqlParameter("@psValor_Filtro", entidad.ValorFiltro),
                        new SqlParameter("@psColumna_Filtro", entidad.ColumnaFiltro)
                    };

                    #endregion

                    try
                    {

                        #region TOTAL FILAS

                        value = transaccionDA.TransaccionRows(conexion, "Tipos_Identificaciones_RUC_Total_Filas", paramTransaccion);

                        return value;

                        #endregion

                    }
                    catch (Exception)
                    {
                        throw;
                    }
                }

                public List<ListaEntidad> TiposIdentificacionesRUCLista(String conexion, String filtro)
                {
                    List<ListaEntidad> retorno = new List<ListaEntidad>();
                    ListaEntidad elemento;
                    DataSet rowsAffected;

                    #region PARAMETROS

                    SqlParameter[] paramTransaccion = new SqlParameter[]
                    {
                        new SqlParameter("@psFiltro", filtro)
                    };

                    #endregion

                    try
                    {

                        #region LISTA

                        rowsAffected = transaccionDA.TransaccionConsulta(conexion, "Tipos_Identificaciones_RUC_Lista", paramTransaccion);
                        if (!rowsAffected.Equals(null))
                        {
                            foreach (DataRow dr in rowsAffected.Tables[0].Rows)
                            {
                                elemento = new ListaEntidad();
                                elemento.Valor = dr[0].ToString();
                                elemento.Texto = dr[1].ToString();

                                retorno.Add(elemento);
                            }
                        }
                        return retorno;

                        #endregion

                    }
                    catch (Exception)
                    {
                        throw;
                    }
                }

            #endregion 

            #region TIPOS INDICADORES INSCRIPCIONES
        
                public RespuestaEntidad TiposIndicadoresInscripcionesInsertar(String conexion, String conexionBitacora, TiposIndicadoresInscripcionesEntidad tipoIndicadorInscripcion, BitacorasEntidad _bitacora)
                {
                    RespuestaEntidad elemento = null;
                    DataSet rowsAffected;

                    #region PARAMETROS

                    SqlParameter[] paramTransaccion = new SqlParameter[]
                    {
                        new SqlParameter("@piCod_Tipo_Indicador_Inscripcion", tipoIndicadorInscripcion.CodTipoIndicadorInscripcion),
                        new SqlParameter("@psDes_Tipo_Indicador_Inscripcion", tipoIndicadorInscripcion.DesTipoIndicadorInscripcion),
                        new SqlParameter("@psInd_Metodo_Insercion", tipoIndicadorInscripcion.IndMetodoInsercion),
                        new SqlParameter("@psCod_Usuario", tipoIndicadorInscripcion.CodUsuarioIngreso)
                    };

                    #endregion

                    try
                    {

                        #region INSERTAR

                        rowsAffected = transaccionDA.TransaccionInsertar(conexion, conexionBitacora, "Tipos_Indicadores_Inscripciones_Inserta", paramTransaccion, EnumTipoBitacora.INSERTAR, _bitacora);
                        if (!rowsAffected.Equals(null))
                        {
                            elemento = new RespuestaEntidad();
                            elemento.ValorEstado = int.Parse(rowsAffected.Tables[0].Rows[0][0].ToString());
                            elemento.ValorError = int.Parse(rowsAffected.Tables[0].Rows[0][1].ToString());
                        }

                        return elemento;

                        #endregion

                    }
                    catch (Exception)
                    {
                        throw;
                    }
                }
        
                public RespuestaEntidad TiposIndicadoresInscripcionesModificar(String conexion, String conexionBitacora, TiposIndicadoresInscripcionesEntidad tipoIndicadorInscripcion, BitacorasEntidad _bitacora)
                {
                    RespuestaEntidad elemento = null;
                    DataSet rowsAffected;

                    #region PARAMETROS

                    SqlParameter[] paramTransaccion = new SqlParameter[]
                    {
                        new SqlParameter("@piId_Tipo_Indicador_Inscripcion", tipoIndicadorInscripcion.IdTipoIndicadorInscripcion),
                        new SqlParameter("@piCod_Tipo_Indicador_Inscripcion", tipoIndicadorInscripcion.CodTipoIndicadorInscripcion),
                        new SqlParameter("@psDes_Tipo_Indicador_Inscripcion", tipoIndicadorInscripcion.DesTipoIndicadorInscripcion),
                        new SqlParameter("@psInd_Metodo_Insercion", tipoIndicadorInscripcion.IndMetodoInsercion),
                        new SqlParameter("@psCod_Usuario", tipoIndicadorInscripcion.CodUsuarioIngreso)
                    };

                    #endregion

                    #region KeyValuePair LIST

                    List<KeyValuePair<string, string>> itemConsulta = new List<KeyValuePair<string, string>>();
                    itemConsulta.Add(helper.CrearKeyValuePairItem("@piId_Tipo_Indicador_Inscripcion", tipoIndicadorInscripcion.IdTipoIndicadorInscripcion.ToString()));

                    #endregion

                    try
                    {

                        #region MODIFICAR

                        rowsAffected = transaccionDA.TransaccionModificar(conexion, conexionBitacora, "Tipos_Indicadores_Inscripciones_Actualiza", paramTransaccion, EnumTipoBitacora.ACTUALIZAR, itemConsulta, "Tipos_Indicadores_Inscripciones_Consulta_Detalle", _bitacora);
                        if (!rowsAffected.Equals(null))
                        {
                            elemento = new RespuestaEntidad();
                            elemento.ValorEstado = int.Parse(rowsAffected.Tables[0].Rows[0][0].ToString());
                            elemento.ValorError = int.Parse(rowsAffected.Tables[0].Rows[0][1].ToString());
                        }

                        return elemento;

                        #endregion

                    }
                    catch (Exception)
                    {
                        throw;
                    }
                }
        
                public RespuestaEntidad TiposIndicadoresInscripcionesEliminar(String conexion, String conexionBitacora, TiposIndicadoresInscripcionesEntidad tipoIndicadorInscripcion, BitacorasEntidad _bitacora)
                {
                    RespuestaEntidad elemento = null;
                    DataSet rowsAffected;

                    #region PARAMETROS

                    SqlParameter[] paramTransaccion = new SqlParameter[]
                    {
                        new SqlParameter("@piId_Tipo_Indicador_Inscripcion", tipoIndicadorInscripcion.IdTipoIndicadorInscripcion)
                    };

                    #endregion

                    #region KeyValuePair LIST

                    List<KeyValuePair<string, string>> itemConsulta = new List<KeyValuePair<string, string>>();
                    itemConsulta.Add(helper.CrearKeyValuePairItem("@piId_Tipo_Indicador_Inscripcion", tipoIndicadorInscripcion.IdTipoIndicadorInscripcion.ToString()));

                    #endregion

                    try
                    {

                        #region ELIMINAR

                        rowsAffected = transaccionDA.TransaccionEliminar(conexion, conexionBitacora, "Tipos_Indicadores_Inscripciones_Elimina", paramTransaccion, EnumTipoBitacora.ELIMINAR, itemConsulta, "Tipos_Indicadores_Inscripciones_Consulta_Detalle", _bitacora);
                        if (!rowsAffected.Equals(null))
                        {
                            elemento = new RespuestaEntidad();
                            elemento.ValorEstado = int.Parse(rowsAffected.Tables[0].Rows[0][0].ToString());
                            elemento.ValorError = int.Parse(rowsAffected.Tables[0].Rows[0][1].ToString());
                        }

                        return elemento;

                        #endregion

                    }
                    catch (Exception)
                    {
                        throw;
                    }
                }

                public List<TiposIndicadoresInscripcionesEntidad> TiposIndicadoresInscripcionesConsultar(String conexion, ParametrosConsultaEntidad entidad)
                {
                    List<TiposIndicadoresInscripcionesEntidad> retorno = new List<TiposIndicadoresInscripcionesEntidad>();
                    TiposIndicadoresInscripcionesEntidad elemento;
                    DataSet rowsAffected;

                    #region PARAMETROS

                    SqlParameter[] paramTransaccion = new SqlParameter[]
                    {
                       new SqlParameter("@piIndice_Inicio_Fila", entidad.IndiceInicioFila),
                       new SqlParameter("@piMaximo_Filas", entidad.MaximoFilas),
                       new SqlParameter("@psValores_Filtro", entidad.ValorFiltro),
                       new SqlParameter("@psColumnas_Filtros", entidad.ColumnaFiltro),
                       new SqlParameter("@psColumna_Ordenar", entidad.ColumnaOrdenar)
                    };

                    #endregion

                    try
                    {

                        #region CONSULTAR

                            rowsAffected = transaccionDA.TransaccionConsulta(conexion, "Tipos_Indicadores_Inscripciones_Consulta", paramTransaccion);
                            if (!rowsAffected.Equals(null))
                            {
                                foreach (DataRow dr in rowsAffected.Tables[0].Rows)
                                {
                                    elemento = new TiposIndicadoresInscripcionesEntidad();
                                    elemento.IdTipoIndicadorInscripcion = int.Parse(dr[0].ToString());
                                    elemento.CodTipoIndicadorInscripcion = int.Parse(dr[1].ToString());
                                    elemento.DesTipoIndicadorInscripcion = dr[2].ToString();

                                    retorno.Add(elemento);
                                }
                            }

                            return retorno;

                        #endregion

                    }
                    catch (Exception)
                    {
                        throw;
                    }
                }
        
                public TiposIndicadoresInscripcionesEntidad TiposIndicadoresInscripcionesConsultarDetalle(String conexion, String conexionBitacora, TiposIndicadoresInscripcionesEntidad tipoIndicadorInscripcion, BitacorasEntidad _bitacora)
                {
                    TiposIndicadoresInscripcionesEntidad retorno = new TiposIndicadoresInscripcionesEntidad();
                    DataSet rowsAffected;

                    #region PARAMETROS

                    SqlParameter[] paramTransaccion = new SqlParameter[]
                    {
                        new SqlParameter("@piId_Tipo_Indicador_Inscripcion", tipoIndicadorInscripcion.IdTipoIndicadorInscripcion)
                    };

                    #endregion

                    #region KeyValuePair LIST

                    List<KeyValuePair<string, string>> itemConsulta = new List<KeyValuePair<string, string>>();
                    itemConsulta.Add(helper.CrearKeyValuePairItem("@piId_Tipo_Indicador_Inscripcion", tipoIndicadorInscripcion.IdTipoIndicadorInscripcion.ToString()));

                    #endregion

                    try
                    {

                        #region CONSULTAR DETALLE

                        rowsAffected = transaccionDA.TransaccionConsultaDetalle(conexion, conexionBitacora, "Tipos_Indicadores_Inscripciones_Consulta_Detalle", paramTransaccion, EnumTipoBitacora.CONSULTAR, itemConsulta, "Tipos_Indicadores_Inscripciones_Consulta_Detalle", _bitacora);
                        if (!rowsAffected.Equals(null))
                        {
                            retorno.IdTipoIndicadorInscripcion = int.Parse(rowsAffected.Tables[0].Rows[0][0].ToString());
                            retorno.CodTipoIndicadorInscripcion = int.Parse(rowsAffected.Tables[0].Rows[0][1].ToString());
                            retorno.DesTipoIndicadorInscripcion = rowsAffected.Tables[0].Rows[0][2].ToString();
                            retorno.IndMetodoInsercion = rowsAffected.Tables[0].Rows[0][3].ToString();
                            if (rowsAffected.Tables[0].Rows[0][4].ToString().Length > 0)
                                retorno.FechaIngreso = DateTime.Parse(rowsAffected.Tables[0].Rows[0][4].ToString());
                            else
                                retorno.FechaIngreso = null;
                            retorno.CodUsuarioIngreso = rowsAffected.Tables[0].Rows[0][5].ToString();
                            if (rowsAffected.Tables[0].Rows[0][6].ToString().Length > 0)
                                retorno.FechaUltimaModificacion = DateTime.Parse(rowsAffected.Tables[0].Rows[0][6].ToString());
                            else
                                retorno.FechaUltimaModificacion = null;
                            retorno.CodUsuarioUltimaModificacion = rowsAffected.Tables[0].Rows[0][7].ToString();
                            retorno.DesUsuarioIngreso = rowsAffected.Tables[0].Rows[0][8].ToString();
                            retorno.DesUsuarioUltimaModificacion = rowsAffected.Tables[0].Rows[0][9].ToString();
                        }

                        return retorno;

                        #endregion

                    }
                    catch (Exception)
                    {
                        throw;
                    }
                }
        
                public int TiposIndicadoresInscripcionesTotalFilas(String conexion, ParametrosTotalFilasEntidad entidad)
                {

                    int value;

                    #region PARAMETROS

                    SqlParameter[] paramTransaccion = new SqlParameter[]
                    {
                        new SqlParameter("@psValor_Filtro", entidad.ValorFiltro),
                        new SqlParameter("@psColumna_Filtro", entidad.ColumnaFiltro)
                    };

                    #endregion

                    try
                    {

                        #region TOTAL FILAS

                            value = transaccionDA.TransaccionRows(conexion, "Tipos_Indicadores_Inscripciones_Total_Filas", paramTransaccion);

                            return value;

                        #endregion

                    }
                    catch (Exception)
                    {
                        throw;
                    }
                }

                public List<ListaEntidad> TipoIndicadorInscripcionLista(String conexion, String _filtro)
                {
                    List<ListaEntidad> retorno = new List<ListaEntidad>();
                    ListaEntidad elemento;
                    DataSet rowsAffected;

                    #region PARAMETROS

                    SqlParameter[] paramTransaccion = new SqlParameter[]
            {
                new SqlParameter("@psFiltro", _filtro)
            };

                    #endregion

                    try
                    {

                        #region LISTA

                        rowsAffected = transaccionDA.TransaccionConsulta(conexion, "Tipos_Indicadores_Inscripciones_Lista", paramTransaccion);
                        if (!rowsAffected.Equals(null))
                        {
                            foreach (DataRow dr in rowsAffected.Tables[0].Rows)
                            {
                                elemento = new ListaEntidad();
                                elemento.Valor = dr[0].ToString();
                                elemento.Texto = dr[1].ToString();

                                retorno.Add(elemento);
                            }
                        }
                        return retorno;

                        #endregion

                    }
                    catch (Exception)
                    {
                        throw;
                    }
                }

            #endregion 
            
            #region TIPOS DOCUMENTOS FIDEICOMISOS

                public List<ListaEntidad> TipoDocumentoFideicomisoLista(String conexion, String _filtro)
                {
                    List<ListaEntidad> retorno = new List<ListaEntidad>();
                    ListaEntidad elemento;
                    DataSet rowsAffected;

                    #region PARAMETROS

                    SqlParameter[] paramTransaccion = new SqlParameter[]
            {
                new SqlParameter("@psFiltro", _filtro)
            };

                    #endregion

                    try
                    {

                        #region LISTA

                        rowsAffected = transaccionDA.TransaccionConsulta(conexion, "Tipos_Documentos_Fideicomisos_Lista", paramTransaccion);
                        if (!rowsAffected.Equals(null))
                        {
                            foreach (DataRow dr in rowsAffected.Tables[0].Rows)
                            {
                                elemento = new ListaEntidad();
                                elemento.Valor = dr[0].ToString();
                                elemento.Texto = dr[1].ToString();

                                retorno.Add(elemento);
                            }
                        }
                        return retorno;

                        #endregion

                    }
                    catch (Exception)
                    {
                        throw;
                    }
                }
            #endregion

            #region TIPOS INGRESOS

                public RespuestaEntidad TiposIngresosInsertar(String conexion, String conexionBitacora, TiposIngresosEntidad tipoIngreso, BitacorasEntidad _bitacora)
                {
                    RespuestaEntidad elemento = null;
                    DataSet rowsAffected;

                    #region PARAMETROS

                    SqlParameter[] paramTransaccion = new SqlParameter[]
                    {
                        new SqlParameter("@piCod_Tipo_Ingreso", tipoIngreso.CodTipoIngreso),
                        new SqlParameter("@psDes_Tipo_Ingreso", tipoIngreso.DesTipoIngreso),
                        new SqlParameter("@psInd_Metodo_Insercion", tipoIngreso.IndMetodoInsercion),
                        new SqlParameter("@psCod_Usuario", tipoIngreso.CodUsuarioIngreso)
                    };

                    #endregion

                    try
                    {

                        #region INSERTAR

                        rowsAffected = transaccionDA.TransaccionInsertar(conexion, conexionBitacora, "Tipos_Ingresos_Inserta", paramTransaccion, EnumTipoBitacora.INSERTAR, _bitacora);
                        if (!rowsAffected.Equals(null))
                        {
                            elemento = new RespuestaEntidad();
                            elemento.ValorEstado = int.Parse(rowsAffected.Tables[0].Rows[0][0].ToString());
                            elemento.ValorError = int.Parse(rowsAffected.Tables[0].Rows[0][1].ToString());
                        }

                        return elemento;

                        #endregion

                    }
                    catch (Exception)
                    {
                        throw;
                    }
                }
        
                public RespuestaEntidad TiposIngresosModificar(String conexion, String conexionBitacora, TiposIngresosEntidad tipoIngreso, BitacorasEntidad _bitacora)
                {
                    RespuestaEntidad elemento = null;
                    DataSet rowsAffected;

                    #region PARAMETROS

                    SqlParameter[] paramTransaccion = new SqlParameter[]
                    {
                        new SqlParameter("@piId_Tipo_Ingreso", tipoIngreso.IdTipoIngreso),
                        new SqlParameter("@piCod_Tipo_Ingreso", tipoIngreso.CodTipoIngreso),
                        new SqlParameter("@psDes_Tipo_Ingreso", tipoIngreso.DesTipoIngreso),
                        new SqlParameter("@psInd_Metodo_Insercion", tipoIngreso.IndMetodoInsercion),
                        new SqlParameter("@psCod_Usuario", tipoIngreso.CodUsuarioIngreso)
                    };

                    #endregion

                    #region KeyValuePair LIST

                    List<KeyValuePair<string, string>> itemConsulta = new List<KeyValuePair<string, string>>();
                    itemConsulta.Add(helper.CrearKeyValuePairItem("@piId_Tipo_Ingreso", tipoIngreso.IdTipoIngreso.ToString()));

                    #endregion

                    try
                    {

                        #region MODIFICAR

                        rowsAffected = transaccionDA.TransaccionModificar(conexion, conexionBitacora, "Tipos_Ingresos_Actualiza", paramTransaccion, EnumTipoBitacora.ACTUALIZAR, itemConsulta, "Tipos_Ingresos_Consulta_Detalle", _bitacora);
                        if (!rowsAffected.Equals(null))
                        {
                            elemento = new RespuestaEntidad();
                            elemento.ValorEstado = int.Parse(rowsAffected.Tables[0].Rows[0][0].ToString());
                            elemento.ValorError = int.Parse(rowsAffected.Tables[0].Rows[0][1].ToString());
                        }

                        return elemento;

                        #endregion

                    }
                    catch (Exception)
                    {
                        throw;
                    }
                }
        
                public RespuestaEntidad TiposIngresosEliminar(String conexion, String conexionBitacora, TiposIngresosEntidad tipoIngreso, BitacorasEntidad _bitacora)
                {
                    RespuestaEntidad elemento = null;
                    DataSet rowsAffected;

                    #region PARAMETROS

                    SqlParameter[] paramTransaccion = new SqlParameter[]
                    {
                        new SqlParameter("@piId_Tipo_Ingreso", tipoIngreso.IdTipoIngreso)
                    };

                    #endregion

                    #region KeyValuePair LIST

                    List<KeyValuePair<string, string>> itemConsulta = new List<KeyValuePair<string, string>>();
                    itemConsulta.Add(helper.CrearKeyValuePairItem("@piId_Tipo_Ingreso", tipoIngreso.IdTipoIngreso.ToString()));

                    #endregion

                    try
                    {

                        #region ELIMINAR

                        rowsAffected = transaccionDA.TransaccionEliminar(conexion, conexionBitacora, "Tipos_Ingresos_Elimina", paramTransaccion, EnumTipoBitacora.ELIMINAR, itemConsulta, "Tipos_Ingresos_Consulta_Detalle", _bitacora);
                        if (!rowsAffected.Equals(null))
                        {
                            elemento = new RespuestaEntidad();
                            elemento.ValorEstado = int.Parse(rowsAffected.Tables[0].Rows[0][0].ToString());
                            elemento.ValorError = int.Parse(rowsAffected.Tables[0].Rows[0][1].ToString());
                        }

                        return elemento;

                        #endregion

                    }
                    catch (Exception)
                    {
                        throw;
                    }
                }

                public List<TiposIngresosEntidad> TiposIngresosConsultar(String conexion, ParametrosConsultaEntidad entidad)
                {
                    List<TiposIngresosEntidad> retorno = new List<TiposIngresosEntidad>();
                    TiposIngresosEntidad elemento;
                    DataSet rowsAffected;

                    #region PARAMETROS

                    SqlParameter[] paramTransaccion = new SqlParameter[]
                    {
                       new SqlParameter("@piIndice_Inicio_Fila", entidad.IndiceInicioFila),
                       new SqlParameter("@piMaximo_Filas", entidad.MaximoFilas),
                       new SqlParameter("@psValores_Filtro", entidad.ValorFiltro),
                       new SqlParameter("@psColumnas_Filtros", entidad.ColumnaFiltro),
                       new SqlParameter("@psColumna_Ordenar", entidad.ColumnaOrdenar)
                    };

                    #endregion

                    try
                    {

                        #region CONSULTAR

                            rowsAffected = transaccionDA.TransaccionConsulta(conexion, "Tipos_Ingresos_Consulta", paramTransaccion);
                            if (!rowsAffected.Equals(null))
                            {
                                foreach (DataRow dr in rowsAffected.Tables[0].Rows)
                                {
                                    elemento = new TiposIngresosEntidad();
                                    elemento.IdTipoIngreso = int.Parse(dr[0].ToString());
                                    elemento.CodTipoIngreso = int.Parse(dr[1].ToString());
                                    elemento.DesTipoIngreso = dr[2].ToString();

                                    retorno.Add(elemento);
                                }
                            }

                            return retorno;

                        #endregion

                    }
                    catch (Exception)
                    {
                        throw;
                    }
                }
        
                public TiposIngresosEntidad TiposIngresosConsultarDetalle(String conexion, String conexionBitacora, TiposIngresosEntidad tipoIngreso, BitacorasEntidad _bitacora)
                {
                    TiposIngresosEntidad retorno = new TiposIngresosEntidad();
                    DataSet rowsAffected;

                    #region PARAMETROS

                    SqlParameter[] paramTransaccion = new SqlParameter[]
                    {
                        new SqlParameter("@piId_Tipo_Ingreso", tipoIngreso.IdTipoIngreso)
                    };

                    #endregion

                    #region KeyValuePair LIST

                    List<KeyValuePair<string, string>> itemConsulta = new List<KeyValuePair<string, string>>();
                    itemConsulta.Add(helper.CrearKeyValuePairItem("@piId_Tipo_Ingreso", tipoIngreso.IdTipoIngreso.ToString()));

                    #endregion

                    try
                    {

                        #region CONSULTAR DETALLE

                        rowsAffected = transaccionDA.TransaccionConsultaDetalle(conexion, conexionBitacora, "Tipos_Ingresos_Consulta_Detalle", paramTransaccion, EnumTipoBitacora.CONSULTAR, itemConsulta, "Tipos_Ingresos_Consulta_Detalle", _bitacora);
                        if (!rowsAffected.Equals(null))
                        {
                            retorno.IdTipoIngreso = int.Parse(rowsAffected.Tables[0].Rows[0][0].ToString());
                            retorno.CodTipoIngreso = int.Parse(rowsAffected.Tables[0].Rows[0][1].ToString());
                            retorno.DesTipoIngreso = rowsAffected.Tables[0].Rows[0][2].ToString();
                            retorno.IndMetodoInsercion = rowsAffected.Tables[0].Rows[0][3].ToString();
                            if (rowsAffected.Tables[0].Rows[0][4].ToString().Length > 0)
                                retorno.FechaIngreso = DateTime.Parse(rowsAffected.Tables[0].Rows[0][4].ToString());
                            else
                                retorno.FechaIngreso = null;
                            retorno.CodUsuarioIngreso = rowsAffected.Tables[0].Rows[0][5].ToString();
                            if (rowsAffected.Tables[0].Rows[0][6].ToString().Length > 0)
                                retorno.FechaUltimaModificacion = DateTime.Parse(rowsAffected.Tables[0].Rows[0][6].ToString());
                            else
                                retorno.FechaUltimaModificacion = null;
                            retorno.CodUsuarioUltimaModificacion = rowsAffected.Tables[0].Rows[0][7].ToString();
                            retorno.DesUsuarioIngreso = rowsAffected.Tables[0].Rows[0][8].ToString();
                            retorno.DesUsuarioUltimaModificacion = rowsAffected.Tables[0].Rows[0][9].ToString();
                        }

                        return retorno;

                        #endregion

                    }
                    catch (Exception)
                    {
                        throw;
                    }
                }
        
                public int TiposIngresosTotalFilas(String conexion, ParametrosTotalFilasEntidad entidad)
                {

                    int value;

                    #region PARAMETROS

                    SqlParameter[] paramTransaccion = new SqlParameter[]
                    {
                        new SqlParameter("@psValor_Filtro", entidad.ValorFiltro),
                        new SqlParameter("@psColumna_Filtro", entidad.ColumnaFiltro)
                    };

                    #endregion

                    try
                    {

                        #region TOTAL FILAS

                            value = transaccionDA.TransaccionRows(conexion, "Tipos_Ingresos_Total_Filas", paramTransaccion);

                            return value;

                        #endregion

                    }
                    catch (Exception)
                    {
                        throw;
                    }
                }

            #endregion 

            #region TIPOS INMUEBLES
        
                public RespuestaEntidad TiposInmueblesInsertar(String conexion, String conexionBitacora, TiposInmueblesEntidad tipoInmueble, BitacorasEntidad _bitacora)
                {
                    RespuestaEntidad elemento = null;
                    DataSet rowsAffected;

                    #region PARAMETROS

                    SqlParameter[] paramTransaccion = new SqlParameter[]
                    {
                        new SqlParameter("@piCod_Tipo_Inmueble", tipoInmueble.CodTipoInmueble),
                        new SqlParameter("@psDes_Tipo_Inmueble", tipoInmueble.DesTipoInmueble),
                        new SqlParameter("@psInd_Metodo_Insercion", tipoInmueble.IndMetodoInsercion),
                        new SqlParameter("@psCod_Usuario", tipoInmueble.CodUsuarioIngreso)
                    };

                    #endregion

                    try
                    {

                        #region INSERTAR

                        rowsAffected = transaccionDA.TransaccionInsertar(conexion, conexionBitacora, "Tipos_Inmuebles_Inserta", paramTransaccion, EnumTipoBitacora.INSERTAR, _bitacora);
                        if (!rowsAffected.Equals(null))
                        {
                            elemento = new RespuestaEntidad();
                            elemento.ValorEstado = int.Parse(rowsAffected.Tables[0].Rows[0][0].ToString());
                            elemento.ValorError = int.Parse(rowsAffected.Tables[0].Rows[0][1].ToString());
                        }

                        return elemento;

                        #endregion

                    }
                    catch (Exception)
                    {
                        throw;
                    }
                }
        
                public RespuestaEntidad TiposInmueblesModificar(String conexion, String conexionBitacora, TiposInmueblesEntidad tipoInmueble, BitacorasEntidad _bitacora)
                {
                    RespuestaEntidad elemento = null;
                    DataSet rowsAffected;

                    #region PARAMETROS

                    SqlParameter[] paramTransaccion = new SqlParameter[]
                    {
                        new SqlParameter("@piId_Tipo_Inmueble", tipoInmueble.IdTipoInmueble),
                        new SqlParameter("@piCod_Tipo_Inmueble", tipoInmueble.CodTipoInmueble),
                        new SqlParameter("@psDes_Tipo_Inmueble", tipoInmueble.DesTipoInmueble),
                        new SqlParameter("@psInd_Metodo_Insercion", tipoInmueble.IndMetodoInsercion),
                        new SqlParameter("@psCod_Usuario", tipoInmueble.CodUsuarioIngreso)
                    };

                    #endregion

                    #region KeyValuePair LIST

                    List<KeyValuePair<string, string>> itemConsulta = new List<KeyValuePair<string, string>>();
                    itemConsulta.Add(helper.CrearKeyValuePairItem("@piId_Tipo_Inmueble", tipoInmueble.IdTipoInmueble.ToString()));

                    #endregion

                    try
                    {

                        #region MODIFICAR

                        rowsAffected = transaccionDA.TransaccionModificar(conexion, conexionBitacora, "Tipos_Inmuebles_Actualiza", paramTransaccion, EnumTipoBitacora.ACTUALIZAR, itemConsulta, "Tipos_Inmuebles_Consulta_Detalle", _bitacora);
                        if (!rowsAffected.Equals(null))
                        {
                            elemento = new RespuestaEntidad();
                            elemento.ValorEstado = int.Parse(rowsAffected.Tables[0].Rows[0][0].ToString());
                            elemento.ValorError = int.Parse(rowsAffected.Tables[0].Rows[0][1].ToString());
                        }

                        return elemento;

                        #endregion

                    }
                    catch (Exception)
                    {
                        throw;
                    }
                }
        
                public RespuestaEntidad TiposInmueblesEliminar(String conexion, String conexionBitacora, TiposInmueblesEntidad tipoInmueble, BitacorasEntidad _bitacora)
                {
                    RespuestaEntidad elemento = null;
                    DataSet rowsAffected;

                    #region PARAMETROS

                    SqlParameter[] paramTransaccion = new SqlParameter[]
                    {
                        new SqlParameter("@piId_Tipo_Inmueble", tipoInmueble.IdTipoInmueble)
                    };

                    #endregion

                    #region KeyValuePair LIST

                    List<KeyValuePair<string, string>> itemConsulta = new List<KeyValuePair<string, string>>();
                    itemConsulta.Add(helper.CrearKeyValuePairItem("@piId_Tipo_Inmueble", tipoInmueble.IdTipoInmueble.ToString()));

                    #endregion

                    try
                    {

                        #region ELIMINAR

                        rowsAffected = transaccionDA.TransaccionEliminar(conexion, conexionBitacora, "Tipos_Inmuebles_Elimina", paramTransaccion, EnumTipoBitacora.ELIMINAR, itemConsulta, "Tipos_Inmuebles_Consulta_Detalle", _bitacora);
                        if (!rowsAffected.Equals(null))
                        {
                            elemento = new RespuestaEntidad();
                            elemento.ValorEstado = int.Parse(rowsAffected.Tables[0].Rows[0][0].ToString());
                            elemento.ValorError = int.Parse(rowsAffected.Tables[0].Rows[0][1].ToString());
                        }

                        return elemento;

                        #endregion

                    }
                    catch (Exception)
                    {
                        throw;
                    }
                }

                public List<TiposInmueblesEntidad> TiposInmueblesConsultar(String conexion, ParametrosConsultaEntidad entidad)
                {
                    List<TiposInmueblesEntidad> retorno = new List<TiposInmueblesEntidad>();
                    TiposInmueblesEntidad elemento;
                    DataSet rowsAffected;

                    #region PARAMETROS

                    SqlParameter[] paramTransaccion = new SqlParameter[]
                    {
                       new SqlParameter("@piIndice_Inicio_Fila", entidad.IndiceInicioFila),
                       new SqlParameter("@piMaximo_Filas", entidad.MaximoFilas),
                       new SqlParameter("@psValores_Filtro", entidad.ValorFiltro),
                       new SqlParameter("@psColumnas_Filtros", entidad.ColumnaFiltro),
                       new SqlParameter("@psColumna_Ordenar", entidad.ColumnaOrdenar)
                    };

                    #endregion

                    try
                    {

                        #region CONSULTAR

                            rowsAffected = transaccionDA.TransaccionConsulta(conexion, "Tipos_Inmuebles_Consulta", paramTransaccion);
                            if (!rowsAffected.Equals(null))
                            {
                                foreach (DataRow dr in rowsAffected.Tables[0].Rows)
                                {
                                    elemento = new TiposInmueblesEntidad();
                                    elemento.IdTipoInmueble = int.Parse(dr[0].ToString());
                                    elemento.CodTipoInmueble = int.Parse(dr[1].ToString());
                                    elemento.DesTipoInmueble = dr[2].ToString();

                                    retorno.Add(elemento);
                                }
                            }

                            return retorno;

                        #endregion

                    }
                    catch (Exception)
                    {
                        throw;
                    }
                }
        
                public TiposInmueblesEntidad TiposInmueblesConsultarDetalle(String conexion, String conexionBitacora, TiposInmueblesEntidad tipoInmueble, BitacorasEntidad _bitacora)
                {
                    TiposInmueblesEntidad retorno = new TiposInmueblesEntidad();
                    DataSet rowsAffected;

                    #region PARAMETROS

                    SqlParameter[] paramTransaccion = new SqlParameter[]
                    {
                        new SqlParameter("@piId_Tipo_Inmueble", tipoInmueble.IdTipoInmueble)
                    };

                    #endregion

                    #region KeyValuePair LIST

                    List<KeyValuePair<string, string>> itemConsulta = new List<KeyValuePair<string, string>>();
                    itemConsulta.Add(helper.CrearKeyValuePairItem("@piId_Tipo_Inmueble", tipoInmueble.IdTipoInmueble.ToString()));

                    #endregion

                    try
                    {

                        #region CONSULTAR DETALLE

                        rowsAffected = transaccionDA.TransaccionConsultaDetalle(conexion, conexionBitacora, "Tipos_Inmuebles_Consulta_Detalle", paramTransaccion, EnumTipoBitacora.CONSULTAR, itemConsulta, "Tipos_Inmuebles_Consulta_Detalle", _bitacora);
                        if (!rowsAffected.Equals(null))
                        {
                            retorno.IdTipoInmueble = int.Parse(rowsAffected.Tables[0].Rows[0][0].ToString());
                            retorno.CodTipoInmueble = int.Parse(rowsAffected.Tables[0].Rows[0][1].ToString());
                            retorno.DesTipoInmueble = rowsAffected.Tables[0].Rows[0][2].ToString();
                            retorno.IndMetodoInsercion = rowsAffected.Tables[0].Rows[0][3].ToString();
                            if (rowsAffected.Tables[0].Rows[0][4].ToString().Length > 0)
                                retorno.FechaIngreso = DateTime.Parse(rowsAffected.Tables[0].Rows[0][4].ToString());
                            else
                                retorno.FechaIngreso = null;
                            retorno.CodUsuarioIngreso = rowsAffected.Tables[0].Rows[0][5].ToString();
                            if (rowsAffected.Tables[0].Rows[0][6].ToString().Length > 0)
                                retorno.FechaUltimaModificacion = DateTime.Parse(rowsAffected.Tables[0].Rows[0][6].ToString());
                            else
                                retorno.FechaUltimaModificacion = null;
                            retorno.CodUsuarioUltimaModificacion = rowsAffected.Tables[0].Rows[0][7].ToString();
                            retorno.DesUsuarioIngreso = rowsAffected.Tables[0].Rows[0][8].ToString();
                            retorno.DesUsuarioUltimaModificacion = rowsAffected.Tables[0].Rows[0][9].ToString();
                        }

                        return retorno;

                        #endregion

                    }
                    catch (Exception)
                    {
                        throw;
                    }
                }
        
                public int TiposInmueblesTotalFilas(String conexion, ParametrosTotalFilasEntidad entidad)
                {

                    int value;

                    #region PARAMETROS

                    SqlParameter[] paramTransaccion = new SqlParameter[]
                    {
                        new SqlParameter("@psValor_Filtro", entidad.ValorFiltro),
                        new SqlParameter("@psColumna_Filtro", entidad.ColumnaFiltro)
                    };

                    #endregion

                    try
                    {

                        #region TOTAL FILAS

                            value = transaccionDA.TransaccionRows(conexion, "Tipos_Inmuebles_Total_Filas", paramTransaccion);

                            return value;

                        #endregion

                    }
                    catch (Exception)
                    {
                        throw;
                    }
                }

            #endregion 

            #region TIPOS INSTRUMENTOS
        
                public RespuestaEntidad TiposInstrumentosInsertar(String conexion, String conexionBitacora, TiposInstrumentosEntidad tipoInstrumento, BitacorasEntidad _bitacora)
                {
                    RespuestaEntidad elemento = null;
                    DataSet rowsAffected;

                    #region PARAMETROS

                    SqlParameter[] paramTransaccion = new SqlParameter[]
                    {
                        new SqlParameter("@psCod_Tipo_Instrumento", tipoInstrumento.CodTipoInstrumento),
                        new SqlParameter("@psDes_Tipo_Instrumento", tipoInstrumento.DesTipoInstrumento),
                        new SqlParameter("@psInd_Metodo_Insercion", tipoInstrumento.IndMetodoInsercion),
                        new SqlParameter("@psCod_Usuario", tipoInstrumento.CodUsuarioIngreso)
                    };

                    #endregion

                    try
                    {

                        #region INSERTAR

                        rowsAffected = transaccionDA.TransaccionInsertar(conexion, conexionBitacora, "Tipos_Instrumentos_Inserta", paramTransaccion, EnumTipoBitacora.INSERTAR, _bitacora);
                        if (!rowsAffected.Equals(null))
                        {
                            elemento = new RespuestaEntidad();
                            elemento.ValorEstado = int.Parse(rowsAffected.Tables[0].Rows[0][0].ToString());
                            elemento.ValorError = int.Parse(rowsAffected.Tables[0].Rows[0][1].ToString());
                        }

                        return elemento;

                        #endregion

                    }
                    catch (Exception)
                    {
                        throw;
                    }
                }
        
                public RespuestaEntidad TiposInstrumentosModificar(String conexion, String conexionBitacora, TiposInstrumentosEntidad tipoInstrumento, BitacorasEntidad _bitacora)
                {
                    RespuestaEntidad elemento = null;
                    DataSet rowsAffected;

                    #region PARAMETROS

                    SqlParameter[] paramTransaccion = new SqlParameter[]
                    {
                        new SqlParameter("@piId_Tipo_Instrumento", tipoInstrumento.IdTipoInstrumento),
                        new SqlParameter("@psCod_Tipo_Instrumento", tipoInstrumento.CodTipoInstrumento),
                        new SqlParameter("@psDes_Tipo_Instrumento", tipoInstrumento.DesTipoInstrumento),
                        new SqlParameter("@psInd_Metodo_Insercion", tipoInstrumento.IndMetodoInsercion),
                        new SqlParameter("@psCod_Usuario", tipoInstrumento.CodUsuarioIngreso)
                    };

                    #endregion

                    #region KeyValuePair LIST

                    List<KeyValuePair<string, string>> itemConsulta = new List<KeyValuePair<string, string>>();
                    itemConsulta.Add(helper.CrearKeyValuePairItem("@piId_Tipo_Instrumento", tipoInstrumento.IdTipoInstrumento.ToString()));

                    #endregion

                    try
                    {

                        #region MODIFICAR

                        rowsAffected = transaccionDA.TransaccionModificar(conexion, conexionBitacora, "Tipos_Instrumentos_Actualiza", paramTransaccion, EnumTipoBitacora.INSERTAR, itemConsulta, "Tipos_Instrumentos_Consulta_Detalle", _bitacora);
                        if (!rowsAffected.Equals(null))
                        {
                            elemento = new RespuestaEntidad();
                            elemento.ValorEstado = int.Parse(rowsAffected.Tables[0].Rows[0][0].ToString());
                            elemento.ValorError = int.Parse(rowsAffected.Tables[0].Rows[0][1].ToString());
                        }

                        return elemento;

                        #endregion

                    }
                    catch (Exception)
                    {
                        throw;
                    }
                }
        
                public RespuestaEntidad TiposInstrumentosEliminar(String conexion, String conexionBitacora, TiposInstrumentosEntidad tipoInstrumento, BitacorasEntidad _bitacora)
                {
                    RespuestaEntidad elemento = null;
                    DataSet rowsAffected;

                    #region PARAMETROS

                    SqlParameter[] paramTransaccion = new SqlParameter[]
                    {
                         new SqlParameter("@piId_Tipo_Instrumento", tipoInstrumento.IdTipoInstrumento)
                    };

                    #endregion

                    #region KeyValuePair LIST

                    List<KeyValuePair<string, string>> itemConsulta = new List<KeyValuePair<string, string>>();
                    itemConsulta.Add(helper.CrearKeyValuePairItem("@piId_Tipo_Instrumento", tipoInstrumento.IdTipoInstrumento.ToString()));

                    #endregion

                    try
                    {

                        #region ELIMINAR

                        rowsAffected = transaccionDA.TransaccionEliminar(conexion, conexionBitacora, "Tipos_Instrumentos_Elimina", paramTransaccion, EnumTipoBitacora.ELIMINAR, itemConsulta, "Tipos_Instrumentos_Consulta_Detalle", _bitacora);
                        if (!rowsAffected.Equals(null))
                        {
                            elemento = new RespuestaEntidad();
                            elemento.ValorEstado = int.Parse(rowsAffected.Tables[0].Rows[0][0].ToString());
                            elemento.ValorError = int.Parse(rowsAffected.Tables[0].Rows[0][1].ToString());
                        }

                        return elemento;

                        #endregion

                    }
                    catch (Exception)
                    {
                        throw;
                    }
                }

                public List<TiposInstrumentosEntidad> TiposInstrumentosConsultar(String conexion, ParametrosConsultaEntidad entidad)
                {
                    List<TiposInstrumentosEntidad> retorno = new List<TiposInstrumentosEntidad>();
                    TiposInstrumentosEntidad elemento;
                    DataSet rowsAffected;

                    #region PARAMETROS

                    SqlParameter[] paramTransaccion = new SqlParameter[]
                    {
                       new SqlParameter("@piIndice_Inicio_Fila", entidad.IndiceInicioFila),
                       new SqlParameter("@piMaximo_Filas", entidad.MaximoFilas),
                       new SqlParameter("@psValores_Filtro", entidad.ValorFiltro),
                       new SqlParameter("@psColumnas_Filtros", entidad.ColumnaFiltro),
                       new SqlParameter("@psColumna_Ordenar", entidad.ColumnaOrdenar)
                    };

                    #endregion

                    try
                    {

                        #region CONSULTAR

                            rowsAffected = transaccionDA.TransaccionConsulta(conexion, "Tipos_Instrumentos_Consulta", paramTransaccion);
                            if (!rowsAffected.Equals(null))
                            {
                                foreach (DataRow dr in rowsAffected.Tables[0].Rows)
                                {
                                    elemento = new TiposInstrumentosEntidad();
                                    elemento.IdTipoInstrumento = int.Parse(dr[0].ToString());
                                    elemento.CodTipoInstrumento = dr[1].ToString();
                                    elemento.DesTipoInstrumento = dr[2].ToString();

                                    retorno.Add(elemento);
                                }
                            }

                            return retorno;

                        #endregion

                    }
                    catch (Exception)
                    {
                        throw;
                    }
                }
        
                public TiposInstrumentosEntidad TiposInstrumentosConsultarDetalle(String conexion, String conexionBitacora, TiposInstrumentosEntidad tipoInstrumento, BitacorasEntidad _bitacora)
                {
                    TiposInstrumentosEntidad retorno = new TiposInstrumentosEntidad();
                    DataSet rowsAffected;

                    #region PARAMETROS

                    SqlParameter[] paramTransaccion = new SqlParameter[]
                    {
                        new SqlParameter("@piId_Tipo_Instrumento", tipoInstrumento.IdTipoInstrumento)
                    };

                    #endregion

                    try
                    {

                        #region CONSULTAR DETALLE

                        rowsAffected = transaccionDA.TransaccionConsulta(conexion, "Tipos_Instrumentos_Consulta_Detalle", paramTransaccion);
                        if (!rowsAffected.Equals(null))
                        {
                            retorno.IdTipoInstrumento = int.Parse(rowsAffected.Tables[0].Rows[0][0].ToString());
                            retorno.CodTipoInstrumento = rowsAffected.Tables[0].Rows[0][1].ToString();
                            retorno.DesTipoInstrumento = rowsAffected.Tables[0].Rows[0][2].ToString();
                            retorno.IndMetodoInsercion = rowsAffected.Tables[0].Rows[0][3].ToString();
                            if (rowsAffected.Tables[0].Rows[0][4].ToString().Length > 0)
                                retorno.FechaIngreso = DateTime.Parse(rowsAffected.Tables[0].Rows[0][4].ToString());
                            else
                                retorno.FechaIngreso = null;
                            retorno.CodUsuarioIngreso = rowsAffected.Tables[0].Rows[0][5].ToString();
                            if (rowsAffected.Tables[0].Rows[0][6].ToString().Length > 0)
                                retorno.FechaUltimaModificacion = DateTime.Parse(rowsAffected.Tables[0].Rows[0][6].ToString());
                            else
                                retorno.FechaUltimaModificacion = null;
                            retorno.CodUsuarioUltimaModificacion = rowsAffected.Tables[0].Rows[0][7].ToString();
                            retorno.DesUsuarioIngreso = rowsAffected.Tables[0].Rows[0][8].ToString();
                            retorno.DesUsuarioUltimaModificacion = rowsAffected.Tables[0].Rows[0][9].ToString();
                        }

                        return retorno;

                        #endregion

                    }
                    catch (Exception)
                    {
                        throw;
                    }
                }
        
                public int TiposInstrumentosTotalFilas(String conexion, ParametrosTotalFilasEntidad entidad)
                {

                    int value;

                    #region PARAMETROS

                    SqlParameter[] paramTransaccion = new SqlParameter[]
                    {
                        new SqlParameter("@psValor_Filtro", entidad.ValorFiltro),
                        new SqlParameter("@psColumna_Filtro", entidad.ColumnaFiltro)
                    };

                    #endregion

                    try
                    {

                        #region TOTAL FILAS

                            value = transaccionDA.TransaccionRows(conexion, "Tipos_Instrumentos_Total_Filas", paramTransaccion);

                            return value;

                        #endregion

                    }
                    catch (Exception)
                    {
                        throw;
                    }
                }
        
                public List<ListaEntidad> TiposInstrumentosLista(String conexion, String filtro)
                {
                    List<ListaEntidad> retorno = new List<ListaEntidad>();
                    ListaEntidad elemento;
                    DataSet rowsAffected;

                    #region PARAMETROS

                    SqlParameter[] paramTransaccion = new SqlParameter[]
                    {
                        new SqlParameter("@psFiltro", filtro)
                    };

                    #endregion

                    try
                    {

                        #region LISTA

                        rowsAffected = transaccionDA.TransaccionConsulta(conexion, "Tipos_Instrumentos_Lista", paramTransaccion);
                        if (!rowsAffected.Equals(null))
                        {
                            foreach (DataRow dr in rowsAffected.Tables[0].Rows)
                            {
                                elemento = new ListaEntidad();
                                elemento.Valor = dr[0].ToString();
                                elemento.Texto = dr[1].ToString();

                                retorno.Add(elemento);
                            }
                        }

                        return retorno;

                        #endregion


                    }
                    catch (Exception)
                    {
                        throw;
                    }
                }

                public List<ListaEntidad> TiposInstrumentosFiltradoInstrumentosLista(String conexion, String filtro)
                {
                    List<ListaEntidad> retorno = new List<ListaEntidad>();
                    ListaEntidad elemento;
                    DataSet rowsAffected;

                    #region PARAMETROS

                    SqlParameter[] paramTransaccion = new SqlParameter[]
                    {
                        new SqlParameter("@psFiltro", filtro)
                    };

                    #endregion

                    try
                    {

                        #region LISTA

                        rowsAffected = transaccionDA.TransaccionConsulta(conexion, "Tipos_Instrumentos_Instrumentos_Lista", paramTransaccion);
                        if (!rowsAffected.Equals(null))
                        {
                            foreach (DataRow dr in rowsAffected.Tables[0].Rows)
                            {
                                elemento = new ListaEntidad();
                                elemento.Valor = dr[0].ToString();
                                elemento.Texto = dr[1].ToString();

                                retorno.Add(elemento);
                            }
                        }

                        return retorno;

                        #endregion


                    }
                    catch (Exception)
                    {
                        throw;
                    }
                }
        
            #endregion 

            #region TIPOS LIQUIDEZ
        
                public RespuestaEntidad TiposLiquidezInsertar(String conexion, String conexionBitacora, TiposLiquidezEntidad tipoLiquidez, BitacorasEntidad _bitacora)
                {
                    RespuestaEntidad elemento = null;
                    DataSet rowsAffected;

                    #region PARAMETROS

                    SqlParameter[] paramTransaccion = new SqlParameter[]
                    {
                        new SqlParameter("@piCod_Tipo_Liquidez", tipoLiquidez.CodTipoLiquidez),
                        new SqlParameter("@psDes_Tipo_Liquidez", tipoLiquidez.DesTipoLiquidez),
                        new SqlParameter("@psInd_Metodo_Insercion", tipoLiquidez.IndMetodoInsercion),
                        new SqlParameter("@psCod_Usuario", tipoLiquidez.CodUsuarioIngreso)
                    };

                    #endregion

                    try
                    {

                        #region INSERTAR

                        rowsAffected = transaccionDA.TransaccionInsertar(conexion, conexionBitacora, "Tipos_Liquidez_Inserta", paramTransaccion, EnumTipoBitacora.INSERTAR, _bitacora);
                        if (!rowsAffected.Equals(null))
                        {
                            elemento = new RespuestaEntidad();
                            elemento.ValorEstado = int.Parse(rowsAffected.Tables[0].Rows[0][0].ToString());
                            elemento.ValorError = int.Parse(rowsAffected.Tables[0].Rows[0][1].ToString());
                        }

                        return elemento;

                        #endregion

                    }
                    catch (Exception)
                    {
                        throw;
                    }
                }
        
                public RespuestaEntidad TiposLiquidezModificar(String conexion, String conexionBitacora, TiposLiquidezEntidad tipoLiquidez, BitacorasEntidad _bitacora)
                {
                    RespuestaEntidad elemento = null;
                    DataSet rowsAffected;

                    #region PARAMETROS

                    SqlParameter[] paramTransaccion = new SqlParameter[]
                    {
                        new SqlParameter("@piId_Tipo_Liquidez", tipoLiquidez.IdTipoLiquidez),
                        new SqlParameter("@piCod_Tipo_Liquidez", tipoLiquidez.CodTipoLiquidez),
                        new SqlParameter("@psDes_Tipo_Liquidez", tipoLiquidez.DesTipoLiquidez),
                        new SqlParameter("@psInd_Metodo_Insercion", tipoLiquidez.IndMetodoInsercion),
                        new SqlParameter("@psCod_Usuario", tipoLiquidez.CodUsuarioIngreso)
                    };

                    #endregion

                    #region KeyValuePair LIST

                    List<KeyValuePair<string, string>> itemConsulta = new List<KeyValuePair<string, string>>();
                    itemConsulta.Add(helper.CrearKeyValuePairItem("@piId_Tipo_Liquidez", tipoLiquidez.IdTipoLiquidez.ToString()));

                    #endregion

                    try
                    {

                        #region MODIFICAR

                        rowsAffected = transaccionDA.TransaccionModificar(conexion, conexionBitacora, "Tipos_Liquidez_Actualiza", paramTransaccion, EnumTipoBitacora.ACTUALIZAR, itemConsulta, "Tipos_Liquidez_Consulta_Detalle", _bitacora);
                        if (!rowsAffected.Equals(null))
                        {
                            elemento = new RespuestaEntidad();
                            elemento.ValorEstado = int.Parse(rowsAffected.Tables[0].Rows[0][0].ToString());
                            elemento.ValorError = int.Parse(rowsAffected.Tables[0].Rows[0][1].ToString());
                        }

                        return elemento;

                        #endregion

                    }
                    catch (Exception)
                    {
                        throw;
                    }
                }
        
                public RespuestaEntidad TiposLiquidezEliminar(String conexion, String conexionBitacora, TiposLiquidezEntidad tipoLiquidez, BitacorasEntidad _bitacora)
                {
                    RespuestaEntidad elemento = null;
                    DataSet rowsAffected;

                    #region PARAMETROS

                    SqlParameter[] paramTransaccion = new SqlParameter[]
                    {
                        new SqlParameter("@piId_Tipo_Liquidez", tipoLiquidez.IdTipoLiquidez)
                    };

                    #endregion

                    #region KeyValuePair LIST

                    List<KeyValuePair<string, string>> itemConsulta = new List<KeyValuePair<string, string>>();
                    itemConsulta.Add(helper.CrearKeyValuePairItem("@piId_Tipo_Liquidez", tipoLiquidez.IdTipoLiquidez.ToString()));

                    #endregion

                    try
                    {

                        #region ELIMINAR

                        rowsAffected = transaccionDA.TransaccionEliminar(conexion, conexionBitacora, "Tipos_Liquidez_Elimina", paramTransaccion, EnumTipoBitacora.ELIMINAR, itemConsulta, "Tipos_Liquidez_Consulta_Detalle", _bitacora);
                        if (!rowsAffected.Equals(null))
                        {
                            elemento = new RespuestaEntidad();
                            elemento.ValorEstado = int.Parse(rowsAffected.Tables[0].Rows[0][0].ToString());
                            elemento.ValorError = int.Parse(rowsAffected.Tables[0].Rows[0][1].ToString());
                        }

                        return elemento;

                        #endregion

                    }
                    catch (Exception)
                    {
                        throw;
                    }
                }

                public List<TiposLiquidezEntidad> TiposLiquidezConsultar(String conexion, ParametrosConsultaEntidad entidad)
                {
                    List<TiposLiquidezEntidad> retorno = new List<TiposLiquidezEntidad>();
                    TiposLiquidezEntidad elemento;
                    DataSet rowsAffected;

                    #region PARAMETROS

                    SqlParameter[] paramTransaccion = new SqlParameter[]
                    {
                       new SqlParameter("@piIndice_Inicio_Fila", entidad.IndiceInicioFila),
                       new SqlParameter("@piMaximo_Filas", entidad.MaximoFilas),
                       new SqlParameter("@psValores_Filtro", entidad.ValorFiltro),
                       new SqlParameter("@psColumnas_Filtros", entidad.ColumnaFiltro),
                       new SqlParameter("@psColumna_Ordenar", entidad.ColumnaOrdenar)
                    };

                    #endregion

                    try
                    {

                        #region CONSULTAR

                            rowsAffected = transaccionDA.TransaccionConsulta(conexion, "Tipos_Liquidez_Consulta", paramTransaccion);
                            if (!rowsAffected.Equals(null))
                            {
                                foreach (DataRow dr in rowsAffected.Tables[0].Rows)
                                {
                                    elemento = new TiposLiquidezEntidad();
                                    elemento.IdTipoLiquidez = int.Parse(dr[0].ToString());
                                    elemento.CodTipoLiquidez = int.Parse(dr[1].ToString());
                                    elemento.DesTipoLiquidez = dr[2].ToString();

                                    retorno.Add(elemento);
                                }
                            }

                            return retorno;

                        #endregion

                    }
                    catch (Exception)
                    {
                        throw;
                    }
                }
        
                public TiposLiquidezEntidad TiposLiquidezConsultarDetalle(String conexion, String conexionBitacora, TiposLiquidezEntidad tipoLiquidez, BitacorasEntidad _bitacora)
                {
                    TiposLiquidezEntidad retorno = new TiposLiquidezEntidad();
                    DataSet rowsAffected;

                    #region PARAMETROS

                    SqlParameter[] paramTransaccion = new SqlParameter[]
                    {
                        new SqlParameter("@piId_Tipo_Liquidez", tipoLiquidez.IdTipoLiquidez)
                    };

                    #endregion

                    #region KeyValuePair LIST

                    List<KeyValuePair<string, string>> itemConsulta = new List<KeyValuePair<string, string>>();
                    itemConsulta.Add(helper.CrearKeyValuePairItem("@piId_Tipo_Liquidez", tipoLiquidez.IdTipoLiquidez.ToString()));

                    #endregion

                    try
                    {

                        #region CONSULTAR DETALLE

                        rowsAffected = transaccionDA.TransaccionConsultaDetalle(conexion, conexionBitacora, "Tipos_Liquidez_Consulta_Detalle", paramTransaccion, EnumTipoBitacora.CONSULTAR, itemConsulta, "Tipos_Liquidez_Consulta_Detalle", _bitacora);
                        if (!rowsAffected.Equals(null))
                        {
                            retorno.IdTipoLiquidez = int.Parse(rowsAffected.Tables[0].Rows[0][0].ToString());
                            retorno.CodTipoLiquidez = int.Parse(rowsAffected.Tables[0].Rows[0][1].ToString());
                            retorno.DesTipoLiquidez = rowsAffected.Tables[0].Rows[0][2].ToString();
                            retorno.IndMetodoInsercion = rowsAffected.Tables[0].Rows[0][3].ToString();
                            if (rowsAffected.Tables[0].Rows[0][4].ToString().Length > 0)
                                retorno.FechaIngreso = DateTime.Parse(rowsAffected.Tables[0].Rows[0][4].ToString());
                            else
                                retorno.FechaIngreso = null;
                            retorno.CodUsuarioIngreso = rowsAffected.Tables[0].Rows[0][5].ToString();
                            if (rowsAffected.Tables[0].Rows[0][6].ToString().Length > 0)
                                retorno.FechaUltimaModificacion = DateTime.Parse(rowsAffected.Tables[0].Rows[0][6].ToString());
                            else
                                retorno.FechaUltimaModificacion = null;
                            retorno.CodUsuarioUltimaModificacion = rowsAffected.Tables[0].Rows[0][7].ToString();
                            retorno.DesUsuarioIngreso = rowsAffected.Tables[0].Rows[0][8].ToString();
                            retorno.DesUsuarioUltimaModificacion = rowsAffected.Tables[0].Rows[0][9].ToString();
                        }

                        return retorno;

                        #endregion

                    }
                    catch (Exception)
                    {
                        throw;
                    }
                }
        
                public int TiposLiquidezTotalFilas(String conexion, ParametrosTotalFilasEntidad entidad)
                {

                    int value;

                    #region PARAMETROS

                    SqlParameter[] paramTransaccion = new SqlParameter[]
                    {
                        new SqlParameter("@psValor_Filtro", entidad.ValorFiltro),
                        new SqlParameter("@psColumna_Filtro", entidad.ColumnaFiltro)
                    };

                    #endregion

                    try
                    {

                        #region TOTAL FILAS

                            value = transaccionDA.TransaccionRows(conexion, "Tipos_Liquidez_Total_Filas", paramTransaccion);

                            return value;

                        #endregion

                    }
                    catch (Exception)
                    {
                        throw;
                    }
                }

                public List<ListaEntidad> TiposLiquidezLista(String conexion, String filtro)
                {
                    List<ListaEntidad> retorno = new List<ListaEntidad>();
                    ListaEntidad elemento;
                    DataSet rowsAffected;

                    #region PARAMETROS

                    SqlParameter[] paramTransaccion = new SqlParameter[]
                    {
                        new SqlParameter("@psFiltro", filtro)
                    };

                    #endregion

                    try
                    {

                        #region LISTA

                        rowsAffected = transaccionDA.TransaccionConsulta(conexion, "Tipos_Liquidez_Lista", paramTransaccion);
                        if (!rowsAffected.Equals(null))
                        {
                            foreach (DataRow dr in rowsAffected.Tables[0].Rows)
                            {
                                elemento = new ListaEntidad();
                                elemento.Valor = dr[0].ToString();
                                elemento.Texto = dr[1].ToString();

                                retorno.Add(elemento);
                            }
                        }
                        return retorno;

                        #endregion

                    }
                    catch (Exception)
                    {
                        throw;
                    }
                }        

            #endregion 

            #region TIPOS MITIGADORES RIESGOS
        
                public RespuestaEntidad TiposMitigadoresRiesgosInsertar(String conexion, String conexionBitacora, TiposMitigadoresRiesgosEntidad tipoMitigadorRiesgo, BitacorasEntidad _bitacora)
                {
                    RespuestaEntidad elemento = null;
                    DataSet rowsAffected;

                    #region PARAMETROS

                    SqlParameter[] paramTransaccion = new SqlParameter[]
                    {
                        new SqlParameter("@piCod_Tipo_Mitigador_Riesgo", tipoMitigadorRiesgo.CodTipoMitigadorRiesgo),
                        new SqlParameter("@psDes_Tipo_Mitigador_Riesgo", tipoMitigadorRiesgo.DesTipoMitigadorRiesgo),                        
                        new SqlParameter("@psInd_Metodo_Insercion", tipoMitigadorRiesgo.IndMetodoInsercion),
                        new SqlParameter("@psCod_Usuario", tipoMitigadorRiesgo.CodUsuarioIngreso)
                    };

                    #endregion

                    try
                    {

                        #region INSERTAR

                        rowsAffected = transaccionDA.Instancia.TransaccionInsertar(conexion, conexionBitacora, "Tipos_Mitigadores_Riesgos_Inserta", paramTransaccion, EnumTipoBitacora.INSERTAR, _bitacora);
                        if (!rowsAffected.Equals(null))
                        {
                            elemento = new RespuestaEntidad();
                            elemento.ValorEstado = int.Parse(rowsAffected.Tables[0].Rows[0][0].ToString());
                            elemento.ValorError = int.Parse(rowsAffected.Tables[0].Rows[0][1].ToString());
                        }

                        return elemento;

                        #endregion

                    }
                    catch (Exception ex)
                    {
                        throw ex;
                    }
                }
        
                public RespuestaEntidad TiposMitigadoresRiesgosModificar(String conexion, String conexionBitacora, TiposMitigadoresRiesgosEntidad tipoMitigadorRiesgo, BitacorasEntidad _bitacora)
                {
                    RespuestaEntidad elemento = null;
                    DataSet rowsAffected;

                    #region PARAMETROS

                    SqlParameter[] paramTransaccion = new SqlParameter[]
                    {
                        new SqlParameter("@piId_Tipo_Mitigador_Riesgo", tipoMitigadorRiesgo.IdTipoMitigadorRiesgo),
                        new SqlParameter("@piCod_Tipo_Mitigador_Riesgo", tipoMitigadorRiesgo.CodTipoMitigadorRiesgo),
                        new SqlParameter("@psDes_Tipo_Mitigador_Riesgo", tipoMitigadorRiesgo.DesTipoMitigadorRiesgo),
                        new SqlParameter("@psInd_Metodo_Insercion", tipoMitigadorRiesgo.IndMetodoInsercion),
                        new SqlParameter("@psCod_Usuario", tipoMitigadorRiesgo.CodUsuarioIngreso)
                    };

                    #endregion

                    #region KeyValuePair LIST

                    List<KeyValuePair<string, string>> itemConsulta = new List<KeyValuePair<string, string>>();
                    itemConsulta.Add(helper.CrearKeyValuePairItem("@piId_Tipo_Mitigador_Riesgo", tipoMitigadorRiesgo.IdTipoMitigadorRiesgo.ToString()));

                    #endregion

                    try
                    {

                        #region MODIFICAR

                        rowsAffected = transaccionDA.Instancia.TransaccionModificar(conexion, conexionBitacora, "Tipos_Mitigadores_Riesgos_Actualiza", paramTransaccion, EnumTipoBitacora.ACTUALIZAR, itemConsulta, "Tipos_Mitigadores_Riesgos_Consulta_Detalle", _bitacora);
                        if (!rowsAffected.Equals(null))
                        {
                            elemento = new RespuestaEntidad();
                            elemento.ValorEstado = int.Parse(rowsAffected.Tables[0].Rows[0][0].ToString());
                            elemento.ValorError = int.Parse(rowsAffected.Tables[0].Rows[0][1].ToString());
                        }

                        return elemento;

                        #endregion

                    }
                    catch (Exception ex)
                    {
                        throw ex;
                    }
                }
        
                public RespuestaEntidad TiposMitigadoresRiesgosEliminar(String conexion, String conexionBitacora, TiposMitigadoresRiesgosEntidad tipoMitigadorRiesgo, BitacorasEntidad _bitacora)
                {
                    RespuestaEntidad elemento = null;
                    DataSet rowsAffected;

                    #region PARAMETROS

                    SqlParameter[] paramTransaccion = new SqlParameter[]
                    {
                        new SqlParameter("@piId_Tipo_Mitigador_Riesgo", tipoMitigadorRiesgo.IdTipoMitigadorRiesgo)
                    };

                    #endregion

                    #region KeyValuePair LIST

                    List<KeyValuePair<string, string>> itemConsulta = new List<KeyValuePair<string, string>>();
                    itemConsulta.Add(helper.CrearKeyValuePairItem("@piId_Tipo_Mitigador_Riesgo", tipoMitigadorRiesgo.IdTipoMitigadorRiesgo.ToString()));

                    #endregion

                    try
                    {

                        #region ELIMINAR

                        rowsAffected = transaccionDA.Instancia.TransaccionEliminar(conexion, conexionBitacora, "Tipos_Mitigadores_Riesgos_Elimina", paramTransaccion, EnumTipoBitacora.ELIMINAR, itemConsulta, "Tipos_Mitigadores_Riesgos_Consulta_Detalle", _bitacora);
                        if (!rowsAffected.Equals(null))
                        {
                            elemento = new RespuestaEntidad();
                            elemento.ValorEstado = int.Parse(rowsAffected.Tables[0].Rows[0][0].ToString());
                            elemento.ValorError = int.Parse(rowsAffected.Tables[0].Rows[0][1].ToString());
                        }

                        return elemento;

                        #endregion

                    }
                    catch (Exception ex)
                    {
                        throw ex;
                    }
                }

                public List<TiposMitigadoresRiesgosEntidad> TiposMitigadoresRiesgosConsultar(String conexion, ParametrosConsultaEntidad entidad)
                {
                    List<TiposMitigadoresRiesgosEntidad> retorno = new List<TiposMitigadoresRiesgosEntidad>();
                    TiposMitigadoresRiesgosEntidad elemento;
                    DataSet rowsAffected;

                    #region PARAMETROS

                    SqlParameter[] paramTransaccion = new SqlParameter[]
                    {
                       new SqlParameter("@piIndice_Inicio_Fila", entidad.IndiceInicioFila),
                       new SqlParameter("@piMaximo_Filas", entidad.MaximoFilas),
                       new SqlParameter("@psValores_Filtro", entidad.ValorFiltro),
                       new SqlParameter("@psColumnas_Filtros", entidad.ColumnaFiltro),
                       new SqlParameter("@psColumna_Ordenar", entidad.ColumnaOrdenar)
                    };

                    #endregion

                    try
                    {

                        #region CONSULTAR

                            rowsAffected = transaccionDA.Instancia.TransaccionConsulta(conexion, "Tipos_Mitigadores_Riesgos_Consulta", paramTransaccion);
                            if (!rowsAffected.Equals(null))
                            {
                                foreach (DataRow dr in rowsAffected.Tables[0].Rows)
                                {
                                    elemento = new TiposMitigadoresRiesgosEntidad();
                                    elemento.IdTipoMitigadorRiesgo = int.Parse(dr[0].ToString());
                                    elemento.CodTipoMitigadorRiesgo = int.Parse(dr[1].ToString());
                                    elemento.DesTipoMitigadorRiesgo = dr[2].ToString();       

                                    retorno.Add(elemento);
                                }
                            }

                            return retorno;

                        #endregion

                    }
                    catch (Exception ex)
                    {
                        throw ex;
                    }
                }
        
                public TiposMitigadoresRiesgosEntidad TiposMitigadoresRiesgosConsultarDetalle(String conexion, String conexionBitacora, TiposMitigadoresRiesgosEntidad tipoMitigadorRiesgo, BitacorasEntidad _bitacora)
                {
                    TiposMitigadoresRiesgosEntidad retorno = new TiposMitigadoresRiesgosEntidad();
                    DataSet rowsAffected;

                    #region PARAMETROS

                    SqlParameter[] paramTransaccion = new SqlParameter[]
                    {
                        new SqlParameter("@piId_Tipo_Mitigador_Riesgo", tipoMitigadorRiesgo.IdTipoMitigadorRiesgo)
                    };

                    #endregion

                    #region KeyValuePair LIST

                    List<KeyValuePair<string, string>> itemConsulta = new List<KeyValuePair<string, string>>();
                    itemConsulta.Add(helper.CrearKeyValuePairItem("@piId_Tipo_Mitigador_Riesgo", tipoMitigadorRiesgo.IdTipoMitigadorRiesgo.ToString()));

                    #endregion

                    try
                    {

                        #region CONSULTAR DETALLE

                        rowsAffected = transaccionDA.Instancia.TransaccionConsultaDetalle(conexion, conexionBitacora, "Tipos_Mitigadores_Riesgos_Consulta_Detalle", paramTransaccion, EnumTipoBitacora.CONSULTAR, itemConsulta, "Tipos_Mitigadores_Riesgos_Consulta_Detalle", _bitacora);
                        if (!rowsAffected.Equals(null))
                        {
                            retorno.IdTipoMitigadorRiesgo = int.Parse(rowsAffected.Tables[0].Rows[0][0].ToString());
                            retorno.CodTipoMitigadorRiesgo = int.Parse(rowsAffected.Tables[0].Rows[0][1].ToString());
                            retorno.DesTipoMitigadorRiesgo = rowsAffected.Tables[0].Rows[0][2].ToString();
                            
                            retorno.IndMetodoInsercion = rowsAffected.Tables[0].Rows[0][3].ToString();
                            if (rowsAffected.Tables[0].Rows[0][4].ToString().Length > 0)
                                retorno.FechaIngreso = DateTime.Parse(rowsAffected.Tables[0].Rows[0][4].ToString());
                            else
                                retorno.FechaIngreso = null;
                            retorno.CodUsuarioIngreso = rowsAffected.Tables[0].Rows[0][5].ToString();
                            if (rowsAffected.Tables[0].Rows[0][6].ToString().Length > 0)
                                retorno.FechaUltimaModificacion = DateTime.Parse(rowsAffected.Tables[0].Rows[0][6].ToString());
                            else
                                retorno.FechaUltimaModificacion = null;
                            retorno.CodUsuarioUltimaModificacion = rowsAffected.Tables[0].Rows[0][7].ToString();
                            retorno.DesUsuarioIngreso = rowsAffected.Tables[0].Rows[0][8].ToString();
                            retorno.DesUsuarioUltimaModificacion = rowsAffected.Tables[0].Rows[0][9].ToString();
                        }

                        return retorno;

                        #endregion

                    }
                    catch (Exception ex)
                    {
                        throw ex;
                    }
                }
        
                public int TiposMitigadoresRiesgosTotalFilas(String conexion, ParametrosTotalFilasEntidad entidad)
                {

                    int value;

                    #region PARAMETROS

                    SqlParameter[] paramTransaccion = new SqlParameter[]
                    {
                        new SqlParameter("@psValor_Filtro", entidad.ValorFiltro),
                        new SqlParameter("@psColumna_Filtro", entidad.ColumnaFiltro)
                    };

                    #endregion

                    try
                    {

                        #region TOTAL FILAS

                            value = transaccionDA.Instancia.TransaccionRows(conexion, "Tipos_Mitigadores_Riesgos_Total_Filas", paramTransaccion);

                            return value;

                        #endregion

                    }
                    catch (Exception ex)
                    {
                        throw ex;
                    }
                }
                        
                //REQUERIMIENTO: 1-24493227
                public List<ListaEntidad> TiposMitigadoresRiesgosLista(String conexion, String filtro)
                {
                    List<ListaEntidad> retorno = new List<ListaEntidad>();
                    ListaEntidad elemento;
                    DataSet rowsAffected;

                    #region PARAMETROS

                    SqlParameter[] paramTransaccion = new SqlParameter[]
                    {
                        new SqlParameter("@psFiltro", filtro)
                    };

                    #endregion

                    try
                    {

                        #region LISTA

                        rowsAffected = transaccionDA.TransaccionConsulta(conexion, "Tipos_Mitigadores_Riesgos_Lista", paramTransaccion);
                        if (!rowsAffected.Equals(null))
                        {
                            foreach (DataRow dr in rowsAffected.Tables[0].Rows)
                            {
                                elemento = new ListaEntidad();
                                elemento.Valor = dr[0].ToString();
                                elemento.Texto = dr[1].ToString();

                                retorno.Add(elemento);
                            }
                        }
                        return retorno;

                        #endregion

                    }
                    catch (Exception)
                    {
                        throw;
                    }
                }        

            #endregion 
                   
            #region TIPOS MONEDAS

                public RespuestaEntidad TiposMonedasInsertar(String conexion, String conexionBitacora, TiposMonedasEntidad tipoMoneda, BitacorasEntidad _bitacora)
                {
                    RespuestaEntidad elemento = null;
                    DataSet rowsAffected;

                    #region PARAMETROS

                    SqlParameter[] paramTransaccion = new SqlParameter[]
                    {
                        new SqlParameter("@piId_Indicador_Moneda_Extranjera", tipoMoneda.IdIndicadorMonedaExtranjera),
                        new SqlParameter("@piCod_Tipo_Moneda", tipoMoneda.CodTipoMoneda),
                        new SqlParameter("@psDes_Capital", tipoMoneda.Capital),
                        new SqlParameter("@psDes_Pais", tipoMoneda.Pais),
                        new SqlParameter("@psDes_Tipo_Moneda", tipoMoneda.DesTipoMoneda),
                        new SqlParameter("@psFraccion_Monetaria", tipoMoneda.FraccionMonetaria),
                        new SqlParameter("@psInd_Metodo_Insercion", tipoMoneda.IndMetodoInsercion),
                        new SqlParameter("@psCod_Usuario", tipoMoneda.CodUsuarioIngreso)
                    };

                    #endregion

                    try
                    {

                        #region INSERTAR

                        rowsAffected = transaccionDA.TransaccionInsertar(conexion, conexionBitacora, "Tipos_Monedas_Inserta", paramTransaccion, EnumTipoBitacora.INSERTAR, _bitacora);
                        if (!rowsAffected.Equals(null))
                        {
                            elemento = new RespuestaEntidad();
                            elemento.ValorEstado = int.Parse(rowsAffected.Tables[0].Rows[0][0].ToString());
                            elemento.ValorError = int.Parse(rowsAffected.Tables[0].Rows[0][1].ToString());
                        }

                        return elemento;

                        #endregion

                    }
                    catch (Exception)
                    {
                        throw;
                    }
                }
        
                public RespuestaEntidad TiposMonedasModificar(String conexion, String conexionBitacora, TiposMonedasEntidad tipoMoneda, BitacorasEntidad _bitacora)
                {
                    RespuestaEntidad elemento = null;
                    DataSet rowsAffected;

                    #region PARAMETROS

                    SqlParameter[] paramTransaccion = new SqlParameter[]
                    {
                        new SqlParameter("@piId_Tipo_Moneda", tipoMoneda.IdTipoMoneda),
                        new SqlParameter("@piId_Indicador_Moneda_Extranjera", tipoMoneda.IdIndicadorMonedaExtranjera),
                        new SqlParameter("@piCod_Tipo_Moneda", tipoMoneda.CodTipoMoneda),
                        new SqlParameter("@psDes_Capital", tipoMoneda.Capital),
                        new SqlParameter("@psDes_Pais", tipoMoneda.Pais),
                        new SqlParameter("@psDes_Tipo_Moneda", tipoMoneda.DesTipoMoneda),
                        new SqlParameter("@psFraccion_Monetaria", tipoMoneda.FraccionMonetaria),
                        new SqlParameter("@psInd_Metodo_Insercion", tipoMoneda.IndMetodoInsercion),
                        new SqlParameter("@psCod_Usuario", tipoMoneda.CodUsuarioIngreso)
                    };

                    #endregion

                    #region KeyValuePair LIST

                    List<KeyValuePair<string, string>> itemConsulta = new List<KeyValuePair<string, string>>();
                    itemConsulta.Add(helper.CrearKeyValuePairItem("@piId_Tipo_Moneda", tipoMoneda.IdTipoMoneda.ToString()));

                    #endregion

                    try
                    {

                        #region MODIFICAR

                        rowsAffected = transaccionDA.TransaccionModificar(conexion, conexionBitacora, "Tipos_Monedas_Actualiza", paramTransaccion, EnumTipoBitacora.ACTUALIZAR, itemConsulta, "Tipos_Monedas_Consulta_Detalle", _bitacora);
                        if (!rowsAffected.Equals(null))
                        {
                            elemento = new RespuestaEntidad();
                            elemento.ValorEstado = int.Parse(rowsAffected.Tables[0].Rows[0][0].ToString());
                            elemento.ValorError = int.Parse(rowsAffected.Tables[0].Rows[0][1].ToString());
                        }

                        return elemento;

                        #endregion

                    }
                    catch (Exception)
                    {
                        throw;
                    }
                }
        
                public RespuestaEntidad TiposMonedasEliminar(String conexion, String conexionBitacora, TiposMonedasEntidad tipoMoneda, BitacorasEntidad _bitacora)
                {
                    RespuestaEntidad elemento = null;
                    DataSet rowsAffected;

                    #region PARAMETROS

                    SqlParameter[] paramTransaccion = new SqlParameter[]
                    {
                        new SqlParameter("@piId_Tipo_Moneda", tipoMoneda.IdTipoMoneda)
                    };

                    #endregion

                    #region KeyValuePair LIST

                    List<KeyValuePair<string, string>> itemConsulta = new List<KeyValuePair<string, string>>();
                    itemConsulta.Add(helper.CrearKeyValuePairItem("@piId_Tipo_Moneda", tipoMoneda.IdTipoMoneda.ToString()));

                    #endregion

                    try
                    {

                        #region ELIMINAR

                        rowsAffected = transaccionDA.TransaccionEliminar(conexion, conexionBitacora, "Tipos_Monedas_Elimina", paramTransaccion, EnumTipoBitacora.ELIMINAR, itemConsulta, "Tipos_Monedas_Consulta_Detalle", _bitacora);
                        if (!rowsAffected.Equals(null))
                        {
                            elemento = new RespuestaEntidad();
                            elemento.ValorEstado = int.Parse(rowsAffected.Tables[0].Rows[0][0].ToString());
                            elemento.ValorError = int.Parse(rowsAffected.Tables[0].Rows[0][1].ToString());
                        }

                        return elemento;

                        #endregion

                    }
                    catch (Exception)
                    {
                        throw;
                    }
                }

                public List<TiposMonedasEntidad> TiposMonedasConsultar(String conexion, ParametrosConsultaEntidad entidad)
                {
                    List<TiposMonedasEntidad> retorno = new List<TiposMonedasEntidad>();
                    TiposMonedasEntidad elemento;
                    DataSet rowsAffected;

                    #region PARAMETROS

                    SqlParameter[] paramTransaccion = new SqlParameter[]
                    {
                       new SqlParameter("@piIndice_Inicio_Fila", entidad.IndiceInicioFila),
                       new SqlParameter("@piMaximo_Filas", entidad.MaximoFilas),
                       new SqlParameter("@psValores_Filtro", entidad.ValorFiltro),
                       new SqlParameter("@psColumnas_Filtros", entidad.ColumnaFiltro),
                       new SqlParameter("@psColumna_Ordenar", entidad.ColumnaOrdenar)
                    };

                    #endregion

                    try
                    {

                        #region CONSULTAR

                            rowsAffected = transaccionDA.TransaccionConsulta(conexion, "Tipos_Monedas_Consulta", paramTransaccion);
                            if (!rowsAffected.Equals(null))
                            {
                                foreach (DataRow dr in rowsAffected.Tables[0].Rows)
                                {
                                    elemento = new TiposMonedasEntidad();
                                    elemento.IdTipoMoneda = int.Parse(dr[0].ToString());
                                    elemento.IdIndicadorMonedaExtranjera = int.Parse(dr[1].ToString());
                                    elemento.CodTipoMoneda = dr[2].ToString();
                                    elemento.CodIndicadorMonedaExtranjera = dr[3].ToString();
                                    elemento.Capital = dr[4].ToString();
                                    elemento.Pais = dr[5].ToString();
                                    elemento.DesTipoMoneda = dr[6].ToString();
                                    elemento.DesIndicadorMonedaExtranjera = dr[7].ToString();
                                    elemento.FraccionMonetaria = dr[8].ToString();

                                    retorno.Add(elemento);
                                }
                            }

                            return retorno;

                        #endregion

                    }
                    catch (Exception)
                    {
                        throw;
                    }
                }
        
                public TiposMonedasEntidad TiposMonedasConsultarDetalle(String conexion, String conexionBitacora, TiposMonedasEntidad tipoMoneda, BitacorasEntidad _bitacora)
                {
                    TiposMonedasEntidad retorno = new TiposMonedasEntidad();
                    DataSet rowsAffected;

                    #region PARAMETROS

                    SqlParameter[] paramTransaccion = new SqlParameter[]
                    {
                        new SqlParameter("@piId_Tipo_Moneda", tipoMoneda.IdTipoMoneda)
                    };

                    #endregion

                    #region KeyValuePair LIST

                    List<KeyValuePair<string, string>> itemConsulta = new List<KeyValuePair<string, string>>();
                    itemConsulta.Add(helper.CrearKeyValuePairItem("@piId_Tipo_Moneda", tipoMoneda.IdTipoMoneda.ToString()));

                    #endregion

                    try
                    {

                        #region CONSULTAR DETALLE

                        rowsAffected = transaccionDA.TransaccionConsultaDetalle(conexion, conexionBitacora, "Tipos_Monedas_Consulta_Detalle", paramTransaccion, EnumTipoBitacora.CONSULTAR, itemConsulta, "Tipos_Monedas_Consulta_Detalle", _bitacora);
                        if (!rowsAffected.Equals(null))
                        {
                            retorno.IdTipoMoneda = int.Parse(rowsAffected.Tables[0].Rows[0][0].ToString());
                            retorno.IdIndicadorMonedaExtranjera = int.Parse(rowsAffected.Tables[0].Rows[0][1].ToString());
                            retorno.CodTipoMoneda = rowsAffected.Tables[0].Rows[0][2].ToString();
                            retorno.Capital = rowsAffected.Tables[0].Rows[0][3].ToString();
                            retorno.Pais = rowsAffected.Tables[0].Rows[0][4].ToString();
                            retorno.DesTipoMoneda = rowsAffected.Tables[0].Rows[0][5].ToString();
                            retorno.FraccionMonetaria = rowsAffected.Tables[0].Rows[0][6].ToString();
                            retorno.CodIndicadorMonedaExtranjera = rowsAffected.Tables[0].Rows[0][7].ToString();
                            retorno.DesIndicadorMonedaExtranjera = rowsAffected.Tables[0].Rows[0][8].ToString();

                            retorno.IndMetodoInsercion = rowsAffected.Tables[0].Rows[0][9].ToString();
                            if (rowsAffected.Tables[0].Rows[0][10].ToString().Length > 0)
                                retorno.FechaIngreso = DateTime.Parse(rowsAffected.Tables[0].Rows[0][10].ToString());
                            else
                                retorno.FechaIngreso = null;
                            retorno.CodUsuarioIngreso = rowsAffected.Tables[0].Rows[0][11].ToString();
                            if (rowsAffected.Tables[0].Rows[0][12].ToString().Length > 0)
                                retorno.FechaUltimaModificacion = DateTime.Parse(rowsAffected.Tables[0].Rows[0][12].ToString());
                            else
                                retorno.FechaUltimaModificacion = null;
                            retorno.CodUsuarioUltimaModificacion = rowsAffected.Tables[0].Rows[0][13].ToString();
                            retorno.DesUsuarioIngreso = rowsAffected.Tables[0].Rows[0][14].ToString();
                            retorno.DesUsuarioUltimaModificacion = rowsAffected.Tables[0].Rows[0][15].ToString();
                        }

                        return retorno;

                        #endregion

                    }
                    catch (Exception)
                    {
                        throw;
                    }
                }
        
                public int TiposMonedasTotalFilas(String conexion, ParametrosTotalFilasEntidad entidad)
                {

                    int value;

                    #region PARAMETROS

                    SqlParameter[] paramTransaccion = new SqlParameter[]
                    {
                        new SqlParameter("@psValor_Filtro", entidad.ValorFiltro),
                        new SqlParameter("@psColumna_Filtro", entidad.ColumnaFiltro)
                    };

                    #endregion

                    try
                    {

                        #region TOTAL FILAS

                            value = transaccionDA.TransaccionRows(conexion, "Tipos_Monedas_Total_Filas", paramTransaccion);

                            return value;

                        #endregion

                    }
                    catch (Exception)
                    {
                        throw;
                    }
                }

                public List<ListaEntidad> TiposMonedasLista(String conexion, String filtro)
                {
                    List<ListaEntidad> retorno = new List<ListaEntidad>();
                    ListaEntidad elemento;
                    DataSet rowsAffected;

                    #region PARAMETROS

                    SqlParameter[] paramTransaccion = new SqlParameter[]
                    {
                        new SqlParameter("@psFiltro", filtro)
                    };

                    #endregion

                    try
                    {

                        #region LISTA

                        rowsAffected = transaccionDA.TransaccionConsulta(conexion, "Tipos_Monedas_Lista", paramTransaccion);
                        if (!rowsAffected.Equals(null))
                        {
                            foreach (DataRow dr in rowsAffected.Tables[0].Rows)
                            {
                                elemento = new ListaEntidad();
                                elemento.Valor = dr[0].ToString();
                                elemento.Texto = dr[1].ToString();

                                retorno.Add(elemento);
                            }
                        }
                        return retorno;

                        #endregion

                    }
                    catch (Exception)
                    {
                        throw;
                    }
                }        

            #endregion 

            #region TIPOS PERSONAS
        
                public RespuestaEntidad TiposPersonasInsertar(String conexion, String conexionBitacora, TiposPersonasEntidad tipoPersona, BitacorasEntidad _bitacora)
                {
                    RespuestaEntidad elemento = null;
                    DataSet rowsAffected;

                    #region PARAMETROS

                    SqlParameter[] paramTransaccion = new SqlParameter[]
                    {
                        new SqlParameter("@piCod_Tipo_Persona", tipoPersona.CodTipoPersona),
                        new SqlParameter("@psDes_Tipo_Persona", tipoPersona.DesTipoPersona),
                        new SqlParameter("@psInd_Metodo_Insercion", tipoPersona.IndMetodoInsercion),
                        new SqlParameter("@psCod_Usuario", tipoPersona.CodUsuarioIngreso)
                    };

                    #endregion

                    try
                    {

                        #region INSERTAR

                        rowsAffected = transaccionDA.TransaccionInsertar(conexion, conexionBitacora, "Tipos_Personas_Inserta", paramTransaccion, EnumTipoBitacora.INSERTAR, _bitacora);
                        if (!rowsAffected.Equals(null))
                        {
                            elemento = new RespuestaEntidad();
                            elemento.ValorEstado = int.Parse(rowsAffected.Tables[0].Rows[0][0].ToString());
                            elemento.ValorError = int.Parse(rowsAffected.Tables[0].Rows[0][1].ToString());
                        }

                        return elemento;

                        #endregion

                    }
                    catch (Exception)
                    {
                        throw;
                    }
                }
        
                public RespuestaEntidad TiposPersonasModificar(String conexion, String conexionBitacora, TiposPersonasEntidad tipoPersona, BitacorasEntidad _bitacora)
                {
                    RespuestaEntidad elemento = null;
                    DataSet rowsAffected;

                    #region PARAMETROS

                    SqlParameter[] paramTransaccion = new SqlParameter[]
                    {
                        new SqlParameter("@piId_Tipo_Persona", tipoPersona.IdTipoPersona),
                        new SqlParameter("@piCod_Tipo_Persona", tipoPersona.CodTipoPersona),
                        new SqlParameter("@psDes_Tipo_Persona", tipoPersona.DesTipoPersona),
                        new SqlParameter("@psInd_Metodo_Insercion", tipoPersona.IndMetodoInsercion),
                        new SqlParameter("@psCod_Usuario", tipoPersona.CodUsuarioIngreso)
                    };

                    #endregion

                    #region KeyValuePair LIST

                    List<KeyValuePair<string, string>> itemConsulta = new List<KeyValuePair<string, string>>();
                    itemConsulta.Add(helper.CrearKeyValuePairItem("@piId_Tipo_Persona", tipoPersona.IdTipoPersona.ToString()));

                    #endregion

                    try
                    {

                        #region MODIFICAR

                        rowsAffected = transaccionDA.TransaccionModificar(conexion, conexionBitacora, "Tipos_Personas_Actualiza", paramTransaccion, EnumTipoBitacora.ACTUALIZAR, itemConsulta, "Tipos_Personas_Consulta_Detalle", _bitacora);
                        if (!rowsAffected.Equals(null))
                        {
                            elemento = new RespuestaEntidad();
                            elemento.ValorEstado = int.Parse(rowsAffected.Tables[0].Rows[0][0].ToString());
                            elemento.ValorError = int.Parse(rowsAffected.Tables[0].Rows[0][1].ToString());
                        }

                        return elemento;


                        #endregion

                    }
                    catch (Exception)
                    {
                        throw;
                    }
                }
        
                public RespuestaEntidad TiposPersonasEliminar(String conexion, String conexionBitacora, TiposPersonasEntidad tipoPersona, BitacorasEntidad _bitacora)
                {
                    RespuestaEntidad elemento = null;
                    DataSet rowsAffected;

                    #region PARAMETROS

                    SqlParameter[] paramTransaccion = new SqlParameter[]
                    {
                        new SqlParameter("@piId_Tipo_Persona", tipoPersona.IdTipoPersona)
                    };

                    #endregion

                    #region KeyValuePair LIST

                    List<KeyValuePair<string, string>> itemConsulta = new List<KeyValuePair<string, string>>();
                    itemConsulta.Add(helper.CrearKeyValuePairItem("@piId_Tipo_Persona", tipoPersona.IdTipoPersona.ToString()));

                    #endregion

                    try
                    {

                        #region ELIMINAR

                        rowsAffected = transaccionDA.TransaccionEliminar(conexion, conexionBitacora, "Tipos_Personas_Elimina", paramTransaccion, EnumTipoBitacora.ELIMINAR, itemConsulta, "Tipos_Personas_Consulta_Detalle", _bitacora);
                        if (!rowsAffected.Equals(null))
                        {
                            elemento = new RespuestaEntidad();
                            elemento.ValorEstado = int.Parse(rowsAffected.Tables[0].Rows[0][0].ToString());
                            elemento.ValorError = int.Parse(rowsAffected.Tables[0].Rows[0][1].ToString());
                        }

                        return elemento;

                        #endregion

                    }
                    catch (Exception)
                    {
                        throw;
                    }
                }

                public List<TiposPersonasEntidad> TiposPersonasConsultar(String conexion, ParametrosConsultaEntidad entidad)
                {
                    List<TiposPersonasEntidad> retorno = new List<TiposPersonasEntidad>();
                    TiposPersonasEntidad elemento;
                    DataSet rowsAffected;

                    #region PARAMETROS

                    SqlParameter[] paramTransaccion = new SqlParameter[]
                    {
                       new SqlParameter("@piIndice_Inicio_Fila", entidad.IndiceInicioFila),
                       new SqlParameter("@piMaximo_Filas", entidad.MaximoFilas),
                       new SqlParameter("@psValores_Filtro", entidad.ValorFiltro),
                       new SqlParameter("@psColumnas_Filtros", entidad.ColumnaFiltro),
                       new SqlParameter("@psColumna_Ordenar", entidad.ColumnaOrdenar)
                    };

                    #endregion

                    try
                    {

                        #region CONSULTAR

                            rowsAffected = transaccionDA.TransaccionConsulta(conexion, "Tipos_Personas_Consulta", paramTransaccion);
                            if (!rowsAffected.Equals(null))
                            {
                                foreach (DataRow dr in rowsAffected.Tables[0].Rows)
                                {
                                    elemento = new TiposPersonasEntidad();
                                    elemento.IdTipoPersona = int.Parse(dr[0].ToString());
                                    elemento.CodTipoPersona = int.Parse(dr[1].ToString());
                                    elemento.DesTipoPersona = dr[2].ToString();

                                    retorno.Add(elemento);
                                }
                            }

                            return retorno;

                        #endregion

                    }
                    catch (Exception)
                    {
                        throw;
                    }
                }
        
                public TiposPersonasEntidad TiposPersonasConsultarDetalle(String conexion, String conexionBitacora, TiposPersonasEntidad tipoPersona, BitacorasEntidad _bitacora)
                {
                    TiposPersonasEntidad retorno = new TiposPersonasEntidad();
                    DataSet rowsAffected;

                    #region PARAMETROS

                    SqlParameter[] paramTransaccion = new SqlParameter[]
                    {
                        new SqlParameter("@piId_Tipo_Persona", tipoPersona.IdTipoPersona)
                    };

                    #endregion

                    #region KeyValuePair LIST

                    List<KeyValuePair<string, string>> itemConsulta = new List<KeyValuePair<string, string>>();
                    itemConsulta.Add(helper.CrearKeyValuePairItem("@piId_Tipo_Persona", tipoPersona.IdTipoPersona.ToString()));

                    #endregion

                    try
                    {

                        #region CONSULTAR DETALLE

                        rowsAffected = transaccionDA.TransaccionConsultaDetalle(conexion, conexionBitacora, "Tipos_Personas_Consulta_Detalle", paramTransaccion, EnumTipoBitacora.CONSULTAR, itemConsulta, "Tipos_Personas_Consulta_Detalle", _bitacora);
                        if (!rowsAffected.Equals(null))
                        {
                            retorno.IdTipoPersona = int.Parse(rowsAffected.Tables[0].Rows[0][0].ToString());
                            retorno.CodTipoPersona = int.Parse(rowsAffected.Tables[0].Rows[0][1].ToString());
                            retorno.DesTipoPersona = rowsAffected.Tables[0].Rows[0][2].ToString();
                            retorno.IndMetodoInsercion = rowsAffected.Tables[0].Rows[0][3].ToString();
                            if (rowsAffected.Tables[0].Rows[0][4].ToString().Length > 0)
                                retorno.FechaIngreso = DateTime.Parse(rowsAffected.Tables[0].Rows[0][4].ToString());
                            else
                                retorno.FechaIngreso = null;
                            retorno.CodUsuarioIngreso = rowsAffected.Tables[0].Rows[0][5].ToString();
                            if (rowsAffected.Tables[0].Rows[0][6].ToString().Length > 0)
                                retorno.FechaUltimaModificacion = DateTime.Parse(rowsAffected.Tables[0].Rows[0][6].ToString());
                            else
                                retorno.FechaUltimaModificacion = null;
                            retorno.CodUsuarioUltimaModificacion = rowsAffected.Tables[0].Rows[0][7].ToString();
                            retorno.DesUsuarioIngreso = rowsAffected.Tables[0].Rows[0][8].ToString();
                            retorno.DesUsuarioUltimaModificacion = rowsAffected.Tables[0].Rows[0][9].ToString();
                        }

                        return retorno;

                        #endregion

                    }
                    catch (Exception)
                    {
                        throw;
                    }
                }
        
                public int TiposPersonasTotalFilas(String conexion, ParametrosTotalFilasEntidad entidad)
                {

                    int value;

                    #region PARAMETROS

                    SqlParameter[] paramTransaccion = new SqlParameter[]
                    {
                        new SqlParameter("@psValor_Filtro", entidad.ValorFiltro),
                        new SqlParameter("@psColumna_Filtro", entidad.ColumnaFiltro)
                    };

                    #endregion

                    try
                    {

                        #region TOTAL FILAS

                            value = transaccionDA.TransaccionRows(conexion, "Tipos_Personas_Total_Filas", paramTransaccion);

                            return value;

                        #endregion

                    }
                    catch (Exception)
                    {
                        throw;
                    }
                }
        
                public List<ListaEntidad> TiposPersonasLista(String conexion, String filtro)
                {
                    List<ListaEntidad> retorno = new List<ListaEntidad>();
                    ListaEntidad elemento;
                    DataSet rowsAffected;

                    #region PARAMETROS

                    SqlParameter[] paramTransaccion = new SqlParameter[]
                    {
                        new SqlParameter("@psFiltro", filtro)
                    };

                    #endregion

                    try
                    {

                        #region LISTA

                        rowsAffected = transaccionDA.TransaccionConsulta(conexion, "Tipos_Personas_Lista", paramTransaccion);
                        if (!rowsAffected.Equals(null))
                        {
                            foreach (DataRow dr in rowsAffected.Tables[0].Rows)
                            {
                                elemento = new ListaEntidad();
                                elemento.Valor = dr[0].ToString();
                                elemento.Texto = dr[1].ToString();

                                retorno.Add(elemento);
                            }
                        }

                        return retorno;

                        #endregion


                    }
                    catch (Exception)
                    {
                        throw;
                    }
                }
        
                public List<ListaEntidad> TiposPersonasLista123(String conexion, String filtro)
                {
                    List<ListaEntidad> retorno = new List<ListaEntidad>();
                    ListaEntidad elemento;
                    DataSet rowsAffected;

                    #region PARAMETROS

                    SqlParameter[] paramTransaccion = new SqlParameter[]
                    {
                        new SqlParameter("@psFiltro", filtro)
                    };

                    #endregion

                    try
                    {

                        #region LISTA

                        rowsAffected = transaccionDA.TransaccionConsulta(conexion, "Tipos_Personas_Lista_1_2_3", paramTransaccion);
                        if (!rowsAffected.Equals(null))
                        {
                            foreach (DataRow dr in rowsAffected.Tables[0].Rows)
                            {
                                elemento = new ListaEntidad();
                                elemento.Valor = dr[0].ToString();
                                elemento.Texto = dr[1].ToString();

                                retorno.Add(elemento);
                            }
                        }

                        return retorno;

                        #endregion


                    }
                    catch (Exception)
                    {
                        throw;
                    }
                }
        
            #endregion 

            #region TIPOS POLIZAS
        
                public RespuestaEntidad TiposPolizasInsertar(String conexion, String conexionBitacora, TiposPolizasEntidad tipoPoliza, BitacorasEntidad _bitacora)
                {
                    RespuestaEntidad elemento = null;
                    DataSet rowsAffected;

                    #region PARAMETROS

                    SqlParameter[] paramTransaccion = new SqlParameter[]
                    {
                        new SqlParameter("@piCod_Tipo_Poliza", tipoPoliza.CodTipoPoliza),
                        new SqlParameter("@psDes_Tipo_Poliza", tipoPoliza.DesTipoPoliza),
                        new SqlParameter("@psInd_Metodo_Insercion", tipoPoliza.IndMetodoInsercion),
                        new SqlParameter("@psCod_Usuario", tipoPoliza.CodUsuarioIngreso)
                    };

                    #endregion

                    try
                    {

                        #region INSERTAR

                        rowsAffected = transaccionDA.TransaccionInsertar(conexion, conexionBitacora, "Tipos_Polizas_Inserta", paramTransaccion, EnumTipoBitacora.INSERTAR, _bitacora);
                        if (!rowsAffected.Equals(null))
                        {
                            elemento = new RespuestaEntidad();
                            elemento.ValorEstado = int.Parse(rowsAffected.Tables[0].Rows[0][0].ToString());
                            elemento.ValorError = int.Parse(rowsAffected.Tables[0].Rows[0][1].ToString());
                        }

                        return elemento;

                        #endregion

                    }
                    catch (Exception)
                    {
                        throw;
                    }
                }
        
                public RespuestaEntidad TiposPolizasModificar(String conexion, String conexionBitacora, TiposPolizasEntidad tipoPoliza, BitacorasEntidad _bitacora)
                {
                    RespuestaEntidad elemento = null;
                    DataSet rowsAffected;

                    #region PARAMETROS

                    SqlParameter[] paramTransaccion = new SqlParameter[]
                    {
                        new SqlParameter("@piId_Tipo_Poliza", tipoPoliza.IdTipoPoliza),
                        new SqlParameter("@piCod_Tipo_Poliza", tipoPoliza.CodTipoPoliza),
                        new SqlParameter("@psDes_Tipo_Poliza", tipoPoliza.DesTipoPoliza),
                        new SqlParameter("@psInd_Metodo_Insercion", tipoPoliza.IndMetodoInsercion),
                        new SqlParameter("@psCod_Usuario", tipoPoliza.CodUsuarioIngreso)
                    };

                    #endregion

                    #region KeyValuePair LIST

                    List<KeyValuePair<string, string>> itemConsulta = new List<KeyValuePair<string, string>>();
                    itemConsulta.Add(helper.CrearKeyValuePairItem("@piId_Tipo_Poliza", tipoPoliza.IdTipoPoliza.ToString()));

                    #endregion

                    try
                    {

                        #region MODIFICAR

                        rowsAffected = transaccionDA.TransaccionModificar(conexion, conexionBitacora, "Tipos_Polizas_Actualiza", paramTransaccion, EnumTipoBitacora.ACTUALIZAR, itemConsulta, "Tipos_Polizas_Consulta_Detalle", _bitacora);
                        if (!rowsAffected.Equals(null))
                        {
                            elemento = new RespuestaEntidad();
                            elemento.ValorEstado = int.Parse(rowsAffected.Tables[0].Rows[0][0].ToString());
                            elemento.ValorError = int.Parse(rowsAffected.Tables[0].Rows[0][1].ToString());
                        }

                        return elemento;

                        #endregion

                    }
                    catch (Exception)
                    {
                        throw;
                    }
                }
        
                public RespuestaEntidad TiposPolizasEliminar(String conexion, String conexionBitacora, TiposPolizasEntidad tipoPoliza, BitacorasEntidad _bitacora)
                {
                    RespuestaEntidad elemento = null;
                    DataSet rowsAffected;

                    #region PARAMETROS

                    SqlParameter[] paramTransaccion = new SqlParameter[]
                    {
                       new SqlParameter("@piId_Tipo_Poliza", tipoPoliza.IdTipoPoliza)
                    };

                    #endregion

                    #region KeyValuePair LIST

                    List<KeyValuePair<string, string>> itemConsulta = new List<KeyValuePair<string, string>>();
                    itemConsulta.Add(helper.CrearKeyValuePairItem("@piId_Tipo_Poliza", tipoPoliza.IdTipoPoliza.ToString()));

                    #endregion

                    try
                    {

                        #region ELIMINAR

                        rowsAffected = transaccionDA.TransaccionEliminar(conexion, conexionBitacora, "Tipos_Polizas_Elimina", paramTransaccion, EnumTipoBitacora.ELIMINAR, itemConsulta, "Tipos_Polizas_Consulta_Detalle", _bitacora);
                        if (!rowsAffected.Equals(null))
                        {
                            elemento = new RespuestaEntidad();
                            elemento.ValorEstado = int.Parse(rowsAffected.Tables[0].Rows[0][0].ToString());
                            elemento.ValorError = int.Parse(rowsAffected.Tables[0].Rows[0][1].ToString());
                        }

                        return elemento;

                        #endregion

                    }
                    catch (Exception)
                    {
                        throw;
                    }
                }

                public List<TiposPolizasEntidad> TiposPolizasConsultar(String conexion, ParametrosConsultaEntidad entidad)
                {
                    List<TiposPolizasEntidad> retorno = new List<TiposPolizasEntidad>();
                    TiposPolizasEntidad elemento;
                    DataSet rowsAffected;

                    #region PARAMETROS

                    SqlParameter[] paramTransaccion = new SqlParameter[]
                    {
                       new SqlParameter("@piIndice_Inicio_Fila", entidad.IndiceInicioFila),
                       new SqlParameter("@piMaximo_Filas", entidad.MaximoFilas),
                       new SqlParameter("@psValores_Filtro", entidad.ValorFiltro),
                       new SqlParameter("@psColumnas_Filtros", entidad.ColumnaFiltro),
                       new SqlParameter("@psColumna_Ordenar", entidad.ColumnaOrdenar)
                    };

                    #endregion

                    try
                    {

                        #region CONSULTAR

                            rowsAffected = transaccionDA.TransaccionConsulta(conexion, "Tipos_Polizas_Consulta", paramTransaccion);
                            if (!rowsAffected.Equals(null))
                            {
                                foreach (DataRow dr in rowsAffected.Tables[0].Rows)
                                {
                                    elemento = new TiposPolizasEntidad();
                                    elemento.IdTipoPoliza = int.Parse(dr[0].ToString());
                                    elemento.CodTipoPoliza = int.Parse(dr[1].ToString());
                                    elemento.DesTipoPoliza = dr[2].ToString();

                                    retorno.Add(elemento);
                                }
                            }

                            return retorno;

                        #endregion

                    }
                    catch (Exception)
                    {
                        throw;
                    }
                }
        
                public TiposPolizasEntidad TiposPolizasConsultarDetalle(String conexion, String conexionBitacora, TiposPolizasEntidad tipoPoliza, BitacorasEntidad _bitacora)
                {
                    TiposPolizasEntidad retorno = new TiposPolizasEntidad();
                    DataSet rowsAffected;

                    #region PARAMETROS

                    SqlParameter[] paramTransaccion = new SqlParameter[]
                    {
                        new SqlParameter("@piId_Tipo_Poliza", tipoPoliza.IdTipoPoliza)
                    };

                    #endregion

                    #region KeyValuePair LIST

                    List<KeyValuePair<string, string>> itemConsulta = new List<KeyValuePair<string, string>>();
                    itemConsulta.Add(helper.CrearKeyValuePairItem("@piId_Tipo_Poliza", tipoPoliza.IdTipoPoliza.ToString()));

                    #endregion

                    try
                    {

                        #region CONSULTAR DETALLE

                        rowsAffected = transaccionDA.TransaccionConsultaDetalle(conexion, conexionBitacora, "Tipos_Polizas_Consulta_Detalle", paramTransaccion, EnumTipoBitacora.CONSULTAR, itemConsulta, "Tipos_Polizas_Consulta_Detalle", _bitacora);
                        if (!rowsAffected.Equals(null))
                        {
                            retorno.IdTipoPoliza = int.Parse(rowsAffected.Tables[0].Rows[0][0].ToString());
                            retorno.CodTipoPoliza = int.Parse(rowsAffected.Tables[0].Rows[0][1].ToString());
                            retorno.DesTipoPoliza = rowsAffected.Tables[0].Rows[0][2].ToString();
                            retorno.IndMetodoInsercion = rowsAffected.Tables[0].Rows[0][3].ToString();
                            if (rowsAffected.Tables[0].Rows[0][4].ToString().Length > 0)
                                retorno.FechaIngreso = DateTime.Parse(rowsAffected.Tables[0].Rows[0][4].ToString());
                            else
                                retorno.FechaIngreso = null;
                            retorno.CodUsuarioIngreso = rowsAffected.Tables[0].Rows[0][5].ToString();
                            if (rowsAffected.Tables[0].Rows[0][6].ToString().Length > 0)
                                retorno.FechaUltimaModificacion = DateTime.Parse(rowsAffected.Tables[0].Rows[0][6].ToString());
                            else
                                retorno.FechaUltimaModificacion = null;
                            retorno.CodUsuarioUltimaModificacion = rowsAffected.Tables[0].Rows[0][7].ToString();
                            retorno.DesUsuarioIngreso = rowsAffected.Tables[0].Rows[0][8].ToString();
                            retorno.DesUsuarioUltimaModificacion = rowsAffected.Tables[0].Rows[0][9].ToString();
                        }

                        return retorno;

                        #endregion

                    }
                    catch (Exception)
                    {
                        throw;
                    }
                }
        
                public int TiposPolizasTotalFilas(String conexion, ParametrosTotalFilasEntidad entidad)
                {

                    int value;

                    #region PARAMETROS

                    SqlParameter[] paramTransaccion = new SqlParameter[]
                    {
                        new SqlParameter("@psValor_Filtro", entidad.ValorFiltro),
                        new SqlParameter("@psColumna_Filtro", entidad.ColumnaFiltro)
                    };

                    #endregion

                    try
                    {

                        #region TOTAL FILAS

                            value = transaccionDA.TransaccionRows(conexion, "Tipos_Polizas_Total_Filas", paramTransaccion);

                            return value;

                        #endregion

                    }
                    catch (Exception)
                    {
                        throw;
                    }
                }

            #endregion 
            
            //REQUERIMIENTO: 1-24105296
            #region TIPOS TASADORES
        
                public List<ListaEntidad> TiposTasadoresLista(String conexion, String filtro)
                {
                    List<ListaEntidad> retorno = new List<ListaEntidad>();
                    ListaEntidad elemento;
                    DataSet rowsAffected;

                    #region PARAMETROS

                    SqlParameter[] paramTransaccion = new SqlParameter[]
                    {
                        new SqlParameter("@psFiltro", filtro)
                    };

                    #endregion

                    try
                    {

                        #region LISTA

                        rowsAffected = transaccionDA.TransaccionConsulta(conexion, "Tipos_Tasadores_Lista", paramTransaccion);
                        if (!rowsAffected.Equals(null))
                        {
                            foreach (DataRow dr in rowsAffected.Tables[0].Rows)
                            {
                                elemento = new ListaEntidad();
                                elemento.Valor = dr[0].ToString();
                                elemento.Texto = dr[1].ToString();

                                retorno.Add(elemento);
                            }
                        }

                        return retorno;

                        #endregion


                    }
                    catch (Exception)
                    {
                        throw;
                    }
                }
        
            #endregion

            //REQUERIMIENTO: 1-24105296
            #region TIPOS SERVICIOS
        
                public RespuestaEntidad TiposServiciosInsertar(String conexion, String conexionBitacora, TiposServiciosEntidad tipoServicio, BitacorasEntidad _bitacora)
                {
                    RespuestaEntidad elemento = null;
                    DataSet rowsAffected;

                    #region PARAMETROS

                    SqlParameter[] paramTransaccion = new SqlParameter[]
                    {                    
                        new SqlParameter("@piCod_Tipo_Servicio", tipoServicio.CodTipoServicio),
                        new SqlParameter("@psDes_Tipo_Servicio", tipoServicio.DesTipoServicio),
                        new SqlParameter("@psTipo_Servicio_Tasador", tipoServicio.TipoServicioTasador),
                        new SqlParameter("@psInd_Metodo_Insercion", tipoServicio.IndMetodoInsercion),
                        new SqlParameter("@psCod_Usuario", tipoServicio.CodUsuarioIngreso)
                    };

                    #endregion

                    try
                    {

                        #region INSERTAR

                        rowsAffected = transaccionDA.TransaccionInsertar(conexion, conexionBitacora, "Tipos_Servicios_Inserta", paramTransaccion, EnumTipoBitacora.INSERTAR, _bitacora);
                        if (!rowsAffected.Equals(null))
                        {
                            elemento = new RespuestaEntidad();
                            elemento.ValorEstado = int.Parse(rowsAffected.Tables[0].Rows[0][0].ToString());
                            elemento.ValorError = int.Parse(rowsAffected.Tables[0].Rows[0][1].ToString());
                        }

                        return elemento;

                        #endregion

                    }
                    catch (Exception)
                    {
                        throw;
                    }
                }
        
                public RespuestaEntidad TiposServiciosModificar(String conexion, String conexionBitacora, TiposServiciosEntidad tipoServicio, BitacorasEntidad _bitacora)
                {
                    RespuestaEntidad elemento = null;
                    DataSet rowsAffected;

                    #region PARAMETROS

                    SqlParameter[] paramTransaccion = new SqlParameter[]
                    {
                        new SqlParameter("@piId_Tipo_Servicio", tipoServicio.IdTipoServicio),
                        new SqlParameter("@piCod_Tipo_Servicio", tipoServicio.CodTipoServicio),
                        new SqlParameter("@psDes_Tipo_Servicio", tipoServicio.DesTipoServicio),
                        new SqlParameter("@psTipo_Servicio_Tasador", tipoServicio.TipoServicioTasador),
                        new SqlParameter("@psInd_Metodo_Insercion", tipoServicio.IndMetodoInsercion),
                        new SqlParameter("@psCod_Usuario", tipoServicio.CodUsuarioIngreso)
                    };

                    #endregion

                    #region KeyValuePair LIST

                    List<KeyValuePair<string, string>> itemConsulta = new List<KeyValuePair<string, string>>();
                    itemConsulta.Add(helper.CrearKeyValuePairItem("@piId_Tipo_Servicio", tipoServicio.IdTipoServicio.ToString()));

                    #endregion

                    try
                    {

                        #region MODIFICAR

                        rowsAffected = transaccionDA.TransaccionModificar(conexion, conexionBitacora, "Tipos_Servicios_Actualiza", paramTransaccion, EnumTipoBitacora.ELIMINAR, itemConsulta, "Tipos_Servicios_Consulta_Detalle", _bitacora);
                        if (!rowsAffected.Equals(null))
                        {
                            elemento = new RespuestaEntidad();
                            elemento.ValorEstado = int.Parse(rowsAffected.Tables[0].Rows[0][0].ToString());
                            elemento.ValorError = int.Parse(rowsAffected.Tables[0].Rows[0][1].ToString());
                        }

                        return elemento;

                        #endregion

                    }
                    catch (Exception)
                    {
                        throw;
                    }
                }
        
                public RespuestaEntidad TiposServiciosEliminar(String conexion, String conexionBitacora, TiposServiciosEntidad tipoServicio, BitacorasEntidad _bitacora)
                {
                    RespuestaEntidad elemento = null;
                    DataSet rowsAffected;

                    #region PARAMETROS

                    SqlParameter[] paramTransaccion = new SqlParameter[]
                {
                    new SqlParameter("@piId_Tipo_Servicio", tipoServicio.IdTipoServicio)
                };

                    #endregion

                    #region KeyValuePair LIST

                    List<KeyValuePair<string, string>> itemConsulta = new List<KeyValuePair<string, string>>();
                    itemConsulta.Add(helper.CrearKeyValuePairItem("@piId_Tipo_Servicio", tipoServicio.IdTipoServicio.ToString()));

                    #endregion

                    try
                    {

                        #region ELIMINAR

                        rowsAffected = transaccionDA.TransaccionEliminar(conexion, conexionBitacora, "Tipos_Servicios_Elimina", paramTransaccion, EnumTipoBitacora.ELIMINAR, itemConsulta, "Tipos_Servicios_Consulta_Detalle", _bitacora);
                        if (!rowsAffected.Equals(null))
                        {
                            elemento = new RespuestaEntidad();
                            elemento.ValorEstado = int.Parse(rowsAffected.Tables[0].Rows[0][0].ToString());
                            elemento.ValorError = int.Parse(rowsAffected.Tables[0].Rows[0][1].ToString());
                        }

                        return elemento;

                        #endregion

                    }
                    catch (Exception)
                    {
                        throw;
                    }
                }

                public List<TiposServiciosEntidad> TiposServiciosConsultar(String conexion, ParametrosConsultaEntidad entidad)
                {
                    List<TiposServiciosEntidad> retorno = new List<TiposServiciosEntidad>();
                    TiposServiciosEntidad elemento;
                    DataSet rowsAffected;

                    #region PARAMETROS

                    SqlParameter[] paramTransaccion = new SqlParameter[]
                    {
                       new SqlParameter("@piIndice_Inicio_Fila", entidad.IndiceInicioFila),
                       new SqlParameter("@piMaximo_Filas", entidad.MaximoFilas),
                       new SqlParameter("@psValores_Filtro", entidad.ValorFiltro),
                       new SqlParameter("@psColumnas_Filtros", entidad.ColumnaFiltro),
                       new SqlParameter("@psColumna_Ordenar", entidad.ColumnaOrdenar)
                    };

                    #endregion

                    try
                    {

                        #region CONSULTAR

                        rowsAffected = transaccionDA.TransaccionConsulta(conexion, "Tipos_Servicios_Consulta", paramTransaccion);
                        if (!rowsAffected.Equals(null))
                        {
                            foreach (DataRow dr in rowsAffected.Tables[0].Rows)
                            {
                                elemento = new TiposServiciosEntidad();
                                elemento.IdTipoServicio = int.Parse(dr[0].ToString());
                                elemento.CodTipoServicio = int.Parse(dr[1].ToString());
                                elemento.DesTipoServicio = dr[2].ToString();
                                elemento.TipoServicioTasador = dr[3].ToString();

                                retorno.Add(elemento);
                            }
                        }

                        return retorno;

                        #endregion

                    }
                    catch (Exception)
                    {
                        throw;
                    }
                }
        
                public TiposServiciosEntidad TiposServiciosConsultarDetalle(String conexion, String conexionBitacora, TiposServiciosEntidad tipoServicio, BitacorasEntidad _bitacora)
                {
                    TiposServiciosEntidad retorno = new TiposServiciosEntidad();
                    DataSet rowsAffected;

                    #region PARAMETROS

                    SqlParameter[] paramTransaccion = new SqlParameter[]
                    {
                    new SqlParameter("@piId_Tipo_Servicio", tipoServicio.IdTipoServicio)
                    };

                    #endregion

                    #region KeyValuePair LIST

                    List<KeyValuePair<string, string>> itemConsulta = new List<KeyValuePair<string, string>>();
                    itemConsulta.Add(helper.CrearKeyValuePairItem("@piId_Tipo_Servicio", tipoServicio.IdTipoServicio.ToString()));

                    #endregion

                    try
                    {

                        #region CONSULTAR DETALLE

                        rowsAffected = transaccionDA.TransaccionConsultaDetalle(conexion, conexionBitacora, "Tipos_Servicios_Consulta_Detalle", paramTransaccion, EnumTipoBitacora.CONSULTAR, itemConsulta, "Tipos_Servicios_Consulta_Detalle", _bitacora);
                        if (!rowsAffected.Equals(null))
                        {
                            retorno.IdTipoServicio = int.Parse(rowsAffected.Tables[0].Rows[0][0].ToString());
                            retorno.CodTipoServicio = int.Parse(rowsAffected.Tables[0].Rows[0][1].ToString());
                            retorno.DesTipoServicio = rowsAffected.Tables[0].Rows[0][2].ToString();
                            retorno.TipoServicioTasador = rowsAffected.Tables[0].Rows[0][3].ToString();

                            retorno.IndMetodoInsercion = rowsAffected.Tables[0].Rows[0][4].ToString();
                            if (rowsAffected.Tables[0].Rows[0][5].ToString().Length > 0)
                                retorno.FechaIngreso = DateTime.Parse(rowsAffected.Tables[0].Rows[0][5].ToString());
                            else
                                retorno.FechaIngreso = null;
                            retorno.CodUsuarioIngreso = rowsAffected.Tables[0].Rows[0][6].ToString();
                            if (rowsAffected.Tables[0].Rows[0][7].ToString().Length > 0)
                                retorno.FechaUltimaModificacion = DateTime.Parse(rowsAffected.Tables[0].Rows[0][7].ToString());
                            else
                                retorno.FechaUltimaModificacion = null;
                            retorno.CodUsuarioUltimaModificacion = rowsAffected.Tables[0].Rows[0][8].ToString();
                            retorno.DesUsuarioIngreso = rowsAffected.Tables[0].Rows[0][9].ToString();
                            retorno.DesUsuarioUltimaModificacion = rowsAffected.Tables[0].Rows[0][10].ToString();
                        }

                        return retorno;

                        #endregion

                    }
                    catch (Exception)
                    {
                        throw;
                    }
                }
        
                public int TiposServiciosTotalFilas(String conexion, ParametrosTotalFilasEntidad entidad)
                {

                    int value;

                    #region PARAMETROS

                    SqlParameter[] paramTransaccion = new SqlParameter[]
                    {
                        new SqlParameter("@psValor_Filtro", entidad.ValorFiltro),
                        new SqlParameter("@psColumna_Filtro", entidad.ColumnaFiltro)
                    };

                    #endregion

                    try
                    {

                        #region TOTAL FILAS

                        value = transaccionDA.TransaccionRows(conexion, "Tipos_Servicios_Total_Filas", paramTransaccion);

                        return value;

                        #endregion

                    }
                    catch (Exception)
                    {
                        throw;
                    }
                }
        
                public List<ListaEntidad> TiposServiciosLista(String conexion, String filtro)
                {
                    List<ListaEntidad> retorno = new List<ListaEntidad>();
                    ListaEntidad elemento;
                    DataSet rowsAffected;

                    #region PARAMETROS

                    SqlParameter[] paramTransaccion = new SqlParameter[]
                    {
                        new SqlParameter("@psFiltro", filtro)
                    };

                    #endregion

                    try
                    {

                        #region LISTA

                        rowsAffected = transaccionDA.TransaccionConsulta(conexion, "Tipos_Servicios_Lista", paramTransaccion);
                        if (!rowsAffected.Equals(null))
                        {
                            foreach (DataRow dr in rowsAffected.Tables[0].Rows)
                            {
                                elemento = new ListaEntidad();
                                elemento.Valor = dr[0].ToString();
                                elemento.Texto = dr[1].ToString();

                                retorno.Add(elemento);
                            }
                        }
                        return retorno;

                        #endregion


                    }
                    catch (Exception)
                    {
                        throw;
                    }
                }
        
            #endregion 

            //REQUERIMIENTO: 1-24292751
            #region TIPOS VALORES

                public List<ListaEntidad> TiposValoresLista(String conexion, String filtro)
                {
                    List<ListaEntidad> retorno = new List<ListaEntidad>();
                    ListaEntidad elemento;
                    DataSet rowsAffected;

                    #region PARAMETROS

                    SqlParameter[] paramTransaccion = new SqlParameter[]
                    {
                        new SqlParameter("@psFiltro", filtro)
                    };

                    #endregion

                    try
                    {

                        #region LISTA

                        rowsAffected = transaccionDA.TransaccionConsulta(conexion, "Tipos_Valores_Lista", paramTransaccion);
                        if (!rowsAffected.Equals(null))
                        {
                            foreach (DataRow dr in rowsAffected.Tables[0].Rows)
                            {
                                elemento = new ListaEntidad();
                                elemento.Valor = dr[0].ToString();
                                elemento.Texto = dr[1].ToString();

                                retorno.Add(elemento);
                            }
                        }
                        return retorno;

                        #endregion

                    }
                    catch (Exception)
                    {
                        throw;
                    }
                }
                //REQUERIMIENTO: 1-24493227
                public List<ListaEntidad> TiposValoresTenenciasTiposInstrumentosLista(String conexion, String idTipoInstrumento, String idTipoValor)
                {
                    List<ListaEntidad> retorno = new List<ListaEntidad>();
                    ListaEntidad elemento;
                    DataSet rowsAffected;

                    #region PARAMETROS

                    SqlParameter[] paramTransaccion = new SqlParameter[]
                    {
                        new SqlParameter("@piId_Tipo_Instrumento", idTipoInstrumento),
                        new SqlParameter("@piId_Tipo_Valor", idTipoValor)
                    };

                    #endregion

                    try
                    {

                        #region LISTA

                        rowsAffected = transaccionDA.TransaccionConsulta(conexion, "Tipos_Valores_Tenencias_Tipos_Instrumentos_Lista", paramTransaccion);
                        if (!rowsAffected.Equals(null))
                        {
                            foreach (DataRow dr in rowsAffected.Tables[0].Rows)
                            {
                                elemento = new ListaEntidad();
                                elemento.Valor = dr[0].ToString();
                                elemento.Texto = dr[1].ToString();

                                retorno.Add(elemento);
                            }
                        }
                        return retorno;

                        #endregion

                    }
                    catch (Exception)
                    {
                        throw;
                    }
                }

            #endregion

            #region TIPOS ZONAS
        
            public RespuestaEntidad TiposZonasInsertar(String conexion, String conexionBitacora, TiposZonasEntidad tipoZona, BitacorasEntidad _bitacora)
            {
                RespuestaEntidad elemento = null;
                DataSet rowsAffected;

                #region PARAMETROS

                SqlParameter[] paramTransaccion = new SqlParameter[]
                {
                    new SqlParameter("@piCod_Tipo_Zona", tipoZona.CodTipoZona),
                    new SqlParameter("@psDes_Tipo_Zona", tipoZona.DesTipoZona),
                    new SqlParameter("@psInd_Metodo_Insercion", tipoZona.IndMetodoInsercion),
                    new SqlParameter("@psCod_Usuario", tipoZona.CodUsuarioIngreso)
                };

                #endregion

                try
                {

                    #region INSERTAR

                    rowsAffected = transaccionDA.TransaccionInsertar(conexion, conexionBitacora, "Tipos_Zonas_Inserta", paramTransaccion, EnumTipoBitacora.INSERTAR, _bitacora);
                    if (!rowsAffected.Equals(null))
                    {
                        elemento = new RespuestaEntidad();
                        elemento.ValorEstado = int.Parse(rowsAffected.Tables[0].Rows[0][0].ToString());
                        elemento.ValorError = int.Parse(rowsAffected.Tables[0].Rows[0][1].ToString());
                    }

                    return elemento;

                    #endregion

                }
                catch (Exception)
                {
                    throw;
                }
            }
        
            public RespuestaEntidad TiposZonasModificar(String conexion, String conexionBitacora, TiposZonasEntidad tipoZona, BitacorasEntidad _bitacora)
            {
                RespuestaEntidad elemento = null;
                DataSet rowsAffected;

                #region PARAMETROS

                SqlParameter[] paramTransaccion = new SqlParameter[]
                {
                    new SqlParameter("@piId_Tipo_Zona", tipoZona.IdTipoZona),
                    new SqlParameter("@piCod_Tipo_Zona", tipoZona.CodTipoZona),
                    new SqlParameter("@psDes_Tipo_Zona", tipoZona.DesTipoZona),
                    new SqlParameter("@psInd_Metodo_Insercion", tipoZona.IndMetodoInsercion),
                    new SqlParameter("@psCod_Usuario", tipoZona.CodUsuarioIngreso)
                };

                #endregion

                #region KeyValuePair LIST

                List<KeyValuePair<string, string>> itemConsulta = new List<KeyValuePair<string, string>>();
                itemConsulta.Add(helper.CrearKeyValuePairItem("@piId_Tipo_Zona", tipoZona.IdTipoZona.ToString()));

                #endregion

                try
                {

                    #region MODIFICAR

                    rowsAffected = transaccionDA.TransaccionModificar(conexion, conexionBitacora, "Tipos_Zonas_Actualiza", paramTransaccion, EnumTipoBitacora.ELIMINAR, itemConsulta, "Tipos_Zonas_Consulta_Detalle", _bitacora);
                    if (!rowsAffected.Equals(null))
                    {
                        elemento = new RespuestaEntidad();
                        elemento.ValorEstado = int.Parse(rowsAffected.Tables[0].Rows[0][0].ToString());
                        elemento.ValorError = int.Parse(rowsAffected.Tables[0].Rows[0][1].ToString());
                    }

                    return elemento;

                    #endregion

                }
                catch (Exception)
                {
                    throw;
                }
            }
        
            public RespuestaEntidad TiposZonasEliminar(String conexion, String conexionBitacora, TiposZonasEntidad tipoZona, BitacorasEntidad _bitacora)
            {
                RespuestaEntidad elemento = null;
                DataSet rowsAffected;

                #region PARAMETROS

                SqlParameter[] paramTransaccion = new SqlParameter[]
                {
                    new SqlParameter("@piId_Tipo_Zona", tipoZona.IdTipoZona)
                };

                #endregion

                #region KeyValuePair LIST

                List<KeyValuePair<string, string>> itemConsulta = new List<KeyValuePair<string, string>>();
                itemConsulta.Add(helper.CrearKeyValuePairItem("@piId_Tipo_Zona", tipoZona.IdTipoZona.ToString()));

                #endregion

                try
                {

                    #region ELIMINAR

                    rowsAffected = transaccionDA.TransaccionEliminar(conexion, conexionBitacora, "Tipos_Zonas_Elimina", paramTransaccion, EnumTipoBitacora.ELIMINAR, itemConsulta, "Tipos_Zonas_Consulta_Detalle", _bitacora);
                    if (!rowsAffected.Equals(null))
                    {
                        elemento = new RespuestaEntidad();
                        elemento.ValorEstado = int.Parse(rowsAffected.Tables[0].Rows[0][0].ToString());
                        elemento.ValorError = int.Parse(rowsAffected.Tables[0].Rows[0][1].ToString());
                    }

                    return elemento;                      

                    #endregion

                }
                catch (Exception)
                {
                    throw;
                }
            }

            public List<TiposZonasEntidad> TiposZonasConsultar(String conexion, ParametrosConsultaEntidad entidad)
            {
                List<TiposZonasEntidad> retorno = new List<TiposZonasEntidad>();
                TiposZonasEntidad elemento;
                DataSet rowsAffected;

                #region PARAMETROS

                SqlParameter[] paramTransaccion = new SqlParameter[]
                {
                    new SqlParameter("@piIndice_Inicio_Fila", entidad.IndiceInicioFila),
                    new SqlParameter("@piMaximo_Filas", entidad.MaximoFilas),
                    new SqlParameter("@psValores_Filtro", entidad.ValorFiltro),
                    new SqlParameter("@psColumnas_Filtros", entidad.ColumnaFiltro),
                    new SqlParameter("@psColumna_Ordenar", entidad.ColumnaOrdenar)
                };

                #endregion

                try
                {

                    #region CONSULTAR

                        rowsAffected = transaccionDA.TransaccionConsulta(conexion, "Tipos_Zonas_Consulta", paramTransaccion);
                        if (!rowsAffected.Equals(null))
                        {
                            foreach (DataRow dr in rowsAffected.Tables[0].Rows)
                            {
                                elemento = new TiposZonasEntidad();
                                elemento.IdTipoZona = int.Parse(dr[0].ToString());
                                elemento.CodTipoZona = int.Parse(dr[1].ToString());
                                elemento.DesTipoZona = dr[2].ToString();

                                retorno.Add(elemento);
                            }
                        }

                        return retorno;

                    #endregion

                }
                catch (Exception)
                {
                    throw;
                }
            }
        
            public TiposZonasEntidad TiposZonasConsultarDetalle(String conexion, String conexionBitacora, TiposZonasEntidad tipoZona, BitacorasEntidad _bitacora)
            {
                TiposZonasEntidad retorno = new TiposZonasEntidad();
                DataSet rowsAffected;

                #region PARAMETROS

                SqlParameter[] paramTransaccion = new SqlParameter[]
                {
                    new SqlParameter("@piId_Tipo_Zona", tipoZona.IdTipoZona)
                };

                #endregion

                #region KeyValuePair LIST

                List<KeyValuePair<string, string>> itemConsulta = new List<KeyValuePair<string, string>>();
                itemConsulta.Add(helper.CrearKeyValuePairItem("@piId_Tipo_Zona", tipoZona.IdTipoZona.ToString()));

                #endregion

                try
                {

                    #region CONSULTAR DETALLE

                    rowsAffected = transaccionDA.TransaccionConsultaDetalle(conexion, conexionBitacora, "Tipos_Zonas_Consulta_Detalle", paramTransaccion, EnumTipoBitacora.CONSULTAR, itemConsulta, "Tipos_Zonas_Consulta_Detalle", _bitacora);
                    if (!rowsAffected.Equals(null))
                    {
                        retorno.IdTipoZona = int.Parse(rowsAffected.Tables[0].Rows[0][0].ToString());
                        retorno.CodTipoZona = int.Parse(rowsAffected.Tables[0].Rows[0][1].ToString());
                        retorno.DesTipoZona = rowsAffected.Tables[0].Rows[0][2].ToString();
                        retorno.IndMetodoInsercion = rowsAffected.Tables[0].Rows[0][3].ToString();
                        if (rowsAffected.Tables[0].Rows[0][4].ToString().Length > 0)
                            retorno.FechaIngreso = DateTime.Parse(rowsAffected.Tables[0].Rows[0][4].ToString());
                        else
                            retorno.FechaIngreso = null;
                        retorno.CodUsuarioIngreso = rowsAffected.Tables[0].Rows[0][5].ToString();
                        if (rowsAffected.Tables[0].Rows[0][6].ToString().Length > 0)
                            retorno.FechaUltimaModificacion = DateTime.Parse(rowsAffected.Tables[0].Rows[0][6].ToString());
                        else
                            retorno.FechaUltimaModificacion = null;
                        retorno.CodUsuarioUltimaModificacion = rowsAffected.Tables[0].Rows[0][7].ToString();
                        retorno.DesUsuarioIngreso = rowsAffected.Tables[0].Rows[0][8].ToString();
                        retorno.DesUsuarioUltimaModificacion = rowsAffected.Tables[0].Rows[0][9].ToString();
                    }

                    return retorno;

                    #endregion

                }
                catch (Exception)
                {
                    throw;
                }
            }
        
            public int TiposZonasTotalFilas(String conexion, ParametrosTotalFilasEntidad entidad)
            {

                int value;

                #region PARAMETROS

                SqlParameter[] paramTransaccion = new SqlParameter[]
                {
                    new SqlParameter("@psValor_Filtro", entidad.ValorFiltro),
                    new SqlParameter("@psColumna_Filtro", entidad.ColumnaFiltro)
                };

                #endregion

                try
                {

                    #region TOTAL FILAS

                        value = transaccionDA.TransaccionRows(conexion, "Tipos_Zonas_Total_Filas", paramTransaccion);

                        return value;

                    #endregion

                }
                catch (Exception)
                {
                    throw;
                }
            }

            #endregion 

            #region TOPOGRAFIAS
        
                public RespuestaEntidad TopografiasInsertar(String conexion, String conexionBitacora, TopografiasEntidad topografia, BitacorasEntidad _bitacora)
                {
                    RespuestaEntidad elemento = null;
                    DataSet rowsAffected;

                    #region PARAMETROS

                    SqlParameter[] paramTransaccion = new SqlParameter[]
                    {
                        new SqlParameter("@piCod_Topografia", topografia.CodTopografia),
                        new SqlParameter("@psDes_Topografia", topografia.DesTopografia),
                        new SqlParameter("@psInd_Metodo_Insercion", topografia.IndMetodoInsercion),
                        new SqlParameter("@psCod_Usuario", topografia.CodUsuarioIngreso)
                    };

                    #endregion

                    try
                    {

                        #region INSERTAR

                        rowsAffected = transaccionDA.TransaccionInsertar(conexion, conexionBitacora, "Topografias_Inserta", paramTransaccion, EnumTipoBitacora.INSERTAR, _bitacora);
                        if (!rowsAffected.Equals(null))
                        {
                            elemento = new RespuestaEntidad();
                            elemento.ValorEstado = int.Parse(rowsAffected.Tables[0].Rows[0][0].ToString());
                            elemento.ValorError = int.Parse(rowsAffected.Tables[0].Rows[0][1].ToString());
                        }

                        return elemento;

                        #endregion

                    }
                    catch (Exception)
                    {
                        throw;
                    }
                }
        
                public RespuestaEntidad TopografiasModificar(String conexion, String conexionBitacora, TopografiasEntidad topografia, BitacorasEntidad _bitacora)
                {
                    RespuestaEntidad elemento = null;
                    DataSet rowsAffected;

                    #region PARAMETROS

                    SqlParameter[] paramTransaccion = new SqlParameter[]
                    {
                        new SqlParameter("@piId_Topografia", topografia.IdTopografia),
                        new SqlParameter("@piCod_Topografia", topografia.CodTopografia),
                        new SqlParameter("@psDes_Topografia", topografia.DesTopografia),
                        new SqlParameter("@psInd_Metodo_Insercion", topografia.IndMetodoInsercion),
                        new SqlParameter("@psCod_Usuario", topografia.CodUsuarioIngreso)
                    };

                    #endregion

                    #region KeyValuePair LIST

                    List<KeyValuePair<string, string>> itemConsulta = new List<KeyValuePair<string, string>>();
                    itemConsulta.Add(helper.CrearKeyValuePairItem("@piId_Topografia", topografia.IdTopografia.ToString()));

                    #endregion

                    try
                    {

                        #region MODIFICAR

                        rowsAffected = transaccionDA.TransaccionModificar(conexion, conexionBitacora, "Topografias_Actualiza", paramTransaccion, EnumTipoBitacora.ACTUALIZAR, itemConsulta, "Topografias_Consulta_Detalle", _bitacora);
                        if (!rowsAffected.Equals(null))
                        {
                            elemento = new RespuestaEntidad();
                            elemento.ValorEstado = int.Parse(rowsAffected.Tables[0].Rows[0][0].ToString());
                            elemento.ValorError = int.Parse(rowsAffected.Tables[0].Rows[0][1].ToString());
                        }

                        return elemento;

                        #endregion

                    }
                    catch (Exception)
                    {
                        throw;
                    }
                }
        
                public RespuestaEntidad TopografiasEliminar(String conexion, String conexionBitacora, TopografiasEntidad topografia, BitacorasEntidad _bitacora)
                {
                    RespuestaEntidad elemento = null;
                    DataSet rowsAffected;

                    #region PARAMETROS

                    SqlParameter[] paramTransaccion = new SqlParameter[]
                    {
                        new SqlParameter("@piId_Topografia", topografia.IdTopografia)
                    };

                    #endregion

                    #region KeyValuePair LIST

                    List<KeyValuePair<string, string>> itemConsulta = new List<KeyValuePair<string, string>>();
                    itemConsulta.Add(helper.CrearKeyValuePairItem("@piId_Topografia", topografia.IdTopografia.ToString()));

                    #endregion

                    try
                    {

                        #region ELIMINAR

                        rowsAffected = transaccionDA.TransaccionEliminar(conexion, conexionBitacora, "Topografias_Elimina", paramTransaccion, EnumTipoBitacora.ELIMINAR, itemConsulta, "Topografias_Consulta_Detalle", _bitacora);
                        if (!rowsAffected.Equals(null))
                        {
                            elemento = new RespuestaEntidad();
                            elemento.ValorEstado = int.Parse(rowsAffected.Tables[0].Rows[0][0].ToString());
                            elemento.ValorError = int.Parse(rowsAffected.Tables[0].Rows[0][1].ToString());
                        }

                        return elemento;

                        #endregion

                    }
                    catch (Exception)
                    {
                        throw;
                    }
                }

                public List<TopografiasEntidad> TopografiasConsultar(String conexion, ParametrosConsultaEntidad entidad)
                {
                    List<TopografiasEntidad> retorno = new List<TopografiasEntidad>();
                    TopografiasEntidad elemento;
                    DataSet rowsAffected;

                    #region PARAMETROS

                    SqlParameter[] paramTransaccion = new SqlParameter[]
                    {
                       new SqlParameter("@piIndice_Inicio_Fila", entidad.IndiceInicioFila),
                       new SqlParameter("@piMaximo_Filas", entidad.MaximoFilas),
                       new SqlParameter("@psValores_Filtro", entidad.ValorFiltro),
                       new SqlParameter("@psColumnas_Filtros", entidad.ColumnaFiltro),
                       new SqlParameter("@psColumna_Ordenar", entidad.ColumnaOrdenar)
                    };

                    #endregion

                    try
                    {

                        #region CONSULTAR

                            rowsAffected = transaccionDA.TransaccionConsulta(conexion, "Topografias_Consulta", paramTransaccion);
                            if (!rowsAffected.Equals(null))
                            {
                                foreach (DataRow dr in rowsAffected.Tables[0].Rows)
                                {
                                    elemento = new TopografiasEntidad();
                                    elemento.IdTopografia = int.Parse(dr[0].ToString());
                                    elemento.CodTopografia = int.Parse(dr[1].ToString());
                                    elemento.DesTopografia = dr[2].ToString();

                                    retorno.Add(elemento);
                                }
                            }

                            return retorno;

                        #endregion

                    }
                    catch (Exception)
                    {
                        throw;
                    }
                }
        
                public TopografiasEntidad TopografiasConsultarDetalle(String conexion, String conexionBitacora, TopografiasEntidad topografia, BitacorasEntidad _bitacora)
                {
                    TopografiasEntidad retorno = new TopografiasEntidad();
                    DataSet rowsAffected;

                    #region PARAMETROS

                    SqlParameter[] paramTransaccion = new SqlParameter[]
                    {
                        new SqlParameter("@piId_Topografia", topografia.IdTopografia)
                    };

                    #endregion

                    #region KeyValuePair LIST

                    List<KeyValuePair<string, string>> itemConsulta = new List<KeyValuePair<string, string>>();
                    itemConsulta.Add(helper.CrearKeyValuePairItem("@piId_Topografia", topografia.IdTopografia.ToString()));

                    #endregion

                    try
                    {

                        #region CONSULTAR DETALLE

                        rowsAffected = transaccionDA.TransaccionConsultaDetalle(conexion, conexionBitacora, "Topografias_Consulta_Detalle", paramTransaccion, EnumTipoBitacora.CONSULTAR, itemConsulta, "Topografias_Consulta_Detalle", _bitacora);
                        if (!rowsAffected.Equals(null))
                        {
                            retorno.IdTopografia = int.Parse(rowsAffected.Tables[0].Rows[0][0].ToString());
                            retorno.CodTopografia = int.Parse(rowsAffected.Tables[0].Rows[0][1].ToString());
                            retorno.DesTopografia = rowsAffected.Tables[0].Rows[0][2].ToString();
                            retorno.IndMetodoInsercion = rowsAffected.Tables[0].Rows[0][3].ToString();
                            if (rowsAffected.Tables[0].Rows[0][4].ToString().Length > 0)
                                retorno.FechaIngreso = DateTime.Parse(rowsAffected.Tables[0].Rows[0][4].ToString());
                            else
                                retorno.FechaIngreso = null;
                            retorno.CodUsuarioIngreso = rowsAffected.Tables[0].Rows[0][5].ToString();
                            if (rowsAffected.Tables[0].Rows[0][6].ToString().Length > 0)
                                retorno.FechaUltimaModificacion = DateTime.Parse(rowsAffected.Tables[0].Rows[0][6].ToString());
                            else
                                retorno.FechaUltimaModificacion = null;
                            retorno.CodUsuarioUltimaModificacion = rowsAffected.Tables[0].Rows[0][7].ToString();
                            retorno.DesUsuarioIngreso = rowsAffected.Tables[0].Rows[0][8].ToString();
                            retorno.DesUsuarioUltimaModificacion = rowsAffected.Tables[0].Rows[0][9].ToString();
                        }

                        return retorno;

                        #endregion

                    }
                    catch (Exception)
                    {
                        throw;
                    }
                }
        
                public int TopografiasTotalFilas(String conexion, ParametrosTotalFilasEntidad entidad)
                {

                    int value;

                    #region PARAMETROS

                    SqlParameter[] paramTransaccion = new SqlParameter[]
                    {
                        new SqlParameter("@psValor_Filtro", entidad.ValorFiltro),
                        new SqlParameter("@psColumna_Filtro", entidad.ColumnaFiltro)
                    };

                    #endregion

                    try
                    {

                        #region TOTAL FILAS

                            value = transaccionDA.TransaccionRows(conexion, "Topografias_Total_Filas", paramTransaccion);

                            return value;

                        #endregion

                    }
                    catch (Exception)
                    {
                        throw;
                    }
                }

            #endregion 

            #region UNIDADES
        
                public RespuestaEntidad UnidadesInsertar(String conexion, String conexionBitacora, UnidadesEntidad unidad, BitacorasEntidad _bitacora)
                {
                    RespuestaEntidad elemento = null;
                    DataSet rowsAffected;

                    #region PARAMETROS

                    SqlParameter[] paramTransaccion = new SqlParameter[]
                    {
                        new SqlParameter("@piCod_Unidad", unidad.CodUnidad),
                        new SqlParameter("@psDes_Unidad", unidad.DesUnidad),
                        new SqlParameter("@psInd_Metodo_Insercion", unidad.IndMetodoInsercion),
                        new SqlParameter("@psCod_Usuario", unidad.CodUsuarioIngreso)
                    };

                    #endregion

                    try
                    {

                        #region INSERTAR

                        rowsAffected = transaccionDA.TransaccionInsertar(conexion, conexionBitacora, "Unidades_Inserta", paramTransaccion, EnumTipoBitacora.INSERTAR, _bitacora);
                        if (!rowsAffected.Equals(null))
                        {
                            elemento = new RespuestaEntidad();
                            elemento.ValorEstado = int.Parse(rowsAffected.Tables[0].Rows[0][0].ToString());
                            elemento.ValorError = int.Parse(rowsAffected.Tables[0].Rows[0][1].ToString());
                        }

                        return elemento;

                        #endregion

                    }
                    catch (Exception)
                    {
                        throw;
                    }
                }
        
                public RespuestaEntidad UnidadesModificar(String conexion, String conexionBitacora, UnidadesEntidad unidad, BitacorasEntidad _bitacora)
                {
                    RespuestaEntidad elemento = null;
                    DataSet rowsAffected;

                    #region PARAMETROS

                    SqlParameter[] paramTransaccion = new SqlParameter[]
                    {
                        new SqlParameter("@piId_Unidad", unidad.IdUnidad),
                        new SqlParameter("@piCod_Unidad", unidad.CodUnidad),
                        new SqlParameter("@psDes_Unidad", unidad.DesUnidad),
                        new SqlParameter("@psInd_Metodo_Insercion", unidad.IndMetodoInsercion),
                        new SqlParameter("@psCod_Usuario", unidad.CodUsuarioIngreso)
                    };

                    #endregion

                    #region KeyValuePair LIST

                    List<KeyValuePair<string, string>> itemConsulta = new List<KeyValuePair<string, string>>();
                    itemConsulta.Add(helper.CrearKeyValuePairItem("@piId_Unidad", unidad.IdUnidad.ToString()));

                    #endregion

                    try
                    {

                        #region MODIFICAR

                        rowsAffected = transaccionDA.TransaccionModificar(conexion, conexionBitacora, "Unidades_Actualiza", paramTransaccion, EnumTipoBitacora.ACTUALIZAR, itemConsulta, "Unidades_Consulta_Detalle", _bitacora);
                        if (!rowsAffected.Equals(null))
                        {
                            elemento = new RespuestaEntidad();
                            elemento.ValorEstado = int.Parse(rowsAffected.Tables[0].Rows[0][0].ToString());
                            elemento.ValorError = int.Parse(rowsAffected.Tables[0].Rows[0][1].ToString());
                        }

                        return elemento;

                        #endregion

                    }
                    catch (Exception)
                    {
                        throw;
                    }
                }
        
                public RespuestaEntidad UnidadesEliminar(String conexion, String conexionBitacora, UnidadesEntidad unidad, BitacorasEntidad _bitacora)
                {
                    RespuestaEntidad elemento = null;
                    DataSet rowsAffected;

                    #region PARAMETROS

                    SqlParameter[] paramTransaccion = new SqlParameter[]
                    {
                        new SqlParameter("@piId_Unidad", unidad.IdUnidad)
                    };

                    #endregion

                    #region KeyValuePair LIST

                    List<KeyValuePair<string, string>> itemConsulta = new List<KeyValuePair<string, string>>();
                    itemConsulta.Add(helper.CrearKeyValuePairItem("@piId_Unidad", unidad.IdUnidad.ToString()));

                    #endregion

                    try
                    {

                        #region ELIMINAR

                        rowsAffected = transaccionDA.TransaccionEliminar(conexion, conexionBitacora, "Unidades_Elimina", paramTransaccion, EnumTipoBitacora.ELIMINAR, itemConsulta, "Unidades_Consulta_Detalle", _bitacora);
                        if (!rowsAffected.Equals(null))
                        {
                            elemento = new RespuestaEntidad();
                            elemento.ValorEstado = int.Parse(rowsAffected.Tables[0].Rows[0][0].ToString());
                            elemento.ValorError = int.Parse(rowsAffected.Tables[0].Rows[0][1].ToString());
                        }

                        return elemento;

                        #endregion

                    }
                    catch (Exception)
                    {
                        throw;
                    }
                }

                public List<UnidadesEntidad> UnidadesConsultar(String conexion, ParametrosConsultaEntidad entidad)
                {
                    List<UnidadesEntidad> retorno = new List<UnidadesEntidad>();
                    UnidadesEntidad elemento;
                    DataSet rowsAffected;

                    #region PARAMETROS

                    SqlParameter[] paramTransaccion = new SqlParameter[]
                    {
                       new SqlParameter("@piIndice_Inicio_Fila", entidad.IndiceInicioFila),
                       new SqlParameter("@piMaximo_Filas", entidad.MaximoFilas),
                       new SqlParameter("@psValores_Filtro", entidad.ValorFiltro),
                       new SqlParameter("@psColumnas_Filtros", entidad.ColumnaFiltro),
                       new SqlParameter("@psColumna_Ordenar", entidad.ColumnaOrdenar)
                    };

                    #endregion

                    try
                    {

                        #region CONSULTAR

                            rowsAffected = transaccionDA.TransaccionConsulta(conexion, "Unidades_Consulta", paramTransaccion);
                            if (!rowsAffected.Equals(null))
                            {
                                foreach (DataRow dr in rowsAffected.Tables[0].Rows)
                                {
                                    elemento = new UnidadesEntidad();
                                    elemento.IdUnidad = int.Parse(dr[0].ToString());
                                    elemento.CodUnidad = int.Parse(dr[1].ToString());
                                    elemento.DesUnidad = dr[2].ToString();

                                    retorno.Add(elemento);
                                }
                            }

                            return retorno;

                        #endregion

                    }
                    catch (Exception)
                    {
                        throw;
                    }
                }
        
                public UnidadesEntidad UnidadesConsultarDetalle(String conexion, String conexionBitacora, UnidadesEntidad unidad, BitacorasEntidad _bitacora)
                {
                    UnidadesEntidad retorno = new UnidadesEntidad();
                    DataSet rowsAffected;

                    #region PARAMETROS

                    SqlParameter[] paramTransaccion = new SqlParameter[]
                    {
                        new SqlParameter("@piId_Unidad", unidad.IdUnidad)
                    };

                    #endregion

                    #region KeyValuePair LIST

                    List<KeyValuePair<string, string>> itemConsulta = new List<KeyValuePair<string, string>>();
                    itemConsulta.Add(helper.CrearKeyValuePairItem("@piId_Unidad", unidad.IdUnidad.ToString()));

                    #endregion

                    try
                    {

                        #region CONSULTAR DETALLE

                        rowsAffected = transaccionDA.TransaccionConsultaDetalle(conexion, conexionBitacora, "Unidades_Consulta_Detalle", paramTransaccion, EnumTipoBitacora.CONSULTAR, itemConsulta, "Unidades_Consulta_Detalle", _bitacora);
                        if (!rowsAffected.Equals(null))
                        {
                            retorno.IdUnidad = int.Parse(rowsAffected.Tables[0].Rows[0][0].ToString());
                            retorno.CodUnidad = int.Parse(rowsAffected.Tables[0].Rows[0][1].ToString());
                            retorno.DesUnidad = rowsAffected.Tables[0].Rows[0][2].ToString();
                            retorno.IndMetodoInsercion = rowsAffected.Tables[0].Rows[0][3].ToString();
                            if (rowsAffected.Tables[0].Rows[0][4].ToString().Length > 0)
                                retorno.FechaIngreso = DateTime.Parse(rowsAffected.Tables[0].Rows[0][4].ToString());
                            else
                                retorno.FechaIngreso = null;
                            retorno.CodUsuarioIngreso = rowsAffected.Tables[0].Rows[0][5].ToString();
                            if (rowsAffected.Tables[0].Rows[0][6].ToString().Length > 0)
                                retorno.FechaUltimaModificacion = DateTime.Parse(rowsAffected.Tables[0].Rows[0][6].ToString());
                            else
                                retorno.FechaUltimaModificacion = null;
                            retorno.CodUsuarioUltimaModificacion = rowsAffected.Tables[0].Rows[0][7].ToString();
                            retorno.DesUsuarioIngreso = rowsAffected.Tables[0].Rows[0][8].ToString();
                            retorno.DesUsuarioUltimaModificacion = rowsAffected.Tables[0].Rows[0][9].ToString();
                        }

                        return retorno;

                        #endregion

                    }
                    catch (Exception)
                    {
                        throw;
                    }
                }
       
                public int UnidadesTotalFilas(String conexion, ParametrosTotalFilasEntidad entidad)
                {

                    int value;

                    #region PARAMETROS

                    SqlParameter[] paramTransaccion = new SqlParameter[]
                    {
                        new SqlParameter("@psValor_Filtro", entidad.ValorFiltro),
                        new SqlParameter("@psColumna_Filtro", entidad.ColumnaFiltro)
                    };

                    #endregion

                    try
                    {

                        #region TOTAL FILAS

                            value = transaccionDA.TransaccionRows(conexion, "Unidades_Total_Filas", paramTransaccion);

                            return value;

                        #endregion

                    }
                    catch (Exception)
                    {
                        throw;
                    }
                }

            #endregion 

            #region USOS SUELOS ACTUAL ENTORNOS
        
                public RespuestaEntidad UsosSuelosActualEntornosInsertar(String conexion, String conexionBitacora, UsosSuelosActualEntornosEntidad uso, BitacorasEntidad _bitacora)
                {
                    RespuestaEntidad elemento = null;
                    DataSet rowsAffected;

                    #region PARAMETROS

                    SqlParameter[] paramTransaccion = new SqlParameter[]
                    {
                        new SqlParameter("@piCod_Uso_Suelo_Actual_Entorno", uso.CodUsoSueloActualEntorno),
                        new SqlParameter("@psDes_Uso_Suelo_Actual_Entorno", uso.DesUsoSueloActualEntorno),
                        new SqlParameter("@psInd_Metodo_Insercion", uso.IndMetodoInsercion),
                        new SqlParameter("@psCod_Usuario", uso.CodUsuarioIngreso)
                    };

                    #endregion

                    try
                    {

                        #region INSERTAR

                        rowsAffected = transaccionDA.TransaccionInsertar(conexion, conexionBitacora, "Usos_Suelos_Actual_Entornos_Inserta", paramTransaccion, EnumTipoBitacora.INSERTAR, _bitacora);
                        if (!rowsAffected.Equals(null))
                        {
                            elemento = new RespuestaEntidad();
                            elemento.ValorEstado = int.Parse(rowsAffected.Tables[0].Rows[0][0].ToString());
                            elemento.ValorError = int.Parse(rowsAffected.Tables[0].Rows[0][1].ToString());
                        }

                        return elemento;

                        #endregion

                    }
                    catch (Exception)
                    {
                        throw;
                    }
                }
        
                public RespuestaEntidad UsosSuelosActualEntornosModificar(String conexion, String conexionBitacora, UsosSuelosActualEntornosEntidad uso, BitacorasEntidad _bitacora)
                {
                    RespuestaEntidad elemento = null;
                    DataSet rowsAffected;

                    #region PARAMETROS

                    SqlParameter[] paramTransaccion = new SqlParameter[]
                    {
                        new SqlParameter("@piId_Uso_Suelo_Actual_Entorno", uso.IdUsoSueloActualEntorno),
                        new SqlParameter("@piCod_Uso_Suelo_Actual_Entorno", uso.CodUsoSueloActualEntorno),
                        new SqlParameter("@psDes_Uso_Suelo_Actual_Entorno", uso.DesUsoSueloActualEntorno),
                        new SqlParameter("@psInd_Metodo_Insercion", uso.IndMetodoInsercion),
                        new SqlParameter("@psCod_Usuario", uso.CodUsuarioIngreso)
                    };

                    #endregion

                    #region KeyValuePair LIST

                    List<KeyValuePair<string, string>> itemConsulta = new List<KeyValuePair<string, string>>();
                    itemConsulta.Add(helper.CrearKeyValuePairItem("@piId_Uso_Suelo_Actual_Entorno", uso.IdUsoSueloActualEntorno.ToString()));

                    #endregion

                    try
                    {

                        #region MODIFICAR

                        rowsAffected = transaccionDA.TransaccionModificar(conexion, conexionBitacora, "Usos_Suelos_Actual_Entornos_Actualiza", paramTransaccion, EnumTipoBitacora.ACTUALIZAR, itemConsulta, "Usos_Suelos_Actual_Entornos_Consulta_Detalle", _bitacora);
                        if (!rowsAffected.Equals(null))
                        {
                            elemento = new RespuestaEntidad();
                            elemento.ValorEstado = int.Parse(rowsAffected.Tables[0].Rows[0][0].ToString());
                            elemento.ValorError = int.Parse(rowsAffected.Tables[0].Rows[0][1].ToString());
                        }

                        return elemento;

                        #endregion

                    }
                    catch (Exception)
                    {
                        throw;
                    }
                }
        
                public RespuestaEntidad UsosSuelosActualEntornosEliminar(String conexion, String conexionBitacora, UsosSuelosActualEntornosEntidad uso, BitacorasEntidad _bitacora)
                {
                    RespuestaEntidad elemento = null;
                    DataSet rowsAffected;

                    #region PARAMETROS

                    SqlParameter[] paramTransaccion = new SqlParameter[]
                    {
                        new SqlParameter("@piId_Uso_Suelo_Actual_Entorno", uso.IdUsoSueloActualEntorno)
                    };

                    #endregion

                    #region KeyValuePair LIST

                    List<KeyValuePair<string, string>> itemConsulta = new List<KeyValuePair<string, string>>();
                    itemConsulta.Add(helper.CrearKeyValuePairItem("@piId_Uso_Suelo_Actual_Entorno", uso.IdUsoSueloActualEntorno.ToString()));

                    #endregion

                    try
                    {

                        #region ELIMINAR

                        rowsAffected = transaccionDA.TransaccionEliminar(conexion, conexionBitacora, "Usos_Suelos_Actual_Entornos_Elimina", paramTransaccion, EnumTipoBitacora.ELIMINAR, itemConsulta, "Usos_Suelos_Actual_Entornos_Consulta_Detalle", _bitacora);
                        if (!rowsAffected.Equals(null))
                        {
                            elemento = new RespuestaEntidad();
                            elemento.ValorEstado = int.Parse(rowsAffected.Tables[0].Rows[0][0].ToString());
                            elemento.ValorError = int.Parse(rowsAffected.Tables[0].Rows[0][1].ToString());
                        }

                        return elemento;

                        #endregion

                    }
                    catch (Exception)
                    {
                        throw;
                    }
                }

                public List<UsosSuelosActualEntornosEntidad> UsosSuelosActualEntornosConsultar(String conexion, ParametrosConsultaEntidad entidad)
                {
                    List<UsosSuelosActualEntornosEntidad> retorno = new List<UsosSuelosActualEntornosEntidad>();
                    UsosSuelosActualEntornosEntidad elemento;
                    DataSet rowsAffected;

                    #region PARAMETROS

                    SqlParameter[] paramTransaccion = new SqlParameter[]
                    {
                       new SqlParameter("@piIndice_Inicio_Fila", entidad.IndiceInicioFila),
                       new SqlParameter("@piMaximo_Filas", entidad.MaximoFilas),
                       new SqlParameter("@psValores_Filtro", entidad.ValorFiltro),
                       new SqlParameter("@psColumnas_Filtros", entidad.ColumnaFiltro),
                       new SqlParameter("@psColumna_Ordenar", entidad.ColumnaOrdenar)
                    };

                    #endregion

                    try
                    {

                        #region CONSULTAR

                            rowsAffected = transaccionDA.TransaccionConsulta(conexion, "Usos_Suelos_Actual_Entornos_Consulta", paramTransaccion);
                            if (!rowsAffected.Equals(null))
                            {
                                foreach (DataRow dr in rowsAffected.Tables[0].Rows)
                                {
                                    elemento = new UsosSuelosActualEntornosEntidad();
                                    elemento.IdUsoSueloActualEntorno = int.Parse(dr[0].ToString());
                                    elemento.CodUsoSueloActualEntorno = int.Parse(dr[1].ToString());
                                    elemento.DesUsoSueloActualEntorno = dr[2].ToString();

                                    retorno.Add(elemento);
                                }
                            }

                            return retorno;

                        #endregion

                    }
                    catch (Exception)
                    {
                        throw;
                    }
                }
        
                public UsosSuelosActualEntornosEntidad UsosSuelosActualEntornosConsultarDetalle(String conexion, String conexionBitacora, UsosSuelosActualEntornosEntidad uso, BitacorasEntidad _bitacora)
                {
                    UsosSuelosActualEntornosEntidad retorno = new UsosSuelosActualEntornosEntidad();
                    DataSet rowsAffected;

                    #region PARAMETROS

                    SqlParameter[] paramTransaccion = new SqlParameter[]
                    {
                        new SqlParameter("@piId_Uso_Suelo_Actual_Entorno", uso.IdUsoSueloActualEntorno)
                    };

                    #endregion

                    #region KeyValuePair LIST

                    List<KeyValuePair<string, string>> itemConsulta = new List<KeyValuePair<string, string>>();
                    itemConsulta.Add(helper.CrearKeyValuePairItem("@piId_Uso_Suelo_Actual_Entorno", uso.IdUsoSueloActualEntorno.ToString()));

                    #endregion

                    try
                    {

                        #region CONSULTAR DETALLE

                        rowsAffected = transaccionDA.TransaccionConsultaDetalle(conexion, conexionBitacora, "Usos_Suelos_Actual_Entornos_Consulta_Detalle", paramTransaccion, EnumTipoBitacora.CONSULTAR, itemConsulta, "Usos_Suelos_Actual_Entornos_Consulta_Detalle", _bitacora);
                        if (!rowsAffected.Equals(null))
                        {
                            retorno.IdUsoSueloActualEntorno = int.Parse(rowsAffected.Tables[0].Rows[0][0].ToString());
                            retorno.CodUsoSueloActualEntorno = int.Parse(rowsAffected.Tables[0].Rows[0][1].ToString());
                            retorno.DesUsoSueloActualEntorno = rowsAffected.Tables[0].Rows[0][2].ToString();
                            retorno.IndMetodoInsercion = rowsAffected.Tables[0].Rows[0][3].ToString();
                            if (rowsAffected.Tables[0].Rows[0][4].ToString().Length > 0)
                                retorno.FechaIngreso = DateTime.Parse(rowsAffected.Tables[0].Rows[0][4].ToString());
                            else
                                retorno.FechaIngreso = null;
                            retorno.CodUsuarioIngreso = rowsAffected.Tables[0].Rows[0][5].ToString();
                            if (rowsAffected.Tables[0].Rows[0][6].ToString().Length > 0)
                                retorno.FechaUltimaModificacion = DateTime.Parse(rowsAffected.Tables[0].Rows[0][6].ToString());
                            else
                                retorno.FechaUltimaModificacion = null;
                            retorno.CodUsuarioUltimaModificacion = rowsAffected.Tables[0].Rows[0][7].ToString();
                            retorno.DesUsuarioIngreso = rowsAffected.Tables[0].Rows[0][8].ToString();
                            retorno.DesUsuarioUltimaModificacion = rowsAffected.Tables[0].Rows[0][9].ToString();
                        }

                        return retorno;

                        #endregion

                    }
                    catch (Exception)
                    {
                        throw;
                    }
                }
        
                public int UsosSuelosActualEntornosTotalFilas(String conexion, ParametrosTotalFilasEntidad entidad)
                {

                    int value;

                    #region PARAMETROS

                    SqlParameter[] paramTransaccion = new SqlParameter[]
                    {
                        new SqlParameter("@psValor_Filtro", entidad.ValorFiltro),
                        new SqlParameter("@psColumna_Filtro", entidad.ColumnaFiltro)
                    };

                    #endregion

                    try
                    {

                        #region TOTAL FILAS

                            value = transaccionDA.TransaccionRows(conexion, "Usos_Suelos_Actual_Entornos_Total_Filas", paramTransaccion);

                            return value;

                        #endregion

                    }
                    catch (Exception)
                    {
                        throw;
                    }
                }

            #endregion 

            #region VENTANAS
        
                public RespuestaEntidad VentanasInsertar(String conexion, String conexionBitacora, VentanasEntidad ventana, BitacorasEntidad _bitacora)
                {
                    RespuestaEntidad elemento = null;
                    DataSet rowsAffected;

                    #region PARAMETROS

                    SqlParameter[] paramTransaccion = new SqlParameter[]
                    {
                        new SqlParameter("@piCod_Ventana", ventana.CodVentana),
                        new SqlParameter("@psDes_Ventana", ventana.DesVentana),
                        new SqlParameter("@psInd_Metodo_Insercion", ventana.IndMetodoInsercion),
                        new SqlParameter("@psCod_Usuario", ventana.CodUsuarioIngreso)
                    };

                    #endregion

                    try
                    {

                        #region INSERTAR

                        rowsAffected = transaccionDA.TransaccionInsertar(conexion, conexionBitacora, "Ventanas_Inserta", paramTransaccion, EnumTipoBitacora.INSERTAR, _bitacora);
                        if (!rowsAffected.Equals(null))
                        {
                            elemento = new RespuestaEntidad();
                            elemento.ValorEstado = int.Parse(rowsAffected.Tables[0].Rows[0][0].ToString());
                            elemento.ValorError = int.Parse(rowsAffected.Tables[0].Rows[0][1].ToString());
                        }

                        return elemento;

                        #endregion

                    }
                    catch (Exception)
                    {
                        throw;
                    }
                }
        
                public RespuestaEntidad VentanasModificar(String conexion, String conexionBitacora, VentanasEntidad ventana, BitacorasEntidad _bitacora)
                {
                    RespuestaEntidad elemento = null;
                    DataSet rowsAffected;

                    #region PARAMETROS

                    SqlParameter[] paramTransaccion = new SqlParameter[]
                    {
                        new SqlParameter("@piId_Ventana", ventana.IdVentana),
                        new SqlParameter("@piCod_Ventana", ventana.CodVentana),
                        new SqlParameter("@psDes_Ventana", ventana.DesVentana),
                        new SqlParameter("@psInd_Metodo_Insercion", ventana.IndMetodoInsercion),
                        new SqlParameter("@psCod_Usuario", ventana.CodUsuarioIngreso)
                    };

                    #endregion

                    #region KeyValuePair LIST

                    List<KeyValuePair<string, string>> itemConsulta = new List<KeyValuePair<string, string>>();
                    itemConsulta.Add(helper.CrearKeyValuePairItem("@piId_Ventana", ventana.IdVentana.ToString()));

                    #endregion

                    try
                    {

                        #region MODIFICAR

                        rowsAffected = transaccionDA.TransaccionModificar(conexion, conexionBitacora, "Ventanas_Actualiza", paramTransaccion, EnumTipoBitacora.ACTUALIZAR, itemConsulta, "Ventanas_Consulta_Detalle", _bitacora);
                        if (!rowsAffected.Equals(null))
                        {
                            elemento = new RespuestaEntidad();
                            elemento.ValorEstado = int.Parse(rowsAffected.Tables[0].Rows[0][0].ToString());
                            elemento.ValorError = int.Parse(rowsAffected.Tables[0].Rows[0][1].ToString());
                        }

                        return elemento;

                        #endregion

                    }
                    catch (Exception)
                    {
                        throw;
                    }
                }
        
                public RespuestaEntidad VentanasEliminar(String conexion, String conexionBitacora, VentanasEntidad ventana, BitacorasEntidad _bitacora)
                {
                    RespuestaEntidad elemento = null;
                    DataSet rowsAffected;

                    #region PARAMETROS

                    SqlParameter[] paramTransaccion = new SqlParameter[]
                    {
                        new SqlParameter("@piId_Ventana", ventana.IdVentana)
                    };

                    #endregion

                    #region KeyValuePair LIST

                    List<KeyValuePair<string, string>> itemConsulta = new List<KeyValuePair<string, string>>();
                    itemConsulta.Add(helper.CrearKeyValuePairItem("@piId_Ventana", ventana.IdVentana.ToString()));

                    #endregion

                    try
                    {

                        #region ELIMINAR

                        rowsAffected = transaccionDA.TransaccionEliminar(conexion, conexionBitacora, "Ventanas_Elimina", paramTransaccion, EnumTipoBitacora.ELIMINAR, itemConsulta, "Ventanas_Consulta_Detalle", _bitacora);
                        if (!rowsAffected.Equals(null))
                        {
                            elemento = new RespuestaEntidad();
                            elemento.ValorEstado = int.Parse(rowsAffected.Tables[0].Rows[0][0].ToString());
                            elemento.ValorError = int.Parse(rowsAffected.Tables[0].Rows[0][1].ToString());
                        }

                        return elemento;

                        #endregion

                    }
                    catch (Exception)
                    {
                        throw;
                    }
                }

                public List<VentanasEntidad> VentanasConsultar(String conexion, ParametrosConsultaEntidad entidad)
                {
                    List<VentanasEntidad> retorno = new List<VentanasEntidad>();
                    VentanasEntidad elemento;
                    DataSet rowsAffected;

                    #region PARAMETROS

                    SqlParameter[] paramTransaccion = new SqlParameter[]
                    {
                       new SqlParameter("@piIndice_Inicio_Fila", entidad.IndiceInicioFila),
                       new SqlParameter("@piMaximo_Filas", entidad.MaximoFilas),
                       new SqlParameter("@psValores_Filtro", entidad.ValorFiltro),
                       new SqlParameter("@psColumnas_Filtros", entidad.ColumnaFiltro),
                       new SqlParameter("@psColumna_Ordenar", entidad.ColumnaOrdenar)
                    };

                    #endregion

                    try
                    {

                        #region CONSULTAR

                            rowsAffected = transaccionDA.TransaccionConsulta(conexion, "Ventanas_Consulta", paramTransaccion);
                            if (!rowsAffected.Equals(null))
                            {
                                foreach (DataRow dr in rowsAffected.Tables[0].Rows)
                                {
                                    elemento = new VentanasEntidad();
                                    elemento.IdVentana = int.Parse(dr[0].ToString());
                                    elemento.CodVentana = int.Parse(dr[1].ToString());
                                    elemento.DesVentana = dr[2].ToString();

                                    retorno.Add(elemento);
                                }
                            }

                            return retorno;

                        #endregion

                    }
                    catch (Exception)
                    {
                        throw;
                    }
                }
        
                public VentanasEntidad VentanasConsultarDetalle(String conexion, String conexionBitacora, VentanasEntidad ventana, BitacorasEntidad _bitacora)
                {
                    VentanasEntidad retorno = new VentanasEntidad();
                    DataSet rowsAffected;

                    #region PARAMETROS

                    SqlParameter[] paramTransaccion = new SqlParameter[]
                    {
                        new SqlParameter("@piId_Ventana", ventana.IdVentana)
                    };

                    #endregion

                    #region KeyValuePair LIST

                    List<KeyValuePair<string, string>> itemConsulta = new List<KeyValuePair<string, string>>();
                    itemConsulta.Add(helper.CrearKeyValuePairItem("@piId_Ventana", ventana.IdVentana.ToString()));

                    #endregion

                    try
                    {

                        #region CONSULTAR DETALLE

                        rowsAffected = transaccionDA.TransaccionConsultaDetalle(conexion, conexionBitacora, "Ventanas_Consulta_Detalle", paramTransaccion, EnumTipoBitacora.CONSULTAR, itemConsulta, "Ventanas_Consulta_Detalle", _bitacora);
                        if (!rowsAffected.Equals(null))
                        {
                            retorno.IdVentana = int.Parse(rowsAffected.Tables[0].Rows[0][0].ToString());
                            retorno.CodVentana = int.Parse(rowsAffected.Tables[0].Rows[0][1].ToString());
                            retorno.DesVentana = rowsAffected.Tables[0].Rows[0][2].ToString();
                            retorno.IndMetodoInsercion = rowsAffected.Tables[0].Rows[0][3].ToString();
                            if (rowsAffected.Tables[0].Rows[0][4].ToString().Length > 0)
                                retorno.FechaIngreso = DateTime.Parse(rowsAffected.Tables[0].Rows[0][4].ToString());
                            else
                                retorno.FechaIngreso = null;
                            retorno.CodUsuarioIngreso = rowsAffected.Tables[0].Rows[0][5].ToString();
                            if (rowsAffected.Tables[0].Rows[0][6].ToString().Length > 0)
                                retorno.FechaUltimaModificacion = DateTime.Parse(rowsAffected.Tables[0].Rows[0][6].ToString());
                            else
                                retorno.FechaUltimaModificacion = null;
                            retorno.CodUsuarioUltimaModificacion = rowsAffected.Tables[0].Rows[0][7].ToString();
                            retorno.DesUsuarioIngreso = rowsAffected.Tables[0].Rows[0][8].ToString();
                            retorno.DesUsuarioUltimaModificacion = rowsAffected.Tables[0].Rows[0][9].ToString();
                        }

                        return retorno;

                        #endregion

                    }
                    catch (Exception)
                    {
                        throw;
                    }
                }
        
                public int VentanasTotalFilas(String conexion, ParametrosTotalFilasEntidad entidad)
                {

                    int value;

                    #region PARAMETROS

                    SqlParameter[] paramTransaccion = new SqlParameter[]
                    {
                        new SqlParameter("@psValor_Filtro", entidad.ValorFiltro),
                        new SqlParameter("@psColumna_Filtro", entidad.ColumnaFiltro)
                    };

                    #endregion

                    try
                    {

                        #region TOTAL FILAS

                            value = transaccionDA.TransaccionRows(conexion, "Ventanas_Total_Filas", paramTransaccion);

                            return value;

                        #endregion

                    }
                    catch (Exception)
                    {
                        throw;
                    }
                }

             #endregion 

            #region VERJAS
        
                public RespuestaEntidad VerjasInsertar(String conexion, String conexionBitacora, VerjasEntidad verja, BitacorasEntidad _bitacora)
                {
                    RespuestaEntidad elemento = null;
                    DataSet rowsAffected;

                    #region PARAMETROS

                    SqlParameter[] paramTransaccion = new SqlParameter[]
                    {
                        new SqlParameter("@piCod_Verja", verja.CodVerja),
                        new SqlParameter("@psDes_Verja", verja.DesVerja),
                        new SqlParameter("@psInd_Metodo_Insercion", verja.IndMetodoInsercion),
                        new SqlParameter("@psCod_Usuario", verja.CodUsuarioIngreso)
                    };

                    #endregion

                    try
                    {

                        #region INSERTAR

                        rowsAffected = transaccionDA.TransaccionInsertar(conexion, conexionBitacora, "Verjas_Inserta", paramTransaccion, EnumTipoBitacora.INSERTAR, _bitacora);
                        if (!rowsAffected.Equals(null))
                        {
                            elemento = new RespuestaEntidad();
                            elemento.ValorEstado = int.Parse(rowsAffected.Tables[0].Rows[0][0].ToString());
                            elemento.ValorError = int.Parse(rowsAffected.Tables[0].Rows[0][1].ToString());
                        }

                        return elemento;

                        #endregion

                    }
                    catch (Exception)
                    {
                        throw;
                    }
                }
        
                public RespuestaEntidad VerjasModificar(String conexion, String conexionBitacora, VerjasEntidad verja, BitacorasEntidad _bitacora)
                {
                    RespuestaEntidad elemento = null;
                    DataSet rowsAffected;

                    #region PARAMETROS

                    SqlParameter[] paramTransaccion = new SqlParameter[]
                    {
                        new SqlParameter("@piId_Verja", verja.IdVerja),
                        new SqlParameter("@piCod_Verja", verja.CodVerja),
                        new SqlParameter("@psDes_Verja", verja.DesVerja),
                        new SqlParameter("@psInd_Metodo_Insercion", verja.IndMetodoInsercion),
                        new SqlParameter("@psCod_Usuario", verja.CodUsuarioIngreso)
                    };

                    #endregion

                    #region KeyValuePair LIST

                    List<KeyValuePair<string, string>> itemConsulta = new List<KeyValuePair<string, string>>();
                    itemConsulta.Add(helper.CrearKeyValuePairItem("@piId_Verja", verja.IdVerja.ToString()));

                    #endregion

                    try
                    {

                        #region MODIFICAR

                        rowsAffected = transaccionDA.TransaccionModificar(conexion, conexionBitacora, "Verjas_Actualiza", paramTransaccion, EnumTipoBitacora.ACTUALIZAR, itemConsulta, "Verjas_Consulta_Detalle", _bitacora);
                        if (!rowsAffected.Equals(null))
                        {
                            elemento = new RespuestaEntidad();
                            elemento.ValorEstado = int.Parse(rowsAffected.Tables[0].Rows[0][0].ToString());
                            elemento.ValorError = int.Parse(rowsAffected.Tables[0].Rows[0][1].ToString());
                        }

                        return elemento;

                        #endregion

                    }
                    catch (Exception)
                    {
                        throw;
                    }
                }
        
                public RespuestaEntidad VerjasEliminar(String conexion, String conexionBitacora, VerjasEntidad verja, BitacorasEntidad _bitacora)
                {
                    RespuestaEntidad elemento = null;
                    DataSet rowsAffected;

                    #region PARAMETROS

                    SqlParameter[] paramTransaccion = new SqlParameter[]
                    {
                        new SqlParameter("@piId_Verja", verja.IdVerja)
                    };

                    #endregion

                    #region KeyValuePair LIST

                    List<KeyValuePair<string, string>> itemConsulta = new List<KeyValuePair<string, string>>();
                    itemConsulta.Add(helper.CrearKeyValuePairItem("@piId_Verja", verja.IdVerja.ToString()));

                    #endregion

                    try
                    {

                        #region ELIMINAR

                        rowsAffected = transaccionDA.TransaccionEliminar(conexion, conexionBitacora, "Verjas_Elimina", paramTransaccion, EnumTipoBitacora.ELIMINAR, itemConsulta, "Verjas_Consulta_Detalle", _bitacora);
                        if (!rowsAffected.Equals(null))
                        {
                            elemento = new RespuestaEntidad();
                            elemento.ValorEstado = int.Parse(rowsAffected.Tables[0].Rows[0][0].ToString());
                            elemento.ValorError = int.Parse(rowsAffected.Tables[0].Rows[0][1].ToString());
                        }

                        return elemento;

                        #endregion

                    }
                    catch (Exception)
                    {
                        throw;
                    }
                }

                public List<VerjasEntidad> VerjasConsultar(String conexion, ParametrosConsultaEntidad entidad)
                {
                    List<VerjasEntidad> retorno = new List<VerjasEntidad>();
                    VerjasEntidad elemento;
                    DataSet rowsAffected;

                    #region PARAMETROS

                    SqlParameter[] paramTransaccion = new SqlParameter[]
                    {
                       new SqlParameter("@piIndice_Inicio_Fila", entidad.IndiceInicioFila),
                       new SqlParameter("@piMaximo_Filas", entidad.MaximoFilas),
                       new SqlParameter("@psValores_Filtro", entidad.ValorFiltro),
                       new SqlParameter("@psColumnas_Filtros", entidad.ColumnaFiltro),
                       new SqlParameter("@psColumna_Ordenar", entidad.ColumnaOrdenar)
                    };

                    #endregion

                    try
                    {

                        #region CONSULTAR

                            rowsAffected = transaccionDA.TransaccionConsulta(conexion, "Verjas_Consulta", paramTransaccion);
                            if (!rowsAffected.Equals(null))
                            {
                                foreach (DataRow dr in rowsAffected.Tables[0].Rows)
                                {
                                    elemento = new VerjasEntidad();
                                    elemento.IdVerja = int.Parse(dr[0].ToString());
                                    elemento.CodVerja = int.Parse(dr[1].ToString());
                                    elemento.DesVerja = dr[2].ToString();

                                    retorno.Add(elemento);
                                }
                            }

                            return retorno;

                        #endregion

                    }
                    catch (Exception)
                    {
                        throw;
                    }
                }
        
                public VerjasEntidad VerjasConsultarDetalle(String conexion, String conexionBitacora, VerjasEntidad verja, BitacorasEntidad _bitacora)
                {
                    VerjasEntidad retorno = new VerjasEntidad();
                    DataSet rowsAffected;

                    #region PARAMETROS

                    SqlParameter[] paramTransaccion = new SqlParameter[]
                    {
                        new SqlParameter("@piId_Verja", verja.IdVerja)
                    };

                    #endregion

                    #region KeyValuePair LIST

                    List<KeyValuePair<string, string>> itemConsulta = new List<KeyValuePair<string, string>>();
                    itemConsulta.Add(helper.CrearKeyValuePairItem("@piId_Verja", verja.IdVerja.ToString()));

                    #endregion

                    try
                    {

                        #region CONSULTAR DETALLE

                        rowsAffected = transaccionDA.TransaccionConsultaDetalle(conexion, conexionBitacora, "Verjas_Consulta_Detalle", paramTransaccion, EnumTipoBitacora.CONSULTAR, itemConsulta, "Verjas_Consulta_Detalle", _bitacora);
                        if (!rowsAffected.Equals(null))
                        {
                            retorno.IdVerja = int.Parse(rowsAffected.Tables[0].Rows[0][0].ToString());
                            retorno.CodVerja = int.Parse(rowsAffected.Tables[0].Rows[0][1].ToString());
                            retorno.DesVerja = rowsAffected.Tables[0].Rows[0][2].ToString();
                            retorno.IndMetodoInsercion = rowsAffected.Tables[0].Rows[0][3].ToString();
                            if (rowsAffected.Tables[0].Rows[0][4].ToString().Length > 0)
                                retorno.FechaIngreso = DateTime.Parse(rowsAffected.Tables[0].Rows[0][4].ToString());
                            else
                                retorno.FechaIngreso = null;
                            retorno.CodUsuarioIngreso = rowsAffected.Tables[0].Rows[0][5].ToString();
                            if (rowsAffected.Tables[0].Rows[0][6].ToString().Length > 0)
                                retorno.FechaUltimaModificacion = DateTime.Parse(rowsAffected.Tables[0].Rows[0][6].ToString());
                            else
                                retorno.FechaUltimaModificacion = null;
                            retorno.CodUsuarioUltimaModificacion = rowsAffected.Tables[0].Rows[0][7].ToString();
                            retorno.DesUsuarioIngreso = rowsAffected.Tables[0].Rows[0][8].ToString();
                            retorno.DesUsuarioUltimaModificacion = rowsAffected.Tables[0].Rows[0][9].ToString();
                        }

                        return retorno;


                        #endregion

                    }
                    catch (Exception)
                    {
                        throw;
                    }
                }
        
                public int VerjasTotalFilas(String conexion, ParametrosTotalFilasEntidad entidad)
                {

                    int value;

                    #region PARAMETROS

                    SqlParameter[] paramTransaccion = new SqlParameter[]
                    {
                        new SqlParameter("@psValor_Filtro", entidad.ValorFiltro),
                        new SqlParameter("@psColumna_Filtro", entidad.ColumnaFiltro)
                    };

                    #endregion

                    try
                    {

                        #region TOTAL FILAS

                            value = transaccionDA.TransaccionRows(conexion, "Verjas_Total_Filas", paramTransaccion);

                            return value;

                        #endregion

                    }
                    catch (Exception)
                    {
                        throw;
                    }
                }

            #endregion 

            #region VIAS ACCESOS
        
                public RespuestaEntidad ViasAccesosInsertar(String conexion, String conexionBitacora, ViasAccesoEntidad viaAcceso, BitacorasEntidad _bitacora)
                {
                    RespuestaEntidad elemento = null;
                    DataSet rowsAffected;

                    #region PARAMETROS

                    SqlParameter[] paramTransaccion = new SqlParameter[]
                    {
                        new SqlParameter("@piCod_Via_Acceso", viaAcceso.CodViaAcceso),
                        new SqlParameter("@psDes_Via_Acceso", viaAcceso.DesViaAcceso),
                        new SqlParameter("@psInd_Metodo_Insercion", viaAcceso.IndMetodoInsercion),
                        new SqlParameter("@psCod_Usuario", viaAcceso.CodUsuarioIngreso)
                    };

                    #endregion

                    try
                    {

                        #region INSERTAR

                        rowsAffected = transaccionDA.TransaccionInsertar(conexion, conexionBitacora, "Vias_Accesos_Inserta", paramTransaccion, EnumTipoBitacora.INSERTAR, _bitacora);
                        if (!rowsAffected.Equals(null))
                        {
                            elemento = new RespuestaEntidad();
                            elemento.ValorEstado = int.Parse(rowsAffected.Tables[0].Rows[0][0].ToString());
                            elemento.ValorError = int.Parse(rowsAffected.Tables[0].Rows[0][1].ToString());
                        }

                        return elemento;

                        #endregion

                    }
                    catch (Exception)
                    {
                        throw;
                    }
                }
        
                public RespuestaEntidad ViasAccesosModificar(String conexion, String conexionBitacora, ViasAccesoEntidad viaAcceso, BitacorasEntidad _bitacora)
                {
                    RespuestaEntidad elemento = null;
                    DataSet rowsAffected;

                    #region PARAMETROS

                    SqlParameter[] paramTransaccion = new SqlParameter[]
                    {
                        new SqlParameter("@piId_Via_Acceso", viaAcceso.IdViaAcceso),
                        new SqlParameter("@piCod_Via_Acceso", viaAcceso.CodViaAcceso),
                        new SqlParameter("@psDes_Via_Acceso", viaAcceso.DesViaAcceso),
                        new SqlParameter("@psInd_Metodo_Insercion", viaAcceso.IndMetodoInsercion),
                        new SqlParameter("@psCod_Usuario", viaAcceso.CodUsuarioIngreso)
                    };

                    #endregion

                    #region KeyValuePair LIST

                    List<KeyValuePair<string, string>> itemConsulta = new List<KeyValuePair<string, string>>();
                    itemConsulta.Add(helper.CrearKeyValuePairItem("@piId_Via_Acceso", viaAcceso.IdViaAcceso.ToString()));

                    #endregion

                    try
                    {

                        #region MODIFICAR

                        rowsAffected = transaccionDA.TransaccionModificar(conexion, conexionBitacora, "Vias_Accesos_Actualiza", paramTransaccion, EnumTipoBitacora.ACTUALIZAR, itemConsulta, "Vias_Accesos_Consulta_Detalle", _bitacora);
                        if (!rowsAffected.Equals(null))
                        {
                            elemento = new RespuestaEntidad();
                            elemento.ValorEstado = int.Parse(rowsAffected.Tables[0].Rows[0][0].ToString());
                            elemento.ValorError = int.Parse(rowsAffected.Tables[0].Rows[0][1].ToString());
                        }

                        return elemento;

                        #endregion

                    }
                    catch (Exception)
                    {
                        throw;
                    }
                }
        
                public RespuestaEntidad ViasAccesosEliminar(String conexion, String conexionBitacora, ViasAccesoEntidad viaAcceso, BitacorasEntidad _bitacora)
                {
                    RespuestaEntidad elemento = null;
                    DataSet rowsAffected;

                    #region PARAMETROS

                    SqlParameter[] paramTransaccion = new SqlParameter[]
                    {
                        new SqlParameter("@piId_Via_Acceso", viaAcceso.IdViaAcceso)
                    };

                    #endregion

                    #region KeyValuePair LIST

                    List<KeyValuePair<string, string>> itemConsulta = new List<KeyValuePair<string, string>>();
                    itemConsulta.Add(helper.CrearKeyValuePairItem("@piId_Via_Acceso", viaAcceso.IdViaAcceso.ToString()));

                    #endregion

                    try
                    {

                        #region ELIMINAR

                        rowsAffected = transaccionDA.TransaccionEliminar(conexion, conexionBitacora, "Vias_Accesos_Elimina", paramTransaccion, EnumTipoBitacora.ELIMINAR, itemConsulta, "Vias_Accesos_Consulta_Detalle", _bitacora);
                        if (!rowsAffected.Equals(null))
                        {
                            elemento = new RespuestaEntidad();
                            elemento.ValorEstado = int.Parse(rowsAffected.Tables[0].Rows[0][0].ToString());
                            elemento.ValorError = int.Parse(rowsAffected.Tables[0].Rows[0][1].ToString());
                        }

                        return elemento;

                        #endregion

                    }
                    catch (Exception)
                    {
                        throw;
                    }
                }

                public List<ViasAccesoEntidad> ViasAccesosConsultar(String conexion, ParametrosConsultaEntidad entidad)
                {
                    List<ViasAccesoEntidad> retorno = new List<ViasAccesoEntidad>();
                    ViasAccesoEntidad elemento;
                    DataSet rowsAffected;

                    #region PARAMETROS

                    SqlParameter[] paramTransaccion = new SqlParameter[]
                    {
                       new SqlParameter("@piIndice_Inicio_Fila", entidad.IndiceInicioFila),
                       new SqlParameter("@piMaximo_Filas", entidad.MaximoFilas),
                       new SqlParameter("@psValores_Filtro", entidad.ValorFiltro),
                       new SqlParameter("@psColumnas_Filtros", entidad.ColumnaFiltro),
                       new SqlParameter("@psColumna_Ordenar", entidad.ColumnaOrdenar)
                    };

                    #endregion

                    try
                    {

                        #region CONSULTAR

                            rowsAffected = transaccionDA.TransaccionConsulta(conexion, "Vias_Accesos_Consulta", paramTransaccion);
                            if (!rowsAffected.Equals(null))
                            {
                                foreach (DataRow dr in rowsAffected.Tables[0].Rows)
                                {
                                    elemento = new ViasAccesoEntidad();
                                    elemento.IdViaAcceso = int.Parse(dr[0].ToString());
                                    elemento.CodViaAcceso = int.Parse(dr[1].ToString());
                                    elemento.DesViaAcceso = dr[2].ToString();

                                    retorno.Add(elemento);
                                }
                            }

                            return retorno;

                        #endregion

                    }
                    catch (Exception)
                    {
                        throw;
                    }
                }
        
                public ViasAccesoEntidad ViasAccesosConsultarDetalle(String conexion, String conexionBitacora, ViasAccesoEntidad viaAcceso, BitacorasEntidad _bitacora)
                {
                    ViasAccesoEntidad retorno = new ViasAccesoEntidad();
                    DataSet rowsAffected;

                    #region PARAMETROS

                    SqlParameter[] paramTransaccion = new SqlParameter[]
                    {
                        new SqlParameter("@piId_Via_Acceso", viaAcceso.IdViaAcceso)
                    };

                    #endregion

                    #region KeyValuePair LIST

                    List<KeyValuePair<string, string>> itemConsulta = new List<KeyValuePair<string, string>>();
                    itemConsulta.Add(helper.CrearKeyValuePairItem("@piId_Via_Acceso", viaAcceso.IdViaAcceso.ToString()));

                    #endregion

                    try
                    {

                        #region CONSULTAR DETALLE

                        rowsAffected = transaccionDA.TransaccionConsultaDetalle(conexion, conexionBitacora, "Vias_Accesos_Consulta_Detalle", paramTransaccion, EnumTipoBitacora.CONSULTAR, itemConsulta, "Vias_Accesos_Consulta_Detalle", _bitacora);
                        if (!rowsAffected.Equals(null))
                        {
                            retorno.IdViaAcceso = int.Parse(rowsAffected.Tables[0].Rows[0][0].ToString());
                            retorno.CodViaAcceso = int.Parse(rowsAffected.Tables[0].Rows[0][1].ToString());
                            retorno.DesViaAcceso = rowsAffected.Tables[0].Rows[0][2].ToString();
                            retorno.IndMetodoInsercion = rowsAffected.Tables[0].Rows[0][3].ToString();
                            if (rowsAffected.Tables[0].Rows[0][4].ToString().Length > 0)
                                retorno.FechaIngreso = DateTime.Parse(rowsAffected.Tables[0].Rows[0][4].ToString());
                            else
                                retorno.FechaIngreso = null;
                            retorno.CodUsuarioIngreso = rowsAffected.Tables[0].Rows[0][5].ToString();
                            if (rowsAffected.Tables[0].Rows[0][6].ToString().Length > 0)
                                retorno.FechaUltimaModificacion = DateTime.Parse(rowsAffected.Tables[0].Rows[0][6].ToString());
                            else
                                retorno.FechaUltimaModificacion = null;
                            retorno.CodUsuarioUltimaModificacion = rowsAffected.Tables[0].Rows[0][7].ToString();
                            retorno.DesUsuarioIngreso = rowsAffected.Tables[0].Rows[0][8].ToString();
                            retorno.DesUsuarioUltimaModificacion = rowsAffected.Tables[0].Rows[0][9].ToString();
                        }

                        return retorno;

                        #endregion

                    }
                    catch (Exception)
                    {
                        throw;
                    }
                }
        
                public int ViasAccesosTotalFilas(String conexion, ParametrosTotalFilasEntidad entidad)
                {

                    int value;

                    #region PARAMETROS

                    SqlParameter[] paramTransaccion = new SqlParameter[]
                    {
                        new SqlParameter("@psValor_Filtro", entidad.ValorFiltro),
                        new SqlParameter("@psColumna_Filtro", entidad.ColumnaFiltro)
                    };

                    #endregion

                    try
                    {

                        #region TOTAL FILAS

                            value = transaccionDA.TransaccionRows(conexion, "Vias_Accesos_Total_Filas", paramTransaccion);

                            return value;

                        #endregion

                    }
                    catch (Exception)
                    {
                        throw;
                    }
                }

            #endregion 

            #region VOLTAJES INSTALACIONES ELECTRICAS
        
                public RespuestaEntidad VoltajesInstalacionesElectricasInsertar(String conexion, String conexionBitacora, VoltajesInstalacionesElectricasEntidad voltaje, BitacorasEntidad _bitacora)
                {
                    RespuestaEntidad elemento = null;
                    DataSet rowsAffected;

                    #region PARAMETROS

                    SqlParameter[] paramTransaccion = new SqlParameter[]
                    {
                        new SqlParameter("@piCod_Voltaje_Instalacion_Electrica", voltaje.CodVoltajeInstalacionElectrica),
                        new SqlParameter("@psDes_Voltaje_Instalacion_Electrica", voltaje.DesVoltajeInstalacionElectrica),
                        new SqlParameter("@psInd_Metodo_Insercion", voltaje.IndMetodoInsercion),
                        new SqlParameter("@psCod_Usuario", voltaje.CodUsuarioIngreso)
                    };

                    #endregion

                    try
                    {

                        #region INSERTAR

                        rowsAffected = transaccionDA.TransaccionInsertar(conexion, conexionBitacora, "Voltajes_Instalaciones_Electricas_Inserta", paramTransaccion, EnumTipoBitacora.INSERTAR, _bitacora);
                        if (!rowsAffected.Equals(null))
                        {
                            elemento = new RespuestaEntidad();
                            elemento.ValorEstado = int.Parse(rowsAffected.Tables[0].Rows[0][0].ToString());
                            elemento.ValorError = int.Parse(rowsAffected.Tables[0].Rows[0][1].ToString());
                        }

                        return elemento;

                        #endregion

                    }
                    catch (Exception)
                    {
                        throw;
                    }
                }
        
                public RespuestaEntidad VoltajesInstalacionesElectricasModificar(String conexion, String conexionBitacora, VoltajesInstalacionesElectricasEntidad voltaje, BitacorasEntidad _bitacora)
                {
                    RespuestaEntidad elemento = null;
                    DataSet rowsAffected;

                    #region PARAMETROS

                    SqlParameter[] paramTransaccion = new SqlParameter[]
                    {
                        new SqlParameter("@piId_Voltaje_Instalacion_Electrica", voltaje.IdVoltajeInstalacionElectrica),
                        new SqlParameter("@piCod_Voltaje_Instalacion_Electrica", voltaje.CodVoltajeInstalacionElectrica),
                        new SqlParameter("@psDes_Voltaje_Instalacion_Electrica", voltaje.DesVoltajeInstalacionElectrica),
                        new SqlParameter("@psInd_Metodo_Insercion", voltaje.IndMetodoInsercion),
                        new SqlParameter("@psCod_Usuario", voltaje.CodUsuarioIngreso)
                    };

                    #endregion

                    #region KeyValuePair LIST

                    List<KeyValuePair<string, string>> itemConsulta = new List<KeyValuePair<string, string>>();
                    itemConsulta.Add(helper.CrearKeyValuePairItem("@piId_Voltaje_Instalacion_Electrica", voltaje.IdVoltajeInstalacionElectrica.ToString()));

                    #endregion

                    try
                    {

                        #region MODIFICAR

                        rowsAffected = transaccionDA.TransaccionModificar(conexion, conexionBitacora, "Voltajes_Instalaciones_Electricas_Actualiza", paramTransaccion, EnumTipoBitacora.ACTUALIZAR, itemConsulta, "Voltajes_Instalaciones_Electricas_Consulta_Detalle", _bitacora);
                        if (!rowsAffected.Equals(null))
                        {
                            elemento = new RespuestaEntidad();
                            elemento.ValorEstado = int.Parse(rowsAffected.Tables[0].Rows[0][0].ToString());
                            elemento.ValorError = int.Parse(rowsAffected.Tables[0].Rows[0][1].ToString());
                        }

                        return elemento;

                        #endregion

                    }
                    catch (Exception)
                    {
                        throw;
                    }
                }
        
                public RespuestaEntidad VoltajesInstalacionesElectricasEliminar(String conexion, String conexionBitacora, VoltajesInstalacionesElectricasEntidad voltaje, BitacorasEntidad _bitacora)
                {

                    RespuestaEntidad elemento = null;
                    DataSet rowsAffected;

                    #region PARAMETROS

                    SqlParameter[] paramTransaccion = new SqlParameter[]
                    {
                        new SqlParameter("@piId_Voltaje_Instalacion_Electrica", voltaje.IdVoltajeInstalacionElectrica)
                    };

                    #endregion

                    #region KeyValuePair LIST

                    List<KeyValuePair<string, string>> itemConsulta = new List<KeyValuePair<string, string>>();
                    itemConsulta.Add(helper.CrearKeyValuePairItem("@piId_Voltaje_Instalacion_Electrica", voltaje.IdVoltajeInstalacionElectrica.ToString()));

                    #endregion

                    try
                    {

                        #region ELIMINAR

                            rowsAffected = transaccionDA.TransaccionEliminar(conexion, conexionBitacora, "Voltajes_Instalaciones_Electricas_Elimina", paramTransaccion, EnumTipoBitacora.ELIMINAR, itemConsulta, "Voltajes_Instalaciones_Electricas_Consulta_Detalle", _bitacora);
                            if (!rowsAffected.Equals(null))
                            {
                                elemento = new RespuestaEntidad();
                                elemento.ValorEstado = int.Parse(rowsAffected.Tables[0].Rows[0][0].ToString());
                                elemento.ValorError = int.Parse(rowsAffected.Tables[0].Rows[0][1].ToString());
                            }

                            return elemento;

                        #endregion

                    }
                    catch (Exception)
                    {
                        throw;
                    }
                }

                public List<VoltajesInstalacionesElectricasEntidad> VoltajesInstalacionesElectricasConsultar(String conexion, ParametrosConsultaEntidad entidad)
                {
                    List<VoltajesInstalacionesElectricasEntidad> retorno = new List<VoltajesInstalacionesElectricasEntidad>();
                    VoltajesInstalacionesElectricasEntidad elemento;
                    DataSet rowsAffected;

                    #region PARAMETROS

                    SqlParameter[] paramTransaccion = new SqlParameter[]
                    {
                       new SqlParameter("@piIndice_Inicio_Fila", entidad.IndiceInicioFila),
                       new SqlParameter("@piMaximo_Filas", entidad.MaximoFilas),
                       new SqlParameter("@psValores_Filtro", entidad.ValorFiltro),
                       new SqlParameter("@psColumnas_Filtros", entidad.ColumnaFiltro),
                       new SqlParameter("@psColumna_Ordenar", entidad.ColumnaOrdenar)
                    };

                    #endregion

                    try
                    {

                        #region CONSULTAR

                            rowsAffected = transaccionDA.TransaccionConsulta(conexion, "Voltajes_Instalaciones_Electricas_Consulta", paramTransaccion);
                            if (!rowsAffected.Equals(null))
                            {
                                foreach (DataRow dr in rowsAffected.Tables[0].Rows)
                                {
                                    elemento = new VoltajesInstalacionesElectricasEntidad();
                                    elemento.IdVoltajeInstalacionElectrica = int.Parse(dr[0].ToString());
                                    elemento.CodVoltajeInstalacionElectrica = int.Parse(dr[1].ToString());
                                    elemento.DesVoltajeInstalacionElectrica = dr[2].ToString();

                                    retorno.Add(elemento);
                                }
                            }

                            return retorno;

                        #endregion

                    }
                    catch (Exception)
                    {
                        throw;
                    }
                }
        
                public VoltajesInstalacionesElectricasEntidad VoltajesInstalacionesElectricasConsultarDetalle(String conexion, String conexionBitacora, VoltajesInstalacionesElectricasEntidad voltaje, BitacorasEntidad _bitacora)
                {
                    VoltajesInstalacionesElectricasEntidad retorno = new VoltajesInstalacionesElectricasEntidad();
                    DataSet rowsAffected;

                    #region PARAMETROS

                    SqlParameter[] paramTransaccion = new SqlParameter[]
                    {
                        new SqlParameter("@piId_Voltaje_Instalacion_Electrica", voltaje.IdVoltajeInstalacionElectrica)
                    };

                    #endregion

                    #region KeyValuePair LIST

                    List<KeyValuePair<string, string>> itemConsulta = new List<KeyValuePair<string, string>>();
                    itemConsulta.Add(helper.CrearKeyValuePairItem("@piId_Voltaje_Instalacion_Electrica", voltaje.IdVoltajeInstalacionElectrica.ToString()));

                    #endregion

                    try
                    {

                        #region CONSULTAR DETALLE

                        rowsAffected = transaccionDA.TransaccionConsultaDetalle(conexion, conexionBitacora, "Voltajes_Instalaciones_Electricas_Consulta_Detalle", paramTransaccion, EnumTipoBitacora.CONSULTAR, itemConsulta, "Voltajes_Instalaciones_Electricas_Consulta_Detalle", _bitacora);
                        if (!rowsAffected.Equals(null))
                        {
                            retorno.IdVoltajeInstalacionElectrica = int.Parse(rowsAffected.Tables[0].Rows[0][0].ToString());
                            retorno.CodVoltajeInstalacionElectrica = int.Parse(rowsAffected.Tables[0].Rows[0][1].ToString());
                            retorno.DesVoltajeInstalacionElectrica = rowsAffected.Tables[0].Rows[0][2].ToString();
                            retorno.IndMetodoInsercion = rowsAffected.Tables[0].Rows[0][3].ToString();
                            if (rowsAffected.Tables[0].Rows[0][4].ToString().Length > 0)
                                retorno.FechaIngreso = DateTime.Parse(rowsAffected.Tables[0].Rows[0][4].ToString());
                            else
                                retorno.FechaIngreso = null;
                            retorno.CodUsuarioIngreso = rowsAffected.Tables[0].Rows[0][5].ToString();
                            if (rowsAffected.Tables[0].Rows[0][6].ToString().Length > 0)
                                retorno.FechaUltimaModificacion = DateTime.Parse(rowsAffected.Tables[0].Rows[0][6].ToString());
                            else
                                retorno.FechaUltimaModificacion = null;
                            retorno.CodUsuarioUltimaModificacion = rowsAffected.Tables[0].Rows[0][7].ToString();
                            retorno.DesUsuarioIngreso = rowsAffected.Tables[0].Rows[0][8].ToString();
                            retorno.DesUsuarioUltimaModificacion = rowsAffected.Tables[0].Rows[0][9].ToString();

                        }

                        return retorno;

                        #endregion

                    }
                    catch (Exception)
                    {
                        throw;
                    }
                }
        
                public int VoltajesInstalacionesElectricasTotalFilas(String conexion, ParametrosTotalFilasEntidad entidad)
                {

                    int value;

                    #region PARAMETROS

                    SqlParameter[] paramTransaccion = new SqlParameter[]
                    {
                        new SqlParameter("@psValor_Filtro", entidad.ValorFiltro),
                        new SqlParameter("@psColumna_Filtro", entidad.ColumnaFiltro)
                    };

                    #endregion

                    try
                    {

                        #region TOTAL FILAS

                            value = transaccionDA.TransaccionRows(conexion, "Voltajes_Instalaciones_Electricas_Total_Filas", paramTransaccion);
                        
                            return value;

                        #endregion

                    }
                    catch (Exception)
                    {
                        throw;
                    }
                }

            #endregion 
        
            //REQUERIMIENTO: 1-24105296
            #region ZONAS TASADORES
        
                public RespuestaEntidad ZonasTasadoresInsertar(String conexion, String conexionBitacora, ZonasTasadoresEntidad ZonaTasador, BitacorasEntidad _bitacora)
                {
                    RespuestaEntidad elemento = null;
                    DataSet rowsAffected;

                    #region PARAMETROS

                    SqlParameter[] paramTransaccion = new SqlParameter[]
                    {
                        new SqlParameter("@psCod_Zona_Tasador", ZonaTasador.CodZonaTasador),
                        new SqlParameter("@psDes_Zona_Tasador", ZonaTasador.DesZonaTasador),
                        new SqlParameter("@psCod_Tipo_Zona_Tasador", ZonaTasador.CodTipoZonaTasador),
                        new SqlParameter("@psInd_Metodo_Insercion", ZonaTasador.IndMetodoInsercion),
                        new SqlParameter("@psCod_Usuario", ZonaTasador.CodUsuarioIngreso)
                    };

                    #endregion

                    try
                    {

                        #region INSERTAR

                        rowsAffected = transaccionDA.TransaccionInsertar(conexion, conexionBitacora, "Zonas_Tasadores_Inserta", paramTransaccion, EnumTipoBitacora.INSERTAR, _bitacora);
                        if (!rowsAffected.Equals(null))
                        {
                            elemento = new RespuestaEntidad();
                            elemento.ValorEstado = int.Parse(rowsAffected.Tables[0].Rows[0][0].ToString());
                            elemento.ValorError = int.Parse(rowsAffected.Tables[0].Rows[0][1].ToString());
                        }

                        return elemento;

                        #endregion

                    }
                    catch (Exception)
                    {
                        throw;
                    }
                }
        
                public RespuestaEntidad ZonasTasadoresModificar(String conexion, String conexionBitacora, ZonasTasadoresEntidad ZonaTasador, BitacorasEntidad _bitacora)
                {
                    RespuestaEntidad elemento = null;
                    DataSet rowsAffected;

                    #region PARAMETROS

                    SqlParameter[] paramTransaccion = new SqlParameter[]
                    {
                        new SqlParameter("@piId_Zona_Tasador", ZonaTasador.IdZonaTasador),
                        new SqlParameter("@psCod_Zona_Tasador", ZonaTasador.CodZonaTasador),
                        new SqlParameter("@psDes_Zona_Tasador", ZonaTasador.DesZonaTasador),
                        new SqlParameter("@psCod_Tipo_Zona_Tasador", ZonaTasador.CodTipoZonaTasador),
                        new SqlParameter("@psInd_Metodo_Insercion", ZonaTasador.IndMetodoInsercion),
                        new SqlParameter("@psCod_Usuario", ZonaTasador.CodUsuarioIngreso)
                    };

                    #endregion

                    #region KeyValuePair LIST

                    List<KeyValuePair<string, string>> itemConsulta = new List<KeyValuePair<string, string>>();
                    itemConsulta.Add(helper.CrearKeyValuePairItem("@piId_Zona_Tasador", ZonaTasador.IdZonaTasador.ToString()));
                    itemConsulta.Add(helper.CrearKeyValuePairItem("@psCod_Tipo_Zona", ZonaTasador.CodTipoZonaTasador.ToString()));

                    #endregion

                    try
                    {

                        #region MODIFICAR

                        rowsAffected = transaccionDA.TransaccionModificar(conexion, conexionBitacora, "Zonas_Tasadores_Actualiza", paramTransaccion, EnumTipoBitacora.ACTUALIZAR, itemConsulta, "Zonas_Tasadores_Consulta_Detalle", _bitacora);
                        if (!rowsAffected.Equals(null))
                        {
                            elemento = new RespuestaEntidad();
                            elemento.ValorEstado = int.Parse(rowsAffected.Tables[0].Rows[0][0].ToString());
                            elemento.ValorError = int.Parse(rowsAffected.Tables[0].Rows[0][1].ToString());
                        }

                        return elemento;

                        #endregion

                    }
                    catch (Exception)
                    {
                        throw;
                    }
                }
        
                public RespuestaEntidad ZonasTasadoresEliminar(String conexion, String conexionBitacora, ZonasTasadoresEntidad ZonaTasador, BitacorasEntidad _bitacora)
                {
                    RespuestaEntidad elemento = null;
                    DataSet rowsAffected;

                    #region PARAMETROS

                    SqlParameter[] paramTransaccion = new SqlParameter[]
                    {
                        new SqlParameter("@piId_Zona_Tasador", ZonaTasador.IdZonaTasador)
                    };

                    #endregion

                    #region KeyValuePair LIST

                    List<KeyValuePair<string, string>> itemConsulta = new List<KeyValuePair<string, string>>();
                    itemConsulta.Add(helper.CrearKeyValuePairItem("@piId_Zona_Tasador", ZonaTasador.IdZonaTasador.ToString()));
                    itemConsulta.Add(helper.CrearKeyValuePairItem("@psCod_Tipo_Zona", ZonaTasador.CodTipoZonaTasador.ToString()));

                    #endregion

                    try
                    {

                        #region ELIMINAR

                        rowsAffected = transaccionDA.TransaccionEliminar(conexion, conexionBitacora, "Zonas_Tasadores_Elimina", paramTransaccion, EnumTipoBitacora.ELIMINAR, itemConsulta, "Zonas_Tasadores_Consulta_Detalle", _bitacora);
                        if (!rowsAffected.Equals(null))
                        {
                            elemento = new RespuestaEntidad();
                            elemento.ValorEstado = int.Parse(rowsAffected.Tables[0].Rows[0][0].ToString());
                            elemento.ValorError = int.Parse(rowsAffected.Tables[0].Rows[0][1].ToString());
                        }

                        return elemento;

                        #endregion

                    }
                    catch (Exception)
                    {
                        throw;
                    }
                }

                public List<ZonasTasadoresEntidad> ZonasTasadoresConsultar(String conexion, ParametrosConsultaEntidad entidad, string _zona)
                {
                    List<ZonasTasadoresEntidad> retorno = new List<ZonasTasadoresEntidad>();
                    ZonasTasadoresEntidad elemento;
                    DataSet rowsAffected;

                    #region PARAMETROS

                    SqlParameter[] paramTransaccion = new SqlParameter[]
                    {
                       new SqlParameter("@piIndice_Inicio_Fila", entidad.IndiceInicioFila),
                       new SqlParameter("@piMaximo_Filas", entidad.MaximoFilas),
                       new SqlParameter("@psValores_Filtro", entidad.ValorFiltro),
                       new SqlParameter("@psColumnas_Filtros", entidad.ColumnaFiltro),
                       new SqlParameter("@psColumna_Ordenar", entidad.ColumnaOrdenar),
                       new SqlParameter("@psCod_Tipo_Zona", _zona),
                    };

                    #endregion

                    try
                    {

                        #region CONSULTAR

                        rowsAffected = transaccionDA.TransaccionConsulta(conexion, "Zonas_Tasadores_Consulta", paramTransaccion);
                        if (!rowsAffected.Equals(null))
                        {
                            foreach (DataRow dr in rowsAffected.Tables[0].Rows)
                            {
                                elemento = new ZonasTasadoresEntidad();
                                elemento.IdZonaTasador = int.Parse(dr[0].ToString());
                                elemento.CodZonaTasador = dr[1].ToString();
                                elemento.DesZonaTasador = dr[2].ToString();
                                elemento.CodTipoZonaTasador = dr[3].ToString();

                                retorno.Add(elemento);
                            }
                        }

                        return retorno;

                        #endregion

                    }
                    catch (Exception)
                    {
                        throw;
                    }
                }
        
                public ZonasTasadoresEntidad ZonasTasadoresConsultarDetalle(String conexion, String conexionBitacora, ZonasTasadoresEntidad ZonaTasador, BitacorasEntidad _bitacora)
                {
                    ZonasTasadoresEntidad retorno = new ZonasTasadoresEntidad();
                    DataSet rowsAffected;

                    #region PARAMETROS

                    SqlParameter[] paramTransaccion = new SqlParameter[]
                    {
                        new SqlParameter("piId_Zona_Tasador", ZonaTasador.IdZonaTasador),
                        new SqlParameter("@psCod_Tipo_Zona", ZonaTasador.CodTipoZonaTasador)
                    };

                    #endregion

                    #region KeyValuePair LIST

                    List<KeyValuePair<string, string>> itemConsulta = new List<KeyValuePair<string, string>>();
                    itemConsulta.Add(helper.CrearKeyValuePairItem("@piId_Zona_Tasador", ZonaTasador.IdZonaTasador.ToString()));
                    itemConsulta.Add(helper.CrearKeyValuePairItem("@psCod_Tipo_Zona", ZonaTasador.CodTipoZonaTasador.ToString()));

                    #endregion

                    try
                    {

                        #region CONSULTAR DETALLE

                        rowsAffected = transaccionDA.TransaccionConsultaDetalle(conexion, conexionBitacora, "Zonas_Tasadores_Consulta_Detalle", paramTransaccion, EnumTipoBitacora.CONSULTAR, itemConsulta, "Zonas_Tasadores_Consulta_Detalle", _bitacora);
                        if (!rowsAffected.Equals(null))
                        {
                            retorno.IdZonaTasador = int.Parse(rowsAffected.Tables[0].Rows[0][0].ToString());
                            retorno.CodZonaTasador = rowsAffected.Tables[0].Rows[0][1].ToString();
                            retorno.DesZonaTasador = rowsAffected.Tables[0].Rows[0][2].ToString();
                            retorno.CodTipoZonaTasador = rowsAffected.Tables[0].Rows[0][3].ToString();

                            retorno.IndMetodoInsercion = rowsAffected.Tables[0].Rows[0][4].ToString();
                            if (rowsAffected.Tables[0].Rows[0][5].ToString().Length > 0)
                                retorno.FechaIngreso = DateTime.Parse(rowsAffected.Tables[0].Rows[0][5].ToString());
                            else
                                retorno.FechaIngreso = null;
                            retorno.CodUsuarioIngreso = rowsAffected.Tables[0].Rows[0][6].ToString();
                            if (rowsAffected.Tables[0].Rows[0][7].ToString().Length > 0)
                                retorno.FechaUltimaModificacion = DateTime.Parse(rowsAffected.Tables[0].Rows[0][7].ToString());
                            else
                                retorno.FechaUltimaModificacion = null;
                            retorno.CodUsuarioUltimaModificacion = rowsAffected.Tables[0].Rows[0][8].ToString();
                            retorno.DesUsuarioIngreso = rowsAffected.Tables[0].Rows[0][9].ToString();
                            retorno.DesUsuarioUltimaModificacion = rowsAffected.Tables[0].Rows[0][10].ToString();
                        }

                        return retorno;

                        #endregion

                    }
                    catch (Exception)
                    {
                        throw;
                    }
                }
        
                public int ZonasTasadoresTotalFilas(String conexion, ParametrosTotalFilasEntidad entidad, string _zona)
                {

                    int value;

                    #region PARAMETROS

                    SqlParameter[] paramTransaccion = new SqlParameter[]
                    {
                        new SqlParameter("@psValor_Filtro", entidad.ValorFiltro),
                        new SqlParameter("@psColumna_Filtro", entidad.ColumnaFiltro),
                        new SqlParameter("@psCod_Tipo_Zona", _zona),
                    };

                    #endregion

                    try
                    {

                        #region TOTAL FILAS

                        value = transaccionDA.TransaccionRows(conexion, "Zonas_Tasadores_Total_Filas", paramTransaccion);

                        return value;

                        #endregion

                    }
                    catch (Exception)
                    {
                        throw;
                    }
                }
                //REQUERIMIENTO: 1-24493227
                public List<ListaEntidad> ZonasTasadoresLista(String conexion, String filtro)
                {
                    List<ListaEntidad> retorno = new List<ListaEntidad>();
                    ListaEntidad elemento;
                    DataSet rowsAffected;

                    #region PARAMETROS

                    SqlParameter[] paramTransaccion = new SqlParameter[]
                    {
                        new SqlParameter("@psFiltro", filtro)
                    };

                    #endregion

                    try
                    {

                        #region LISTA

                        rowsAffected = transaccionDA.TransaccionConsulta(conexion, "Zonas_Tasadores_Lista", paramTransaccion);
                        if (!rowsAffected.Equals(null))
                        {
                            foreach (DataRow dr in rowsAffected.Tables[0].Rows)
                            {
                                elemento = new ListaEntidad();
                                elemento.Valor = dr[0].ToString();
                                elemento.Texto = dr[1].ToString();

                                retorno.Add(elemento);
                            }
                        }

                        return retorno;

                        #endregion


                    }
                    catch (Exception)
                    {
                        throw;
                    }
                }
        
            #endregion 

            //REQUERIMIENTO: 1-24493227
            #region VALORES GENERICOS

                public List<ListaEntidad> DefaultSiNoLista(String conexion, String filtro)
                {
                    List<ListaEntidad> retorno = new List<ListaEntidad>();
                    ListaEntidad elemento;
                    DataSet rowsAffected;

                    #region PARAMETROS

                    SqlParameter[] paramTransaccion = new SqlParameter[]
                    {
                        new SqlParameter("@psFiltro", filtro)
                    };

                    #endregion

                    try
                    {

                        #region LISTA

                        rowsAffected = transaccionDA.TransaccionConsulta(conexion, "Si_No_Lista", paramTransaccion);
                        if (!rowsAffected.Equals(null))
                        {
                            foreach (DataRow dr in rowsAffected.Tables[0].Rows)
                            {
                                elemento = new ListaEntidad();
                                elemento.Valor = dr[0].ToString();
                                elemento.Texto = dr[1].ToString();

                                retorno.Add(elemento);
                            }
                        }

                        return retorno;

                        #endregion


                    }
                    catch (Exception)
                    {
                        throw;
                    }
                }

            #endregion

        #endregion

    }
}
